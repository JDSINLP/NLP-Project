[
 {
  "repo": "bitcoin/bitcoin",
  "language": "C++",
  "readme_contents": "Bitcoin Core integration/staging tree\n=====================================\n\nhttps://bitcoincore.org\n\nFor an immediately usable, binary version of the Bitcoin Core software, see\nhttps://bitcoincore.org/en/download/.\n\nWhat is Bitcoin Core?\n---------------------\n\nBitcoin Core connects to the Bitcoin peer-to-peer network to download and fully\nvalidate blocks and transactions. It also includes a wallet and graphical user\ninterface, which can be optionally built.\n\nFurther information about Bitcoin Core is available in the [doc folder](/doc).\n\nLicense\n-------\n\nBitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n\nDevelopment Process\n-------------------\n\nThe `master` branch is regularly built (see `doc/build-*.md` for instructions) and tested, but it is not guaranteed to be\ncompletely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\nregularly from release branches to indicate new official, stable release versions of Bitcoin Core.\n\nThe https://github.com/bitcoin-core/gui repository is used exclusively for the\ndevelopment of the GUI. Its master branch is identical in all monotree\nrepositories. Release branches and tags do not exist, so please do not fork\nthat repository unless it is for development reasons.\n\nThe contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\nand useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n\nTesting\n-------\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money.\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\nsubmit new unit tests for old code. Unit tests can be compiled and run\n(assuming they weren't disabled in configure) with: `make check`. Further details on running\nand extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n\nThere are also [regression and integration tests](/test), written\nin Python.\nThese tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n\nThe CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\nand that unit/sanity tests are run automatically.\n\n### Manual Quality Assurance (QA) Testing\n\nChanges should be tested by somebody other than the developer who wrote the\ncode. This is especially important for large or high-risk changes. It is useful\nto add a test plan to the pull request description if testing the changes is\nnot straightforward.\n\nTranslations\n------------\n\nChanges to translations as well as new translations can be submitted to\n[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n\nTranslations are periodically pulled from Transifex and merged into the git repository. See the\n[translation process](doc/translation_process.md) for details on how this works.\n\n**Important**: We do not accept translation changes as GitHub pull requests because the next\npull from Transifex would automatically overwrite them again.\n"
 },
 {
  "repo": "bitcoinbook/bitcoinbook",
  "language": "AsciiDoc",
  "readme_contents": "Code Examples: ![travis_ci](https://travis-ci.org/bitcoinbook/bitcoinbook.svg?branch=develop)\n\n# Mastering Bitcoin\n\nMastering Bitcoin is a book for developers, although the first two chapters cover bitcoin at a level that is also approachable to non-programmers. Anyone with a basic understanding of technology can read the first two chapters to get a great understanding of bitcoin.\n\nThis repository contains the complete [first edition, second print](https://github.com/bitcoinbook/bitcoinbook/releases/tag/Edition1Print2), published in December 2014, and the complete [second edition, third print](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print3_rc1), published in March 2018, as published by O'Reilly Media in paperback and ebook formats.\n\n# Issues, Errors, Comments, Contributions\n\nIf you know how to make a pull request to contribute a fix, please write the correction and use a pull request to submit it for consideration against the [develop branch](https://github.com/bitcoinbook/bitcoinbook/tree/develop). If you are making several changes, please use a separate commit for each to make it easier to cherry-pick or resolve conflicts. Otherwise, please submit an issue, explaining the error or comment. If you would like to contribute extensive changes or new material, please coordinate with the author first; contact information can be found on his website: https://antonopoulos.com/\n\n# Reading this book\n\nTo read this book, see [book.asciidoc](https://github.com/bitcoinbook/bitcoinbook/blob/develop/book.asciidoc). Click on each of the chapters to read in your browser. Other parties may choose to release PDFs of the book online.\n\n## Chapters\n\n+ Chapter 1: '[Introduction](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch01.asciidoc)'\n+ Chapter 2: '[How Bitcoin Works](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch02.asciidoc)'\n+ Chapter 3: '[Bitcoin Core: The Reference Implementation](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch03.asciidoc)'\n+ Chapter 4: '[Keys, Addresses](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc)'\n+ Chapter 5: '[Wallets](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch05.asciidoc)'\n+ Chapter 6: '[Transactions](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc)'\n+ Chapter 7: '[Advanced Transactions and Scripting](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch07.asciidoc)'\n+ Chapter 8: '[The Bitcoin Network](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch08.asciidoc)'\n+ Chapter 9: '[The Blockchain](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc)'\n+ Chapter 10: '[Mining and Consensus](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch10.asciidoc)'\n+ Chapter 11: '[Bitcoin Security](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch11.asciidoc)'\n+ Chapter 12: '[Blockchain Applications](https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch12.asciidoc)'\n\n# Published\n\n\"Mastering Bitcoin (Second Edition, Second Print): Programming the Open Blockchain\" is now available in paperback and ebook formats by many booksellers worldwide:\n\n* [Amazon](https://www.amazon.com/Mastering-Bitcoin-Programming-Open-Blockchain/dp/1491954388)\n\nMastering Bitcoin (First Edition Second Print) is also published in Japanese, Korean, and Chinese (Simplified) by publishers in the respective countries.\n\nMastering Bitcoin (Open Edition), based on the First Edition, has been translated by volunteers into more than a dozen languages. Translations are available for free under CC-BY-SA license at: https://bitcoinbook.info\n\n# Source\n\nThe book's source code, found in this repository, is kept synchronized with the print and ebook editions.\n\n## Mastering Bitcoin - First Edition\n\nThe tags [Edition1Print1](https://github.com/bitcoinbook/bitcoinbook/releases/tag/Edition1Print1), [Edition1Print2](https://github.com/bitcoinbook/bitcoinbook/releases/tag/Edition1Print2) correspond to the two existing prints of Mastering Bitcoin (First Edition) as published by O'Reilly Media.\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">Mastering Bitcoin - First Edition</span> by <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"https://antonopoulos.com/\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Andreas M. Antonopoulos LLC</a> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\nThis \"Free Culture\" compliant license was approved by my publisher O'Reilly Media (http://oreilly.com), who understands the value of open source. O'Reilly Media is not just the world's best publisher of technical books, but is also a strong supporter of this open culture and the sharing of knowledge.\n\nThank you O'Reilly Media!\n\n## Mastering Bitcoin - Second Edition\n\nThe tags, [second_edition_print_1](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print_1) and  [second_edition_print2](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print2), correspond to the first (June 8th, 2017) and second (July 20th, 2017) print of Mastering Bitcoin (Second Edition), as published by O'Reilly Media.\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">Mastering Bitcoin - Second Edition</span> by <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"https://antonopoulos.com/\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Andreas M. Antonopoulos LLC</a> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n# Translations\n\nIf you are interested in translating this book, please join our team of volunteers at: https://www.transifex.com/aantonop/mastering-bitcoin\n\nFree copies of \"Mastering Bitcoin Open Edition,\" translated in many languages, can be downloaded from: https://bitcoinbook.info\n"
 },
 {
  "repo": "bitcoinj/bitcoinj",
  "language": "Java",
  "readme_contents": "image:https://github.com/bitcoinj/bitcoinj/workflows/Java%20CI/badge.svg[GitHub Build Status,link=https://github.com/bitcoinj/bitcoinj/actions]\nimage:https://gitlab.com/bitcoinj/bitcoinj/badges/master/pipeline.svg[GitLab Build Status,link=https://gitlab.com/bitcoinj/bitcoinj/pipelines]\nimage:https://coveralls.io/repos/bitcoinj/bitcoinj/badge.png?branch=master[Coverage Status,link=https://coveralls.io/r/bitcoinj/bitcoinj?branch=master]\n\nimage::https://kiwiirc.com/buttons/irc.freenode.net/bitcoinj.png[Visit our IRC channel,link=https://kiwiirc.com/client/irc.freenode.net/bitcoinj]\n\n### Welcome to bitcoinj\n\nThe bitcoinj library is a Java implementation of the Bitcoin protocol, which allows it to maintain a wallet and send/receive transactions without needing a local copy of Bitcoin Core. It comes with full documentation and some example apps showing how to use it.\n\n### Technologies\n\n* Java 8+ (needs Java 8 API or Android 8.0 API, compiles to Java 8 bytecode) and Gradle 4.4+ for the `core` module\n* Java 11+ and Gradle 4.4+ for `tools`, `wallettool` and `examples`\n* Java 11+ and Gradle 4.10+ for the JavaFX-based `wallettemplate`\n* https://gradle.org/[Gradle] - for building the project\n* https://github.com/google/protobuf[Google Protocol Buffers] - for use with serialization and hardware communications\n\n### Getting started\n\nTo get started, it is best to have the latest JDK and Gradle installed. The HEAD of the `master` branch contains the latest development code and various production releases are provided on feature branches.\n\n#### Building from the command line\n\nOfficial builds are currently using JDK 11. Our GitHub Actions build and test with JDK 11 and JDK 17.\n\nTo perform a full build (_including_ JavaDocs and unit/integration _tests_) use JDK 11+.\n\n```\ngradle clean build\n```\nIf you are using Gradle 4.10 or later, the build will automatically include the JavaFX-based `wallettemplate` module. The outputs are under the `build` directory.\n\nTo perform a full build _without_ unit/integration _tests_ use:\n```\ngradle clean assemble\n```\n\n#### Building from an IDE\n\nAlternatively, just import the project using your IDE. http://www.jetbrains.com/idea/download/[IntelliJ] has Gradle integration built-in and has a free Community Edition. Simply use `File | New | Project from Existing Sources` and locate the `build.gradle` in the root of the cloned project source tree.\n\n### Building and Using the Wallet Tool\n\nThe *bitcoinj* `wallettool` subproject includes a command-line Wallet Tool (`wallet-tool`) that can be used to create and manage *bitcoinj*-based wallets (both the HD keychain and SPV blockchain state.) Using `wallet-tool` on Bitcoin's test net is a great way to learn about Bitcoin and *bitcoinj*.\n\nTo build an executable shell script that runs the command-line Wallet Tool, use:\n```\ngradle bitcoinj-wallettool:installDist\n```\n\nYou can now run the `wallet-tool` without parameters to get help on its operation:\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool\n```\n\nTo create a test net wallet file in `~/bitcoinj/bitcoinj-test.wallet`, you would use:\n```\nmkdir ~/bitcoinj\n```\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool --net=TESTNET --wallet=$HOME/bitcoinj/bitcoinj-test.wallet create\n```\n\nTo sync the newly created wallet in `~/bitcoinj/bitcoinj-test.wallet` with the test net, you would use:\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool --net=TESTNET --wallet=$HOME/bitcoinj/bitcoinj-test.wallet sync\n```\n\nTo dump the state of the wallet in `~/bitcoinj/bitcoinj-test.wallet` with the test net, you would use:\n```\n./wallettool/build/install/wallet-tool/bin/wallet-tool --net=TESTNET --wallet=$HOME/bitcoinj/bitcoinj-test.wallet dump\n```\n\nNOTE: These instructions are for macOS/Linux, for Windows use the `wallettool/build/install/wallet-tool/bin/wallet-tool.bat` batch file with the equivalent Windows command-line commands and options.\n\n### Example applications\n\nThese are found in the `examples` module.\n\n### Where next?\n\nNow you are ready to https://bitcoinj.github.io/getting-started[follow the tutorial].\n\n### Testing a SNAPSHOT build\n\nBuilding apps with official releases of *bitcoinj* is covered in the https://bitcoinj.github.io/getting-started[tutorial].\n\nIf you want to develop or test your app with a https://jitpack.io[Jitpack]-powered build of the latest `master` or `release-0.15` branch of *bitcoinj* follow the dynamically-generated instructions for that branch by following the correct link.\n\n* https://jitpack.io/#bitcoinj/bitcoinj/master-SNAPSHOT[master] branch\n* https://jitpack.io/#bitcoinj/bitcoinj/release-0.15-SNAPSHOT[release-0.15] branch\n"
 },
 {
  "repo": "bitcoin/bips",
  "language": "Wikitext",
  "readme_contents": "People wishing to submit BIPs, first should propose their idea or document to the [https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev bitcoin-dev@lists.linuxfoundation.org] mailing list (do <em>not</em> assign a number - read <a href=\"bip-0002.mediawiki\">BIP 2</a> for the full process). After discussion, please open a PR. After copy-editing and acceptance, it will be published here.\n\nWe are fairly liberal with approving BIPs, and try not to be too involved in decision making on behalf of the community. The exception is in very rare cases of dispute resolution when a decision is contentious and cannot be agreed upon. In those cases, the conservative option will always be preferred.\n\nHaving a BIP here does not make it a formally accepted standard until its status becomes Final or Active.\n\nThose proposing changes should consider that ultimately consent may rest with the consensus of the Bitcoin users (see also: [https://en.bitcoin.it/wiki/Economic_majority economic majority]).\n\n{| class=\"wikitable sortable\" style=\"width: auto; text-align: center; font-size: smaller; table-layout: fixed;\"\n!Number\n!Layer\n!Title\n!Owner\n!Type\n!Status\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0001.mediawiki|1]]\n|\n| BIP Purpose and Guidelines\n| Amir Taaki\n| Process\n| Replaced\n|- style=\"background-color: #cfffcf\"\n| [[bip-0002.mediawiki|2]]\n|\n| BIP process, revised\n| Luke Dashjr\n| Process\n| Active\n|-\n| [[bip-0008.mediawiki|8]]\n|\n| Version bits with lock-in by height\n| Shaolin Fry, Luke Dashjr\n| Informational\n| Draft\n|- style=\"background-color: #cfffcf\"\n| [[bip-0009.mediawiki|9]]\n|\n| Version bits with timeout and delay\n| Pieter Wuille, Peter Todd, Greg Maxwell, Rusty Russell\n| Informational\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0010.mediawiki|10]]\n| Applications\n| Multi-Sig Transaction Distribution\n| Alan Reiner\n| Informational\n| Withdrawn\n|- style=\"background-color: #cfffcf\"\n| [[bip-0011.mediawiki|11]]\n| Applications\n| M-of-N Standard Transactions\n| Gavin Andresen\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0012.mediawiki|12]]\n| Consensus (soft fork)\n| OP_EVAL\n| Gavin Andresen\n| Standard\n| Withdrawn\n|- style=\"background-color: #cfffcf\"\n| [[bip-0013.mediawiki|13]]\n| Applications\n| Address Format for pay-to-script-hash\n| Gavin Andresen\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0014.mediawiki|14]]\n| Peer Services\n| Protocol Version and User Agent\n| Amir Taaki, Patrick Strateman\n| Standard\n| Final\n|-\n| [[bip-0015.mediawiki|15]]\n| Applications\n| Aliases\n| Amir Taaki\n| Standard\n| Deferred\n|- style=\"background-color: #cfffcf\"\n| [[bip-0016.mediawiki|16]]\n| Consensus (soft fork)\n| Pay to Script Hash\n| Gavin Andresen\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0017.mediawiki|17]]\n| Consensus (soft fork)\n| OP_CHECKHASHVERIFY (CHV)\n| Luke Dashjr\n| Standard\n| Withdrawn\n|- style=\"background-color: #ffffcf\"\n| [[bip-0018.mediawiki|18]]\n| Consensus (soft fork)\n| hashScriptCheck\n| Luke Dashjr\n| Standard\n| Proposed\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0019.mediawiki|19]]\n| Applications\n| M-of-N Standard Transactions (Low SigOp)\n| Luke Dashjr\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0020.mediawiki|20]]\n| Applications\n| URI Scheme\n| Luke Dashjr\n| Standard\n| Replaced\n|- style=\"background-color: #cfffcf\"\n| [[bip-0021.mediawiki|21]]\n| Applications\n| URI Scheme\n| Nils Schneider, Matt Corallo\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0022.mediawiki|22]]\n| API/RPC\n| getblocktemplate - Fundamentals\n| Luke Dashjr\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0023.mediawiki|23]]\n| API/RPC\n| getblocktemplate - Pooled Mining\n| Luke Dashjr\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0030.mediawiki|30]]\n| Consensus (soft fork)\n| Duplicate transactions\n| Pieter Wuille\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0031.mediawiki|31]]\n| Peer Services\n| Pong message\n| Mike Hearn\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0032.mediawiki|32]]\n| Applications\n| Hierarchical Deterministic Wallets\n| Pieter Wuille\n| Informational\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0033.mediawiki|33]]\n| Peer Services\n| Stratized Nodes\n| Amir Taaki\n| Standard\n| Rejected\n|- style=\"background-color: #cfffcf\"\n| [[bip-0034.mediawiki|34]]\n| Consensus (soft fork)\n| Block v2, Height in Coinbase\n| Gavin Andresen\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0035.mediawiki|35]]\n| Peer Services\n| mempool message\n| Jeff Garzik\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0036.mediawiki|36]]\n| Peer Services\n| Custom Services\n| Stefan Thomas\n| Standard\n| Rejected\n|- style=\"background-color: #cfffcf\"\n| [[bip-0037.mediawiki|37]]\n| Peer Services\n| Connection Bloom filtering\n| Mike Hearn, Matt Corallo\n| Standard\n| Final\n|-\n| [[bip-0038.mediawiki|38]]\n| Applications\n| Passphrase-protected private key\n| Mike Caldwell, Aaron Voisine\n| Standard\n| Draft\n|- style=\"background-color: #ffffcf\"\n| [[bip-0039.mediawiki|39]]\n| Applications\n| Mnemonic code for generating deterministic keys\n| Marek Palatinus, Pavol Rusnak, Aaron Voisine, Sean Bowe\n| Standard\n| Proposed\n|-\n| 40\n| API/RPC\n| Stratum wire protocol\n| Marek Palatinus\n| Standard\n| BIP number allocated\n|-\n| 41\n| API/RPC\n| Stratum mining protocol\n| Marek Palatinus\n| Standard\n| BIP number allocated\n|- style=\"background-color: #cfffcf\"\n| [[bip-0042.mediawiki|42]]\n| Consensus (soft fork)\n| A finite monetary supply for Bitcoin\n| Pieter Wuille\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0043.mediawiki|43]]\n| Applications\n| Purpose Field for Deterministic Wallets\n| Marek Palatinus, Pavol Rusnak\n| Informational\n| Final\n|- style=\"background-color: #ffffcf\"\n| [[bip-0044.mediawiki|44]]\n| Applications\n| Multi-Account Hierarchy for Deterministic Wallets\n| Marek Palatinus, Pavol Rusnak\n| Standard\n| Proposed\n|- style=\"background-color: #ffffcf\"\n| [[bip-0045.mediawiki|45]]\n| Applications\n| Structure for Deterministic P2SH Multisignature Wallets\n| Manuel Araoz, Ryan X. Charles, Matias Alejo Garcia\n| Standard\n| Proposed\n|-\n| [[bip-0047.mediawiki|47]]\n| Applications\n| Reusable Payment Codes for Hierarchical Deterministic Wallets\n| Justus Ranvier\n| Informational\n| Draft\n|- style=\"background-color: #ffffcf\"\n| [[bip-0048.mediawiki|48]]\n| Applications\n| Multi-Script Hierarchy for Multi-Sig Wallets\n| Fontaine\n| Standard\n| Proposed\n|- style=\"background-color: #cfffcf\"\n| [[bip-0049.mediawiki|49]]\n| Applications\n| Derivation scheme for P2WPKH-nested-in-P2SH based accounts\n| Daniel Weigl\n| Informational\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0050.mediawiki|50]]\n|\n| March 2013 Chain Fork Post-Mortem\n| Gavin Andresen\n| Informational\n| Final\n|-\n| [[bip-0052.mediawiki|52]]\n| Consensus (hard fork)\n| Durable, Low Energy Bitcoin PoW\n| Michael Dubrovsky, Bogdan Penkovsky\n| Standard\n| Draft\n<!-- 50 series reserved for a group of post-mortems -->\n|-\n| [[bip-0060.mediawiki|60]]\n| Peer Services\n| Fixed Length \"version\" Message (Relay-Transactions Field)\n| Amir Taaki\n| Standard\n| Draft\n|- style=\"background-color: #cfffcf\"\n| [[bip-0061.mediawiki|61]]\n| Peer Services\n| Reject P2P message\n| Gavin Andresen\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0062.mediawiki|62]]\n| Consensus (soft fork)\n| Dealing with malleability\n| Pieter Wuille\n| Standard\n| Withdrawn\n|-\n| 63\n| Applications\n| Stealth Addresses\n| Peter Todd\n| Standard\n| BIP number allocated\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0064.mediawiki|64]]\n| Peer Services\n| getutxo message\n| Mike Hearn\n| Standard\n| Obsolete\n|- style=\"background-color: #cfffcf\"\n| [[bip-0065.mediawiki|65]]\n| Consensus (soft fork)\n| OP_CHECKLOCKTIMEVERIFY\n| Peter Todd\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0066.mediawiki|66]]\n| Consensus (soft fork)\n| Strict DER signatures\n| Pieter Wuille\n| Standard\n| Final\n|- style=\"background-color: #ffffcf\"\n| [[bip-0067.mediawiki|67]]\n| Applications\n| Deterministic Pay-to-script-hash multi-signature addresses through public key sorting\n| Thomas Kerin, Jean-Pierre Rupp, Ruben de Vries\n| Standard\n| Proposed\n|- style=\"background-color: #cfffcf\"\n| [[bip-0068.mediawiki|68]]\n| Consensus (soft fork)\n| Relative lock-time using consensus-enforced sequence numbers\n| Mark Friedenbach, BtcDrak, Nicolas Dorier, kinoshitajona\n| Standard\n| Final\n|- style=\"background-color: #ffffcf\"\n| [[bip-0069.mediawiki|69]]\n| Applications\n| Lexicographical Indexing of Transaction Inputs and Outputs\n| Kristov Atlas\n| Informational\n| Proposed\n|- style=\"background-color: #cfffcf\"\n| [[bip-0070.mediawiki|70]]\n| Applications\n| Payment Protocol\n| Gavin Andresen, Mike Hearn\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0071.mediawiki|71]]\n| Applications\n| Payment Protocol MIME types\n| Gavin Andresen\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0072.mediawiki|72]]\n| Applications\n| bitcoin: uri extensions for Payment Protocol\n| Gavin Andresen\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0073.mediawiki|73]]\n| Applications\n| Use \"Accept\" header for response type negotiation with Payment Request URLs\n| Stephen Pair\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0074.mediawiki|74]]\n| Applications\n| Allow zero value OP_RETURN in Payment Protocol\n| Toby Padilla\n| Standard\n| Rejected\n|- style=\"background-color: #cfffcf\"\n| [[bip-0075.mediawiki|75]]\n| Applications\n| Out of Band Address Exchange using Payment Protocol Encryption\n| Justin Newton, Matt David, Aaron Voisine, James MacWhyte\n| Standard\n| Final\n|-\n| [[bip-0078.mediawiki|78]]\n| Applications\n| A Simple Payjoin Proposal\n| Nicolas Dorier\n| Standard\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0079.mediawiki|79]]\n| Applications\n| Bustapay :: a practical coinjoin protocol\n| Ryan Havar\n| Informational\n| Replaced\n|-\n| [[bip-0080.mediawiki|80]]\n|\n| Hierarchy for Non-Colored Voting Pool Deterministic Multisig Wallets\n| Justus Ranvier, Jimmy Song\n| Informational\n| Deferred\n|-\n| [[bip-0081.mediawiki|81]]\n|\n| Hierarchy for Colored Voting Pool Deterministic Multisig Wallets\n| Justus Ranvier, Jimmy Song\n| Informational\n| Deferred\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0083.mediawiki|83]]\n| Applications\n| Dynamic Hierarchical Deterministic Key Trees\n| Eric Lombrozo\n| Standard\n| Rejected\n|-\n| [[bip-0084.mediawiki|84]]\n| Applications\n| Derivation scheme for P2WPKH based accounts\n| Pavol Rusnak\n| Informational\n| Draft\n|-\n| [[bip-0085.mediawiki|85]]\n| Applications\n| Deterministic Entropy From BIP32 Keychains\n| Ethan Kosakovsky\n| Informational\n| Draft\n|-\n| [[bip-0086.mediawiki|86]]\n| Applications\n| Key Derivation for Single Key P2TR Outputs\n| Andrew Chow\n| Standard\n| Draft\n|- style=\"background-color: #ffffcf\"\n| [[bip-0087.mediawiki|87]]\n| Applications\n| Hierarchy for Deterministic Multisig Wallets\n| Robert Spigler\n| Standard\n| Proposed\n|- style=\"background-color: #ffffcf\"\n| [[bip-0088.mediawiki|88]]\n| Applications\n| Hierarchical Deterministic Path Templates\n| Dmitry Petukhov\n| Informational\n| Proposed\n|- style=\"background-color: #cfffcf\"\n| [[bip-0090.mediawiki|90]]\n|\n| Buried Deployments\n| Suhas Daftuar\n| Informational\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0091.mediawiki|91]]\n| Consensus (soft fork)\n| Reduced threshold Segwit MASF\n| James Hilliard\n| Standard\n| Final\n|-\n| [[bip-0098.mediawiki|98]]\n| Consensus (soft fork)\n| Fast Merkle Trees\n| Mark Friedenbach, Kalle Alm, BtcDrak\n| Standard\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0099.mediawiki|99]]\n|\n| Motivation and deployment of consensus rule changes ([soft/hard]forks)\n| Jorge Tim\u00f3n\n| Informational\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0100.mediawiki|100]]\n| Consensus (hard fork)\n| Dynamic maximum block size by miner vote\n| Jeff Garzik, Tom Harding, Dagur Valberg Johannsson\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0101.mediawiki|101]]\n| Consensus (hard fork)\n| Increase maximum block size\n| Gavin Andresen\n| Standard\n| Withdrawn\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0102.mediawiki|102]]\n| Consensus (hard fork)\n| Block size increase to 2MB\n| Jeff Garzik\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0103.mediawiki|103]]\n| Consensus (hard fork)\n| Block size following technological growth\n| Pieter Wuille\n| Standard\n| Withdrawn\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0104.mediawiki|104]]\n| Consensus (hard fork)\n| 'Block75' - Max block size like difficulty\n| t.khan\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0105.mediawiki|105]]\n| Consensus (hard fork)\n| Consensus based block size retargeting algorithm\n| BtcDrak\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0106.mediawiki|106]]\n| Consensus (hard fork)\n| Dynamically Controlled Bitcoin Block Size Max Cap\n| Upal Chakraborty\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0107.mediawiki|107]]\n| Consensus (hard fork)\n| Dynamic limit on the block size\n| Washington Y. Sanchez\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0109.mediawiki|109]]\n| Consensus (hard fork)\n| Two million byte size limit with sigop and sighash limits\n| Gavin Andresen\n| Standard\n| Rejected\n|- style=\"background-color: #ffffcf\"\n| [[bip-0111.mediawiki|111]]\n| Peer Services\n| NODE_BLOOM service bit\n| Matt Corallo, Peter Todd\n| Standard\n| Proposed\n|- style=\"background-color: #cfffcf\"\n| [[bip-0112.mediawiki|112]]\n| Consensus (soft fork)\n| CHECKSEQUENCEVERIFY\n| BtcDrak, Mark Friedenbach, Eric Lombrozo\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0113.mediawiki|113]]\n| Consensus (soft fork)\n| Median time-past as endpoint for lock-time calculations\n| Thomas Kerin, Mark Friedenbach\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0114.mediawiki|114]]\n| Consensus (soft fork)\n| Merkelized Abstract Syntax Tree\n| Johnson Lau\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0115.mediawiki|115]]\n| Consensus (soft fork)\n| Generic anti-replay protection using Script\n| Luke Dashjr\n| Standard\n| Rejected\n|-\n| [[bip-0116.mediawiki|116]]\n| Consensus (soft fork)\n| MERKLEBRANCHVERIFY\n| Mark Friedenbach, Kalle Alm, BtcDrak\n| Standard\n| Draft\n|-\n| [[bip-0117.mediawiki|117]]\n| Consensus (soft fork)\n| Tail Call Execution Semantics\n| Mark Friedenbach, Kalle Alm, BtcDrak\n| Standard\n| Draft\n|-\n| [[bip-0118.mediawiki|118]]\n| Consensus (soft fork)\n| SIGHASH_ANYPREVOUT for Taproot Scripts\n| Christian Decker, Anthony Towns\n| Standard\n| Draft\n|-\n| [[bip-0119.mediawiki|119]]\n| Consensus (soft fork)\n| CHECKTEMPLATEVERIFY\n| Jeremy Rubin\n| Standard\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0120.mediawiki|120]]\n| Applications\n| Proof of Payment\n| Kalle Rosenbaum\n| Standard\n| Withdrawn\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0121.mediawiki|121]]\n| Applications\n| Proof of Payment URI scheme\n| Kalle Rosenbaum\n| Standard\n| Withdrawn\n|-\n| [[bip-0122.mediawiki|122]]\n| Applications\n| URI scheme for Blockchain references / exploration\n| Marco Pontello\n| Standard\n| Draft\n|- style=\"background-color: #cfffcf\"\n| [[bip-0123.mediawiki|123]]\n|\n| BIP Classification\n| Eric Lombrozo\n| Process\n| Active\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0124.mediawiki|124]]\n| Applications\n| Hierarchical Deterministic Script Templates\n| Eric Lombrozo, William Swanson\n| Informational\n| Rejected\n|- style=\"background-color: #ffffcf\"\n| [[bip-0125.mediawiki|125]]\n| Applications\n| Opt-in Full Replace-by-Fee Signaling\n| David A. Harding, Peter Todd\n| Standard\n| Proposed\n|-\n| [[bip-0126.mediawiki|126]]\n|\n| Best Practices for Heterogeneous Input Script Transactions\n| Kristov Atlas\n| Informational\n| Draft\n|-\n| [[bip-0127.mediawiki|127]]\n| Applications\n| Simple Proof-of-Reserves Transactions\n| Steven Roose\n| Standard\n| Draft\n|- style=\"background-color: #ffffcf\"\n| [[bip-0129.mediawiki|129]]\n| Applications\n| Bitcoin Secure Multisig Setup (BSMS)\n| Hugo Nguyen, Peter Gray, Marko Bencun, Aaron Chen, Rodolfo Novak\n| Standard\n| Proposed\n|- style=\"background-color: #ffffcf\"\n| [[bip-0130.mediawiki|130]]\n| Peer Services\n| sendheaders message\n| Suhas Daftuar\n| Standard\n| Proposed\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0131.mediawiki|131]]\n| Consensus (hard fork)\n| \"Coalescing Transaction\" Specification (wildcard inputs)\n| Chris Priest\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0132.mediawiki|132]]\n|\n| Committee-based BIP Acceptance Process\n| Andy Chase\n| Process\n| Withdrawn\n|-\n| [[bip-0133.mediawiki|133]]\n| Peer Services\n| feefilter message\n| Alex Morcos\n| Standard\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0134.mediawiki|134]]\n| Consensus (hard fork)\n| Flexible Transactions\n| Tom Zander\n| Standard\n| Rejected\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0135.mediawiki|135]]\n|\n| Generalized version bits voting\n| Sancho Panza\n| Informational\n| Rejected\n|-\n| [[bip-0136.mediawiki|136]]\n| Applications\n| Bech32 Encoded Tx Position References\n| \u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432, Jonas Schnelli, Daniel Pape\n| Informational\n| Draft\n|- style=\"background-color: #cfffcf\"\n| [[bip-0137.mediawiki|137]]\n| Applications\n| Signatures of Messages using Private Keys\n| Christopher Gilliard\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0140.mediawiki|140]]\n| Consensus (soft fork)\n| Normalized TXID\n| Christian Decker\n| Standard\n| Rejected\n|- style=\"background-color: #cfffcf\"\n| [[bip-0141.mediawiki|141]]\n| Consensus (soft fork)\n| Segregated Witness (Consensus layer)\n| Eric Lombrozo, Johnson Lau, Pieter Wuille\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0142.mediawiki|142]]\n| Applications\n| Address Format for Segregated Witness\n| Johnson Lau\n| Standard\n| Withdrawn\n|- style=\"background-color: #cfffcf\"\n| [[bip-0143.mediawiki|143]]\n| Consensus (soft fork)\n| Transaction Signature Verification for Version 0 Witness Program\n| Johnson Lau, Pieter Wuille\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0144.mediawiki|144]]\n| Peer Services\n| Segregated Witness (Peer Services)\n| Eric Lombrozo, Pieter Wuille\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0145.mediawiki|145]]\n| API/RPC\n| getblocktemplate Updates for Segregated Witness\n| Luke Dashjr\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0146.mediawiki|146]]\n| Consensus (soft fork)\n| Dealing with signature encoding malleability\n| Johnson Lau, Pieter Wuille\n| Standard\n| Withdrawn\n|- style=\"background-color: #cfffcf\"\n| [[bip-0147.mediawiki|147]]\n| Consensus (soft fork)\n| Dealing with dummy stack element malleability\n| Johnson Lau\n| Standard\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0148.mediawiki|148]]\n| Consensus (soft fork)\n| Mandatory activation of segwit deployment\n| Shaolin Fry\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0149.mediawiki|149]]\n| Consensus (soft fork)\n| Segregated Witness (second deployment)\n| Shaolin Fry\n| Standard\n| Withdrawn\n|-\n| [[bip-0150.mediawiki|150]]\n| Peer Services\n| Peer Authentication\n| Jonas Schnelli\n| Standard\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0151.mediawiki|151]]\n| Peer Services\n| Peer-to-Peer Communication Encryption\n| Jonas Schnelli\n| Standard\n| Replaced\n|- style=\"background-color: #cfffcf\"\n| [[bip-0152.mediawiki|152]]\n| Peer Services\n| Compact Block Relay\n| Matt Corallo\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0154.mediawiki|154]]\n| Peer Services\n| Rate Limiting via peer specified challenges\n| Karl-Johan Alm\n| Standard\n| Withdrawn\n|-\n| [[bip-0155.mediawiki|155]]\n| Peer Services\n| addrv2 message\n| Wladimir J. van der Laan\n| Standard\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0156.mediawiki|156]]\n| Peer Services\n| Dandelion - Privacy Enhancing Routing\n| Brad Denby, Andrew Miller, Giulia Fanti, Surya Bakshi, Shaileshh Bojja Venkatakrishnan, Pramod Viswanath\n| Standard\n| Rejected\n|-\n| [[bip-0157.mediawiki|157]]\n| Peer Services\n| Client Side Block Filtering\n| Olaoluwa Osuntokun, Alex Akselrod, Jim Posen\n| Standard\n| Draft\n|-\n| [[bip-0158.mediawiki|158]]\n| Peer Services\n| Compact Block Filters for Light Clients\n| Olaoluwa Osuntokun, Alex Akselrod\n| Standard\n| Draft\n|-\n| [[bip-0159.mediawiki|159]]\n| Peer Services\n| NODE_NETWORK_LIMITED service bit\n| Jonas Schnelli\n| Standard\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0171.mediawiki|171]]\n| Applications\n| Currency/exchange rate information API\n| Luke Dashjr\n| Standard\n| Rejected\n|- style=\"background-color: #cfffcf\"\n| [[bip-0173.mediawiki|173]]\n| Applications\n| Base32 address format for native v0-16 witness outputs\n| Pieter Wuille, Greg Maxwell\n| Informational\n| Final\n|- style=\"background-color: #cfffcf\"\n| [[bip-0174.mediawiki|174]]\n| Applications\n| Partially Signed Bitcoin Transaction Format\n| Andrew Chow\n| Standard\n| Final\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0175.mediawiki|175]]\n| Applications\n| Pay to Contract Protocol\n| Omar Shibli, Nicholas Gregory\n| Informational\n| Rejected\n|-\n| [[bip-0176.mediawiki|176]]\n|\n| Bits Denomination\n| Jimmy Song\n| Informational\n| Draft\n|-\n| [[bip-0178.mediawiki|178]]\n| Applications\n| Version Extended WIF\n| Karl-Johan Alm\n| Standard\n| Draft\n|-\n| [[bip-0179.mediawiki|179]]\n|\n| Name for payment recipient identifiers\n| Emil Engler, Luke Dashjr\n| Informational\n| Draft\n|- style=\"background-color: #ffcfcf\"\n| [[bip-0180.mediawiki|180]]\n| Peer Services\n| Block size/weight fraud proof\n| Luke Dashjr\n| Standard\n| Rejected\n|-\n| [[bip-0197.mediawiki|197]]\n| Applications\n| Hashed Time-Locked Collateral Contract\n| Matthew Black, Tony Cai\n| Standard\n| Draft\n|-\n| [[bip-0199.mediawiki|199]]\n| Applications\n| Hashed Time-Locked Contract transactions\n| Sean Bowe, Daira Hopwood\n| Standard\n| Draft\n|-\n| [[bip-0300.mediawiki|300]]\n| Consensus (soft fork)\n| Hashrate Escrows (Consensus layer)\n| Paul Sztorc, CryptAxe\n| Standard\n| Draft\n|-\n| [[bip-0301.mediawiki|301]]\n| Consensus (soft fork)\n| Blind Merged Mining (Consensus layer)\n| Paul Sztorc, CryptAxe\n| Standard\n| Draft\n|-\n| [[bip-0310.mediawiki|310]]\n| Applications\n| Stratum protocol extensions\n| Pavel Moravec, Jan \u010capek\n| Informational\n| Draft\n|-\n| [[bip-0320.mediawiki|320]]\n|\n| nVersion bits for general purpose use\n| BtcDrak\n| Standard\n| Draft\n|-\n| [[bip-0322.mediawiki|322]]\n| Applications\n| Generic Signed Message Format\n| Karl-Johan Alm\n| Standard\n| Draft\n|-\n| [[bip-0324.mediawiki|324]]\n| Peer Services\n| Version 2 P2P Encrypted Transport Protocol\n| Dhruv Mehta, Tim Ruffing, Jonas Schnelli, Pieter Wuille\n| Standard\n| Draft\n|- style=\"background-color: #ffffcf\"\n| [[bip-0325.mediawiki|325]]\n| Applications\n| Signet\n| Karl-Johan Alm, Anthony Towns\n| Standard\n| Proposed\n|-\n| [[bip-0326.mediawiki|326]]\n| Applications\n| Anti-fee-sniping protection in taproot transactions\n| Chris Belcher\n| Informational\n| Draft\n|-\n| [[bip-0329.mediawiki|329]]\n| Applications\n| Wallet Labels Export Format\n| Craig Raw\n| Informational\n| Draft\n|-\n| [[bip-0330.mediawiki|330]]\n| Peer Services\n| Transaction announcements reconciliation\n| Gleb Naumenko, Pieter Wuille\n| Standard\n| Draft\n|-\n| [[bip-0338.mediawiki|338]]\n| Peer Services\n| Disable transaction relay message\n| Suhas Daftuar\n| Standard\n| Draft\n|-\n| [[bip-0339.mediawiki|339]]\n| Peer Services\n| WTXID-based transaction relay\n| Suhas Daftuar\n| Standard\n| Draft\n|-\n| [[bip-0340.mediawiki|340]]\n|\n| Schnorr Signatures for secp256k1\n| Pieter Wuille, Jonas Nick, Tim Ruffing\n| Standard\n| Final\n|-\n| [[bip-0341.mediawiki|341]]\n| Consensus (soft fork)\n| Taproot: SegWit version 1 spending rules\n| Pieter Wuille, Jonas Nick, Anthony Towns\n| Standard\n| Final\n|-\n| [[bip-0342.mediawiki|342]]\n| Consensus (soft fork)\n| Validation of Taproot Scripts\n| Pieter Wuille, Jonas Nick, Anthony Towns\n| Standard\n| Final\n|- style=\"background-color: #ffffcf\"\n| [[bip-0343.mediawiki|343]]\n| Consensus (soft fork)\n| Mandatory activation of taproot deployment\n| Shinobius, Michael Folkson\n| Standard\n| Final\n|-\n| [[bip-0350.mediawiki|350]]\n| Applications\n| Bech32m format for v1+ witness addresses\n| Pieter Wuille\n| Standard\n| Draft\n|-\n| [[bip-0351.mediawiki|351]]\n| Applications\n| Private Payments\n| Alfred Hodler, Clark Moody\n| Informational\n| Draft\n|-\n| [[bip-0370.mediawiki|370]]\n| Applications\n| PSBT Version 2\n| Andrew Chow\n| Standard\n| Draft\n|-\n| [[bip-0371.mediawiki|371]]\n| Applications\n| Taproot Fields for PSBT\n| Andrew Chow\n| Standard\n| Draft\n|-\n| [[bip-0372.mediawiki|372]]\n| Applications\n| Pay-to-contract tweak fields for PSBT\n| Maxim Orlovsky\n| Standard\n| Draft\n|-\n| [[bip-0380.mediawiki|380]]\n| Applications\n| Output Script Descriptors General Operation\n| Pieter Wuille, Andrew Chow\n| Informational\n| Draft\n|-\n| [[bip-0381.mediawiki|381]]\n| Applications\n| Non-Segwit Output Script Descriptors\n| Pieter Wuille, Andrew Chow\n| Informational\n| Draft\n|-\n| [[bip-0382.mediawiki|382]]\n| Applications\n| Segwit Output Script Descriptors\n| Pieter Wuille, Andrew Chow\n| Informational\n| Draft\n|-\n| [[bip-0383.mediawiki|383]]\n| Applications\n| Multisig Output Script Descriptors\n| Pieter Wuille, Andrew Chow\n| Informational\n| Draft\n|-\n| [[bip-0384.mediawiki|384]]\n| Applications\n| combo() Output Script Descriptors\n| Pieter Wuille, Andrew Chow\n| Informational\n| Draft\n|-\n| [[bip-0385.mediawiki|385]]\n| Applications\n| raw() and addr() Output Script Descriptors\n| Pieter Wuille, Andrew Chow\n| Informational\n| Draft\n|-\n| [[bip-0386.mediawiki|386]]\n| Applications\n| tr() Output Script Descriptors\n| Pieter Wuille, Andrew Chow\n| Informational\n| Draft\n|}\n\n<!-- IMPORTANT!  See the instructions at the top of this page, do NOT JUST add BIPs here! -->\n"
 },
 {
  "repo": "bitcoinjs/bitcoinjs-lib",
  "language": "TypeScript",
  "readme_contents": "# BitcoinJS (bitcoinjs-lib)\n[![Github CI](https://github.com/bitcoinjs/bitcoinjs-lib/actions/workflows/main_ci.yml/badge.svg)](https://github.com/bitcoinjs/bitcoinjs-lib/actions/workflows/main_ci.yml) [![NPM](https://img.shields.io/npm/v/bitcoinjs-lib.svg)](https://www.npmjs.org/package/bitcoinjs-lib) [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n\nA javascript Bitcoin library for node.js and browsers. Written in TypeScript, but committing the JS files to verify.\n\nReleased under the terms of the [MIT LICENSE](LICENSE).\n\n## Should I use this in production?\nIf you are thinking of using the *master* branch of this library in production, **stop**.\nMaster is not stable; it is our development branch, and [only tagged releases may be classified as stable](https://github.com/bitcoinjs/bitcoinjs-lib/tags).\n\n\n## Can I trust this code?\n> Don't trust. Verify.\n\nWe recommend every user of this library and the [bitcoinjs](https://github.com/bitcoinjs) ecosystem audit and verify any underlying code for its validity and suitability,  including reviewing any and all of your project's dependencies.\n\nMistakes and bugs happen, but with your help in resolving and reporting [issues](https://github.com/bitcoinjs/bitcoinjs-lib/issues), together we can produce open source software that is:\n\n- Easy to audit and verify,\n- Tested, with test coverage >95%,\n- Advanced and feature rich,\n- Standardized, using [prettier](https://github.com/prettier/prettier) and Node `Buffer`'s throughout, and\n- Friendly, with a strong and helpful community, ready to answer questions.\n\n\n## Documentation\nPresently,  we do not have any formal documentation other than our [examples](#examples), please [ask for help](https://github.com/bitcoinjs/bitcoinjs-lib/issues/new) if our examples aren't enough to guide you.\n\nYou can find a [Web UI](https://bitcoincore.tech/apps/bitcoinjs-ui/index.html) that covers most of the `psbt.ts`, `transaction.ts` and `p2*.ts` APIs [here](https://bitcoincore.tech/apps/bitcoinjs-ui/index.html).\n\n## Installation\n``` bash\nnpm install bitcoinjs-lib\n# optionally, install a key derivation library as well\nnpm install ecpair bip32\n# ecpair is the ECPair class for single keys\n# bip32 is for generating HD keys\n```\n\nPrevious versions of the library included classes for key management (ECPair, HDNode(->\"bip32\")) but now these have been separated into different libraries. This lowers the bundle size significantly if you don't need to perform any crypto functions (converting private to public keys and deriving HD keys).\n\nTypically we support the [Node Maintenance LTS version](https://github.com/nodejs/Release). TypeScript target will be set\nto the ECMAScript version in which all features are fully supported by current Active Node LTS.\nHowever, depending on adoption among other environments (browsers etc.) we may keep the target back a year or two.\nIf in doubt, see the [main_ci.yml](.github/workflows/main_ci.yml) for what versions are used by our continuous integration tests.\n\n**WARNING**: We presently don't provide any tooling to verify that the release on `npm` matches GitHub.  As such, you should verify anything downloaded by `npm` against your own verified copy.\n\n\n## Usage\nCrypto is hard.\n\nWhen working with private keys, the random number generator is fundamentally one of the most important parts of any software you write.\nFor random number generation, we *default* to the [`randombytes`](https://github.com/crypto-browserify/randombytes) module, which uses [`window.crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues) in the browser, or Node js' [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback), depending on your build system.\nAlthough this default is ~OK, there is no simple way to detect if the underlying RNG provided is good enough, or if it is **catastrophically bad**.\nYou should always verify this yourself to your own standards.\n\nThis library uses [tiny-secp256k1](https://github.com/bitcoinjs/tiny-secp256k1), which uses [RFC6979](https://tools.ietf.org/html/rfc6979) to help prevent `k` re-use and exploitation.\nUnfortunately, this isn't a silver bullet.\nOften, Javascript itself is working against us by bypassing these counter-measures.\n\nProblems in [`Buffer (UInt8Array)`](https://github.com/feross/buffer), for example, can trivially result in **catastrophic fund loss** without any warning.\nIt can do this through undermining your random number generation, accidentally producing a [duplicate `k` value](https://www.nilsschneider.net/2013/01/28/recovering-bitcoin-private-keys.html), sending Bitcoin to a malformed output script, or any of a million different ways.\nRunning tests in your target environment is important and a recommended step to verify continuously.\n\nFinally, **adhere to best practice**.\nWe are not an authoritative source of best practice, but, at the very least:\n\n* [Don't reuse addresses](https://en.bitcoin.it/wiki/Address_reuse).\n* Don't share BIP32 extended public keys ('xpubs'). [They are a liability](https://bitcoin.stackexchange.com/questions/56916/derivation-of-parent-private-key-from-non-hardened-child), and it only takes 1 misplaced private key (or a buggy implementation!) and you are vulnerable to **catastrophic fund loss**.\n* [Don't use `Math.random`](https://security.stackexchange.com/questions/181580/why-is-math-random-not-designed-to-be-cryptographically-secure) - in any way - don't.\n* Enforce that users always verify (manually) a freshly-decoded human-readable version of their intended transaction before broadcast.\n* [Don't *ask* users to generate mnemonics](https://en.bitcoin.it/wiki/Brainwallet#cite_note-1), or 'brain wallets',  humans are terrible random number generators.\n* Lastly, if you can, use [Typescript](https://www.typescriptlang.org/) or similar.\n\n\n### Browser\nThe recommended method of using `bitcoinjs-lib` in your browser is through [browserify](http://browserify.org/).\n\nIf you'd like to use a different (more modern) build tool than `browserify`, you can compile just this library and its dependencies into a single JavaScript file:\n\n```sh\n$ npm install bitcoinjs-lib browserify\n$ npx browserify --standalone bitcoin - -o bitcoinjs-lib.js <<<\"module.exports = require('bitcoinjs-lib');\"\n```\n\nWhich you can then import as an ESM module:\n\n```javascript\n<script type=\"module\">import \"/scripts/bitcoinjs-lib.js\"</script>\n````\n\n**NOTE**: We use Node Maintenance LTS features, if you need strict ES5, use [`--transform babelify`](https://github.com/babel/babelify) in conjunction with your `browserify` step (using an [`es2015`](https://babeljs.io/docs/plugins/preset-es2015/) preset).\n\n**WARNING**: iOS devices have [problems](https://github.com/feross/buffer/issues/136), use at least [buffer@5.0.5](https://github.com/feross/buffer/pull/155) or greater,  and enforce the test suites (for `Buffer`, and any other dependency) pass before use.\n\n### Typescript or VSCode users\nType declarations for Typescript are included in this library. Normal installation should include all the needed type information.\n\n## Examples\nThe below examples are implemented as integration tests, they should be very easy to understand.\nOtherwise, pull requests are appreciated.\nSome examples interact (via HTTPS) with a 3rd Party Blockchain Provider (3PBP).\n\n\n- [Taproot Key Spend](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/taproot.spec.ts)\n- [Generate a random address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Import an address via WIF](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Generate a 2-of-3 P2SH multisig address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Generate a SegWit address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Generate a SegWit P2SH address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Generate a SegWit 3-of-4 multisig address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Generate a SegWit 2-of-2 P2SH multisig address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Support the retrieval of transactions for an address (3rd party blockchain)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Generate a Testnet address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Generate a Litecoin address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/addresses.spec.ts)\n- [Create a 1-to-1 Transaction](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a typical Transaction](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction with an OP\\_RETURN output](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction with a 2-of-4 P2SH(multisig) input](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction with a SegWit P2SH(P2WPKH) input](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction with a SegWit P2WPKH input](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction with a SegWit P2PK input](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction with a SegWit 3-of-4 P2SH(P2WSH(multisig)) input](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction and sign with an HDSigner interface (bip32)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/transactions.spec.ts)\n- [Import a BIP32 testnet xpriv and export to WIF](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/bip32.spec.ts)\n- [Export a BIP32 xpriv, then import it](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/bip32.spec.ts)\n- [Export a BIP32 xpub](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/bip32.spec.ts)\n- [Create a BIP32, bitcoin, account 0, external address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/bip32.spec.ts)\n- [Create a BIP44, bitcoin, account 0, external address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/bip32.spec.ts)\n- [Create a BIP49, bitcoin testnet, account 0, external address](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/bip32.spec.ts)\n- [Use BIP39 to generate BIP32 addresses](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/bip32.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction where Alice can redeem the output after the expiry (in the past)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/cltv.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction where Alice can redeem the output after the expiry (in the future)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/cltv.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction where Alice and Bob can redeem the output at any time](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/cltv.spec.ts)\n- [Create (but fail to broadcast via 3PBP) a Transaction where Alice attempts to redeem before the expiry](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/cltv.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction where Alice can redeem the output after the expiry (in the future) (simple CHECKSEQUENCEVERIFY)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts)\n- [Create (but fail to broadcast via 3PBP) a Transaction where Alice attempts to redeem before the expiry (simple CHECKSEQUENCEVERIFY)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction where Bob and Charles can send (complex CHECKSEQUENCEVERIFY)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction where Alice (mediator) and Bob can send after 2 blocks (complex CHECKSEQUENCEVERIFY)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts)\n- [Create (and broadcast via 3PBP) a Transaction where Alice (mediator) can send after 5 blocks (complex CHECKSEQUENCEVERIFY)](https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts)\n\nIf you have a use case that you feel could be listed here, please [ask for it](https://github.com/bitcoinjs/bitcoinjs-lib/issues/new)!\n\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n\n### Running the test suite\n\n``` bash\nnpm test\nnpm run-script coverage\n```\n\n## Complementing Libraries\n- [BIP21](https://github.com/bitcoinjs/bip21) - A BIP21 compatible URL encoding library\n- [BIP38](https://github.com/bitcoinjs/bip38) - Passphrase-protected private keys\n- [BIP39](https://github.com/bitcoinjs/bip39) - Mnemonic generation for deterministic keys\n- [BIP32-Utils](https://github.com/bitcoinjs/bip32-utils) - A set of utilities for working with BIP32\n- [BIP66](https://github.com/bitcoinjs/bip66) - Strict DER signature decoding\n- [BIP68](https://github.com/bitcoinjs/bip68) - Relative lock-time encoding library\n- [BIP69](https://github.com/bitcoinjs/bip69) - Lexicographical Indexing of Transaction Inputs and Outputs\n- [Base58](https://github.com/cryptocoinjs/bs58) - Base58 encoding/decoding\n- [Base58 Check](https://github.com/bitcoinjs/bs58check) - Base58 check encoding/decoding\n- [Bech32](https://github.com/bitcoinjs/bech32) - A BIP173/BIP350 compliant Bech32/Bech32m encoding library\n- [coinselect](https://github.com/bitcoinjs/coinselect) - A fee-optimizing, transaction input selection module for bitcoinjs-lib.\n- [merkle-lib](https://github.com/bitcoinjs/merkle-lib) - A performance conscious library for merkle root and tree calculations.\n- [minimaldata](https://github.com/bitcoinjs/minimaldata) - A module to check bitcoin policy: SCRIPT_VERIFY_MINIMALDATA\n\n\n## Alternatives\n- [BCoin](https://github.com/indutny/bcoin)\n- [Bitcore](https://github.com/bitpay/bitcore)\n- [Cryptocoin](https://github.com/cryptocoinjs/cryptocoin)\n\n\n## LICENSE [MIT](LICENSE)\n"
 },
 {
  "repo": "spesmilo/electrum",
  "language": "Python",
  "readme_contents": "# Electrum - Lightweight Bitcoin client\n\n```\nLicence: MIT Licence\nAuthor: Thomas Voegtlin\nLanguage: Python (>= 3.8)\nHomepage: https://electrum.org/\n```\n\n[![Build Status](https://api.cirrus-ci.com/github/spesmilo/electrum.svg?branch=master)](https://cirrus-ci.com/github/spesmilo/electrum)\n[![Test coverage statistics](https://coveralls.io/repos/github/spesmilo/electrum/badge.svg?branch=master)](https://coveralls.io/github/spesmilo/electrum?branch=master)\n[![Help translate Electrum online](https://d322cqt584bo4o.cloudfront.net/electrum/localized.svg)](https://crowdin.com/project/electrum)\n\n\n## Getting started\n\n_(If you've come here looking to simply run Electrum,\n[you may download it here](https://electrum.org/#download).)_\n\nElectrum itself is pure Python, and so are most of the required dependencies,\nbut not everything. The following sections describe how to run from source, but here\nis a TL;DR:\n\n```\n$ sudo apt-get install libsecp256k1-0\n$ python3 -m pip install --user \".[gui,crypto]\"\n```\n\n### Not pure-python dependencies\n\nIf you want to use the Qt interface, install the Qt dependencies:\n```\n$ sudo apt-get install python3-pyqt5\n```\n\nFor elliptic curve operations,\n[libsecp256k1](https://github.com/bitcoin-core/secp256k1)\nis a required dependency:\n```\n$ sudo apt-get install libsecp256k1-0\n```\n\nAlternatively, when running from a cloned repository, a script is provided to build\nlibsecp256k1 yourself:\n```\n$ sudo apt-get install automake libtool\n$ ./contrib/make_libsecp256k1.sh\n```\n\nDue to the need for fast symmetric ciphers,\n[cryptography](https://github.com/pyca/cryptography) is required.\nInstall from your package manager (or from pip):\n```\n$ sudo apt-get install python3-cryptography\n```\n\nIf you would like hardware wallet support,\n[see this](https://github.com/spesmilo/electrum-docs/blob/master/hardware-linux.rst).\n\n\n### Running from tar.gz\n\nIf you downloaded the official package (tar.gz), you can run\nElectrum from its root directory without installing it on your\nsystem; all the pure python dependencies are included in the 'packages'\ndirectory. To run Electrum from its root directory, just do:\n```\n$ ./run_electrum\n```\n\nYou can also install Electrum on your system, by running this command:\n```\n$ sudo apt-get install python3-setuptools python3-pip\n$ python3 -m pip install --user .\n```\n\nThis will download and install the Python dependencies used by\nElectrum instead of using the 'packages' directory.\nIt will also place an executable named `electrum` in `~/.local/bin`,\nso make sure that is on your `PATH` variable.\n\n\n### Development version (git clone)\n\n_(For OS-specific instructions, see [here for Windows](contrib/build-wine/README_windows.md),\nand [for macOS](contrib/osx/README_macos.md))_\n\nCheck out the code from GitHub:\n```\n$ git clone https://github.com/spesmilo/electrum.git\n$ cd electrum\n$ git submodule update --init\n```\n\nRun install (this should install dependencies):\n```\n$ python3 -m pip install --user -e .\n```\n\nCreate translations (optional):\n```\n$ sudo apt-get install python3-requests gettext qttools5-dev-tools\n$ ./contrib/pull_locale\n```\n\nFinally, to start Electrum:\n```\n$ ./run_electrum\n```\n\n### Run tests\n\nRun unit tests with `pytest`:\n```\n$ pytest electrum/tests -v\n```\n\nTo run a single file, specify it directly like this:\n```\n$ pytest electrum/tests/test_bitcoin.py -v\n```\n\n## Creating Binaries\n\n- [Linux (tarball)](contrib/build-linux/sdist/README.md)\n- [Linux (AppImage)](contrib/build-linux/appimage/README.md)\n- [macOS](contrib/osx/README.md)\n- [Windows](contrib/build-wine/README.md)\n- [Android](contrib/android/Readme.md)\n\n\n## Contributing\n\nAny help testing the software, reporting or fixing bugs, reviewing pull requests\nand recent changes, writing tests, or helping with outstanding issues is very welcome.\nImplementing new features, or improving/refactoring the codebase, is of course\nalso welcome, but to avoid wasted effort, especially for larger changes,\nwe encourage discussing these on the issue tracker or IRC first.\n\nBesides [GitHub](https://github.com/spesmilo/electrum),\nmost communication about Electrum development happens on IRC, in the\n`#electrum` channel on Libera Chat. The easiest way to participate on IRC is\nwith the web client, [web.libera.chat](https://web.libera.chat/#electrum).\n"
 },
 {
  "repo": "bitcoin-wallet/bitcoin-wallet",
  "language": "Java",
  "readme_contents": "# BITCOIN WALLET\n\nWelcome to _Bitcoin Wallet_, a standalone Bitcoin payment app for your Android device!\n\nThis project contains several sub-projects:\n\n * __wallet__:\n     The Android app itself. This is probably what you're searching for.\n * __market__:\n     App description and promo material for the Google Play app store.\n\n\n### PREREQUISITES FOR BUILDING\n\nYou'll need git, a Java 11 SDK and Gradle between 4.4 and 6.9.x for this. We'll assume Ubuntu 22.04 LTS (Jammy Jellyfish)\nfor the package installs, which comes with OpenJDK 11 and Gradle 4.4.1 out of the box.\n\n    # first time only\n    sudo apt install git gradle openjdk-11-jdk\n\nCreate a directory for the Android SDK (e.g. `android-sdk`) and point the `ANDROID_HOME` variable to it.\n\nDownload the [Android SDK Tools](https://developer.android.com/studio/index.html#command-tools)\nand unpack it to `$ANDROID_HOME/`.\n\nFinally, the last preparative step is acquiring the source code. Again in your workspace, use:\n\n    # first time only\n    git clone -b master https://github.com/bitcoin-wallet/bitcoin-wallet.git bitcoin-wallet\n    cd bitcoin-wallet\n\n\n### BUILDING\n\nYou can build all sub-projects in all flavors at once using Gradle:\n\n    # each time\n    gradle clean build\n\nFor details about building the wallet see the [specific README](wallet/README.md).\n"
 },
 {
  "repo": "etotheipi/BitcoinArmory",
  "language": "C++",
  "readme_contents": "##Armory\n\n**Created by Alan Reiner on 13 July, 2011**\n\n[Armory](https://github.com/etotheipi/BitcoinArmory) is a full-featured Bitcoin client, offering a dozen innovative features not found in any other client software! Manage multiple wallets (deterministic and watching-only), print paper backups that work forever, import or sweep private keys, and keep your savings in a computer that never touches the internet, while still being able to manage incoming payments, and create outgoing payments with the help of a USB key.\n\nMulti-signature transactions are accommodated under-the-hood about 80%, and will be completed and integrated into the UI soon.\n\n**Armory has no independent networking components built in.** Instead, it relies on on the Satoshi client to securely connect to peers, validate blockchain data, and broadcast transactions for us.  Although it was initially planned to cut the umbilical cord to the Satoshi client and implement independent networking, it has turned out to be an inconvenience worth having. Reimplementing all the networking code would be fraught with bugs, security holes, and possible blockchain forking.  The reliance on Bitcoin-Qt right now is actually making Armory more secure!\n\n##Donations\n\nPlease take a moment to donate! 1ArmoryXcfq7TnCSuZa9fQjRYwJ4bkRKfv\n\n![bitcoin:1ArmoryXcfq7TnCSuZa9fQjRYwJ4bkRKfv][Donation Image]\n\n##Building Armory From Source\n\nSee instructions [here][Armory Build Instructions]\n\n\n##Dependencies\n\n* GNU Compiler Collection  \n Linux:   Install package `g++`\n\n* Crypto++  \n Linux:   Install package `libcrypto++-dev`  \n Windows: [Download][Windows Crypto Download]    \n  \n* SWIG  \n Linux:   Install package `swig`  \n Windows: [Download][Windows SWIG Download]  \n MSVS: Copy swigwin-2.x directory next to cryptopp as `swigwin`  \n  \n* Python 2.6/2.7  \n Linux:   Install package `python-dev`  \n Windows: [Download][Windows Python Download]  \n  \n* Python Twisted -- asynchronous networking  \n Linux:   Install package `python-twisted`  \n Windows: [Download][Windows Twisted Download]  \n  \n* PyQt 4 (for Python 2.X)  \n Linux:   Install packages `libqtcore4`, `libqt4-dev`, `python-qt4`, and `pyqt4-dev-tools`  \n Windows: [Download][Windows QT Download]  \n  \n* qt4reactor.py -- combined eventloop for PyQt and Twisted  \n All OS:  [Download][QT4 Reactor Download]  \n\n* pywin32  \n Windows Only:  qt4reactor relies on pywin32 (for win32event module). [Download][Windows PyWin Download]  \n  \n* py2exe  \n (OPTIONAL - if you want to make a standalone executable in Windows)  \n Windows: [Download][Windows Py2Exe Download]  \n\n##Sample Code\n\nArmory contains over 25,000 lines of code, between the C++ and python libraries.  This can be very confusing for someone unfamiliar with the code (you).  Below I have attempted to illustrate the CONOPS (concept of operations) that the library was designed for, so you know how to use it in your own development activities.  There is a TON of sample code in the following:\n\n* C++ -   [BlockUtilsTest.cpp](cppForSwig/BlockUtilsTest.cpp)\n* Python -   [Unit Tests](pytest/), [sample_armory_code.py](extras/sample_armory_code.py)\n\n\n##License\n\nDistributed under the GNU Affero General Public License (AGPL v3)  \nSee [LICENSE file](LICENSE) or [here][License]\n\n##Copyright\n\nCopyright (C) 2011-2015, Armory Technologies, Inc.\n\n\n[Armory Build Instructions]: https://bitcoinarmory.com/building-from-source\n[Windows Crypto Download]: http://www.cryptopp.com/#download\n[Windows SWIG Download]: http://www.swig.org/download.html\n[Windows Python Download]: http://www.python.org/getit/\n[Windows Twisted Download]: http://twistedmatrix.com/trac/wiki/Downloads\n[Windows QT Download]: http://www.riverbankcomputing.co.uk/software/pyqt/download\n[QT4 Reactor Download]: https://launchpad.net/qt4reactor\n[Windows PyWin Download]: http://sourceforge.net/projects/pywin32/files/pywin32/\n[Windows Py2Exe Download]:  http://www.py2exe.org/\n[License]: http://www.gnu.org/licenses/agpl.html\n[Donation Image]: https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=bitcoin:1ArmoryXcfq7TnCSuZa9fQjRYwJ4bkRKfv?&label=Armory+Donation"
 },
 {
  "repo": "bitcoin-dot-org/Bitcoin.org",
  "language": "HTML",
  "readme_contents": "# Welcome to Bitcoin.org's Codebase\n\nCurrent Build Status: ![Build Status](https://travis-ci.org/bitcoin-dot-org/bitcoin.org.svg?branch=master)\n\nLive site: [Bitcoin.org](https://bitcoin.org)\n\nReport problems or help improve the site by opening a [new issue](https://github.com/bitcoin-dot-org/bitcoin.org/issues/new) or [pull request](https://github.com/bitcoin-dot-org/bitcoin.org/compare).\n\n## Earn Bitcoin for Contributing\nOpen issues [labeled with \"Bounty\"](https://github.com/bitcoin-dot-org/bitcoin.org/labels/Bounty)\nhave bounties on them. Viewing the issue will reveal the value of the bounty.\nSubmit a pull request resolving the issue along with an accompanying note or\ncomment containing a bitcoin address and automatically receive a payment in the\namount of the bounty if it gets merged.\n\n## How to Participate\nThe following quick guides will help you get started:\n\n+ [Becoming a Contributor](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/become-a-contributor.md)\n+ [Working with GitHub](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/working-with-github.md)\n+ [Setting Up Your Environment](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/setting-up-your-environment.md)\n+ [Improving Developer Documentation](https://github.com/bitcoin-dot-org/developer.bitcoin.org/)\n+ [Assisting with Translations](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/assisting-with-translations.md)\n+ [Adding Exchanges](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-exchanges.md)\n+ [Managing Wallets](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/managing-wallets.md)\n+ [Adding Events, Release Notes and Alerts](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md)\n+ [Adding Blog Posts](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-blog-posts.md)\n+ [Miscellaneous / Other](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/miscellaneous.md)\n\n### Code of Conduct\n\nParticipation in this project is subject to a [Code of Conduct](https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/CODE_OF_CONDUCT.md).\n"
 },
 {
  "repo": "jgarzik/cpuminer",
  "language": "C",
  "readme_contents": "\nThis is a multi-threaded CPU miner for bitcoin.\n\nLicense: See COPYING for details.\n\nDependencies:\n\tlibcurl\t\t\thttp://curl.haxx.se/libcurl/\n\tjansson\t\t\thttp://www.digip.org/jansson/\n\t\t(jansson is optional, and is included in-tree)\n\nBasic *nix build instructions:\n\t./autogen.sh\t# only needed if building from git repo\n\tCFLAGS=\"-O3 -Wall -msse2\" ./configure\n\tmake\n\nBasic WIN32 build instructions (on Fedora 13; requires mingw32):\n\t./autogen.sh\t# only needed if building from git repo\n\trm -f mingw32-config.cache\n\tMINGW32_CFLAGS=\"-O3 -Wall -msse2\" mingw32-configure\n\tmake\n\t./mknsis.sh\n\nUsage instructions:  Run \"minerd --help\" to see options.\n\nAlso many issues and FAQs are covered in the forum thread\ndedicated to this program,\n\thttps://bitcointalk.org/?topic=1925.0;all\n\n"
 },
 {
  "repo": "yenom/BitcoinKit",
  "language": "Swift",
  "readme_contents": "<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/23519083/44261174-cc64aa00-a251-11e8-85b6-145e0bcae102.jpg\" alt=\"BitcoinKit: Let\u2019s Play with Bitcoin in Swift!\">\n    <a href=\"https://travis-ci.org/yenom/BitcoinKit\">\n      <img src=\"http://img.shields.io/travis/yenom/BitcoinKit.svg\" alt=\"TravisCI\">\n    </a>\n    <a href=\"https://codecov.io/gh/yenom/BitcoinKit\">\n      <img src=\"https://codecov.io/gh/yenom/BitcoinKit/branch/master/graph/badge.svg\" />\n    </a>\n    <a href=\"https://swift.org\">\n        <img src=\"http://img.shields.io/badge/swift-5.0+-brightgreen.svg\" alt=\"Swift 5.0+\">\n    </a>\n    <a href=\"https://github.com/Carthage/Carthage\">\n        <img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage\">\n    </a>\n    <a href=\"https://swift.org/package-manager\">\n        <img src=\"https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=flat\" alt=\"Swift Package Manager\" />\n    </a>\n    <a href=\"http://cocoadocs.org/docsets/BitcoinKit\">\n        <img src=\"https://img.shields.io/cocoapods/v/BitcoinKit.svg\" alt=\"CococaPods\" />\n    </a>\n</p>\n\n\n### Welcome to BitcoinKit\n\nThe BitcoinKit library is a Swift implementation of the Bitcoin protocol which support both BCH and BTC. Improving the mobile ecosystem for Bitcoin developers is our mission.\n\nBitcoinKit allows maintaining a wallet, sending or receiving transactions without a full blockchain node. Following is a wallet app that demonstrates the way to use it.\n\nRelease notes are [here](CHANGELOG.md).\n\n<img src=\"https://user-images.githubusercontent.com/24402451/43367286-8753b4cc-9385-11e8-9fba-78e5283c1158.png\" width=\"320px\" />&nbsp;<img src=\"https://user-images.githubusercontent.com/24402451/43367196-523d5f46-9384-11e8-9fee-10e72318e67b.png\" width=\"319px\" />\n\nFeatures\n--------\n\n- Encoding/decoding addresses: base58, Cashaddr, P2PKH, P2SH, WIF format.\n- Transaction building blocks: inputs, outputs, scripts.\n- EC keys and signatures.\n- BIP32, BIP44 hierarchical deterministic wallets.\n- BIP39 implementation.\n- SPV features **are under construction**. The following functions cannot work well sometimes.\n  - Send/receive transactions.\n  - See current balance in a wallet.\n\n\nRequirements\n------------\n- iOS 9.0+ / Mac OS X 10.11+ / tvOS 9.0+ / watchOS 2.0+\n- Xcode 10.0+\n- Swift 5.0+\n\n\nInstallation\n------------\n\n### [CocoaPods](https://guides.cocoapods.org/using/using-cocoapods.html)\n\n```bash\n$ gem install cocoapods\n```\n\n> CocoaPods 1.5.0+ is required to build BitcoinKit.\n\nTo integrate BitcoinKit into your Xcode project using CocoaPods, specify it in your `Podfile`:\n\n```ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '13.0'\nuse_frameworks!\n\ntarget '<Your Target Name>' do\n    pod 'BitcoinKit', '~> 1.1.0'\nend\n```\n\nThen, run the following command:\n```bash\n$ pod install\n```\n\n### [Carthage](https://github.com/Carthage/Carthage)\nAdd this to `Cartfile`\n\n```ogdl\ngithub \"yenom/BitcoinKit\" ~> 1.1.0\n```\n\nRun `carthage update` to build the framework and drag the built `BitcoinKit.framework` into your Xcode project.\n\n\n### [Swift Package Manager](https://github.com/apple/swift-package-manager)\n\nSimply add the following lines to dependencies of your Package.swift:\n\n```swift\n.package(url: \"https://github.com/yenom/BitcoinKit.git\", .upToNextMinor(from: \"1.1.0\"))\n```\n\nNote that following data types and features are currently not supported on Linux platform.  \n\n* `Peer` and `PeerGroup`\n* SQLite based BlockStore\n\nContribute\n----------\nContributions to BitcoinKit are welcome and encouraged!\nFeel free to open issues, drop us pull requests.\n\n## Authors & Maintainers\n - [usatie](https://github.com/usatie)\n\n ## About\n\n <img width=220 src=\"https://user-images.githubusercontent.com/24402451/44437525-9169ca00-a5f5-11e8-8a77-9c1b906fb864.jpg\"></img>\n\n BitcoinKit is maintained and funded by Yenom.\n Visit our [website](https://yenom.tech) or say hi on twitter ([@Yenom_wallet_en](https://twitter.com/Yenom_wallet_en))\n\nLicense\n-------\n\nBitcoinKit is available under the MIT license. See the LICENSE file for more info.\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. \n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/BitcoinKit/contributors.svg?width=890&button=false\" /></a>\n\n\n## Backers\n\nThank you to all our backers! \ud83d\ude4f [[Become a backer](https://opencollective.com/BitcoinKit#backer)]\n\n<a href=\"https://opencollective.com/BitcoinKit#backers\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/BitcoinKit#sponsor)]\n\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/BitcoinKit/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/BitcoinKit/sponsor/9/avatar.svg\"></a>\n\n\n"
 },
 {
  "repo": "BitcoinExchangeFH/BitcoinExchangeFH",
  "language": "Python",
  "readme_contents": "<p align=\"center\">\n  <img src=\"docs/images/icon.jpg\">\n</p>\n\n# BitcoinExchangeFH - Cryptocurrency exchange market data feed handler\n\nBitcoinExchangeFH is a slim application to record the price depth and trades in various exchanges. You can set it up quickly and record the all the exchange data in a few minutes!\n\nUsers can\n\n1. Streaming market data to a target application (via ZeroMQ)\n2. Recording market data for backtesting and analysis.\n3. Recording market data to a in-memory database and other applications can quickly access to it.\n4. Customize the project for trading use.\n\n### MySQL\n\n<p align=\"center\">\n  <img src=\"docs/images/sample.jpg\">\n</p>\n\n### Kdb+\n\n<p align=\"center\">\n  <img src=\"docs/images/sample2.jpg\">\n</p>\n\n## Supported exchanges\n\nAll exchanges supported by [ccxt](https://github.com/ccxt/ccxt). Currently more than 130 exchanges are supported.\n\nWebsocket feeds of the following exchanges are supported by [cryptofeed](https://github.com/bmoscon/cryptofeed)\n\n- Bitfinex\n\n- Coinbase\n\n- Poloniex\n\n- Gemini\n\n- HitBTC\n\n- Bitstamp\n\n- BitMEX\n\n- Kraken\n\n- Binance\n\n- EXX\n\n- Huobi\n\n- OKCoin\n\n- OKEx\n\n\nIf the exchange is not supported with websocket API feed, it will automatically fall into using its REST API feed.\n\n\n## Supported database/channel\n\n- RDMBS (e.g. sqlite, MySQL, PostgreSQL)\n\n- ZeroMQ\n\n- Kdb+ (Coming soon)\n\n## Getting started\n\n```\npip install bitcoinexchangefh\nbitcoinexchangefh --configuration example/configuration.yaml\n```\n\n## Configuration\n\nThe configuration follows [YAML](https://pyyaml.org/wiki/PyYAMLDocumentation) syntax and contains two sections\n\n- subscriptions\n\n- handlers\n\n\n### Subscriptions\n\nSubscription section specifies the exchange and instruments to subscribe. \n\nThe first key is the exchange name and then follows the exchange details, \n    \n- instruments \n\n- number of depth (default is 5 if not specified)\n\n\nFor example, \n\n```\nsubscription:\n    Binance:\n        instruments:\n            - XRP/BTC\n            - BCH/BTC\n        depth\n    Poloniex:\n        instruments:\n            - ETH/BTC\n        depth: 10\n```\n\n### Handlers\n\nAfter receiving the order book or trade update, each handler is updated. For example, for SQL database handler, it is updated with the corresponding SQl statements.\n\nFor example,\n\n```\nhandlers:\n    sql: \n        connection: \"sqlite://\"\n    \n```\n\n#### SQL handler\n\nThe following settings can be customized\n\n|Parameter|Description|\n|---|---|\n|connection|Database connection string required by [SQLAlchemy](https://docs.sqlalchemy.org/en/latest/core/engines.html)|\n|is_rotate|Boolean indicating whether to rotate to record the table.|\n|rotate_frequency|String in [format](https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior) same as `strftime` and `strptime`|\n\n#### ZeroMQ handler\n\nThe feed handler acts as a [publisher](https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/pyzmq/patterns/pubsub.html) in ZeroMQ. To receive the feed, please follow ZeroMQ instructions to start a [subscriber](tests/zmq/zmq_subscriber.py).\n\nThe following settings can be customized\n\n|Parameter|Description|\n|---|---|\n|connection|Connection [format](http://api.zeromq.org/3-2:zmq-connect) in ZeroMQ. For example, \"tcp://127.0.0.1:3456\"|\n\n\n## Examples\n\nYou can first create a directory `.data` and run the command\n\n```\n$ bitcoinexchangefh --configuration example/configuration.yaml \n2020-08-07 23:33:32,110 INFO Loading runner\n2020-08-07 23:33:32,110 INFO Creating handler sql\n2020-08-07 23:33:32,205 INFO Loading handler SqlHandler\n2020-08-07 23:33:32,710 INFO Loading exchange Binance\n2020-08-07 23:33:34,062 INFO Loading exchange Bitmex\n2020-08-07 23:33:40,203 INFO Start running the feed handler\n2020-08-07 23:33:40,203 INFO Running handler sql\n2020-08-07 23:33:40,210 INFO Running exchange Binance\n2020-08-07 23:33:40,215 INFO Running SqlHandler\n2020-08-07 23:33:40,219 INFO Running exchange Bitmex\n2020-08-07 23:33:40,231 INFO Joining all the processes\n2020-08-07 23:33:40,232 INFO Creating table binance_ethbtc_order\n2020-08-07 23:33:40,263 INFO Created table binance_ethbtc_order\n2020-08-07 23:33:40,265 INFO Creating table binance_xrpbtc_order\n2020-08-07 23:33:40,294 INFO Created table binance_xrpbtc_order\n2020-08-07 23:33:40,297 INFO Creating table bitmex_ethusd_order\n2020-08-07 23:33:40,322 INFO Created table bitmex_ethusd_order\n```\n\nAfter a while, the data is streamed into the file `.data/order_book.db`. You can terminate the process and the database contains the following tables.\n\n```\n$ python -c \"import sqlite3; print(sqlite3.connect('.data/order_book.db').execute('SELECT name from sqlite_master where type= \\\"table\\\"').fetchall())\"\n[('binance_ethbtc_order',), ('binance_xrpbtc_order',), ('bitmex_ethusd_order',)]\n\n```\n\n\n## Inquiries\n\nYou can first look up to the page [FAQ](https://github.com/gavincyi/BitcoinExchangeFH/wiki/FAQ). For more inquiries, you can either leave it in issues or drop me an email. I will get you back as soon as possible.\n\n## Compatibility\nThe application is compatible with version higher or equal to python 3.0.\n\n## Contributions\nAlways welcome for any contribution. Please fork the project, make the changes, and submit the merge request. :)\n\nFor any questions and comment, please feel free to contact me through email (gavincyi at gmail)\n\nYour comment will be a huge contribution to the project!\n\n## Continuity\nIf you are not satisified with python performance, you can contact me to discuss migrating the project into other languages, e.g. C++.\n"
 },
 {
  "repo": "maxme/bitcoin-arbitrage",
  "language": "Python",
  "readme_contents": "# bitcoin-arbitrage - opportunity detector and automated trading\n\nIt gets order books from supported exchanges and calculate arbitrage\nopportunities between each markets. It takes market depth into account.\n\nCurrently supported exchanges to get data:\n\n- Bitstamp (USD, EUR)\n- Paymium (EUR)\n- Bitfinex (USD, EUR)\n- bitFlyer (USD, EUR)\n- Kraken (USD, EUR)\n- OkCoin (CNY)\n- Gemini (USD)\n- BTCC (CNY)\n- GDAX (USD, EUR)\n- CEX.io (USD, EUR)\n- Binance (USD)\n\nCurrently supported exchanges to automate trade:\n\n- Bitstamp (USD)\n- Paymium (EUR)\n\n## WARNING\n\n**Real trading bots are included. Don't put your API keys in config.py\nif you don't know what you are doing.**\n\n## Installation And Configuration\n\n```sh\ncp arbitrage/config.py-example arbitrage/config.py\n```\n\nThen edit config.py file to setup your preferences: watched markets\nand observers\n\nYou need Python3 to run this program. To install on Debian, Ubuntu, or\nvariants of them, use:\n\n```sh\nsudo apt-get install python3 python3-pip python-nose\n```\n\nTo use the observer XMPPMessager you will need to install sleekxmpp:\n\n```sh\npip3 install sleekxmpp\n```\n\n## Run\n\nTo run the opportunity watcher:\n\n```sh\n$ python3 -m arbitrage -v\n2013-03-12 03:52:14,341 [INFO] profit: 30.539722 EUR with volume: 10 BTC - buy at 29.3410 (MtGoxEUR) sell at29.4670 (Bitcoin24EUR) ~10.41%\n2013-03-12 03:52:14,356 [INFO] profit: 66.283642 EUR with volume: 10 BTC - buy at 29.3410 (MtGoxEUR) sell at30.0000 (PaymiumEUR) ~22.59%\n2013-03-12 03:52:14,357 [INFO] profit: 31.811390 EUR with volume: 10 BTC - buy at 29.3410 (MtGoxEUR) sell at30.0000 (IntersangoEUR) ~10.84%\n2013-03-12 03:52:45,090 [INFO] profit: 9.774324 EUR with volume: 10 BTC - buy at 35.3630 (Bitcoin24EUR) sellat 35.4300 (PaymiumEUR) ~2.76%\n```\n\nTo check your balance on an exchange (also a good way to check your accounts configuration):\n\n```sh\npython3 -m arbitrage -m Paymium get-balance\npython3 -m arbitrage -m Paymium,BitstampUSD get-balance\n```\n\nRun tests\n\n```sh\nnosetests arbitrage/\n```\n\n### Alternative usage\n\nList supported public markets:\n\n```sh\npython3 -m arbitrage list-public-markets\n```\n\nHelp:\n\n```sh\npython3 -m arbitrage -h\n```\n\n## TODO\n\n- Tests\n- Write documentation\n- Add other exchanges:\n  - icbit\n- Update order books with a WebSocket client for supported exchanges\n  (Kraken, Bitfinex, Paymium)\n- Better history handling for observer \"HistoryDumper\" (Redis ?)\n- Move EUR / USD from a market to an other:\n  - Coupons\n  - Ripple ?\n  - Stable coins\n  - Negative Operations\n  - Add support for other cryptocurrencies and triangular arbitrage\n\n## LICENSE\n\nMIT\n\nCopyright (c) 2013 Maxime Biais <firstname.lastname@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "BitcoinUnlimited/BitcoinUnlimited",
  "language": "C++",
  "readme_contents": "[Website](https://www.bitcoinunlimited.info)  | [Download](https://www.bitcoinunlimited.info/download) | [Setup](README.md)   |   [Miner](doc/miner.md)  |  [ElectronCash](doc/bu-electrum-integration.md)  |  [UnconfirmedChains](doc/unconfirmedTxChainLimits.md)\n\n[![Build Status](https://gitlab.com/bitcoinunlimited/BCHUnlimited/badges/dev/pipeline.svg?key_text=Build%20Status%20%28dev%29&key_width=110)](https://gitlab.com/bitcoinunlimited/BCHUnlimited/-/pipelines)\n\n# What is Bitcoin Cash?\n\nBitcoin Cash is an experimental new digital currency that enables instant payments to\nanyone, anywhere in the world. Bitcoin Cash uses peer-to-peer technology to operate\nwith no central authority: managing transactions and issuing money are carried\nout collectively by the network. Bitcoin Unlimited is the name of open source\nsoftware which enables the use of this currency.\n\nFor more information, as well as an immediately useable, binary version of\nthe Bitcoin Unlimited software, see https://www.bitcoinunlimited.info/download, or read the\n[original whitepaper](https://www.bitcoinunlimited.info/resources/bitcoin.pdf).\n\n\n\n# What is Bitcoin Unlimited?\n\nBitcoin Unlimited is an implementation of the Bitcoin client software that is based on Bitcoin Core.\nHowever, Bitcoin Unlimited has a very different philosophy than Core.\n\nIt follows a philosophy and is administered by a formal process described in the [Articles of Federation](https://www.bitcoinunlimited.info/resources/BUarticles.pdf).\nIn short, we believe in market-driven decision making, emergent consensus, and giving our users choices.\n\n\n# Installing\n\nFor info on installing Bitcoin Unlimited see [INSTALL.md](INSTALL.md)\n\n# Building\n\nFor info on building Bitcoin Unlimited from sources, see\n- [Dependencies](doc/dependencies.md)\n- [Unix Build Notes](doc/build-unix.md)\n- [Unix Build Notes (RPM)](doc/build-unix-rpm.md)\n- [Windows Build Notes](doc/build-windows.md)\n- [OpenBSD Build Notes](doc/build-openbsd.md)\n- [macOS Build Notes](doc/build-macos.md)\n- [Deterministic macOS DMG Notes](doc/README_macos.md)\n- [Gitian Building Guide](doc/gitian-building.md)\n\nThey are not complete guides, but include notes on the necessary libraries, compile flags, etc.\n\n# Running / setup\n\n- [Running large unconfirmed transaction chain limits](doc/unconfirmedTxChainLimits.md)\n- [Running an electron cash protocol server](doc/bu-electrum-integration.md)\n- [Getting the most out of Xtreme thinblocks](bu-xthin.md)\n- [Setting up an Xpedited Relay Network](bu-xpedited-forwarding.md)\n- [Tor Support](doc/tor.md)\n- [Init Scripts (systemd/upstart/openrc)](doc/init.md)\n- [Using Bitcoin Unlimited for Mining](doc/miner.md)\n\n# Development\n\n- [Developer Notes](doc/developer-notes.md)\n- [Contributing](CONTRIBUTING.md)\n- [BUIP, BIP and Bitcoin Cash Specifications](doc/bips-buips-specifications.md)\n- [Bitcoin Unlimited Improvement Proposal Archive](https://github.com/BitcoinUnlimited/BUIP)\n- [Multiwallet Qt Development](doc/multiwallet-qt.md)\n- [Release Notes](doc/release-notes.md)\n- [Release Process](doc/release-process.md)\n- [Translation Process](doc/translation_process.md)\n- [Translation Strings Policy](doc/translation_strings_policy.md)\n- [Unit Tests](doc/unit-tests.md)\n- [Unauthenticated REST Interface](doc/REST-interface.md)\n- [Shared Libraries](doc/shared-libraries.md)\n- [Assets Attribution](contrib/debian/copyright)\n- [Files](doc/files.md)\n- [Fuzz-testing](doc/fuzzing.md)\n\n\n# Online resources\n\n - [Issue Tracker](https://github.com/BitcoinUnlimited/BitcoinUnlimited/issues)\n - [The Bitcoin Forum](https://www.bitco.in/forum)\n - [Reddit /r/btc](https://www.reddit.com/r/btc)\n - [Reddit /r/bitcoin_unlimited](https://www.reddit.com/r/bitcoin_unlimited)\n - [Slack Channel](https://bitcoinunlimited.slack.com/)\n\n\n\n# License\n\nBitcoin Unlimited is released under the terms of the [MIT software license](http://www.opensource.org/licenses/mit-license.php). See [COPYING](COPYING) for more\ninformation.\nThis product includes software developed by the OpenSSL Project for use in the [OpenSSL Toolkit](https://www.openssl.org/). This product includes\ncryptographic software written by Eric Young ([eay@cryptsoft.com](mailto:eay@cryptsoft.com)), and UPnP software written by Thomas Bernard.\n"
 },
 {
  "repo": "Bitcoin-ABC/bitcoin-abc",
  "language": "C++",
  "readme_contents": "[![Bitcoin ABC Logo](share/pixmaps/bitcoinabclogo.png \"Bitcoin ABC\")](https://www.bitcoinabc.org)\n\nThe goal of Bitcoin ABC is to create sound money that is usable by everyone in\nthe world. This is a civilization-changing technology which will dramatically\nincrease human flourishing, freedom, and prosperity. The project aims to\nachieve this goal by implementing a series of optimizations and protocol\nupgrades that will enable peer-to-peer digital cash to succeed at mankind scale.\n\nWhat is eCash?\n---------------------\n\n[eCash](https://e.cash/) is a digital currency that enables instant payments to\nanyone, anywhere in the world. It uses peer-to-peer technology to operate with\nno central authority: managing transactions and issuing money are carried out\ncollectively by the network. eCash is a descendant of Bitcoin.\n\nWhat is Bitcoin ABC?\n--------------------\n\nBitcoin ABC is the name of open-source software which enables the use of\neCash. It is a fork of the [Bitcoin Core](https://bitcoincore.org)\nsoftware project.\n\nLicense\n-------\n\nBitcoin ABC is released under the terms of the MIT license. See\n[COPYING](COPYING) for more information or see\n<https://opensource.org/licenses/MIT>.\n\nDevelopment Process\n-------------------\n\nThis Github repository contains only source code of releases.\n\nBitcoin ABC development takes place at [reviews.bitcoinabc.org](https://reviews.bitcoinabc.org/)\n\nIf you would like to contribute, please read [CONTRIBUTING](CONTRIBUTING.md).\n\nDisclosure Policy\n-----------------\n\nSee [DISCLOSURE_POLICY](DISCLOSURE_POLICY.md)\n"
 },
 {
  "repo": "petertodd/python-bitcoinlib",
  "language": "Python",
  "readme_contents": "# python-bitcoinlib\n\nThis Python3 library provides an easy interface to the bitcoin data\nstructures and protocol. The approach is low-level and \"ground up\", with a\nfocus on providing tools to manipulate the internals of how Bitcoin works.\n\n\"The Swiss Army Knife of the Bitcoin protocol.\" - Wladimir J. van der Laan\n\n\n## Requirements\n\n    sudo apt-get install libssl-dev\n\nThe RPC interface, `bitcoin.rpc`, is designed to work with Bitcoin Core v0.16.0.\nOlder versions may work but there do exist some incompatibilities.\n\n\n## Structure\n\nEverything consensus critical is found in the modules under bitcoin.core. This\nrule is followed pretty strictly, for instance chain parameters are split into\nconsensus critical and non-consensus-critical.\n\n    bitcoin.core            - Basic core definitions, datastructures, and\n                              (context-independent) validation\n    bitcoin.core.key        - ECC pubkeys\n    bitcoin.core.script     - Scripts and opcodes\n    bitcoin.core.scripteval - Script evaluation/verification\n    bitcoin.core.serialize  - Serialization\n\nIn the future the bitcoin.core may use the Satoshi sourcecode directly as a\nlibrary. Non-consensus critical modules include the following:\n\n    bitcoin          - Chain selection\n    bitcoin.base58   - Base58 encoding\n    bitcoin.bloom    - Bloom filters (incomplete)\n    bitcoin.net      - Network communication (in flux)\n    bitcoin.messages - Network messages (in flux)\n    bitcoin.rpc      - Bitcoin Core RPC interface support\n    bitcoin.wallet   - Wallet-related code, currently Bitcoin address and\n                       private key support\n\nEffort has been made to follow the Satoshi source relatively closely, for\ninstance Python code and classes that duplicate the functionality of\ncorresponding Satoshi C++ code uses the same naming conventions: CTransaction,\nCBlockHeader, nValue etc. Otherwise Python naming conventions are followed.\n\n\n## Mutable vs. Immutable objects\n\nLike the Bitcoin Core codebase CTransaction is immutable and\nCMutableTransaction is mutable; unlike the Bitcoin Core codebase this\ndistinction also applies to COutPoint, CTxIn, CTxOut, and CBlock.\n\n\n## Endianness Gotchas\n\nRather confusingly Bitcoin Core shows transaction and block hashes as\nlittle-endian hex rather than the big-endian the rest of the world uses for\nSHA256. python-bitcoinlib provides the convenience functions x() and lx() in\nbitcoin.core to convert from big-endian and little-endian hex to raw bytes to\naccommodate this. In addition see b2x() and b2lx() for conversion from bytes to\nbig/little-endian hex.\n\n\n## Module import style\n\nWhile not always good style, it's often convenient for quick scripts if\n`import *` can be used. To support that all the modules have `__all__` defined\nappropriately.\n\n\n# Example Code\n\nSee `examples/` directory. For instance this example creates a transaction\nspending a pay-to-script-hash transaction output:\n\n    $ PYTHONPATH=. examples/spend-p2sh-txout.py\n    <hex-encoded transaction>\n\n\n## Selecting the chain to use\n\nDo the following:\n\n    import bitcoin\n    bitcoin.SelectParams(NAME)\n\nWhere NAME is one of 'testnet', 'mainnet', 'signet', or 'regtest'. The chain currently\nselected is a global variable that changes behavior everywhere, just like in\nthe Satoshi codebase.\n\n\n## Unit tests\n\nUnder bitcoin/tests using test data from Bitcoin Core. To run them:\n\n    python3 -m unittest discover\n\nAlternately, if Tox (see https://tox.readthedocs.org/) is available on your\nsystem, you can run unit tests for multiple Python versions:\n\n    ./runtests.sh\n\nHTML coverage reports can then be found in the htmlcov/ subdirectory.\n\n## Documentation\n\nSphinx documentation is in the \"doc\" subdirectory. Run \"make help\" from there\nto see how to build. You will need the Python \"sphinx\" package installed.\n\nCurrently this is just API documentation generated from the code and\ndocstrings. Higher level written docs would be useful, perhaps starting with\nmuch of this README. Pages are written in reStructuredText and linked from\nindex.rst.\n"
 },
 {
  "repo": "bisq-network/bisq",
  "language": "Java",
  "readme_contents": "<p align=\"center\">\n  <a href=\"https://bisq.network\">\n    <img src=\"https://bisq.network/images/bisq-logo.svg\"/>\n  </a>\n</p>\n\n<h3 align=\"center\">\n    \n![Actions Status](https://github.com/bisq-network/bisq/workflows/Build%20Bisq/badge.svg)\n\n\n## What is Bisq?\n\nBisq is a safe, private and decentralized way to exchange bitcoin for national currencies and other digital assets. Bisq uses peer-to-peer networking and multi-signature escrow to facilitate trading without a third party. Bisq is non-custodial and incorporates a human arbitration system to resolve disputes.\n\nTo learn more, see the doc and video at https://bisq.network/intro.\n\n\n## Get started using Bisq\n\nFollow the step-by-step instructions at https://bisq.network/get-started.\n\n\n## Contribute to Bisq\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) and the [developer docs](docs/README.md).\n"
 },
 {
  "repo": "mobnetic/BitcoinChecker",
  "language": "Java",
  "readme_contents": "# Bitcoin Checker\r\n\r\n__Bitcoin Checker__ is a FREE app to track the most recent prices of your favourite currency pairs (on over 80 supported exchanges) in many customizable ways (such as rich notifications, TTS voice announcements, Home and Lockscreen widget or multiple alarms).\r\n\r\nAs you know, the number of virtual currencies is increasing very fast. Currency pairs set on existing exchanges change almost every day and there is also a need to add newer and newer exchanges over time.\r\n_We proudly announce_ that [DataModule](dataModule) (containing exchanges and currency pairs) for Bitcoin Checker app is now _OPEN_ for our users to make this application _even better_! This means that _anyone_ can now:\r\n* Add support for a new exchange\r\n* Update currency pairs on their favourite exchange\r\n\r\n### Issues\r\nPlease submit all requests for new exchanges/currency pairs or bugs in Bitcoin Checker apps in the [Issues](https://github.com/mobnetic/BitcoinChecker/issues) section.\r\n\r\n##### Bitcoin Checker on Google Play Store:\r\nhttps://play.google.com/store/apps/details?id=com.mobnetic.coinguardian\r\n\r\n### Donate to Bitcoin Checker project:\r\n\r\n\u2665 __BTC__: 1KyLY5sT1Ffa6ctFPFpdL2bxhSAxNqfvMA\r\n\r\n\u2665 __DOGE__: D81kyZ49E132enb7ct7RcPGpjgsrN7bsd7\r\n\r\n\u2665 __LTC__: LZ3EiK42o5nbDW3cwiaKUptFQ9eBA3x1vw\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n## Table of Contents\r\n\r\n- [Introduction](#introduction)\r\n  - [Updating currency pairs on existing exchange:](#updating-currency-pairs-on-existing-exchange)\r\n    - [Adding new pair on Cryptsy?](#adding-new-pair-on-cryptsy)\r\n    - [Good practise:](#good-practise)\r\n    - [Some currencies are missing?](#some-currencies-are-missing)\r\n  - [Adding new exchange:](#adding-new-exchange)\r\n      - [Example:](#example)\r\n    - [1. New exchange configuration:](#1-new-exchange-configuration)\r\n    - [2. Providing currency pairs:](#2-providing-currency-pairs)\r\n    - [3. Providing API Url:](#3-providing-api-url)\r\n      - [3a. Providing other parameters in URL (advanced):](#3a-providing-other-parameters-in-url-advanced)\r\n    - [4. Parsing API response:](#4-parsing-api-response)\r\n      - [4a. Parsing non JSONObject responses (advanced):](#4a-parsing-non-jsonobject-responses-advanced)\r\n    - [5. Parsing error (not required):](#5-parsing-error-not-required)\r\n    - [6. Fetching currency pairs directly from exchange:](#6-fetching-currency-pairs-directly-from-exchange)\r\n    - [7. Enabling exchange:](#7-enabling-exchange)\r\n  - [Advanced things](#advanced-things)\r\n    - [Multiple requests per exchange:](#multiple-requests-per-exchange)\r\n    - [Multiple requests while fetching currency pairs](#multiple-requests-while-fetching-currency-pairs)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- To regenerate doctoc, run `doctoc --title \"## Table of Contents\" README.md` -->\r\n<!-- https://github.com/thlorenz/doctoc -->\r\n\r\n# Introduction\r\nTo start working, you should fork this repo. It basically contains two projects:\r\n* [DataModule](/dataModule): Library project that stores information about exchanges and currencies used in Bitcoin Checker. This is the project that you will work with.\r\n* [DataModuleTester](/dataModuleTester): Simple project that provides minimal interface in order to launch and test your changes - to see if they will work :)\r\n\r\nThe whole tutorial described below refers to the [DataModule](dataModule) project because only this project is meant to be edited by users. After making your changes, please create a pull request to the original repo.\r\n\r\n\r\n## Updating currency pairs on existing exchange:\r\n*__Note if particular exchange supports dynamic currency pairs syncing mechanism there is NO need to add pairs manually here.__ *\r\n\r\nTo update currency pairs on your favourite exchange, you have to find the corresponding exchange class file in the [com.mobnetic.coinguardian.model.market](dataModule/src/main/java/com/mobnetic/coinguardian/model/market) package.\r\nIn every exchange file there is a `CURRENCY_PAIRS` HashMap that contains a base currency (as a key) and a list of counter currencies. Every combination of base and counter currency represents one currency pair.\r\n\r\n```java\r\nCURRENCY_PAIRS.put(VirtualCurrency.LTC,  // Base currency\r\n  new String[]{\r\n    VirtualCurrency.BTC,             // Counter currency\r\n    Currency.USD,                    // Counter currency\r\n    Currency.RUR,                    // Counter currency\r\n    Currency.EUR                     // Counter currency\r\n  }\r\n);\r\n```\r\nThis example from [BTC-e](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/Btce.java) represents 4 pairs: `LTC/BTC`, `LTC/USD`, `LTC/RUR` and `LTC/EUR`.\r\n\r\n### Adding new pair on Cryptsy?\r\nThis is generally enough, but while adding a new currency pair on [Cryptsy](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/Cryptsy.java) you also need to provide a special pair ID. Please include it in a map called `CURRENCY_PAIRS_IDS`, as shown here:\r\n\r\n```java\r\n[...]\r\nCURRENCY_PAIRS_IDS.put(\"DOGE_BTC\", 132);\r\nCURRENCY_PAIRS_IDS.put(\"DOGE_LTC\", 135);\r\n[...]\r\n```\r\n\r\nThe simplest way to find the pair ID is to click or hover on that particular pair in the trading section on the Cryptsy website. The number at the end of the page url represents the ID of that particular pair: https://www.cryptsy.com/markets/view/132\r\n\r\n### Good practise:\r\nTry to keep alphabetical order of base currencies (or even with counter currencies) but sometimes it's also good to mirror the order from the exchange site.\r\n\r\nWhile adding new pairs, you should use currency names from these two classes:\r\n- [Currency](dataModule/src/main/java/com/mobnetic/coinguardian/model/currency/Currency.java) - where you can find fiat currencies\r\n- [VirtualCurrency](dataModule/src/main/java/com/mobnetic/coinguardian/model/currency/VirtualCurrency.java) - where all of the crypto/virtual currencies are stored\r\n\r\n### Some currencies are missing?\r\nYou want to add some currency pairs but one currency (or both) is missing in Currency or VirtualCurrency class?\r\nJust add them to the Currency or VirtualCurrency class. Please put all fiat/normal currencies in the Currency.java file and all crypto/virtual currencies in VirtualCurrency.java.\r\n\r\n\r\n## Adding new exchange:\r\n#### Example:\r\nPlease see the example of a class that represents a single exchange here - [MarketExample](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/example/MarketExample.java)\r\n\r\n### 1. New exchange configuration:\r\nTo add support for a new exchange, you have to provide some constants describing that particular exchange:\r\n* `NAME` - name of the exchange that will be displayed in the app.\r\n* `TTS_NAME` - name of the exchange that will be used in spoken announements. Sometimes it's just fine to put `NAME` here (see [Kraken](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/Kraken.java)), but sometimes it's better to provide a more spoken friendly version (like on [McxNOW](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/McxNOW.java) - \"MCX now\").\r\n* `URL` - this field stores the Url for the Ticker API. Most often it contains two parameters, but sometimes it has one (`%1$s` and `%2$s`). These parameters are replaced with currency names or the selected currency pair. Providing a URL is described in the next section.\r\n* `CURRENCY_PAIRS` - map of all currencies supported by this exchange - described later.\r\n\r\nThese constants (without `URL`) should be provided in the default constructor:\r\n\r\n```java\r\npublic MarketExample() {\r\n  super(NAME, TTS_NAME, CURRENCY_PAIRS);\r\n}\r\n```\r\n\r\n### 2. Providing currency pairs:\r\nIf given exchanges provides a mechanism to fetch currency pairs dynamically, there is no need to specify them manually then.   Please see [this section](# 6-fetching-currency-pairs-directly-from-exchange).\r\n\r\nOtherwise you have to specify which currency pairs are supported by your new exchange. Description for this is done above, in the [Updating currency pairs on existing exchange](https://github.com/mobnetic/BitcoinCheckerDataModule# updating-currency-pairs-on-existing-exchange) section.\r\n\r\n### 3. Providing API Url:\r\nThe API Url is provided by the getUrl method. The simplest implementation is to just return the URL field. Sometimes, the Url requires some additional parameters (like currency names) - then you have to provide them using ```String.format()``` method.\r\nSee examples below:\r\n\r\n##### Example without parameters:\r\n* API example: https://www.bitstamp.net/api/ticker/\r\n* URL field: https://www.bitstamp.net/api/ticker/\r\n\r\n```java\r\n@Override\r\npublic String getUrl(int requestId, CheckerInfo checkerInfo) {\r\n  return URL;\r\n}\r\n```\r\n\r\n##### Example with arguments - for given currency pair:\r\n* API example: https://anxpro.com/main/stats?ccyPair=BTCUSD\r\n* URL field: https://anxpro.com/main/stats?ccyPair=%1$s%2$s\r\n\r\n```java\r\n@Override\r\npublic String getUrl(int requestId, CheckerInfo checkerInfo) {\r\n  return String.format(URL, checkerInfo.getCurrencyBase(), checkerInfo.getCurrencyCounter());\r\n}\r\n```\r\n\r\n\r\nNote that currency names are always in uppercase; however, some APIs requires them to be in lowercase.\r\n\r\n##### Example with lowercase currency parameters:\r\n* API example: https://bter.com/api/1/ticker/btc_cny\r\n* URL field: https://bter.com/api/1/ticker/%1$s_%2$s\r\n\r\n```java\r\n@Override\r\npublic String getUrl(int requestId, CheckerInfo checkerInfo) {\r\n  return String.format(URL, checkerInfo.getCurrencyBaseLowerCase(), checkerInfo.getCurrencyCounterLowerCase());\r\n}\r\n```\r\n\r\n#### 3a. Providing other parameters in URL (advanced):\r\nSometimes there is a need to include some kind of pair ID instead of just currency names. Please see [Cryptsy](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/Cryptsy.java) as an example. There is a separate `CURRENCY_PAIRS_IDS` map that holds pair ids:\r\n\r\n```java\r\n[...]\r\nCURRENCY_PAIRS_IDS.put(\"DMD_BTC\", 72);\r\nCURRENCY_PAIRS_IDS.put(\"DOGE_BTC\", 132);\r\nCURRENCY_PAIRS_IDS.put(\"DOGE_LTC\", 135);\r\nCURRENCY_PAIRS_IDS.put(\"DVC_BTC\", 40);\r\n[...]\r\n```\r\n\r\nWhile providing the URL, we need to obtain the proper ID that is associated with this pair:\r\n\r\n##### Example for DOGE/BTC (id=132) on Cryptsy:\r\n* API example: http://pubapi.cryptsy.com/api.php?method=singlemarketdata&marketid=132\r\n* URL field: http://pubapi.cryptsy.com/api.php?method=singlemarketdata&marketid=%1$s\r\n\r\n```java\r\n@Override\r\npublic String getUrl(int requestId, CheckerInfo checkerInfo) {\r\n  final String pairString = String.format(\"%1$s_%2$s\", checkerInfo.getCurrencyBase(), checkerInfo.getCurrencyCounter());\r\n  if(CURRENCY_PAIRS_IDS.containsKey(pairString))\r\n    return String.format(URL, String.valueOf(CURRENCY_PAIRS_IDS.get(pairString)));\r\n  return URL;\r\n}\r\n```\r\n\r\n### 4. Parsing API response:\r\nWhile parsing the response from the exchange you have to fill the fieds of [Ticker](dataModule/src/main/java/com/mobnetic/coinguardian/model/Ticker.java) object.\r\nIf the API response is just in plain JSON object, you can parse it in the parseTickerFromJsonObject method:\r\n\r\n```java\r\n@Override\r\nprotected void parseTickerFromJsonObject(int requestId, JSONObject jsonObject, Ticker ticker, CheckerInfo checkerRecord) throws Exception {\r\n  ticker.bid = jsonObject.getDouble(\"bid\");\r\n  ticker.ask = jsonObject.getDouble(\"ask\");\r\n  ticker.vol = jsonObject.getDouble(\"volume\");\r\n  ticker.high = jsonObject.getDouble(\"high\");\r\n  ticker.low = jsonObject.getDouble(\"low\");\r\n  ticker.last = jsonObject.getDouble(\"last\");\r\n  ticker.timestamp = jsonObject.getLong(\"timestamp\");\r\n}\r\n```\r\n\r\n__IMPORTANT:__ The ticker.last field is mandatory; the rest of the fields are optional.\r\n__NOTE:__ Parsing the `timestamp` field (in millis) is not required. If omitted, Bitcoin Checker will fill it with `now` date. If you want to parse this information, please note that some exchanges provide time in different formats (like seconds or nanos) so you have to multiply or divide it to get the time in millis format. You can use `TimeUtils.NANOS_IN_MILLIS` or `TimeUtils.MILLIS_IN_SECOND` constants from [TimeUtils](dataModule/src/main/java/com/mobnetic/coinguardian/util/TimeUtils.java) for that.\r\n\r\n#### 4a. Parsing non JSONObject responses (advanced):\r\nSometimes responses are more complicated than plain JSON, then you should use the `parseTicker` method. The default implementation try to parse received response as a `JSONObject`, but you can parse also other formats by overriding this method:\r\n\r\n```java\r\nprotected void parseTicker(int requestId, String responseString, Ticker ticker, CheckerInfo checkerInfo) throws Exception {\r\n  parseTickerFromJsonObject(requestId, new JSONObject(responseString), ticker, checkerInfo);\r\n}\r\n```\r\n\r\nHere you can find examples of usage:\r\n* [Huobi](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/Huobi.java): \"almost\" JSON object response, there is a need to trim some characters at the begining and at the end of the response\r\n* [MintPal](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/MintPal.java): JSON array response (instead of JSON object)\r\n* [McxNOW](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/McxNOW.java): XML based response\r\n\r\n### 5. Parsing error (not required):\r\nSometimes an exchange is down but with some error message in their API (See [Crypto-Trade](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/CryptoTrade.java) as an example). You can also handle this situation and display an error message directly from the exchange to the user. There are two methods related with it and they are designed in a similar way to parsing a normal response:\r\n\r\n```java\r\nprotected String parseErrorFromJsonObject(int requestId, JSONObject jsonObject, CheckerInfo checkerInfo);\r\n```\r\nor if JSONObject is not suitable, you can override following method:\r\n```java\r\nprotected String parseError(int requestId, String responseString, CheckerInfo checkerInfo);\r\n```\r\n\r\n### 6. Fetching currency pairs directly from exchange:\r\nIf there is any API (or other way) to obtain currency pairs directly from exchange (without need to update them manually) you should implement currency pairs fetching functionality instead of providing a static set of currency pairs.\r\nSee example on  [Basebit](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/Basebit.java).\r\nBecause there are no static currency pairs defined - you should pass a `null` as a last argument in the constructor and do NOT initialize `CURRENCY_PAIRS` at all. You need to provide the url to fetch currency pairs instead:\r\n\r\n```java\r\nprivate final static String URL_CURRENCY_PAIRS = \"http://pubapi.cryptsy.com/api.php?method=marketdatav2\";\r\n\r\npublic SampleExchange() {\r\n  super(NAME, TTS_NAME, null);  // <- null intead of CURRENCY_PAIRS map\r\n}\r\n\r\n[...]\r\n\r\n@Override\r\npublic String getCurrencyPairsUrl(int requestId) {\r\n  return URL_CURRENCY_PAIRS;\r\n}\r\n```\r\nThen you need to do parsing in:\r\n\r\n```java\r\nprotected void parseCurrencyPairsFromJsonObject(int requestId, JSONObject jsonObject, List<CurrencyPairInfo> pairs)\r\nor\r\nprotected void parseCurrencyPairs(int requestId, String responseString, List<CurrencyPairInfo> pairs)\r\n```\r\n\r\nWhile parsing currency pairs you need to create [CurrencyPairInfo](dataModule/src/main/java/com/mobnetic/coinguardian/model/CurrencyPairInfo.java) and add it to `List<CurrencyPairInfo> pairs`. The last argument `pairId` is a unique pair id used on some exchanges. You can just pass `null` if there is no such thing on given exchange.\r\n\r\nYou can also use multiple requests to fetch currency pairs from exchange - it is described in section [Multiple requests while fetching currency pairs](# multiple-requests-while-fetching-currency-pairs).\r\n\r\n### 7. Enabling exchange:\r\nTo enable a newly created exchange, you should add the corresponding line at the bottom of `MarketsConfig` file:\r\n\r\n```java\r\nstatic {\r\n  [...]\r\n  addMarket(new MyNewExchangeClass());\r\n}\r\n```\r\n\r\n## Advanced things\r\n### Multiple requests per exchange:\r\nSome exchanges do not provide a nice ticker api with the all important information (bid, ask, vol, high, low, last), so there is a need to perform a few requests (for example 2) to acquire as much information as possible.\r\nThese requests will be performed in a sequense and a new price notification will appear when all of these requests are finished.\r\nSee the [Poloniex](dataModule/src/main/java/com/mobnetic/coinguardian/model/market/Poloniex.java) exchange as a good example. In order to perform 2 requests you have to override `getNumOfRequests` method:\r\n\r\n```java\r\n@Override\r\npublic int getNumOfRequests(CheckerInfo checkerRecord) {\r\n  return 2;\r\n}\r\n```\r\n\r\nThen make use of requestId variable passed to `getUrl` and `parseTickerFromJsonObject` methods.\r\n`requestId` variable is incremented from `0` to `numOfRequests-1` for every new request made.\r\nFrom the first request, we are able to obtain only the `last` price. We want to obtain also the `bid` and `ask` values, so we do another request for the orders list:\r\n\r\n```java\r\n@Override\r\npublic String getUrl(int requestId, CheckerInfo checkerInfo) {\r\n  if(requestId==0)\r\n    return URL;\r\n  else\r\n    return String.format(URL_ORDERS, checkerInfo.getCurrencyCounter(), checkerInfo.getCurrencyBase()); // Reversed currencies\r\n}\r\n\r\n@Override\r\nprotected void parseTickerFromJsonObject(int requestId, JSONObject jsonObject, Ticker ticker, CheckerInfo checkerInfo) throws Exception {\r\n  if(requestId==0) {\r\n    ticker.last = jsonObject.getDouble(checkerInfo.getCurrencyCounter()+\"_\"+checkerInfo.getCurrencyBase());  // Reversed currencies\r\n  } else {\r\n    ticker.bid = getFirstPriceFromOrder(jsonObject, \"bids\");\r\n    ticker.ask = getFirstPriceFromOrder(jsonObject, \"asks\");\r\n  }\r\n}\r\n```\r\n\r\n### Multiple requests while fetching currency pairs\r\nYou can also use multiple requests support for fetching currency pairs from exchange. The implementation is almost identical - just override following method:\r\n\r\n```java\r\n@Override\r\npublic int getCurrencyPairsNumOfRequests() {\r\n  return 2;\r\n}\r\n```\r\nThen use the `requestId` argument in the same way as in previous section.\r\n"
 },
 {
  "repo": "bitcoin-abe/bitcoin-abe",
  "language": "Python",
  "readme_contents": "Apache 2 FastCGI setup on Debian/Ubuntu\r\n=======================================\r\n\r\nThis document describes how to install and run Abe as a FastCGI\r\nprocess under Apache 2 on a Debian GNU/Linux or Ubuntu system.\r\nAdvantages of FastCGI over the built-in HTTP server include:\r\n\r\n    * lets browsers cache static content for better performance;\r\n    * can integrate with an existing website, no :2750 in URLs.\r\n\r\nThese instructions assume root privileges.  To begin a privileged\r\nsession in a terminal window, issue \"sudo -i\" (Ubuntu) or \"su -\"\r\n(Debian).\r\n\r\nInstall required packages:\r\n\r\n    apt-get install apache2 libapache2-mod-fcgid python-flup\r\n    apt-get install python-crypto\r\n\r\nChange directory to the Abe distribution and install Abe:\r\n\r\n    cd bitcoin-abe\r\n    python setup.py install\r\n\r\nReplace YOUR.ABE.DOMAIN below with a domain that resolves to this\r\nhost.  The site will be http://YOUR.ABE.DOMAIN/.  To embed Abe in an\r\nexisting site (e.g., http://YOUR.DOMAIN/abe/) prepend a path (e.g.,\r\n\"/abe\") in the Alias directives, place them in your existing\r\nsites-available file instead of a new VirtualHost, and merge or create\r\nyour site's /robots.txt with adjusted paths from Abe/htdocs/robots.txt.\r\n\r\nReplace HTDOCS/DIRECTORY below with the directory containing abe.css;\r\nthe Apache process must have permission to read it.  The following\r\ncommand displays the correct value:\r\n\r\n    python -m Abe.abe --print-htdocs-directory\r\n\r\nOptionally, replace \"/usr/lib/cgi-bin\" below with another directory;\r\nApache must have the directory configured with Options +ExecCGI.\r\n\r\nCreate file /etc/apache2/sites-available/abe with these contents:\r\n\r\n    <VirtualHost *:80>\r\n        ServerName YOUR.ABE.DOMAIN\r\n        Alias /static/ HTDOCS/DIRECTORY/\r\n        Alias /robots.txt HTDOCS/DIRECTORY/robots.txt\r\n        Alias /favicon.ico HTDOCS/DIRECTORY/favicon.ico\r\n        Alias / /usr/lib/cgi-bin/abe.fcgi/\r\n\r\n        # Raise this if you get server errors mentioning \"mod_fcgid:\r\n        # read data timeout in 40 seconds\"\r\n        #FcgidIOTimeout 40\r\n\r\n        # Uncomment to log Abe requests.\r\n        #ErrorLog /var/log/abe_error.log\r\n        #LogLevel info\r\n        #CustomLog /var/log/abe_access.log combined\r\n    </VirtualHost>\r\n\r\nEnable the new configuration:\r\n\r\n    a2ensite abe\r\n    service apache2 reload\r\n\r\nReplace USER with your Unix user name and create file\r\n/usr/lib/cgi-bin/abe.fcgi with these contents:\r\n\r\n    #! /usr/bin/python\r\n    import subprocess, sys, os\r\n    command=[\"sudo\", \"-u\", \"USER\", \"/home/USER/cgi-bin/abe\", str(os.getpid())]\r\n    subprocess.Popen(command, stdin=sys.stdin).wait()\r\n\r\nMake the file executable:\r\n\r\n    chmod +x /usr/lib/cgi-bin/abe.fcgi\r\n\r\nReplace USER with your Unix user name and use visudo(1) to append\r\nthe following to /etc/sudoers:\r\n\r\n    # This allows the Apache account (www-data) to run Abe as USER.\r\n    www-data ALL=(USER) NOPASSWD: /home/USER/cgi-bin/abe\r\n\r\nPut configuration such as database connection parameters in\r\n/home/USER/abe.conf or change the location below.  See the sample\r\nabe.conf in the Abe distribution for file format.  IMPORTANT: Make\r\nsure the configuration does NOT contain a \"host\" or \"port\" option.\r\n\r\nCreate file /home/USER/cgi-bin/abe with these contents:\r\n\r\n    #! /bin/sh\r\n    PYTHONUNBUFFERED=1 exec python -m Abe.abe \\\r\n    --config /home/USER/abe.conf --static-path static/ --watch-pid=\"$1\"\r\n\r\nMake the file executable:\r\n\r\n    chmod +x /home/USER/cgi-bin/abe\r\n\r\nAbe should be reachable at http://YOUR.ABE.DOMAIN/.  Exit the\r\nprivileged session:\r\n\r\n    exit\r\n"
 },
 {
  "repo": "sipa/bitcoin-seeder",
  "language": "C++",
  "readme_contents": "bitcoin-seeder\n==============\n\nBitcoin-seeder is a crawler for the Bitcoin network, which exposes a list\nof reliable nodes via a built-in DNS server.\n\nFeatures:\n* regularly revisits known nodes to check their availability\n* bans nodes after enough failures, or bad behaviour\n* accepts nodes down to v0.3.19 to request new IP addresses from,\n  but only reports good post-v0.3.24 nodes.\n* keeps statistics over (exponential) windows of 2 hours, 8 hours,\n  1 day and 1 week, to base decisions on.\n* very low memory (a few tens of megabytes) and cpu requirements.\n* crawlers run in parallel (by default 24 threads simultaneously).\n\nREQUIREMENTS\n------------\n\n$ sudo apt-get install build-essential libboost-all-dev libssl-dev\n\nUSAGE\n-----\n\nAssuming you want to run a dns seed on dnsseed.example.com, you will\nneed an authorative NS record in example.com's domain record, pointing\nto for example vps.example.com:\n\n$ dig -t NS dnsseed.example.com\n\n;; ANSWER SECTION\ndnsseed.example.com.   86400    IN      NS     vps.example.com.\n\nOn the system vps.example.com, you can now run dnsseed:\n\n./dnsseed -h dnsseed.example.com -n vps.example.com\n\nIf you want the DNS server to report SOA records, please provide an\ne-mail address (with the @ part replaced by .) using -m.\n\nCOMPILING\n---------\n\nCompiling will require boost and ssl.  On debian systems, these are provided\nby `libboost-dev` and `libssl-dev` respectively.\n\n$ make\n\nThis will produce the `dnsseed` binary.\n\nTESTING\n-------\n\nIt's sometimes useful to test `dnsseed` locally to ensure it's giving good\noutput (either as part of development or sanity checking). You can inspect\n`dnsseed.dump` to inspect all nodes being tracked for crawling, or you can\nissue DNS requests directly. Example:\n\n$ dig @:: -p 15353 dnsseed.example.com\n       ^       ^    ^\n       |       |    |__ Should match the host (-h) argument supplied to dnsseed\n       |       |\n       |       |_______ Port number (example uses the user space port; see below)\n       |\n       |_______________ Explicitly call the DNS server on localhost\n\n\nRUNNING AS NON-ROOT\n-------------------\n\nTypically, you'll need root privileges to listen to port 53 (name service).\n\nOne solution is using an iptables rule (Linux only) to redirect it to\na non-privileged port:\n\n$ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-port 15353\n\nIf properly configured, this will allow you to run dnsseed in userspace, using\nthe -p 15353 option.\n\nAnother solution is allowing a binary to bind to ports < 1024 with setcap (IPv6 access-safe)\n\n$ setcap 'cap_net_bind_service=+ep' /path/to/dnsseed\n"
 },
 {
  "repo": "imfly/bitcoin-on-nodejs",
  "language": "JavaScript",
  "readme_contents": "# \u300aNode.js\u533a\u5757\u94fe\u5f00\u53d1\u300b\n\n**\u3010\u6ce8\u3011\u672c\u4e66\u505c\u66f4\u4e86\u5f88\u4e45\uff0c\u4f46\u662f\u4ecd\u7136\u83b7\u5f97\u4f17\u591a\u5c0f\u4f19\u4f34\u7684\u6301\u7eed\u5173\u6ce8\uff0c\u5e94\u5927\u5bb6\u8981\u6c42\uff0c\u66f4\u65b0\u4e86\u5176\u4e2d\u7684\u94fe\u63a5\uff0c\u540e\u7eed\u4e5f\u4f1a\u6162\u6162\u5206\u4eab\u4ebf\u4e66\u7684\u65b0\u53d1\u5c55\uff0c\u5e76\u5c06\u6280\u672f\u548c\u601d\u8003\u5168\u90e8\u5206\u4eab\u51fa\u6765\uff01**\n\n\u4ea4\u6d41\u6b22\u8fce\u52a0\u6211\u5fae\u4fe1\uff08\u8bf7\u6ce8\u660e `\u6211\u662fxx\uff0c\u6765\u81eagithub\uff0c\u7533\u8bf7\u52a0\u5165\u4ff1\u4e50\u90e8`\uff0c\u8bf7\u52a1\u5fc5\u544a\u77e5\u5b9e\u540d\uff0c\u4e0d\u52a0\u65e0\u540d\u65e0\u59d3\u964c\u751f\u4eba\uff0c\u89c1\u8c05\uff09\uff0c\u62c9\u4f60\u8fdb\u4e2d\u56fd\u533a\u5757\u94fe\u4ff1\u4e50\u90e8\u7fa4\uff1a\n\n<img src=\"./styles/images/third/club.png\" alt=\"\u4e2d\u56fd\u533a\u5757\u94fe\u4ff1\u4e50\u90e8\" width=\"50%\" height=\"50%\">\n\n## \u5173\u4e8e\uff08About\uff09\n\n\u4ebf\u4e66\uff0c\u8ba9\u6709\u77e5\u8bc6\u7684\u4eba\u5bcc\u8d77\u6765\u3002\u6211\u4eec\u7684\u4ea7\u54c1\uff0c\u5c06\u5168\u90e8\u57fa\u4e8eP2P\u7f51\u7edc\u8fdb\u884c\u5f00\u53d1\u8bbe\u8ba1\uff0c\u9762\u5411\u672a\u6765\u8fdb\u884c\u6280\u672f\u7814\u53d1\u3002\n\n\u672c\u4e66\u53ef\u4ee5\u4f5c\u4e3a\u533a\u5757\u94fe\u5f00\u53d1\u7684\u5165\u95e8\u4e66\u7c4d\uff08\u6b63\u5f0f\u51fa\u7248\u300aNode.js\u533a\u5757\u94fe\u5f00\u53d1\u300b\uff09\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4ebf\u4e66\u7684\u5b98\u65b9\u5f00\u53d1\u6587\u6863\u3002\n\n**\u65e0\u8bba\u60a8\u662f\u7814\u7a76\u533a\u5757\u94fe\uff0c\u6216\u8005\u5b66\u4e60Node.js\u524d\u540e\u7aef\u5f00\u53d1\u6280\u672f\uff0c\u672c\u4e66\u90fd\u503c\u5f97\u53c2\u8003\u3002**\n\n\u4ebf\u4e66\u7684\u76ee\u6807\u662f\u6253\u9020\u4eba\u4eba\u53ef\u7528\u7684\u53bb\u4e2d\u5fc3\u5316\u8f6f\u4ef6\uff0c\u4fc3\u8fdb\u4eba\u7c7b\u77e5\u8bc6\u5206\u4eab\u3002\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u4ea7\u54c1\u4e0d\u540c\uff0c\u6211\u4eec\u4ee5\u63d0\u4f9b\u843d\u5730\u53ef\u7528\u7684\u8f6f\u4ef6\u4e3a\u6838\u5fc3\uff0c\u529b\u4e89\u6210\u4e3a\u4eba\u7c7b\u7b2c\u4e00\u4e2a\u201c\u96f6\u95e8\u69db\u201d\u7684\u533a\u5757\u94fe\u4ea7\u54c1\u3002\u66f4\u591a\u8be6\u60c5\uff0c\u8bf7\u770b[\u5173\u4e8e\u4ebf\u4e66](./5-%E9%99%84%E5%BD%95/6-%E5%85%B3%E4%BA%8E%E4%BA%BF%E4%B9%A6.md)\n\n\u672c\u4e66\u5199\u4f5c\uff0c\u4e5f\u662f\u4ebf\u4e66\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u4ece\u5199\u5230\u53d1\u5e03\uff0c\u7b80\u5355\u3001\u5feb\u6377\u3002\u6587\u7ae0\u6682\u65f6\u5728[github](https://github.com/imfly/bitcoin-on-nodejs)\u4e0a\u514d\u8d39\u53d1\u5e03\uff0c\u6c38\u4e45\u514d\u8d39\u8bbf\u95ee\u5730\u5740: <http://bitcoin-on-nodejs.ebookchain.org>\n\n**\u6ce8**: \u672c\u4e66\u6c38\u4e45`\u514d\u8d39`\u8bbf\u95ee\u5730\u5740: <http://bitcoin-on-nodejs.ebookchain.org> \u3002\n\n**\u4f46\u662f\u8be5\u7248\u672c\u4e0e\u300aNode.js\u533a\u5757\u94fe\u5f00\u53d1\u300b\u5e76\u4e0d\u540c\u6b65\uff0c\u4fdd\u6301\u4e86\u7f16\u7a0b\u51fa\u7248\u4e4b\u524d\u7684\u539f\u59cb\u72b6\u6001\u3002\u56e0\u4e3a\u51fa\u7248\u793e\u4e09\u5ba1\u4e09\u6821\uff0c\u5386\u65f6\u6570\u6708\uff0c\u4fee\u6539\u548c\u8c03\u6574\u592a\u591a\uff0c\u4e3a\u4e86\u6c9f\u901a\u65b9\u4fbf\uff0c\u90fd\u662fword\u683c\u5f0f\uff0c\u540c\u6b65\u9700\u8981\u8017\u8d39\u592a\u591a\u65f6\u95f4\u3002\u53e6\u5916\uff0c\u4fdd\u6301\u539f\u8c8c\uff0c\u8ba9\u8bfb\u8005\u6709\u673a\u4f1a\u5bf9\u6bd4\u4e86\u89e3\uff0c\u4efb\u4f55\u4e1c\u897f\u90fd\u4e0d\u662f\u7b80\u5355\u4e3a\u4e4b\u3002**\n\n\u4ebf\u4e66\u6280\u672f\u5df2\u7ecf\u5168\u90e8\u7528\u5728\u65b0\u4ea7\u54c1\uff0c\u8bf7\u5173\u6ce8\uff1a<https://datm.link>\n\n## \u65e5\u5fd7\uff08Log\uff09\n\n- [x] 2021-12-06 \u4fee\u6539\u5347\u7ea7\u4fe1\u606f\uff0c\u5c06\u65e7\u7684\u94fe\u63a5\u8fdb\u884c\u4fee\u6b63\uff0c\u65b9\u4fbf\u5927\u5bb6\u53c2\u9605\n- [x] 2016-10-15 \u6536\u5f55\u5df4\u6bd4\u7279\u521b\u59cb\u4eba\u517cCEO @\u957f\u4fa0 \u7684\u8350\u5e8f\u3002\n- [x] 2016-10-14 \u6574\u4f53\u6821\u5bf9\u4ea4\u7a3f\uff0c\u4ea4\u4ed8\u5370\u5237\n- [x] 2016-10-12 \u5b8c\u6210\u7b2c30\u7bc7: \u5b8c\u6210\u81f4\u8c22\n- [x] 2016-10-10 \u5b8c\u6210\u7b2c29\u7bc7: \u5b8c\u6210\u540e\u8bb0\n- [x] 2016-10-08 \u5b8c\u6210\u7b2c28\u7bc7: \u751f\u4ea7\u73af\u5883\u4e0b\u7684pm2\u90e8\u7f72\uff0c\u8865\u5145\u90e8\u5206\u540d\u8bcd\u89e3\u91ca\n- [x] 2016-10-06 \u5b8c\u6210\u7b2c27\u7bc7: \u6d4b\u8bd5\n- [x] 2016-09-21 \u5b8c\u6210\u7b2c26\u7bc7: \u533a\u5757\u94fe\u67b6\u6784\u8bbe\u8ba1\u7b80\u4ecb\n- [x] 2016-09-14 \u53d1\u5e03\u7b2c25\u7bc7: \u5f00\u53d1\u901a\u7528\u7684HTML\u7ec4\u4ef6\n- [x] 2016-09-02 \u53d1\u5e03\u7b2c24\u7bc7: \u8f7b\u677e\u4eceJs\u6587\u4ef6\u751f\u6210UML\u7c7b\u56fe\n- [x] 2016-08-18 \u53d1\u5e03\u7b2c23\u7bc7: \u5b66\u70b9\u51fd\u6570\u5f0f\u7f16\u7a0b\n- [x] 2016-08-10 \u53d1\u5e03\u7b2c22\u7bc7: DPoS\u673a\u5236\n- [x] 2016-07-28 \u53d1\u5e03\u7b2c21\u7bc7: \u533a\u5757\u94fe\n- [x] 2016-07-14 \u53d1\u5e03\u7b2c20\u7bc7: \u81ea\u5e8f\n- [x] 2016-07-08 \u53d1\u5e03\u7b2c19\u7bc7: \u4ea4\u6613\n- [x] 2016-07-02 \u53d1\u5e03\u7b2c18\u7bc7: \u5173\u4e8e\u65f6\u95f4\u6233\u53ca\u76f8\u5173\u95ee\u9898\uff08\u4f18\u5316\u8865\u5145\uff09\n- [x] 2016-06-27 \u53d1\u5e03\u7b2c17\u7bc7: \u7b7e\u540d\u548c\u591a\u91cd\u7b7e\u540d\n- [x] 2016-06-23 \u53d1\u5e03\u7b2c16\u7bc7: \u5730\u5740\n- [x] 2016-06-06 \u53d1\u5e03\u7b2c15\u7bc7: \u5171\u8bc6\u673a\u5236\uff0c\u53ef\u7f16\u7a0b\u7684\u5229\u76ca\u8f6c\u79fb\u89c4\u5219\n- [x] 2016-05-29 \u53d1\u5e03\u7b2c14\u7bc7: \u5229\u76ca\uff0c\u9b54\u9b3c\u4e0e\u5929\u4f7f\u7684\u5171\u540c\u76ee\u6807\n- [x] 2016-05-23 \u5b8c\u6210\u7b2c13\u7bc7: \u52a0\u5bc6\u8d27\u5e01\u5c31\u662f\u8d27\u5e01\n- [x] 2016-04-28 `\u4e66\u94fe`\u66f4\u540d\u4e3a`\u4ebf\u4e66`\uff0c\u64b0\u5199\u7b2c13\u7bc7\n- [x] 2016-04-17 \u53d1\u5e03\u7b2c12\u7bc7\uff1aEmber\u6df1\u201c\u5751\u201d\u6d45\u51fa\n- [x] 2016-03-26 \u53d1\u5e03\u7b2c11\u7bc7\uff1a\u4e00\u5f20\u56fe\u5b66\u4f1a\u4f7f\u7528Async\u7ec4\u4ef6\u8fdb\u884c\u5f02\u6b65\u6d41\u7a0b\u63a7\u5236\n- [x] 2016-03-17 \u53d1\u5e03\u7b2c10\u7bc7\n- [x] 2016-03-10 \u53d1\u5e03\u7b2c9\u7bc7\n- [x] \u5b8c\u62101-8\u7bc7\n\n## \u4f7f\u7528\uff08Usage)\n\n\u76ee\u5f55\u7531\u547d\u4ee4\u884c\u5de5\u5177 [gitbook-summary](https://github.com/imfly/gitbook-summary) \u81ea\u52a8\u751f\u6210\u3002\u81ea\u7531\u5199\u4f5c\u3001\u53d1\u5e03\uff0c\u642d\u5efa\u81ea\u51fa\u7248\u5e73\u53f0\u7684\u65b9\u6cd5\uff0c\u8bf7[\u70b9\u51fb\u8fd9\u91cc](https://github.com/imfly/how-to-create-self-publishing-platform)\n\n\u7b80\u8981\u4ecb\u7ecd\u5982\u4e0b\uff1a\n\n(1)\u514b\u9686\u6e90\u6587\n\n```\n$ git clone https://github.com/imfly/bitcoin-on-nodejs.git\n```\n\n(2)\u5b89\u88c5gitbook\n\n```\n$ npm install -g gitbook-cli\n```\n\n(3)\u5b89\u88c5\u4f9d\u8d56\u5305\n\n```\ncd bitcoin-on-nodejs\nnpm install\ngitbook install\n```\n\n(4)\u5199\u4f5c\u6784\u5efa\n\n\u5199\u4f5c\uff0c\u5e76\u5f00\u542f\u670d\u52a1\uff08\u6784\u5efa\uff09\n\n```\n$ gitbook serve\n```\n\n\u901a\u8fc7`http://localhost:4000`\u5b9e\u65f6\u6d4f\u89c8\n\n(5)\u751f\u6210\u76ee\u5f55\n\n\u53ea\u8981\u4fee\u6539\u4e86\u6587\u7ae0\u6807\u9898\u548c\u6587\u4ef6\u5939\uff0c\u5c31\u5e94\u8be5\u91cd\u65b0\u751f\u6210\u76ee\u5f55\u6587\u4ef6\n\n```\n$ npm run summary\n```\n\n(6)\u4e00\u952e\u53d1\u5e03\n\n```\n$ npm run deploy\n```\n\n\u4ee5\u540e\uff0c\u53ea\u89814-6\u7684\u8fc7\u7a0b\u5c31\u662f\u4e86\u3002\n\n## \u53cd\u9988\uff08Feedback\uff09\n\n\u968f\u65f6\u544a\u8bc9\u6211\u60a8\u7684\u9605\u8bfb\u4f53\u9a8c\u548c\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5fork\u4fee\u6539\uff0c\u63d0\u4ea4PR\u3002\n\n## \u8d21\u732e\u8005\uff08Contributors\uff09\n\n@imfly @Tailor @\u706b\u9f0e @\u73cd\u60dc @\u4e00 @Mojie @cyio @zbinlin\n\n## \u534f\u8bae\n\n\u539f\u521b\u4f5c\u54c1\u8bb8\u53ef [\u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u7981\u6b62\u6f14\u7ece 3.0 \u672a\u672c\u5730\u5316\u7248\u672c (CC BY-NC-ND 3.0)](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)"
 },
 {
  "repo": "rust-bitcoin/rust-bitcoin",
  "language": "Rust",
  "readme_contents": "<div align=\"center\">\n  <h1>Rust Bitcoin</h1>\n\n  <img alt=\"Rust Bitcoin logo by Hunter Trujillo, see license and source files under /logo\" src=\"./logo/rust-bitcoin.png\" width=\"300\" />\n\n  <p>Library with support for de/serialization, parsing and executing on data-structures\n    and network messages related to Bitcoin.\n  </p>\n\n  <p>\n    <a href=\"https://crates.io/crates/bitcoin\"><img alt=\"Crate Info\" src=\"https://img.shields.io/crates/v/bitcoin.svg\"/></a>\n    <a href=\"https://github.com/rust-bitcoin/rust-bitcoin/blob/master/LICENSE\"><img alt=\"CC0 1.0 Universal Licensed\" src=\"https://img.shields.io/badge/license-CC0--1.0-blue.svg\"/></a>\n    <a href=\"https://github.com/rust-bitcoin/rust-bitcoin/actions?query=workflow%3AContinuous%20integration\"><img alt=\"CI Status\" src=\"https://github.com/rust-bitcoin/rust-bitcoin/workflows/Continuous%20integration/badge.svg\"></a>\n    <a href=\"https://docs.rs/bitcoin\"><img alt=\"API Docs\" src=\"https://img.shields.io/badge/docs.rs-bitcoin-green\"/></a>\n    <a href=\"https://blog.rust-lang.org/2020/02/27/Rust-1.41.1.html\"><img alt=\"Rustc Version 1.41.1+\" src=\"https://img.shields.io/badge/rustc-1.41.1%2B-lightgrey.svg\"/></a>\n    <a href=\"https://gnusha.org/bitcoin-rust/\"><img alt=\"Chat on IRC\" src=\"https://img.shields.io/badge/irc-%23bitcoin--rust%20on%20libera.chat-blue\"></a>\n    <a href=\"https://github.com/model-checking/kani\"><imp alt=\"kani\" src=\"https://github.com/rust-bitcoin/rust-bitcoin/actions/workflows/kani.yaml/badge.svg\"></a>\n    <img alt=\"Lines of code\" src=\"https://img.shields.io/tokei/lines/github/rust-bitcoin/rust-bitcoin\">\n  </p>\n</div>\n\n[Documentation](https://docs.rs/bitcoin/)\n\nSupports (or should support)\n\n* De/serialization of Bitcoin protocol network messages\n* De/serialization of blocks and transactions\n* Script de/serialization\n* Private keys and address creation, de/serialization and validation (including full BIP32 support)\n* PSBT v0 de/serialization and all but the Input Finalizer role. Use [rust-miniscript](https://docs.rs/miniscript/latest/miniscript/psbt/index.html) to finalize.\n\nFor JSONRPC interaction with Bitcoin Core, it is recommended to use\n[rust-bitcoincore-rpc](https://github.com/rust-bitcoin/rust-bitcoincore-rpc).\n\nIt is recommended to always use [cargo-crev](https://github.com/crev-dev/cargo-crev)\nto verify the trustworthiness of each of your dependencies, including this one.\n\n## Known limitations\n\n### Consensus\n\nThis library **must not** be used for consensus code (i.e. fully validating\nblockchain data). It technically supports doing this, but doing so is very\nill-advised because there are many deviations, known and unknown, between\nthis library and the Bitcoin Core reference implementation. In a consensus\nbased cryptocurrency such as Bitcoin it is critical that all parties are\nusing the same rules to validate data, and this library is simply unable\nto implement the same rules as Core.\n\nGiven the complexity of both C++ and Rust, it is unlikely that this will\never be fixed, and there are no plans to do so. Of course, patches to\nfix specific consensus incompatibilities are welcome.\n\n### Support for 16-bit pointer sizes\n\n16-bit pointer sizes are not supported and we can't promise they will be.\nIf you care about them please let us know, so we can know how large the interest\nis and possibly decide to support them.\n\n## Documentation\n\nCurrently can be found on [docs.rs/bitcoin](https://docs.rs/bitcoin/).\nPatches to add usage examples and to expand on existing docs would be extremely\nappreciated.\n\n## Contributing\n\nContributions are generally welcome. If you intend to make larger changes please\ndiscuss them in an issue before PRing them to avoid duplicate work and\narchitectural mismatches. If you have any questions or ideas you want to discuss\nplease join us in\n[#bitcoin-rust](https://web.libera.chat/?channel=#bitcoin-rust) on\n[libera.chat](https://libera.chat).\n\nFor more information please see `./CONTRIBUTING.md`.\n\n## Minimum Supported Rust Version (MSRV)\n\nThis library should always compile with any combination of features (minus\n`no-std`) on **Rust 1.41.1** or **Rust 1.47** with `no-std`.\n\nTo build with the MSRV you will need to pin some dependencies, currently this is\nonly `syn`, and can be achieved using `cargo update -p syn --precise 1.0.107`.\n\n## Installing Rust\n\nRust can be installed using your package manager of choice or\n[rustup.rs](https://rustup.rs). The former way is considered more secure since\nit typically doesn't involve trust in the CA system. But you should be aware\nthat the version of Rust shipped by your distribution might be out of date.\nGenerally this isn't a problem for `rust-bitcoin` since we support much older\nversions than the current stable one (see MSRV section).\n\n## Building\n\nThe library can be built and tested using [`cargo`](https://github.com/rust-lang/cargo/):\n\n```\ngit clone git@github.com:rust-bitcoin/rust-bitcoin.git\ncd rust-bitcoin\ncargo build\n```\n\nYou can run tests with:\n\n```\ncargo test\n```\n\nPlease refer to the [`cargo` documentation](https://doc.rust-lang.org/stable/cargo/) for more detailed instructions.\n\n### Building the docs\n\nWe build docs with the nightly toolchain, you may wish to use the following\nshell alias to check your documentation changes build correctly.\n\n```\nalias build-docs='RUSTDOCFLAGS=\"--cfg docsrs\" cargo +nightly rustdoc --features=\"$FEATURES\" -- -D rustdoc::broken-intra-doc-links'\n```\n\n## Testing\n\nUnit and integration tests are available for those interested, along with benchmarks. For project\ndevelopers, especially new contributors looking for something to work on, we do:\n\n- Fuzz testing with [`Hongfuzz`](https://github.com/rust-fuzz/honggfuzz-rs)\n- Mutation testing with [`Mutagen`](https://github.com/llogiq/mutagen)\n- Code verification with [`Kani`](https://github.com/model-checking/kani)\n\nThere are always more tests to write and more bugs to find, contributions to our testing efforts\nextremely welcomed. Please consider testing code a first class citizen, we definitely do take PRs\nimproving and cleaning up test code.\n\n### Unit/Integration tests\n\nRun as for any other Rust project `cargo test --all-features`.\n\n### Benchmarks\n\nWe use a custom Rust compiler configuration conditional to guard the bench mark code. To run the\nbench marks use: `RUSTFLAGS='--cfg=bench' cargo +nightly bench`.\n\n### Mutation tests\n\nWe have started doing mutation testing with [mutagen](https://github.com/llogiq/mutagen). To run\nthese tests first install the latest dev version with `cargo +nightly install --git https://github.com/llogiq/mutagen`\nthen run with `RUSTFLAGS='--cfg=mutate' cargo +nightly mutagen`.\n\n### Code verification\n\nWe have started using [kani](https://github.com/model-checking/kani), install with `cargo install\n--locked kani-verifier` (no need to run `cargo kani setup`). Run the tests with `cargo kani`.\n\n## Pull Requests\n\nEvery PR needs at least two reviews to get merged. During the review phase\nmaintainers and contributors are likely to leave comments and request changes.\nPlease try to address them, otherwise your PR might get closed without merging\nafter a longer time of inactivity. If your PR isn't ready for review yet please\nmark it by prefixing the title with `WIP: `.\n\n### CI Pipeline\n\nThe CI pipeline requires approval before being run on each MR.\n\nIn order to speed up the review process the CI pipeline can be run locally using\n[act](https://github.com/nektos/act). The `fuzz` and `Cross` jobs will be\nskipped when using `act` due to caching being unsupported at this time. We do\nnot *actively* support `act` but will merge PRs fixing `act` issues.\n\n### Githooks\n\nTo assist devs in catching errors _before_ running CI we provide some githooks. If you do not\nalready have locally configured githooks you can use the ones in this repository by running, in the\nroot directory of the repository:\n```\ngit config --local core.hooksPath githooks/\n```\n\nAlternatively add symlinks in your `.git/hooks` directory to any of the githooks we provide.\n\n## Policy on Altcoins/Altchains\n\nPatches which add support for non-Bitcoin cryptocurrencies by adding constants\nto existing enums (e.g. to set the network message magic-byte sequence) are\nwelcome. Anything more involved will be considered on a case-by-case basis,\nas the altcoin landscape includes projects which [frequently appear and\ndisappear, and are poorly designed anyway](https://download.wpsoftware.net/bitcoin/alts.pdf)\nand keeping the codebase maintainable is a large priority.\n\nIn general, things that improve cross-chain compatibility (e.g. support for\ncross-chain atomic swaps) are more likely to be accepted than things which\nsupport only a single blockchain.\n\n\n## Release Notes\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n\n## Licensing\n\nThe code in this project is licensed under the [Creative Commons CC0 1.0\nUniversal license](LICENSE). We use the [SPDX license list](https://spdx.org/licenses/) and [SPDX\nIDs](https://spdx.dev/ids/).\n"
 },
 {
  "repo": "btcpayserver/btcpayserver",
  "language": "C#",
  "readme_contents": "# BTCPay Server\n\n![BTCPay Server](BTCPayServer/wwwroot/img/btc_pay_BG_twitter.png)\n\n<h3 align=\"center\">\n  Accept Bitcoin payments \u20bf\n</h3>\n<p align=\"center\"> BTCPay Server is a free and open-source Bitcoin payment processor which allows you to accept bitcoin without fees or intermediaries.\n</p>\n<p align=\"center\">\n  <a href=\"https://circleci.com/gh/btcpayserver/btcpayserver\">\n    <img src=\"https://img.shields.io/circleci/build/github/btcpayserver/btcpayserver\"/>\n  </a>\n  <a href=\"https://github.com/btcpayserver/btcpayserver/releases/\">\n    <img src=\"https://img.shields.io/github/v/release/btcpayserver/btcpayserver\"/>\n  </a>\n  <a href=\"https://github.com/btcpayserver/btcpayserver/blob/master/LICENSE\">\n      <img src=\"https://img.shields.io/github/license/btcpayserver/btcpayserver\"/>\n  </a>\n  <a href=\"https://docs.btcpayserver.org/Contribute/\">\n    <img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\"/>\n  </a>\n  <a href=\"https://chat.btcpayserver.org/\">\n    <img src=\"https://img.shields.io/badge/Community%20Chat-Mattermost-%230058cc\"/>\n  </a>\n  <a href=\"https://twitter.com/intent/follow?screen_name=btcpayserver\">\n    <img src=\"https://img.shields.io/twitter/follow/btcpayserver.svg?label=Follow%20@btcpayserver\"/>\n  </a>\n</p>\n\n<div align=\"center\">\n  <h3>\n    <a href=\"https://btcpayserver.org\">\n      Website\n    </a>\n    <span> | </span>\n    <a href=\"https://docs.btcpayserver.org\">\n      Documentation\n    </a>\n    <span> | </span>\n    <a href=\"https://docs.btcpayserver.org/API/Greenfield/v1/\">\n      API\n    </a>\n    <span> | </span>\n    <a href=\"https://docs.btcpayserver.org/Contribute/\">\n      Contribute\n    </a>\n    <span> | </span>\n    <a href=\"https://www.youtube.com/btcpayserver/\">\n      YouTube\n    </a>\n    <span> | </span>\n    <a href=\"https://chat.btcpayserver.org/\">\n      Chat\n    </a>\n  </h3>\n</div>\n\n<div align=\"center\">\n  <sub>\"This is lies, my trust in you is broken, I will make you obsolete\" \ud83d\udc9a\n  </a>\n</div>\n<br/>\n\n<p align=\"center\">\n  <a href=\"https://mainnet.demo.btcpayserver.org\">View Demo</a>\n  \u00b7\n  <a href=\"https://github.com/btcpayserver/btcpayserver/issues/new/choose\">Report a bug</a>\n  \u00b7\n  <a href=\"https://github.com/btcpayserver/btcpayserver/discussions/new\">Request a feature</a>\n  \u00b7\n  <a href=\"https://docs.btcpayserver.org/FAQ/\">FAQ</a>\n</p>\n\n## \ud83d\udcbc Table of Contents\n\n* [Features](#-features)\n* [Getting Started](#-getting-started)\n* [Documentation](#-documentation)\n* [Contributing](#-contributing)\n* [Developing](#-developing)\n  * [API](#-api)\n* [Community](#-community)\n* [License](#-license)\n* [Supporters](#-supporters)\n\n![](https://raw.githubusercontent.com/btcpayserver/btcpayserver-doc/master/docs/img/BTCPayServerScreenshot.png)\n\n## \ud83c\udfa8 Features\n\n* Direct, peer-to-peer Bitcoin payments\n* No transaction fees (other than the [network fee](https://en.bitcoin.it/wiki/Miner_fees))\n* No fees, middleman or KYC\n* Non-custodial (complete control over the private key)\n* Enhanced privacy & security\n* Self-hosted\n* SegWit support\n* Lightning Network support (LND, c-lightning, Eclair, and Ptarmigan)\n* Tor support\n* Share your instance with friends (multi-tenant)\n* Invoice management and Payment requests\n* Apps: Point of sale, crowdfunding, donation button\n* Full-node reliant wallet with [hardware wallet integration](https://docs.btcpayserver.org/Vault/) and SegWit support\n* Bitcoin-only build, separate community-maintained altcoin build ([supported altcoins](https://docs.btcpayserver.org/FAQ/FAQ-Altcoin/))\n\n## \ud83d\ude80 Getting Started\n\nFirstly, decide if you want to host an instance yourself or use a [third-party host](https://docs.btcpayserver.org/ThirdPartyHosting/). If you've chosen to self-host, there are plenty of documented [ways to deploy BTCPay Server](https://docs.btcpayserver.org/Deployment/).\n\nAfter successful deployment, make sure to check our [getting started](https://docs.btcpayserver.org/RegisterAccount/) and [walkthrough](https://docs.btcpayserver.org/Walkthrough/) guides. In case you would like to use Lightning Network, see [Lightning guide](https://docs.btcpayserver.org/LightningNetwork/).\n\n## \ud83d\udcd7 Documentation\n\nPlease check out our [official website](https://btcpayserver.org/), [complete documentation](https://docs.btcpayserver.org/) and [FAQ](https://docs.btcpayserver.org/FAQ/) for more details.\n\nIf you have trouble using BTCPay Server, consider joining [communities listed on the official website](https://btcpayserver.org/#communityCTA) to get help from other contributors. Only create a [GitHub issue](https://github.com/btcpayserver/btcpayserver/issues/new/choose) for technical issues you can't resolve through other channels or feature requests you've validated with other members of the community.\n\n## \ud83e\udd1d Contributing\n\nBTCPay Server is built and maintained entirely by volunteer contributors around the internet. We welcome and appreciate new contributions.\n\nIf you're a developer looking to help, but you're not sure where to begin, check the [good first issue label](https://github.com/btcpayserver/btcpayserver/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22), which contains small pieces of work that have been specifically flagged as being friendly to new contributors.\n\nContributors looking to do something a bit more challenging, before opening a pull request, please join [our community chat](https://chat.btcpayserver.org/) or [start a GitHub discussion](https://github.com/btcpayserver/btcpayserver/discussions) to get early feedback, discuss the best ways to tackle the problem, and ensure there is no work duplication.\n\nThere are many other ways to get involved with the project. Check our [contribution guidelines](https://docs.btcpayserver.org/Contribute/). To get the big-picture of the project development, visit our [evolving roadmap](https://github.com/orgs/btcpayserver/projects/9). We organize different types of community calls several times a month. [Subscribe to our calendar](https://github.com/btcpayserver/organization#calendar) and feel free to join our calls to discuss development, design, documentation, and more.\n\n## \ud83e\uddd1\u200d\ud83d\udcbb Developing\n\nTo begin developing locally, visit our [local development guide](https://docs.btcpayserver.org/Development/LocalDevelopment/). There are also several video-tutorials:\n\n* [Setting up development environment on Windows](https://www.youtube.com/watch?v=ZePbMPSIvHM)\n* [Setting up development environment Linux (Ubuntu)](https://www.youtube.com/watch?v=j486T_Rk-yw&t)\n* [Setting up development environment MacOS](https://www.youtube.com/watch?v=GWR_CcMsEV0)\n\n### How to build\n\nWhile the documentation advises using docker-compose, you may want to build BTCPay Server yourself.\n\nFirst, install .NET Core SDK v6.0 as specified by the [Microsoft website](https://dotnet.microsoft.com/download/dotnet-core/6.0).\n\nOn Powershell:\n\n```powershell\n.\\build.ps1\n```\n\nOn linux:\n\n```sh\n./build.sh\n```\n\n### How to run\n\nUse the `run` scripts to run BTCPay Server, this example shows how to print the available command-line arguments of BTCPay Server.\n\nOn Powershell:\n\n```powershell\n.\\run.ps1 --help\n```\n\nOn linux:\n\n```sh\n./run.sh --help\n```\n\n### How to debug\n\nIf you want to debug, use Jetbrain's Rider or Visual Studio 2022.\n\nYou need to run the development time docker-compose as described [in the test guide](./BTCPayServer.Tests/README.md).\n\nYou can then run the debugger by using the Launch Profile `Docker-Regtest`.\n\nIf you need to debug ledger wallet interaction, install the development time certificate with:\n\n```bash\n# Install development time certificate in the trust store\ndotnet dev-certs https --trust\n```\n\nThen use the `Docker-Regtest-https` debug profile.\n\n### Other dependencies\n\nFor more information, see the documentation:\n[How to deploy a BTCPay Server instance](https://docs.btcpayserver.org/Deployment/).\n\n### \ud83e\uddea API\n\nBTCPay Server has two APIs:\n\n- **Greenfield API (New)**\n  - [Greenfield API documentation](https://docs.btcpayserver.org/API/Greenfield/v1/)\n  - [Greenfield API examples with CURL](https://docs.btcpayserver.org/GreenFieldExample/)\n- **Legacy API**\n\nThe **Greenfield API** is our brand-new API which is still in development. Once complete, it will allow you to run BTCPay Server headlessly.\nThe **Legacy API**, is fully compatible with [BitPay's API](https://bitpay.com/api/). It has limited features, but allows instant migration from BitPay.\n\n## \ud83d\udc9a Community\n\nOur community is the \u2764\ufe0f of the project. To chat with other community members in real-time, join our [Mattermost chat](https://chat.btcpayserver.org). We're also on [GitHub discussions](https://github.com/btcpayserver/btcpayserver/discussions).\n\n## \ud83d\udcdd License\n\nBTCPay Server software, logo and designs are provided under [MIT License](https://github.com/btcpayserver/btcpayserver/blob/master/LICENSE).\n\n## \ud83d\ude4f Supporters\n\nThe BTCPay Server Project is proudly supported by these entities through the [BTCPay Server Foundation](https://foundation.btcpayserver.org/).\n\n[![Spiral](BTCPayServer/wwwroot/img/readme/supporter_spiral.svg)](https://spiral.xyz)\n[![Baillie Gifford](BTCPayServer/wwwroot/img/readme/supporter_bailliegifford.svg)](https://www.bailliegifford.com)\n[![Strike](BTCPayServer/wwwroot/img/readme/supporter_strike.svg)](https://strike.me)\n[![Human Rights Foundation](BTCPayServer/wwwroot/img/readme/supporter_hrf.svg)](https://hrf.org)\n[![LunaNode](BTCPayServer/wwwroot/img/readme/supporter_lunanode.svg)](https://lunanode.com)\n[![Wallet of Satoshi](BTCPayServer/wwwroot/img/readme/supporter_walletofsatoshi.svg)](https://walletofsatoshi.com/)\n[![Coincards](BTCPayServer/wwwroot/img/readme/supporter_coincards.svg)](https://coincards.com/)\n[![IVPN](BTCPayServer/wwwroot/img/readme/supporter_ivpn.svg)](https://ivpn.net/)\n\nIf you'd like to support the project, please visit the [donation page](https://btcpayserver.org/donate/).\n"
 },
 {
  "repo": "trottier/original-bitcoin",
  "language": "C++",
  "readme_contents": "original-bitcoin\n================\n\nThis is a historical repository of Satoshi Nakamoto's original bitcoin sourcecode"
 },
 {
  "repo": "michaelliao/cryptocurrency",
  "language": "JavaScript",
  "readme_contents": "# cryptocurrency\n\n"
 },
 {
  "repo": "PiSimo/BitcoinForecast",
  "language": "Python",
  "readme_contents": "# BitcoinForecast \n\nPredict bitcoin value for the next 9minutes, with Recurrental Neural Network GRU.\n<br />\n<h1>Requirements:</h1>\n<br/>\n\n<ul>\n<li>Python3</li>\n<li><a href=\"http://keras.io/\">Keras 2</a></li>\n<li><a href=\"http://www.numpy.org/\">numpy</a></li>\n<li><a href=\"http://matplotlib.org/\">MatploitLib</a></li>\n</ul>\n<br />\n<h1> Data </h1>\nYou can download data through the <code>grabber.py</code> \n<br/>\n<h1>Model:</h1>\n<div style=\"margin-left:auto;margin-right:auto;\"><img width=550 height=800 src=\"https://cloud.githubusercontent.com/assets/17238972/25303841/4945f448-275b-11e7-8ad9-e4c9601a7d3a.png\"></div>\n<p>Generated with <a href=\"https://pisimo.github.io/DeepChart/\">deepchart</a></p>\n<h1>Instructions</h1>\n<p>Clone the repo:</p>\n<code>\ngit clone https://github.com/PiSimo/BitcoinForecast.git\n</code>\n<br />\n<br />\n<b>Training on new data:</b><br />\n<code>python3 network.py -train <i>dataset_path</i> -iterations <i>number_of_training_iterations</i></code>\n<p>To finetune the new model with an old one just add <code>-finetune <i>base_model_path</i></code> to the line above.</p>\n<p>At the end of the training you will have an updated model.h5 with the new weights and you will see a plot with the test results.</p>\n<br />\n<b>Running:</b><br />\n<code>python3 network.py -run <i>dataset_path</i> -model <i>model_path</i></code>\n<p>The dataset is also required when you run, to perform normalization.</p>\n<p>To visualize a plot with the real and predicted results enter Crtl-C and type no ,the program will create chart.png with the results.</p>\n\n<br/>\nWorking example with <a href=\"https://github.com/PiSimo/BitcoinForecast/blob/master/model.h5\">this model</a>:\n<br/>\n(Red:Predicted,Green:Real values)\n<img src=\"https://cloud.githubusercontent.com/assets/17238972/24326997/630cf3c2-11bc-11e7-8edb-07be895e16ea.png\" />\n\n"
 },
 {
  "repo": "Bit-Wasp/bitcoin-php",
  "language": "PHP",
  "readme_contents": "  \n## Bitcoin\n\n[![Build Status](https://scrutinizer-ci.com/g/bit-wasp/bitcoin-php/badges/build.png?b=master)](https://scrutinizer-ci.com/g/bit-wasp/bitcoin-php/build-status/master)\n[![Code Coverage](https://scrutinizer-ci.com/g/bit-wasp/bitcoin-php/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/bit-wasp/bitcoin-php/?branch=master)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Bit-Wasp/bitcoin-php/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/Bit-Wasp/bitcoin-php/?branch=master)\n[![Latest Stable Version](https://poser.pugx.org/bitwasp/bitcoin/v/stable.png)](https://packagist.org/packages/bitwasp/bitcoin)\n\nThis repository contains an implementation of Bitcoin using mostly pure PHP.\n\n*Warning*: This library does not support 32-bit installs of PHP. Please also note that composer is the only supported installation method.\n\n## Installation\n\nYou can install this library via Composer: `composer require bitwasp/bitcoin`\n\n## Contributing\n\nAll contributions are welcome. Please see [[this page](https://github.com/Bit-Wasp/bitcoin-php/blob/master/CONTRIBUTING.md)] before you get started\n\n## Documentation\n\n Check out the beginnings of the documentation for the library: [[Introduction](doc/documentation/Introduction.md)]\n\n## Presently supported:\n\n - Blocks, headers, and merkle blocks and bloom filters\n - P2SH & Segregated witness scripts\n - An adaptable elliptic-curve library, using [[PhpEcc](https://github.com/mdanter/phpecc)] by default, or libsecp256k1 if the bindings are found\n - Support for building, parsing, signing/validating transactions\n - Deterministic signatures (RFC6979)\n - BIP32 and electrum (older type I) deterministic key algorithms\n - BIP39, and the older electrum seed format.\n - ScriptFactory for common input/output types, parser, interpreter, and classifiers\n - Supports bindings to libbitcoinconsensus\n - Bindings to Stratum (electrum) servers\n\n# Other projects\n\n - [buffertools-php](https://github.com/Bit-Wasp/buffertools-php) - Toolkit for working with binary data in PHP\n - [ext-secp256k1](https://github.com/Bit-Wasp/secp256k1-php) - PHP bindings to libsecp256k1\n - [ext-bitcoinconsensus](https://github.com/Bit-Wasp/bitcoinconsensus-php) - PHP bindings to libbitcoinconsensus\n - [bitcoin-p2p-php](https://github.com/Bit-Wasp/bitcoin-p2p-php) - PHP implementation of bitcoin P2P messaging using reactphp\n - [stratum-php](https://github.com/Bit-Wasp/stratum-php) - PHP implementation of the stratum protocol using reactphp\n - [electrum-discovery-php](https://github.com/Bit-Wasp/electrum-discovery-php) - Electrum server discovery (over IRC) using reactphp\n - [node-php](https://github.com/Bit-Wasp/node-php) - A toy project (really just for fun) a full node using bitcoin-p2p-php\n - [bip70-php](https://github.com/bip70/bip70-php) - A BIP70 (payment requests) implementation for PHP\n\n## Supporters\n\nThis library is a 100% open source project. We do not receive any funding from the industry, nor provide paid support or development of features. That said, we are grateful for our supporters who provide free access for open source projects:\n\n[![JetBrains](https://avatars0.githubusercontent.com/u/878437?s=200&v=4)](https://www.jetbrains.com/)\n\nThanks to [JetBrains](https://www.jetbrains.com/) for supporting the project through sponsoring some [All Products Packs](https://www.jetbrains.com/products.html) within their [Free Open Source License](https://www.jetbrains.com/buy/opensource/) program.\n"
 },
 {
  "repo": "bitcoin-core/bitcoincore.org",
  "language": "HTML",
  "readme_contents": "# [bitcoincore.org](https://bitcoincore.org)\n\nThis repository is the source code of the Bitcoin Core project website built with Jekyll.\n\n## Directory structure\n\n  - `_posts/<lang>/posts` for blog articles.\n  - `_posts/<lang>/pages` for static pages.\n  - `_posts/<lang>/releases` for Bitcoin Core release notes\n\nFile names *must* be in the format `Y-m-d-title.md`, e.g. `2015-12-31-title.md`. File names can be translated.\n\n## Translations\n\nSee [CONTRIBUTING.md](/CONTRIBUTING.md#translation-process) for more information.\n\n## Front Matter notes\n\nThe following `Front Matter` is required for the multilingual setup in all files. The required fields are as follows:\n\n  - `name:`      group name for unique article. Each translation must share the same group name, e.g. `october15-report`\n  - `id:`        each article translation must have a unique ID. Use the language code + `-name` field. e.g. `en-october15-report`\n  - `permalink:` the must include the language code, end a trailing slash, e.g. `/en/2015/12/31/report/`.\n  - `title:`     the translated title of the article\n  - `type:`      the content type (`pages`, `posts`, `releases`, `meetings`, etc.)\n  - `layout:`    the layout template (`page`, `post`, etc.)\n  - `lang:`      the language code (`en`, `fr`, etc.)\n\n```\n---\ntitle: Short Title\nname: short-title\nlayout: post\ntype: posts\nlang: en\nid: en-short-title\npermalink: /en/2016/01/01/short-title\n---\n```\n\n## Building\n\nThis website is based on [Jekyll](https://jekyllrb.com/).  To build\nlocally, [install Ruby 2.5.5](https://gorails.com/setup) using system\npackages, [rvm](https://rvm.io), [rbenv](https://github.com/rbenv/rbenv), or another method.\nThen clone this repository and change directory into it:\n\n    git clone https://github.com/bitcoin-core/bitcoincore.org.git\n    cd bitcoincore.org\n\nInstall the `bundle` utility using the Ruby package manager, `gem`, and\nthen use `bundle` to install the rest of the Ruby packages needed to\nbuild this site.  Note, depending on your system configuration, you may\nneed to run `gem` as the superuser by putting \"sudo\" followed by a space\nbefore the `gem` command.  You shouldn't need to use `sudo` with the\n`bundle` command.\n\n    gem update --system\n    gem install bundler\n    bundle install\n\nTo preview the site (this will launch a tiny webserver on port 4000):\n\n    bundle exec jekyll server --future\n\nTo simply build the site (output placed in the `_site` directory):\n\n    bundle exec jekyll build --future\n\nNote that the `--future` parameter is only required if you're adding any\npages dated in the future (such as prepared release announcements).\n\nTo test the site:\n\n    bundle exec jekyll build --future --drafts --unpublished\n    bundle exec htmlproofer --check-html --disable-external --url-ignore '/^\\/bin/.*/' ./_site\n\nThe additional parameters to `jekyll build` ensure that all possible\npages are built and checked.\n\n## Contributing\n\nContributions welcome. Please see [CONTRIBUTING.md](/CONTRIBUTING.md) for details.\n\n## References\n\nThe website uses an old version of the [Minimal Mistakes theme][].  The\ntheme's website provides [documentation][mm docs], including information\nabout [configuration variables][mm config], creating [pages and posts][mm\ncontent], adding [new Javascript][mm js], and more.  Note that\ncurrent documentation may describe features not available in the old\nversion of the theme used by the website.\n\n[minimal mistakes theme]: https://mmistakes.github.io/minimal-mistakes/\n[mm docs]: https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/\n[mm config]: https://mmistakes.github.io/minimal-mistakes/docs/configuration/\n[mm content]: https://mmistakes.github.io/minimal-mistakes/docs/posts/\n[mm js]: https://mmistakes.github.io/minimal-mistakes/docs/javascript/\n"
 },
 {
  "repo": "tianmingyun/MasterBitcoin2CN",
  "language": null,
  "readme_contents": "\u90ce\u54b8\u5e73\u8bf4\u8fc7\uff1a\u6bd4\u7279\u5e01\u767d\u7ed9\u6211\u90fd\u4e0d\u8981\n\n\u5df4\u83f2\u7279\uff1a\u6bd4\u7279\u5e01\u662f\u6ce1\u6cab\uff0c\u4e0d\u662f\u4e00\u79cd\u80fd\u591f\u751f\u4ea7\u4ef7\u503c\u7684\u8d44\u4ea7\n\n\u7d2b\u8272\u7684\u80a1\uff1a\u4e3a\u4ec0\u4e48\u8bf4\u6bd4\u7279\u5e01\u662f\u5178\u578b\u7684\u6ce1\u6cab\n\n......\n\n\u4e5f\u6709\u4eba\u8bf4\uff0c\u533a\u5757\u94fe\u662f\u6700\u4f1f\u5927\u7684\u53d1\u660e\uff0c\u582a\u6bd4\u4e92\u8054\u7f51\u3002\n\n\u5230\u5e95\u6bd4\u7279\u5e01\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u5224\u65ad\uff1f\u96be\u9053\u6211\u4eec\u80fd\u505a\u7684\u5c31\u662f\u4eba\u4e91\u4ea6\u4e91\uff1f\n\n\u5982\u4f55\u80fd\u6709\u81ea\u5df1\u7684\u72ec\u7acb\u5224\u65ad\uff1f\n\n\u6bcf\u4e2a\u4eba\u90fd\u6709\u81ea\u5df1\u7684\u201c\u5168\u77e5\u906e\u853d\u201d\uff0c\u5c31\u50cf\u6bcf\u4e2a\u4eba\u90fd\u770b\u4e0d\u89c1\u81ea\u5df1\u7684\u540e\u8111\u52fa\u4e00\u6837\u3002\u5728\u81ea\u5df1\u7684\u89c6\u91ce\u5185\uff0c\u5728\u81ea\u5df1\u7684\u8212\u9002\u533a\uff0c\u5982\u9c7c\u5f97\u6c34\uff0c\u4f46\u662f\u5c31\u662f\u8fd9\u79cd\u611f\u89c9\u6700\u5bb9\u6613\u8ba9\u81ea\u5df1\u4ee5\u4e3a\u201c\u81ea\u5df1\u4ee5\u4e3a\u7684\u201d\u5c31\u662f\u5ba2\u89c2\u4e8b\u5b9e\u3002\n\n\u6b63\u786e\u7684\u6001\u5ea6\u662f\u7814\u7a76\u641e\u61c2\uff0c\u4e4b\u540e\u624d\u6709\u8d44\u683c\u505a\u5224\u65ad\u3002\n\n\u8fd9\u672c\u4e66\u5c31\u80fd\u5e2e\u52a9\u60a8\u5168\u9762\u4e86\u89e3\u6bd4\u7279\u5e01\uff0c\u800c\u4e14\u6709\u52a9\u4e8e\u7406\u89e3\u5176\u4ed6\u6570\u5b57\u8d27\u5e01\u3002\n\n\u672c\u4e66\u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u5f97\u5230\u4e86higer\uff08\u533a\u5757\u94fe\u7814\u4e60\u793e\u793e\u957f\uff09\u7684\u652f\u6301\u548c\u9f13\u52b1\uff0c\u7279\u6b64\u81f4\u8c22\u3002\n\n\u672c\u4e66\u90e8\u5206\u6bb5\u843d\u5185\u5bb9\u53c2\u8003\u6458\u5f55\u4e86\u300a\u7cbe\u901a\u6bd4\u7279\u5e01\u300b\u77e5\u7b14\u58a8\u7248\u672c\uff0c\u5728\u6b64\u7279\u522b\u58f0\u660e\u5e76\u81f4\u8c22\u3002\n\n\u672c\u4e66\u9644\u5f55A\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\uff0c\u5176\u4e2d\u9644\u5f55A-1\u5168\u6587\u5f15\u81ea[\u3010\u5df4\u6bd4\u7279\u3011](https://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system) \uff0c\u9644\u5f55A-2\u5168\u6587\u5f15\u81ea[\u3010\u674e\u7b11\u6765\u82f1\u4e2d\u6587\u5bf9\u7167\u7248\u3011](http://lixiaolai.com/#/bitcoin-whitepaper-cn-en-translation/Bitcoin-Whitepaper-EN-CN.html)\u3002\u5728\u6b64\u7279\u522b\u58f0\u660e\u5e76\u81f4\u8c22\u3002\n\n\u4ee5\u4e0b\u670b\u53cb\u5bf9\u672c\u4e66\u505a\u51fa\u5de8\u5927\u8d21\u732e\uff1a\n\n\u83dc\u83dc\u5b50\uff1a\u7ffb\u8bd1\u4e86\u82f1\u6587\u7248\u5e8f\u8a00\uff0c\u7b2c\u4e8c\u7248\u66f4\u65b0\u8bf4\u660e\uff0c\u8bcd\u6c47\u8868\uff0c\u9644\u5f552\u4ea4\u6613\u811a\u672c\u8bed\u8a00\u64cd\u4f5c\u7b26\uff0c\u5e38\u91cf\u548c\u7b26\u53f7\u7b49\u7ae0\u8282\n\n\u67f4\u6625\u71d5\u548c\u683c\u6797\u602a\u7269\uff1a\u8054\u5408\u7ffb\u8bd1\u9644\u5f55\u9694\u79bb\u89c1\u8bc1\u90e8\u5206\n\nRobbie_\u82f1\u8bed\u7ffb\u8bd1\uff1a\u7b2c4\u7ae0\u5ba1\u6838\u6821\u5bf9\n\n\u5434\u8fea\uff1a\u7b2c5\u7ae0\uff0c\u7b2c9\u7ae0\u5ba1\u6838\u6821\u5bf9\n\n\u683c\u6797\u602a\u7269\uff1a\u7b2c6\u7ae0\u5ba1\u6838\u6821\u5bf9\n\n\u963f\u9f99\uff1a\u7b2c7\u7ae0\uff0c\u7b2c11\u7ae0\u5ba1\u6838\u6821\u5bf9\n\n\u962e\u7acb\u5fd7\u548c\u51af\u9526\u709c\uff1a\u7b2c10\u7ae0\u5ba1\u6838\u6821\u5bf9\n\n\u7433\uff1a\u7b2c12\u7ae0\u5ba1\u6838\u6821\u5bf9\n\n\u9ec4\u8c46\uff1a\u5c01\u9762\u5c01\u5e95\u6249\u9875\u4ee5\u53ca\u5176\u4ed6\u5185\u5bb9\u8bbe\u8ba1\n\n\u7279\u522b\u611f\u8c22\u8d75\u658c\u950b\uff0c\u5728\u672c\u4e66\u6700\u540e\u51fa\u7248\u524d\u6821\u5bf9\u8fc7\u7a0b\u4e2d\u4ed8\u51fa\u4e86\u5de8\u5927\u7684\u52aa\u529b\uff0c\u4fee\u6b63\u4e86\u4e00\u4e9b\u7455\u75b5\u3002\n\n\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\u548c\u4e2a\u4eba\u6c34\u5e73\u80fd\u529b\u539f\u56e0\uff0c\u521d\u7a3f\u4e2d\u6709\u8bb8\u591a\u683c\u5f0f\u548c\u7406\u89e3\u7ffb\u8bd1\u9519\u8bef\u3002\u4ee5\u4e0a\u5404\u4f4d\u670b\u53cb\u5728\u5ba1\u6838\u6821\u8fc7\u7a0b\u4e2d\u4fee\u6b63\u4e86\u521d\u7a3f\u4e2d\u8bb8\u591a\u9519\u8bef\uff0c\u751a\u81f3\u90e8\u5206\u7ae0\u8282\u517c\u804c\u4e86\u7ffb\u8bd1\u5de5\u4f5c\uff0c\u5728\u6b64\u8868\u793a\u81f4\u6b49\u548c\u611f\u8c22\u3002\n\n\u5373\u4fbf\u5982\u6b64\uff0c\u5f53\u524d\u7248\u672c\u8fd8\u53ef\u80fd\u5b58\u5728\u90e8\u5206\u9519\u8bef\uff0c\u6b22\u8fce\u8bfb\u8005\u5728github\u4e0a\u63d0\u4ea4\u52d8\u8bef\uff0c\u4e5f\u53ef\u4ee5\u53d1\u81f3\u90ae\u7bb1\uff1ayuntianming@aliyun.com\n\n\u4e54\u5ef6\u5b8f 2017.11.11\n\n*** \u6b63\u7248\u4e66\u8d2d\u4e70\u94fe\u63a5***\n\n\u672c\u4e66\u7ecf\u8fc7\u591a\u65b9\u52aa\u529b\uff0c\u5386\u65f6\u4e00\u5e74\uff0c\u7ec8\u4e8e\u4ed8\u6893\uff0c\u6b22\u8fce\u8d2d\u4e70\u6b63\u7248\u56fe\u4e66\u3002\u4eac\u4e1c\u8d2d\u4e70\u94fe\u63a5\uff1a\n\nhttps://item.jd.com/12620946.html\n\n*** 2019\u5e74\u4e0b\u534a\u5e74\u6821\u5bf9\u8bf4\u660e ***\n\n2019\u5e7410\u6708\u5f00\u59cb\u52302019\u5e7412\u6708\u5e95\uff0c\u5bf9github\u4e0a\u7684\u7b2c\u4e8c\u7248\u8fdb\u884c\u4e86\u4e00\u6b21\u5168\u9762\u7684\u6821\u5bf9\uff0c\u66f4\u65b0\u4e86\u4e0b\u9762\u7684\u5185\u5bb9\uff1a\n\n1\u3001\u683c\u5f0f\u65b9\u9762\uff1a\u589e\u52a0\u7ae0\u8282\u540d\u79f0\u3002\u6240\u6709\u201c\u63d0\u793a\u201d\uff0c\u201c\u8b66\u544a\u201d\uff0c\u201c\u6ce8\u610f\u201d\u7b49\u5168\u90e8\u6539\u4e3a\u5f15\u7528\u3002\u5f15\u7528\u7ae0\u8282\u589e\u52a0\u94fe\u63a5\u548c\u4e2d\u6587\u62ec\u53f7\u3002\n\n2\u3001\u56fe\u7247\uff1a\u56fe\u7247\u672a\u505a\u7ffb\u8bd1\uff0c\u94fe\u63a5\u5168\u90e8\u6539\u7528\u82f1\u6587\u7248\u94fe\u63a5\u3002\n\n3\u3001\u4e0e\u82f1\u6587\u7248\u5185\u5bb9\u540c\u6b65\u66f4\u65b0\u81f32019\u5e749\u6708\u3002\u4fee\u6b63\u90e8\u5206\u7ae0\u8282\u7684\u660e\u786e\u9519\u8bef\uff0c\u7ffb\u8bd1\u4e0d\u51c6\u786e\uff0c\u8868\u8fbe\u7410\u788e\u4e4b\u5904\u3002\u589e\u52a0\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6e90\u4ee3\u7801\u3002\n\n4\u3001\u589e\u52a0\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\u7684\u674e\u7b11\u6765\u7ffb\u8bd1\u7248\u672c\uff0c\u9644\u5176\u4ed6\u7248\u672c\u94fe\u63a5\u3002\n\n\u4e54\u5ef6\u5b8f   2019.12.22\n\n*** 2020\u5e74\u4e0a\u534a\u5e74\u6821\u5bf9\u8bf4\u660e ***\n\n2020\u5e747\u6708\u8ddf\u968f\u539f\u7248\u8fdb\u884c\u4e86\u66f4\u65b0\u3002\u4e3b\u8981\u5185\u5bb9\u6709\uff1a\n\n1\u3001\u5220\u9664\u5931\u6548\u94fe\u63a5\uff1b\n\n2\u3001\u589e\u52a02020\u5e745\u6708\u51cf\u534a\u76f8\u5173\u5185\u5bb9\uff1b\n\n3\u3001\u5220\u9664\u67d3\u8272\u5e01\uff08Colored Coin\uff09\u76f8\u5173\u5185\u5bb9;\n\n4\u3001\u66f4\u65b0\u9644\u5f55\u90e8\u5206\u5185\u5bb9\uff1b\n\n5\u3001\u66f4\u65b0\u76ee\u5f55\u3002\n\n\u4e54\u5ef6\u5b8f  2020.7.30\n\n\n\n\u9e23\u8c22:\n\n\u533a\u5757\u94fe\u7814\u4e60\u793e\n\n[![\u4e91\u5929\u660e\u533a\u5757\u94fe\u6570\u636e\u5bfc\u822a](http://ytm.ltd/zb_users/upload/ytm.ltd.png)](http://ytm.ltd)\n\n\n\n\n## Mastering Bitcoin - Second Edition \u7248\u6743\u8bf4\u660e\n\nThe tags, [second_edition_print_1](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print_1) and [second_edition_print2](https://github.com/bitcoinbook/bitcoinbook/releases/tag/second_edition_print2), correspond to the first (June 8th, 2017) and second (July 20th, 2017) print of Mastering Bitcoin (Second Edition), as published by O'Reilly Media.\n\n[![Creative Commons License](../../qukuailian/%E7%B2%BE%E9%80%9A%E6%96%B0%E7%BF%BB%E8%AF%91/images/68747470733a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d73612f342e302f38387833312e706e67.png)](http://creativecommons.org/licenses/by-sa/4.0/)\n\nMastering Bitcoin - Second Edition by [Andreas M. Antonopoulos LLC](https://antonopoulos.com/) is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\n\n"
 },
 {
  "repo": "lian/bitcoin-ruby",
  "language": "Ruby",
  "readme_contents": "= Bitcoin-ruby {<img src=\"https://api.travis-ci.org/lian/bitcoin-ruby.svg?branch=master\" />}[http://travis-ci.org/lian/bitcoin-ruby] {<img src=\"http://inch-ci.org/github/lian/bitcoin-ruby.svg?branch=master\" alt=\"Inline docs\" />}[http://inch-ci.org/github/lian/bitcoin-ruby] {<img src=\"https://tip4commit.com/projects/108.svg\" alt=\"tip for next commit\" />}[https://tip4commit.com/github/lian/bitcoin-ruby]\n\nThis is a ruby library for interacting with the bitcoin protocol/network.\n\nSome of the main features are:\n\n* Bitcoin::Key provides a high-level API for creating and handling keys/addresses\n* Bitcoin::Util provides the basic bitcoin utility functions for base58, ECC, etc.\n* Bitcoin::Protocol can parse/create all protocol messages\n* Bitcoin::Script implementation, create/run scripts and verify signatures\n* Bitcoin::Builder provides a high-level API for creating transactions (and blocks)\n* Bitcoin::Litecoin implements all the litecoin-specific differences\n\n== Compatible with...\n\n* ruby 2.4.x\n* ruby 2.5.x\n* ruby 2.6.x\n\n== Installation\n\n gem install bitcoin-ruby\n # OR\n git clone https://github.com/lian/bitcoin-ruby.git; cd bitcoin-ruby; bundle install\n\nNote that some aspects of the library (such as networking, storage, etc.) need\nadditional dependencies which are not specified in the gemspec. The core requirements are\nintentionally kept to a minimum, so nobody has to install unneeded dependencies.\n\n* +rspec+ to run the specs\n* +scrypt+ to use a much faster scrypt hash implementation for Litecoin\n\nIf you would like to install using Bundler, put it in your Gemfile and run bundle install\n gem 'bitcoin-ruby', git: 'https://github.com/lian/bitcoin-ruby', branch: 'master', require: 'bitcoin'\n\n== Library Usage\n\nThere are different aspects to the library which can be used separately or in combination.\nHere are some ideas of what you could do. There are also some demo scripts in examples/,\nsee EXAMPLES.\n\n=== Keys/Addresses\n\nGenerate a Bitcoin::Key\n\n key = Bitcoin::Key.generate\n key.priv\n key.pub\n key.addr\n sig = key.sign(\"data\")\n key.verify(\"data\", sig)\n recovered_key = Bitcoin::Key.from_base58(key.to_base58)\n\n=== Blocks / Transactions parsing\n\nParse a Bitcoin::Protocol::Block\n\n raw_block = File.open('spec/bitcoin/fixtures/rawblock-0.bin', 'rb') {|f| f.read}\n blk = Bitcoin::Protocol::Block.new(raw_block)\n blk.hash #=> 00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048\n blk.tx.count #=> 1\n blk.to_hash #=> ...\n Bitcoin::Protocol::Block.from_json( blk.to_json )\n\nParse a Bitcoin::Protocol::Tx\n\n raw_tx = File.open('spec/bitcoin/fixtures/rawtx-01.bin', 'rb') {|f| f.read}\n tx = Bitcoin::Protocol::Tx.new(raw_tx)\n tx.hash #=> 6e9dd16625b62cfcd4bf02edb89ca1f5a8c30c4b1601507090fb28e59f2d02b4\n tx.in.size #=> 1\n tx.out.size #=> 2\n tx.to_hash #=> ...\n Bitcoin::Protocol::Tx.from_json( tx.to_json )\n\n Bitcoin::Script.new(tx.out[0].pk_script).to_string\n #=> \"OP_DUP OP_HASH160 b2e21c1db922e3bdc529de7b38b4c401399e9afd OP_EQUALVERIFY OP_CHECKSIG\"\n\n=== Transaction verification / Scripts\n\nGet the matching transactions (in this example tx1 is the spending transaction)\n\n rawtx1 = File.open(\"spec/bitcoin/fixtures/rawtx-f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16.bin\", 'rb') {|f| f.read}\n rawtx2 = File.open(\"spec/bitcoin/fixtures/rawtx-0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9.bin\", 'rb') {|f| f.read}\n tx1 = Bitcoin::Protocol::Tx.new(rawtx1)\n tx2 = Bitcoin::Protocol::Tx.new(rawtx2)\n\nThen simply ask the transaction to verify an input\n\n tx1.verify_input_signature(0, tx2) #=> true\n\n=== Scripts\n\nIf you want to control the Bitcoin::Script yourself, you can do so\n\n txin = tx1.in.first\n txout = tx2.out[txin.prev_out_index]\n script = Bitcoin::Script.new(txin.script_sig + txout.pk_script)\n\n result = script.run do |pubkey, sig, hash_type|\n   hash = tx1.signature_hash_for_input(0, nil, txout.pk_script)\n   Bitcoin.verify_signature(hash, sig, pubkey.unpack(\"H*\")[0])\n end\n result #=> true\n\n=== Create Transactions\n\nYou need to know the previous output you want to spend (tx hash and output index),\nas well as the private key for the address required to sign for it.\n\n # use testnet so you don't accidentally blow your whole money!\n Bitcoin.network = :testnet3\n \n # make the DSL methods available in your scope\n include Bitcoin::Builder\n \n # the previous transaction that has an output to your address\n prev_hash = \"6c44b284c20fa22bd69c57a9dbff91fb71deddc8c54fb2f5aa41fc78c96c1ad1\"\n \n # the number of the output you want to use\n prev_out_index = 0\n \n # fetch the tx from whereever you like and parse it\n prev_tx = Bitcoin::P::Tx.from_json(open(\"http://test.webbtc.com/tx/#{prev_hash}.json\"))\n \n # the key needed to sign an input that spends the previous output\n key = Bitcoin::Key.from_base58(\"92ZRu28m2GHSKaaF2W7RswJ2iJYpTzVhBaN6ZLs7TENCs4b7ML8\")\n \n # create a new transaction (and sign the inputs)\n new_tx = build_tx do |t|\n \n   # add the input you picked out earlier\n   t.input do |i|\n     i.prev_out prev_tx\n     i.prev_out_index prev_out_index\n     i.signature_key key\n   end\n \n   # add an output that sends some bitcoins to another address\n   t.output do |o|\n     o.value 50000000 # 0.5 BTC in satoshis\n     o.script {|s| s.recipient \"mugwYJ1sKyr8EDDgXtoh8sdDQuNWKYNf88\" }\n   end\n \n   # add another output spending the remaining amount back to yourself\n   # if you want to pay a tx fee, reduce the value of this output accordingly\n   # if you want to keep your financial history private, use a different address\n   t.output do |o|\n     o.value 49000000 # 0.49 BTC, leave 0.01 BTC as fee\n     o.script {|s| s.recipient key.addr }\n   end\n \n end\n \n # examine your transaction. you can relay it through http://test.webbtc.com/relay_tx\n # that will also give you a hint on the error if something goes wrong\n puts new_tx.to_json\n\n== Documentation\n\nAlways trying to improve, any help appreciated! If anything is unclear to you, let us know!\n\nDocumentation is generated using yardoc:\n\n rake doc\n\nThe specs are also a good place to see how something works.\n\n== Specs\n\nSpecs require libsecp256k1 in order to be fully run. Therefore, the first step\nin running the specs is to build this library if you haven't already:\n\n  rake build_libsecp256k1\n\nThe majority of specs can be run with\n\n rake rspec\n\nor, if you want to run a single spec\n\n bundle exec rspec spec/bitcoin/bitcoin_spec.rb\n\nIf you make changes to the code or add functionality, please also add specs.\n\nTo run specs for changes that monkey patch significant functionality, you\nshould run the specs individually. For example, to run the Dogecoin specs:\n\n  rake coin_spec[dogecoin]\n\nIf support is added for any new coins a corresponding coin spec should also be\nadded to test specific functionality of that coin.\n\n== Development\n\nAny help or feedback is greatly appreciated! From getting knee-deep into elliptic-curve acrobatics,\nto cleaning up high-level naming conventions, there is something for everyone to do.\nEven if you are completely lost, just pointing out what is unclear helps a lot!\n\nIf you are curious or like to participate in development, drop by \\#bitcoin-ruby on irc.freenode.net!\n\n== License\n\nAvailable here: [link:COPYING]\n"
 },
 {
  "repo": "kylemanna/docker-bitcoind",
  "language": "Shell",
  "readme_contents": "Bitcoind for Docker\n===================\n\n[![Docker Stars](https://img.shields.io/docker/stars/kylemanna/bitcoind.svg)](https://hub.docker.com/r/kylemanna/bitcoind/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/kylemanna/bitcoind.svg)](https://hub.docker.com/r/kylemanna/bitcoind/)\n[![Build Status](https://travis-ci.org/kylemanna/docker-bitcoind.svg?branch=master)](https://travis-ci.org/kylemanna/docker-bitcoind/)\n\nDocker image that runs the Bitcoin bitcoind node in a container for easy deployment.\n\n\nRequirements\n------------\n\n* Physical machine, cloud instance, or VPS that supports Docker (i.e. [Vultr](http://bit.ly/1HngXg0), [Digital Ocean](http://bit.ly/18AykdD), KVM or XEN based VMs) running Ubuntu 14.04 or later (*not OpenVZ containers!*)\n* At least 500 GB to store the block chain files (and always growing!)\n* At least 1 GB RAM + 2 GB swap file\n\nRecommended and tested on unadvertised (only shown within control panel) [Vultr SATA Storage 1024 MB RAM/250 GB disk instance @ $10/mo](http://bit.ly/vultrbitcoind).  Vultr also *accepts Bitcoin payments*!\n\n\nReally Fast Quick Start\n-----------------------\n\nOne liner for Ubuntu 14.04 LTS machines with JSON-RPC enabled on localhost and adds upstart init script:\n\n    curl https://raw.githubusercontent.com/kylemanna/docker-bitcoind/master/bootstrap-host.sh | sh -s trusty\n\n\nQuick Start\n-----------\n\n1. Create a `bitcoind-data` volume to persist the bitcoind blockchain data, should exit immediately.  The `bitcoind-data` container will store the blockchain when the node container is recreated (software upgrade, reboot, etc):\n\n        docker volume create --name=bitcoind-data\n        docker run -v bitcoind-data:/bitcoin/.bitcoin --name=bitcoind-node -d \\\n            -p 8333:8333 \\\n            -p 127.0.0.1:8332:8332 \\\n            kylemanna/bitcoind\n\n2. Verify that the container is running and bitcoind node is downloading the blockchain\n\n        $ docker ps\n        CONTAINER ID        IMAGE                         COMMAND             CREATED             STATUS              PORTS                                              NAMES\n        d0e1076b2dca        kylemanna/bitcoind:latest     \"btc_oneshot\"       2 seconds ago       Up 1 seconds        127.0.0.1:8332->8332/tcp, 0.0.0.0:8333->8333/tcp   bitcoind-node\n\n3. You can then access the daemon's output thanks to the [docker logs command]( https://docs.docker.com/reference/commandline/cli/#logs)\n\n        docker logs -f bitcoind-node\n\n4. Install optional init scripts for upstart and systemd are in the `init` directory.\n\n\nDocumentation\n-------------\n\n* Additional documentation in the [docs folder](docs).\n"
 },
 {
  "repo": "GammaGao/bitcoinwhitepaper",
  "language": null,
  "readme_contents": "# \u4e2d\u672c\u806a(Satoshi Nakamoto)\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\u82f1\u6587\u7248\n* [\u767d\u76ae\u4e66\u82f1\u6587\u7248PDF](https://github.com/GammaGao/bitcoinwhitepaper/blob/master/bitcoin_en.pdf)\n\n# \u4e2d\u672c\u806a(Satoshi Nakamoto)\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\u4e2d\u6587\u7248\n* [\u767d\u76ae\u4e66\u4e2d\u6587\u7248PDF](https://github.com/GammaGao/bitcoinwhitepaper/blob/master/bitcoin_cn.pdf)\n\n# \u6bd4\u7279\u5e01\u5f00\u53d1\u8005\u6307\u5357\u82f1\u6587\u7248\n* [\u5f00\u53d1\u8005\u6307\u5357\u82f1\u6587\u7248](https://bitcoin.org/en/developer-guide)\n\n# \u6bd4\u7279\u5e01\u5f00\u53d1\u8005\u6307\u5357\u4e2d\u6587\u7248\n* [\u5f00\u53d1\u8005\u6307\u5357\u4e2d\u6587\u7248](https://www.yiyibooks.cn/Gamma/bitcoin/developer-guide.html)\n\n"
 },
 {
  "repo": "pointbiz/bitaddress.org",
  "language": "HTML",
  "readme_contents": "# bitaddress.org\r\nJavaScript Client-Side Bitcoin Wallet Generator\r\n\r\nNow Bitcoin addresses and their corresponding private key can be conveniently \r\ngenerated in a web browser.\r\n\r\nThe bitaddress.org project provides an all-in-one HTML document with embedded\r\nJavaScript/Css/Images. The JavaScript is readable not minified and contains no\r\nXMLHttpRequest's (no AJAX). The benefit of this technique is you can load the \r\nJavaScript locally and trust that the JavaScript did not change after being \r\nloaded. \r\n\r\nHere is a link to the BitcoinTalk.org forum topic discussing this project:\r\nhttps://bitcointalk.org/index.php?topic=43496.0\r\n\r\n\r\nPlease send DONATIONS for this project to Bitcoin Address: \r\n1NiNja1bUmhSoTXozBRBEtR8LeF9TGbZBN\r\n\r\n\r\nEND USER NOTES:\r\n\r\n 1) For Bulk Wallet I recommended using Google Chrome, it's the fastest.\r\n\r\n 2) Requires IE9+, Firefox, Chrome or sufficient JavaScript support.\r\n\r\n 3) Mobile Safari only works with iPhone4 or newer devices.\r\n    Older devices timeout while executing JavaScript.\r\n\r\n 4) DO NOT use Opera Mini it renders JavaScript output server side, therefore\r\n    they might record the private key you generated.\r\n\r\n 5) BIP38 most likely will not work on mobile devices due to hardware limitations.\r\n\r\n\r\nNotice of Copyrights and Licenses:\r\n---------------------------------------\r\nThe bitaddress.org project, software and embedded resources are\r\ncopyright bitaddress.org.\r\n\r\nThe bitaddress.org name and logo are not part of the open source\r\nlicense.\r\n\r\nPortions of the all-in-one HTML document contain JavaScript codes that\r\nare the copyrights of others. The individual copyrights are included\r\nthroughout the document along with their licenses. Included JavaScript\r\nlibraries are separated with HTML script tags.\r\n\r\nSummary of JavaScript functions with a redistributable license:\r\n\r\nJavaScript function\t|\tLicense\r\n-------------------\t|\t--------------\r\nArray.prototype.map\t|\tPublic Domain\r\nwindow.Crypto | BSD License\r\nwindow.SecureRandom\t| BSD License\r\nwindow.EllipticCurve\t|\tBSD License\r\nwindow.BigInteger |\tBSD License\r\nwindow.QRCode | MIT License\r\nwindow.Bitcoin | MIT License\r\n\r\nThe bitaddress.org software is available under The MIT License (MIT)\r\nCopyright (c) 2011-2013 bitaddress.org\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"
 },
 {
  "repo": "jgarzik/python-bitcoinrpc",
  "language": "Python",
  "readme_contents": "=================\npython-bitcoinrpc\n=================\n\nAuthServiceProxy is an improved version of python-jsonrpc.\n\nIt includes the following generic improvements:\n\n* HTTP connections persist for the life of the AuthServiceProxy object\n* sends protocol 'version', per JSON-RPC 1.1\n* sends proper, incrementing 'id'\n* uses standard Python json lib\n* can optionally log all RPC calls and results\n* JSON-2.0 batch support\n\nIt also includes the following bitcoin-specific details:\n\n* sends Basic HTTP authentication headers\n* parses all JSON numbers that look like floats as Decimal,\n  and serializes Decimal values to JSON-RPC connections.\n\nInstallation\n============\n\n1. change the first line of setup.py to point to the directory of your installation of python 2.*\n2. run setup.py\n\nNote: This will only install bitcoinrpc. If you also want to install jsonrpc to preserve \nbackwards compatibility, you have to replace 'bitcoinrpc' with 'jsonrpc' in setup.py and run it again.\n\nOr simply install the library using pip::\n\n    pip install python-bitcoinrpc\n\nExample\n=======\n.. code:: python\n\n    from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n\n    # rpc_user and rpc_password are set in the bitcoin.conf file\n    rpc_connection = AuthServiceProxy(\"http://%s:%s@127.0.0.1:8332\"%(rpc_user, rpc_password))\n    best_block_hash = rpc_connection.getbestblockhash()\n    print(rpc_connection.getblock(best_block_hash))\n\n    # batch support : print timestamps of blocks 0 to 99 in 2 RPC round-trips:\n    commands = [ [ \"getblockhash\", height] for height in range(100) ]\n    block_hashes = rpc_connection.batch_(commands)\n    blocks = rpc_connection.batch_([ [ \"getblock\", h ] for h in block_hashes ])\n    block_times = [ block[\"time\"] for block in blocks ]\n    print(block_times)\n\nLogging all RPC calls to stderr\n===============================\n.. code:: python\n\n    from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n    import logging\n\n    logging.basicConfig()\n    logging.getLogger(\"BitcoinRPC\").setLevel(logging.DEBUG)\n\n    rpc_connection = AuthServiceProxy(\"http://%s:%s@127.0.0.1:8332\"%(rpc_user, rpc_password))\n    print(rpc_connection.getinfo())\n\nProduces output on stderr like\n\n    DEBUG:BitcoinRPC:-1-> getinfo []\n    DEBUG:BitcoinRPC:<-1- {\"connections\": 8, ...etc }\n\nSocket timeouts under heavy load\n================================\nPass the timeout argument to prevent \"socket timed out\" exceptions:\n\n.. code:: python\n\n    rpc_connection = AuthServiceProxy(\n        \"http://%s:%s@%s:%s\"%(rpc_user, rpc_password, rpc_host, rpc_port),\n        timeout=120)\n"
 },
 {
  "repo": "BTCPrivate/BitcoinPrivate-legacy",
  "language": "C++",
  "readme_contents": "Bitcoin Private\n----------------\n** 10/8/2020 - Current chain offline - New code and chain coming soon **\n\n\n**Bitcoin Private v1.0.15**\n\nP2P Port: 7933\n\nRPC Port: 7932\n\nBitcoin Private is a fork of Zclassic, merging in a snapshotted UTXO set of Bitcoin. BTCP is financial freedom.\n\nBuild\n-----------------\n### Linux\n\nGet dependencies:\n```{r, engine='bash'}\nsudo apt-get install \\\n      build-essential pkg-config libc6-dev m4 g++-multilib \\\n      autoconf libtool ncurses-dev unzip git python \\\n      zlib1g-dev wget bsdmainutils automake\n```\n\nBuild:\n```{r, engine='bash'}\n# Checkout\ngit clone https://github.com/BTCPrivate/BitcoinPrivate.git\ncd BitcoinPrivate\n# Build\n./btcputil/build.sh -j$(nproc)\n# Fetch Zcash ceremony keys\n./btcputil/fetch-params.sh\n```\n\nCreate Config File:\n```\nmkdir ~/.btcprivate\ntouch ~/.btcprivate/btcprivate.conf\nvi ~/.btcprivate/btcprivate.conf\n```\n\nAdd following lines to `btcprivate.conf` and be sure to change the rpcpassword:\n```\nrpcuser=btcprivaterpc\nrpcpassword=set-a-password\nrpcallowip=127.0.0.1\n#addnode=dnsseed.btcprivate.org\n#addnode=dnsseed.btcprivate.co\n```\n\nGet backup chain parameters (this will speed up syncing and is optional)\n(Ideally this step would be skipped to ensure integrity throughout the network)\n(However, this is a backup from the official Electrumx server 29th September 2019)\n``` \ncd ~/.btcprivate \nwget https://params.btcprivate.org/chainstate.tar.gz \ntar -zxvf chainstate.tar.gz \ncd ~/BitcoinPrivate \n```\n\nRun:\n```\n./src/btcpd\n```\n\n### Windows\nWindows is not a fully supported build - however there are two ways to build BTCP for Windows:\n\n* On Linux using [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu 16.04 Xenial is proven to work and the instructions is for such release.\n* On Windows 10 (64-bit version) using [Windows Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about) and Mingw-w64 cross compiler tool chain.\n\nWith Windows 10, Microsoft released a feature called WSL. It basically allows you to run a bash shell directly on Windows in an ubuntu environment. WSL can be installed with other Linux variants, but as mentioned before, the distro proven to work is Ubuntu.\nFollow this [link](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide) for installing WSL first\n\n### Building for Windows 64-Bit\n1. Get the usual dependencies:\n```{r, engine='bash'}\nsudo apt-get install \\\n      build-essential pkg-config libc6-dev m4 g++-multilib \\\n      autoconf libtool ncurses-dev unzip git python \\\n      zlib1g-dev wget bsdmainutils automake make cmake mingw-w64\n```\n\n2. Set the default mingw32 gcc/g++ compiler option to posix, fix problem with packages in Xenial\n```{r, engine='bash'}\nsudo apt install software-properties-common\nsudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu zesty universe\"\nsudo apt update\nsudo apt upgrade\nsudo update-alternatives --config x86_64-w64-mingw32-gcc\nsudo update-alternatives --config x86_64-w64-mingw32-g++\n```\n\n3. Install Rust\n```{r, engine='bash'}\ncurl https://sh.rustup.rs -sSf | sh\nsource ~/.cargo/env\nrustup install stable-x86_64-unknown-linux-gnu\nrustup install stable-x86_64-pc-windows-gnu\nrustup target add x86_64-pc-windows-gnu\nvi  ~/.cargo/config\n```\nand add:\n```\n[target.x86_64-pc-windows-gnu]\nlinker = \"/usr/bin/x86_64-w64-mingw32-gcc\"\n```\n\nNote that in WSL, the BTCPrivate source code must be somewhere in the default mount file system. i.e /usr/src/BTCPrivate, and not on /mnt/d/. What this means is that you cannot build directly on the windows system\n\n4. Build for Windows\n\n```{r, engine='bash'}\nPATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n./btcputil/build-win.sh -j$(nproc)\n```\n\n5. Installation\n\nIf compiling on linux, use the following command to build the executables in `./depends/x86_64-w64-mingw32/bin/\n\n```{r, engine='bash'}\nsudo make install DESTDIR=\n```\n\nIf compiling using WSL, use the following command to build the executables in `c:\\btcp\\BTCPrivate\n\n```{r, engine='bash'}\nsudo make install DESTDIR=/mnt/c/btcp/BTCPrivate\n```\n\n### Building for Mac\n1. Install xcode.\n```{r, engine='bash'}\nxcode-select --install\n```\n2. Install HomeBrew.\n```{r, engine='bash'}\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n3. Install Dependencies with HomeBrew.\n```{r, engine='bash'}\nbrew install cmake autoconf libtool automake coreutils pkgconfig gmp wget\n```\n4. Install gcc5 with HomeBrew. (** IF USING XCODE 10+ remove --without-multilib flag**)\n```{r, engine='bash'}\nbrew install gcc5 --without-multilib\n```\n5. Clone the Bitcoin Private repo to your computer.\n```{r, engine='bash'}\ngit clone https://github.com/BTCPrivate/BitcoinPrivate.git\n```\n6. Change to BitcoinPrivate Directory.\n```{r, engine='bash'}\ncd BitcoinPrivate\n```\n7. Build Bitcoin Private Daemon code.\n```{r, engine='bash'}\n./btcputil/build-mac.sh -j$(sysctl -n hw.physicalcpu)\n```\n8. Fetch key & Params.\n```{r, engine='bash'}\n./btcputil/fetch-params.sh\n```\n9. Run the Bitcoin Private Daemon that was just built.\n```{r, engine='bash'}\n./src/btcpd\n```\n\n### Additional notes\n\nIf you plan to build for windows and linux at the same time, be sure to delete all the built files for whatever you build first. An easy way to do this is by taking the binaries out of the repo, delete all files except the .git folder and then do a git hard reset.\n\n### Testnet\n\nBuild the latest version of BTCP using the instructions below, then follow the [testnet guide](doc/testnet.md)\n\nAbout\n--------------\n\n[Bitcoin Private](http://zclassic.org/), like [Zclassic](https://zclassic.org/) and [Zcash](https://z.cash/), is an implementation of the \"Zerocash\" protocol.\nBased on Zclassic's code, it intends to offer a far higher standard of privacy\nthrough a sophisticated zero-knowledge proving scheme that preserves\nconfidentiality of transaction metadata. Technical details are available\nin the Zcash [Protocol Specification](https://github.com/zcash/zips/raw/master/protocol/protocol.pdf).\n\nThis software is the Bitcoin Private client. It downloads and stores the entire history\nof Bitcoin Private transactions. Depending on the speed of your computer and network\nconnection, the synchronization process could take a day or more once the\nblockchain has reached a significant size.\n\nIt includes both `btcpd` (the daemon) and `btcp-cli` (the command line tools).\n\nSecurity Warnings\n-----------------\n\nSee important security warnings in\n[doc/security-warnings.md](doc/security-warnings.md).\n\n**Bitcoin Private is unfinished and highly experimental.** Use at your own risk.\n\nDeprecation Policy\n------------------\n\nThis release is considered deprecated 16 weeks after the release day. There\nis an automatic deprecation shutdown feature which will halt the node some\ntime after this 16 week time period. The automatic feature is based on block\nheight and can be explicitly disabled.\n\nWhere do I begin?\n-----------------\nWe have a guide for joining the main Bitcoin Private network:\nhttps://github.com/zcash/zcash/wiki/1.0-User-Guide\n\n### Need Help?\n\n* See documentation at the [Zcash Wiki](https://github.com/zcash/zcash/wiki) and the [Zclassic Wiki](https://github.com/z-classic/zclassic/wiki)\n  for help and more information.\n\n### Want to participate in development?\n\n* Code review is welcome!\n* If you want to get to know us join our Discord: https://discord.gg/9xezcaK\n* We have a brief guide for joining the Bitcoin private testnet [here](doc/testnet.md)\n\n\nParticipation in the Bitcoin Private project is subject to a\n[Code of Conduct](code_of_conduct.md).\n\nBuilding\n--------\n\nBuild BTCP along with most dependencies from source by running\n`./btcputil/build.sh`. Currently only Linux is officially supported.\n\nLicense\n-------\n\nFor license information see the file [COPYING](COPYING).\n"
 },
 {
  "repo": "xiaolai/bitcoin-whitepaper-chinese-translation",
  "language": "HTML",
  "readme_contents": "# \u6bd4\u7279\u5e01\u767d\u76ae\u4e66\u4e2d\u6587\u7248\n\n2008 \u5e74 10 \u6708 31 \u65e5\uff0c\u4e2d\u672c\u806a\u53d1\u5e03\u4e86\u300a[\u6bd4\u7279\u5e01\u767d\u76ae\u4e66](https://bitcoin.org/bitcoin.pdf)\u300b\u3002\n\n\u7f51\u4e0a\u6709\u82e5\u5e72\u4e2a\u7248\u672c\u7684\u300a\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\u300b\u4e2d\u6587\u7ffb\u8bd1\u7248\u672c\uff1a\n\n> - [tiehexue \u7ffb\u8bd1\u7248\u672c](https://github.com/wbnns/bitcoinwhitepaper/blob/master/bitcoin_cn.pdf)\n> - [shdxiang \u7ffb\u8bd1\u7248\u672c](https://github.com/wbnns/bitcoinwhitepaper/blob/master/bitcoin_zh_cn.pdf)\n> - [QQagent\uff08\u5434\u5fcc\u5bd2\uff09\u7ffb\u8bd1\u7248\u672c](https://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system)\n> - [\u91d1\u6653\u7ffb\u8bd1\u7248\u672c\uff08\u542b\u6ce8\u89e3\uff09](https://zhuanlan.zhihu.com/p/25039679)\n\n\u82e5\u5e72\u5e74\u6765\uff0c\u300a\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\u300b\u6211\u4e0d\u77e5\u9053\u8bfb\u4e86\u591a\u5c11\u904d\uff0c\u4f46\u5728\u81ea\u5df1\u52a8\u624b\u7ffb\u8bd1\u4e4b\u524d\uff0c\u4ece\u672a\u5728\u7f51\u4e0a\u9605\u8bfb\u8fc7\u4e2d\u6587\u7248 \u2014\u2014 \u56e0\u4e3a\u5bf9\u6211\u6765\u8bf4\u6ca1\u6709\u8fd9\u4e2a\u5fc5\u8981\u30022018 \u5e74 10 \u6708 31 \u65e5\u7684\u51e0\u5929\u524d\uff0c\u6211\u52a8\u624b\u7ffb\u8bd1\u4e86\u4e00\u904d\uff0c\u653e\u5728\u8fd9\u91cc\u3002\n\n\u7ffb\u8bd1\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u4ece\u6765\u90fd\u6ca1\u6709\u201c\u6700\u597d\u7684\u201d \u2014\u2014 \u4fe1\u8fbe\u96c5\u4e5f\u901a\u5e38\u53ea\u4e0d\u8fc7\u662f\u4e00\u53a2\u60c5\u613f\u800c\u5df2\u3002\u6211\u4e4b\u6240\u4ee5\u52a8\u624b\u7ffb\u8bd1\uff0c\u5e76\u975e\u51fa\u81ea\u4e8e\u81ea\u8ba4\u4e3a\u7ffb\u8bd1\u5f97\u66f4\u597d\uff0c\u4ec5\u4ec5\u662f\u51fa\u4e8e\u4e00\u65f6\u5174\u8d77\u800c\u5df2\uff0c\u524d\u540e\u8017\u8d39\u4e00\u6574\u5929\u7684\u65f6\u95f4\u3002\u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u4e5f\u53c2\u7167\u4e86\u4ee5\u4e0a\u63d0\u5230\u7684\u51e0\u4e2a\u7248\u672c\uff0c\u671f\u95f4\uff0c\u970d\u70ac\uff08[@virushuo](https://github.com/virushuo)\uff09\u548c\u8001\u732b\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u5e2e\u52a9\u3002\u53d1\u5e03\u4e4b\u540e\uff0c\u5f88\u5feb [@x1angli](https://github.com/x1angli) \u63d0\u4ea4\u4e86\u51e0\u5904\u5f88\u597d\u7684\u66f4\u6b63\u2026\u2026\n\n\u767d\u76ae\u4e66\u4e2d\u6240\u4f7f\u7528\u7684 svg \u683c\u5f0f\u56fe\u7247\uff0c\u6765\u81ea [dhimmel \u7684\u4ee3\u7801\u4ed3\u5e93](https://github.com/dhimmel/bitcoin-whitepaper)\uff0c@dhimmel \u4e3a Bitcoin Whitepaper \u91cd\u65b0\u5236\u4f5c\u4e86\u7248\u5f0f\u66f4\u597d\u7684\u82f1\u6587\u7248 [html \u7248\u672c](http://git.dhimmel.com/bitcoin-whitepaper/)\u548c [pdf \u7248\u672c](http://git.dhimmel.com/bitcoin-whitepaper/manuscript.pdf)\u3002\n\n\u300a\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\u82f1\u4e2d\u5bf9\u7167\u7248\u300b\u4e00\u5171\u6709\u4e09\u4e2a\u6587\u4ef6\u683c\u5f0f\uff1a\n\n> - [markdown](Bitcoin-Whitepaper-EN-CN.md)\n> - [html](Bitcoin-Whitepaper-EN-CN.html)\n> - [pdf](Bitcoin-Whitepaper-EN-CN.pdf)\n\n\u5f88\u9057\u61be\uff0c\u5728 github \u4e0a\u76f4\u63a5\u6d4f\u89c8 markdown \u6587\u4ef6\u65f6\uff0c\u5176\u4e2d\u7684\u6570\u5b66\u516c\u5f0f\u4e0d\u80fd\u6b63\u786e\u663e\u793a\u3002\u672c\u9875\u9762\u53f3\u4e0a\u90e8\u6709\u7eff\u8272\u7684\u6309\u94ae```Clone or download```\uff0c\u4e0b\u8f7d ZIP \u4e4b\u540e\u89e3\u538b\u7f29\u5728\u672c\u5730\u7535\u8111\uff0c\u5373\u53ef\u6b63\u5e38\u7ffb\u9605\u3002MacOS \u4e0a\u6bd4\u8f83\u597d\u7528\u7684 Markdown \u7f16\u8f91\u5668\u662f\uff1a[Typora](https://typora.io/)\uff0c*.md* \u6587\u4ef6\u53ef\u4ee5\u7528\u5b83\u9605\u8bfb\uff0c\u4ee5\u4e0a\u7684 pdf/html \u7248\u672c\u5c31\u662f\u4f7f\u7528 Typora \u5bfc\u51fa\u7684\u3002\n\n\u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5[\u70b9\u51fb\u8fd9\u91cc\u5728\u7ebf\u9605\u8bfb](http://lixiaolai.com/#/bitcoin-whitepaper-cn-en-translation/Bitcoin-Whitepaper-EN-CN.html)\u3002\n\n\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\uff01\n\n\u5176\u5b9e\u5427\uff0c\u6211\u77e5\u9053\uff0c\u8fd9\u4e1c\u897f\u771f\u6ca1\u51e0\u4e2a\u4eba\u8ba4\u771f\u770b\u7684\u2026\u2026 \u5341\u5e74\u8fc7\u6765\uff0c\u4e00\u5982\u65e2\u5f80\u5730\u5982\u6b64\u3002\n"
 },
 {
  "repo": "pooler/cpuminer",
  "language": "Assembly",
  "readme_contents": "This is a multi-threaded CPU miner for Litecoin and Bitcoin,\nfork of Jeff Garzik's reference cpuminer.\n\nLicense: GPLv2.  See COPYING for details.\n\nDownloads:  https://sourceforge.net/projects/cpuminer/files/\nGit tree:   https://github.com/pooler/cpuminer\n\nDependencies:\n\tlibcurl\t\t\thttp://curl.haxx.se/libcurl/\n\tjansson\t\t\thttp://www.digip.org/jansson/\n\t\t(jansson is included in-tree)\n\nBasic *nix build instructions:\n\t./autogen.sh\t# only needed if building from git repo\n\t./nomacro.pl\t# in case the assembler doesn't support macros\n\t./configure CFLAGS=\"-O3\" # make sure -O3 is an O and not a zero!\n\tmake\n\nNotes for AIX users:\n\t* To build a 64-bit binary, export OBJECT_MODE=64\n\t* GNU-style long options are not supported, but are accessible\n\t  via configuration file\n\nBasic Windows build instructions, using MinGW:\n\tInstall MinGW and the MSYS Developer Tool Kit (http://www.mingw.org/)\n\t\t* Make sure you have mstcpip.h in MinGW\\include\n\tIf using MinGW-w64, install pthreads-w64\n\tInstall libcurl devel (http://curl.haxx.se/download.html)\n\t\t* Make sure you have libcurl.m4 in MinGW\\share\\aclocal\n\t\t* Make sure you have curl-config in MinGW\\bin\n\tIn the MSYS shell, run:\n\t\t./autogen.sh\t# only needed if building from git repo\n\t\tLIBCURL=\"-lcurldll\" ./configure CFLAGS=\"-O3\"\n\t\tmake\n\nArchitecture-specific notes:\n\tARM:\tNo runtime CPU detection. The miner can take advantage\n\t\tof some instructions specific to ARMv5E and later processors,\n\t\tbut the decision whether to use them is made at compile time,\n\t\tbased on compiler-defined macros.\n\t\tTo use NEON instructions, add \"-mfpu=neon\" to CFLAGS.\n\tPowerPC: No runtime CPU detection.\n\t\tTo use AltiVec instructions, add \"-maltivec\" to CFLAGS.\n\tx86:\tThe miner checks for SSE2 instructions support at runtime,\n\t\tand uses them if they are available.\n\tx86-64:\tThe miner can take advantage of AVX, AVX2 and XOP instructions,\n\t\tbut only if both the CPU and the operating system support them.\n\t\t    * Linux supports AVX starting from kernel version 2.6.30.\n\t\t    * FreeBSD supports AVX starting with 9.1-RELEASE.\n\t\t    * Mac OS X added AVX support in the 10.6.8 update.\n\t\t    * Windows supports AVX starting from Windows 7 SP1 and\n\t\t      Windows Server 2008 R2 SP1.\n\t\tThe configure script outputs a warning if the assembler\n\t\tdoesn't support some instruction sets. In that case, the miner\n\t\tcan still be built, but unavailable optimizations are left off.\n\t\tThe miner uses the VIA Padlock Hash Engine where available.\n\nUsage instructions:  Run \"minerd --help\" to see options.\n\nConnecting through a proxy:  Use the --proxy option.\nTo use a SOCKS proxy, add a socks4:// or socks5:// prefix to the proxy host.\nProtocols socks4a and socks5h, allowing remote name resolving, are also\navailable since libcurl 7.18.0.\nIf no protocol is specified, the proxy is assumed to be a HTTP proxy.\nWhen the --proxy option is not used, the program honors the http_proxy\nand all_proxy environment variables.\n\nAlso many issues and FAQs are covered in the forum thread\ndedicated to this program,\n\thttps://bitcointalk.org/index.php?topic=55038.0\n"
 },
 {
  "repo": "HelloZeroNet/ZeroNet",
  "language": "JavaScript",
  "readme_contents": "# ZeroNet [![Build Status](https://travis-ci.org/HelloZeroNet/ZeroNet.svg?branch=master)](https://travis-ci.org/HelloZeroNet/ZeroNet) [![Documentation](https://img.shields.io/badge/docs-faq-brightgreen.svg)](https://zeronet.io/docs/faq/) [![Help](https://img.shields.io/badge/keep_this_project_alive-donate-yellow.svg)](https://zeronet.io/docs/help_zeronet/donate/)\n\n[\u7b80\u4f53\u4e2d\u6587](./README-zh-cn.md)\n[English](./README.md)\n\n\u0414\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u0435\u0431\u0441\u0430\u0439\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 Bitcoin \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044e \u0438 BitTorrent \u0441\u0435\u0442\u044c - https://zeronet.io\n\n\n## \u0417\u0430\u0447\u0435\u043c?\n\n* \u041c\u044b \u0432\u0435\u0440\u0438\u043c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u0443\u044e, \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u0443\u044e, \u0438 \u043d\u0435 \u043e\u0442\u0446\u0435\u043d\u0437\u0443\u0440\u0435\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c \u0438 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044e.\n* \u041d\u0435\u0442 \u0435\u0434\u0438\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u043e\u0442\u043a\u0430\u0437\u0430: \u0421\u0430\u0439\u0442 \u043e\u043d\u043b\u0430\u0439\u043d \u043f\u043e\u043a\u0430 \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 1 \u043f\u0438\u0440 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u0435\u0433\u043e.\n* \u041d\u0438\u043a\u0430\u043a\u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0445\u043e\u0441\u0442\u0438\u043d\u0433: \u0421\u0430\u0439\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f\u043c\u0438.\n* \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c: \u041e\u043d \u043d\u0438\u0433\u0434\u0435, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0432\u0435\u0437\u0434\u0435.\n* \u0411\u044b\u0441\u0442\u0440 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0444\u0444\u043b\u0430\u0439\u043d: \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0430\u0439\u0442\u0443, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d.\n\n\n## \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438\n * \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441\u0430\u0439\u0442\u044b\n * \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Namecoin .bit \u0434\u043e\u043c\u0435\u043d\u043e\u0432\n * \u041b\u0451\u0433\u043e\u043a \u0432 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435: \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u0430\u043b & \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\n * \u041a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0435\u0431\u0441\u0430\u0439\u0442\u043e\u0432 \u0432 \u043e\u0434\u0438\u043d \u043a\u043b\u0438\u043a\n * Password-less [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   based authorization: \u0412\u0430\u0448\u0430 \u0443\u0447\u0435\u0442\u043d\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u0430 \u0442\u043e\u0439 \u0436\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0435\u0439, \u0447\u0442\u043e \u0438 \u0432\u0430\u0448 Bitcoin-\u043a\u043e\u0448\u0435\u043b\u0435\u043a\n * \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 SQL-\u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 P2P: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u0430\u0439\u0442\u0430 \u0438 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n * \u0410\u043d\u043e\u043d\u0438\u043c\u043d\u043e\u0441\u0442\u044c: \u041f\u043e\u043b\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0441\u0435\u0442\u0438 Tor \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u043b\u0443\u0436\u0431 .onion \u0432\u043c\u0435\u0441\u0442\u043e \u0430\u0434\u0440\u0435\u0441\u043e\u0432 IPv4\n * TLS \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0432\u044f\u0437\u0438\n * \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 uPnP \u043f\u043e\u0440\u0442\u0430\n * \u041f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 (openproxy)\n * \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043b\u044e\u0431\u044b\u043c\u0438 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430\u043c\u0438 \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\n\n## \u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442?\n\n* \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 `zeronet.py` \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u044c \u0437\u0430\u0439\u0442\u044b (zeronet \u0441\u0430\u0439\u0442\u044b) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u0434\u0440\u0435\u0441\n  `http://127.0.0.1:43110/{zeronet_address}`\n(\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440. `http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D`).\n* \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0441\u0430\u0439\u0442 zeronet, \u043e\u043d \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043f\u0438\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e BitTorrent\n  \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0441\u0430\u0439\u0442\u043e\u0432 (html, css, js ...) \u0438\u0437 \u043d\u0438\u0445.\n* \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u0439\u0442 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0430\u043c\u0438. (\u0422.\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0443 \u0432\u0430\u0441 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435)\n* \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0430\u0439\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b `content.json`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u0445\u044d\u0448\u0435 sha512\n  \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0441\u0430\u0439\u0442\u0430.\n* \u0415\u0441\u043b\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u0441\u0430\u0439\u0442\u0430 (\u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u0430\u0434\u0440\u0435\u0441\u0430 \u0441\u0430\u0439\u0442\u0430) \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u0430\u0439\u0442, \u0442\u043e \u043e\u043d/\u043e\u043d\u0430\n  \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 `content.json` \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442 \u0435\u0433\u043e \u0434\u043b\u044f \u043f\u0438\u0440\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0438\u0440\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c `content.json`\n  (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u044c), \u043e\u043d\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u044e\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0438\u0440\u043e\u0432.\n\n####  [\u0421\u043b\u0430\u0439\u0434-\u0448\u043e\u0443 \u043e \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 ZeroNet, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u0441\u0430\u0439\u0442\u043e\u0432, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u0430\u0439\u0442\u0430\u0445 \u00bb](https://docs.google.com/presentation/d/1_2qK1IuOKJ51pgBvllZ9Yu7Au2l551t3XBgyTSvilew/pub?start=false&loop=false&delayms=3000)\n####  [\u0427\u0430\u0441\u0442\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u00bb](https://zeronet.io/docs/faq/)\n\n####  [\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 ZeroNet \u00bb](https://zeronet.io/docs/site_development/getting_started/)\n\n\n## \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b\n\n![Screenshot](https://i.imgur.com/H60OAHY.png)\n![ZeroTalk](https://zeronet.io/docs/img/zerotalk.png)\n\n#### [\u0411\u043e\u043b\u044c\u0448\u0435 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u043e\u0432 \u0432 ZeroNet \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u00bb](https://zeronet.io/docs/using_zeronet/sample_sites/)\n\n\n## \u041a\u0430\u043a \u0432\u0441\u0442\u0443\u043f\u0438\u0442\u044c\n\n* \u0421\u043a\u0430\u0447\u0430\u0439\u0442\u0435 ZeroBundle \u043f\u0430\u043a\u0435\u0442:\n  * [Microsoft Windows](https://github.com/HelloZeroNet/ZeroNet-win/archive/dist/ZeroNet-win.zip)\n  * [Apple macOS](https://github.com/HelloZeroNet/ZeroNet-mac/archive/dist/ZeroNet-mac.zip)\n  * [Linux 64-bit](https://github.com/HelloZeroNet/ZeroBundle/raw/master/dist/ZeroBundle-linux64.tar.gz)\n  * [Linux 32-bit](https://github.com/HelloZeroNet/ZeroBundle/raw/master/dist/ZeroBundle-linux32.tar.gz)\n* \u0420\u0430\u0441\u043f\u0430\u043a\u0443\u0439\u0442\u0435 \u0433\u0434\u0435 \u0443\u0433\u043e\u0434\u043d\u043e\n* \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 `ZeroNet.exe` (win), `ZeroNet(.app)` (osx), `ZeroNet.sh` (linux)\n\n### Linux \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\n\n* `wget https://github.com/HelloZeroNet/ZeroBundle/raw/master/dist/ZeroBundle-linux64.tar.gz`\n* `tar xvpfz ZeroBundle-linux64.tar.gz`\n* `cd ZeroBundle`\n* \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `./ZeroNet.sh`\n\n\u041e\u043d \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0432\u0435\u0440\u0441\u0438\u044e ZeroNet, \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0435\u0451 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.\n\n#### \u0420\u0443\u0447\u043d\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u043b\u044f Debian Linux\n\n* `sudo apt-get update`\n* `sudo apt-get install msgpack-python python-gevent`\n* `wget https://github.com/HelloZeroNet/ZeroNet/archive/master.tar.gz`\n* `tar xvpfz master.tar.gz`\n* `cd ZeroNet-master`\n* \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `python2 zeronet.py`\n* \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 http://127.0.0.1:43110/ \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435.\n\n### [Arch Linux](https://www.archlinux.org)\n\n* `git clone https://aur.archlinux.org/zeronet.git`\n* `cd zeronet`\n* `makepkg -srci`\n* `systemctl start zeronet`\n* \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 http://127.0.0.1:43110/ \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435.\n\n\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 [ArchWiki](https://wiki.archlinux.org)'s [ZeroNet\narticle](https://wiki.archlinux.org/index.php/ZeroNet) \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043f\u043e\u043c\u043e\u0449\u0438.\n\n### [Gentoo Linux](https://www.gentoo.org)\n\n* [`layman -a raiagent`](https://github.com/leycec/raiagent)\n* `echo '>=net-vpn/zeronet-0.5.4' >> /etc/portage/package.accept_keywords`\n* *(\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)* \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 Tor: `echo 'net-vpn/zeronet tor' >>\n  /etc/portage/package.use`\n* `emerge zeronet`\n* `rc-service zeronet start`\n* \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 http://127.0.0.1:43110/ \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435.\n\n\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 `/usr/share/doc/zeronet-*/README.gentoo.bz2` \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043f\u043e\u043c\u043e\u0449\u0438.\n\n### [FreeBSD](https://www.freebsd.org/)\n\n* `pkg install zeronet` or `cd /usr/ports/security/zeronet/ && make install clean`\n* `sysrc zeronet_enable=\"YES\"`\n* `service zeronet start`\n* \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 http://127.0.0.1:43110/ \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435.\n\n### [Vagrant](https://www.vagrantup.com/)\n\n* `vagrant up`\n* \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u0441\u044c \u043a VM \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `vagrant ssh`\n* `cd /vagrant`\n* \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 `python2 zeronet.py --ui_ip 0.0.0.0`\n* \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 http://127.0.0.1:43110/ \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435.\n\n### [Docker](https://www.docker.com/)\n* `docker run -d -v <local_data_folder>:/root/data -p 15441:15441 -p 127.0.0.1:43110:43110 nofish/zeronet`\n* \u042d\u0442\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 Docker \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0435\u0440 Tor, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u0442\u043a\u043b\u044e\u0447\u0451\u043d.\n  \u041e\u0441\u0442\u0435\u0440\u0435\u0433\u0430\u0439\u0442\u0435\u0441\u044c \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0441\u0442\u0438\u043d\u0433-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u0432\u0430\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c Tor \u043d\u0430 \u0441\u0432\u043e\u0438\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u0445.\n  \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0435\u0433\u043e,\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u044b `ENABLE_TOR` \u0432` true` (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `false`) \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n\n `docker run -d -e \"ENABLE_TOR=true\" -v <local_data_folder>:/root/data -p 15441:15441 -p 127.0.0.1:43110:43110 nofish/zeronet`\n* \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 http://127.0.0.1:43110/ \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435.\n\n### [Virtualenv](https://virtualenv.readthedocs.org/en/latest/)\n\n* `virtualenv env`\n* `source env/bin/activate`\n* `pip install msgpack gevent`\n* `python2 zeronet.py`\n* \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 http://127.0.0.1:43110/ \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435.\n\n## \u0422\u0435\u043a\u0443\u0449\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f\n\n* ~~\u041d\u0435\u0442 torrent-\u043f\u043e\u0445\u043e\u0436\u0435\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432~~ (\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430)\n* ~~\u041d\u0435 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u0435\u0435 \u0447\u0435\u043c Bittorrent~~ (\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Tor)\n* \u0424\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u043d\u0435 \u0441\u0436\u0430\u0442\u044b ~~ \u0438\u043b\u0438 \u043d\u0435\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u044b \u0435\u0449\u0435 ~~ (\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 TLS)\n* \u041d\u0435\u0442 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0441\u0430\u0439\u0442\u043e\u0432\n\n\n## \u041a\u0430\u043a \u044f \u043c\u043e\u0433\u0443 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0432 Zeronet?\n\n\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0443 zeronet, \u0435\u0441\u043b\u0438 \u043e\u043d \u0437\u0430\u043f\u0443\u0449\u0435\u043d\n\n```bash\n$ zeronet.py siteCreate\n...\n- Site private key (\u041f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0441\u0430\u0439\u0442\u0430): 23DKQpzxhbVBrAtvLEc2uvk7DZweh4qL3fn3jpM3LgHDczMK2TtYUq\n- Site address (\u0410\u0434\u0440\u0435\u0441 \u0441\u0430\u0439\u0442\u0430): 13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2\n...\n- Site created! (\u0421\u0430\u0439\u0442 \u0441\u043e\u0437\u0434\u0430\u043d)\n$ zeronet.py\n...\n```\n\n\u041f\u043e\u0437\u0434\u0440\u0430\u0432\u043b\u044f\u0435\u043c, \u0432\u044b \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438! \u0422\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0437\u0430\u0439\u0442\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f\n`http://localhost:43110/13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2`\n\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438: [ZeroNet Developer Documentation](https://zeronet.io/docs/site_development/getting_started/)\n\n\n## \u041a\u0430\u043a \u044f \u043c\u043e\u0433\u0443 \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c Zeronet \u0441\u0430\u0439\u0442?\n\n* \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u0444\u0430\u0439\u043b\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0432 data/13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438.\n  \u041a\u043e\u0433\u0434\u0430 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0435 \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c:\n\n```bash\n$ zeronet.py siteSign 13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2\n- Signing site (\u041f\u043e\u0434\u043f\u0438\u0441\u044c \u0441\u0430\u0439\u0442\u0430): 13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2...\nPrivate key (\u041f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447) (input hidden):\n```\n\n* \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0441\u0430\u0439\u0442\u0430, \u043f\u043e\u0442\u043e\u043c:\n\n```bash\n$ zeronet.py sitePublish 13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2\n...\nSite:13DNDk..bhC2 Publishing to 3/10 peers...\nSite:13DNDk..bhC2 Successfuly published to 3 peers\n- Serving files....\n```\n\n* \u0412\u043e\u0442 \u0438 \u0432\u0441\u0451! \u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043b\u0438 \u0438 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043b\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f.\n\n\n## \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\n\n- Bitcoin: 1QDhxQ6PraUZa21ET5fYUCPgdrwBomnFgX\n- Paypal: https://zeronet.io/docs/help_zeronet/donate/\n\n### \u0421\u043f\u043e\u043d\u0441\u043e\u0440\u044b\n\n* \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441 MacOS / Safari \u0441\u0442\u0430\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f [BrowserStack.com](https://www.browserstack.com)\n\n#### \u0421\u043f\u0430\u0441\u0438\u0431\u043e!\n\n* \u0411\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043f\u043e\u043c\u043e\u0449\u044c, \u0436\u0443\u0440\u043d\u0430\u043b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, zeronet \u0441\u0430\u0439\u0442\u044b: https://www.reddit.com/r/zeronet/\n* \u041f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0435, \u043f\u043e\u043e\u0431\u0449\u0430\u0439\u0442\u0435\u0441\u044c \u0441 \u043d\u0430\u043c\u0438: [#zeronet @ FreeNode](https://kiwiirc.com/client/irc.freenode.net/zeronet) \u0438\u043b\u0438 \u043d\u0430 [gitter](https://gitter.im/HelloZeroNet/ZeroNet)\n* Email: hello@zeronet.io (PGP: CB9613AE)\n"
 },
 {
  "repo": "cryptean/bitcoinlib",
  "language": "C#",
  "readme_contents": "\ufeff# BitcoinLib\n\n**.NET Bitcoin & Altcoins library**\n\n## Features\n\n- Compatible with [Bitcoin Core](https://bitcoin.org/en/download) RPC API.\n- Strongly-typed structures for complex RPC requests and responses.\n- Implicit JSON casting for all RPC messages.\n- Extended methods for every-day scenarios where the built-in methods fall short.\n- Exposure of all [RPC API's functionality](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list) as well as the extended methods through a single interface.\n- Custom RPC exceptions.\n- Supports all Bitcoin clones.\n- Can operate on unlimited daemons with a single library reference.\n- [Bitcoin](http://en.wikipedia.org/wiki/Bitcoin), [Litecoin](http://en.wikipedia.org/wiki/Litecoin), [Dogecoin](http://en.wikipedia.org/wiki/Dogecoin), SmartCash, Dash and other Altcoins included.\n- Each coin instance can be fully parametrized at run-time and implement its own constants.\n- Demo client included.\n- Disconnected raw RPC connector included for quick'n'dirty debugging.\n- Handles and relays RPC internal server errors along with their error code.\n- Can work without a `.config` file.\n- Fully compatible with [Mono](http://www.mono-project.com/).\n- [Test Network (testnet)](https://bitcoin.org/en/developer-examples#testnet) and [Regression Test Mode (regtest)](https://bitcoin.org/en/developer-examples#regtest-mode) ready.\n- Fully configurable.\n\n## Support\n\nPremium Support is available by our team of experts at: [support@cryptean.com](mailto:support@cryptean.com).\n\n## License\n\nSee [LICENSE](LICENSE).\n\n## NuGet packages\n\nBitcoinLib is available on NuGet:\n\n* [BitcoinLib](https://www.nuget.org/packages/BitcoinLib/)\n\n## Versioning\n\nFrom version 1.4.0, BitcoinLib follows [Semantic Versioning 2.0.0](http://semver.org/spec/v2.0.0.html).\n\n## Building from source\n\nTo build BitcoinLib from source, you will need either the\n[.NET Core SDK or Visual Studio](https://www.microsoft.com/net/download/).\n\n### Building & running tests\n\nWith Visual Studio you can build BitcoinLib and run the tests\nfrom inside the IDE, otherwise with the `dotnet` command-line\ntool you can execute:\n\n```sh\ndotnet build\n```\n\n## Instructions for Bitcoin\n\n- Locate your `bitcoin.conf` file (in Windows it's under: `%AppData%\\Roaming\\Bitcoin`, if it's not there just go ahead and create it) and add these lines:\n  ```\n  rpcuser = MyRpcUsername\n  rpcpassword = MyRpcPassword\n  server=1\n  txindex=1\n  ```\n- Edit the `app.config` file in the Console test client to best fit your needs. Make sure you also update the `bitcoin.conf` file when you alter the `Bitcoin_RpcUsername` and `Bitcoin_RpcPassword` parameters.\n\n## Instructions for Litecoin and other Bitcoin clones\n\n- Perform the same steps as those mentioned above for Bitcoin.\n- Litecoin configuration file is: `litecoin.conf` under: `%AppData%\\Roaming\\Litecoin` and its daemon is: `litecoind`.\n- Each coin can be initialized by its own interface specification:\n  - `IBitcoinService BitcoinService = new BitcoinService();`\n  - `ILitecoinService LitecoinService = new LitecoinService();`\n- Any bitcoin clone can be adopted without any further installation steps with the use of the generic `ICryptocoinService`:\n  - `ICryptocoinService cryptocoinService = new CryptocoinService(\"daemonUrl\", \"rpcUsername\", \"rpcPassword\", \"walletPassword\");`\n- Use `(ICryptocoinService).Parameters` to fully configure each coin pointer at run-time.\n\n## Configuration\n\nSample configuration:\n\n```xml\n\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <appSettings>\n    <!-- BitcoinLib settings start -->\n\n      <!-- Shared RPC settings start -->\n      <add key=\"RpcRequestTimeoutInSeconds\" value=\"10\" />\n      <!-- Shared RPC settings end -->\n\n      <!-- Bitcoin settings start -->\n      <add key=\"Bitcoin_DaemonUrl\" value=\"http://localhost:8332\" />\n      <add key=\"Bitcoin_DaemonUrl_Testnet\" value=\"http://localhost:18332\" />\n      <add key=\"Bitcoin_WalletPassword\" value=\"MyWalletPassword\" />\n      <add key=\"Bitcoin_RpcUsername\" value=\"MyRpcUsername\" />\n      <add key=\"Bitcoin_RpcPassword\" value=\"MyRpcPassword\" />\n      <!-- Bitcoin settings end -->\n\n    <!-- BitcoinLib settings end -->\n  </appSettings>\n</configuration>\n```\n\n## Bitcoin Core resources\n\n* [Bitcoin Core releases](https://bitcoincore.org/en/releases/)\n* [Bitcoin Core lifecycle schedule](https://bitcoincore.org/en/lifecycle/#schedule)\n* [Bitcoin Core RPC documentation](https://bitcoincore.org/en/doc/)\n"
 },
 {
  "repo": "progranism/Open-Source-FPGA-Bitcoin-Miner",
  "language": "VHDL",
  "readme_contents": "Open-Source FPGA Bitcoin Miner\n==============================================\n\n--------------------------------------------------------------------------------\nCopyright (C) 2011 fpgaminer@bitcoin-mining.com\n\nSee LICENSE.txt\n\n\nPurpose\n-------\n\nTo promote the free and open development of an FPGA based Bitcoin mining solution.\n\nhttp://www.weusecoins.com/\n\nhttp://bitcoin.org/\n\n\nProject Status\n--------------\n\nProject is fully functional and allows mining of Bitcoins both in a Pool and Solo.\nIt also supports Namecoins.\n\n**Current Performance:** 109 MHash/s\n*On a Terasic DE2-115 Development Board*\n\n*Note: The included default configuration file, and source files, are built for\n50 MHash/s performance (downclocked). This is meant to prevent damage to your valuable\nchip if you don't provide an appropriate cooling solution.*\n\n\nContributors\n------------\n\nThese people have worked hard to enhance and promote the Open-Source FPGA Bitcoin Miner\nproject:\n*Not listed in any particular order*\n\n**teknohog**\n1HkL2iLLQe3KJuNCgKPc8ViZs83NJyyQDM\n\n**OrphanedGland**\n1PioyqqFWXbKryxysGqoq5XAu9MTRANCEP\n\n**udif**\n\n**TheSeven**\n14Jc8vWq1mPv7vWnP5VquZZgpLEtzW2vja\n\n**makomk**\n15XX7BhQcZFUg47S4VKyiLygPTHTs9234J\n\n**newMeat1**\n1LbqTCA1cnpbbdKbXzZZfHYMe7teiczQc2\n\n\nSupported Devices\n------------------\n\nBoth Xilinx and Altera devices are currently supported. A binary configuration file and tools\nare provided for the Terasic DE2-115 Development Board, so it is easy to get up and running\nwith that board. For other devices, you can modify and compile the correct projects for your\nspecific development board.\n\n\nInstallation Instructions (for Terasic DE2-115)\n-------------------------\n\n\n### Required Equipment:\n* DE2-115 Development Kit (this is *not* a DE2. It has a Cyclone IV EP4CE115.)\n* USB Cable\n* Windows PC (Linux is also supported, but not documented)\n* Altera's Quartus II (installed on PC)\n\n\n###Instructions:\n\n####Do These Once:\n\n1) *IMPORTANT*: Please remove the clear acrylic cover on your DE2-115 board. This will restrict\nair flow and may cause the chip to overheat.\n\n2) Navigate to 'scripts/mine' and follow the instructions in 'config.example.tcl' (open in Notepad or other text editor)\n\n####Do these each time you want to run the miner:\n\n1) Connect the DE2-115 Development Kit to your PC through USB, connect its power, and turn it on.\n\n2) Ensure that the DE2-115's drivers have been installed successfully on your PC.\nConsult the DE2-115 User Guide for more information on setting up the DE2-115.\n\n3) Navigate to 'scripts/program' and run 'program-fpga-board.bat'.\n\n4) Follow the instructions provided by the program-fpga-board script.\nSelect the correct cable and programming file.\nOnce programming has succeeded, the DE2-115 is now ready to mine!\n\n*Note: This script sometimes fails immediately upon execution. Please try running it again.*\n\n5) Run 'mine.bat'\n\n6) If working correctly, 'mine.bat' will leave a console window open where it reports hashing rate, estimated hashing rate and accepted/rejected share information.\n\n7) Profit!\n\n\n####Notes:\n* You need to re-program the DE2-115 every time it is powered off and on again. Repeat steps 1 through 7 for subsequent uses.\n* Your PC needs to stay on and connected to the internet. It is acting like a controller for the FPGA,\nfeeding it data and getting back valid hashes.\n\n\nThank You!\n--------------------\n\n--------------------\n\n\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nfpgaminer@bitcoin-mining.com\nDonation Address: 1E1XgiJAzm1Wn7ZWuhkryzBoViBJ7CcRCQ\n\nDonations are most welcome! They will be used to buy more equipment. I'm currently trying to get\nan ethernet module up and running so the miner can run all on its own.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (MingW32)\n\niQIcBAEBAgAGBQJN1dAzAAoJEFFoGj2A5YKRt/IP/3LaZlEWvdUpAxcs5ANS3fcA\nNdKFiIycfnBKtmXjXiHQk4DZY+tbvuPPggzFHBA7k+3wV3WBOF2rjQiorODZff6q\nxb6gSVINUXucv/+SDzqx8CtjMa17wzSayiczC03t+IICYs2/atdLAFvbr0LwdbqZ\noBQRgYK4hD39fQzD8v/L26glh3va72ZibuO043uH/WMFgcQseTFHF7QPLJm0k0A/\nnx5p0cTtqqSf4g9MQICnNU8MGVrXXOGZU4DeItbJjNcvsomzmibha+9jQ2K8XD8F\nKzbdTK+YzvdzcDMaeOgs70SnVEFfUS1ykbdDC850M6qkRP79HBqH7Neq1Rld5ktj\nMrd2hHC4NC0fgMD3hUbTjfIcCZOPwKYvp5oCLYYO1CqzV64Ag0o9qZDr8FS+9Npv\nPEbWQpQuZqqtkhppVcCmOv4bl8XWTuQJEoxP8rWkJdfhkDUt5hwQsFrMQB7goXDc\npJZu1wnWdzpgcDyNjkNDp6sqnJGzCgft7o3hPiZO79BZZRLtdRSMHa0RdJJK5zLv\n8JqOJCJUFhVZHSKsHyGdJHppjKk/yZbBGLuJUTAfrMk5I/X5b/V9TGiWKoPN3zce\nHdd5LQF5Z881wCgrnPz2dwR5oXMUcWqd//ZAs7Jcnvp6Bz5HWrFH5FBgpfg0K3c6\nqBmd3GhQgxnFsBW62dAJ\n=Lvja\n-----END PGP SIGNATURE-----\n```\n\n\n"
 },
 {
  "repo": "bitcoin-sv/bitcoin-sv",
  "language": "C++",
  "readme_contents": "Bitcoin SV\n===========\n\nWhat is Bitcoin SV?\n-------------------\n\n[Bitcoin SV (Satoshi Vision)](https://bitcoinsv.io/) is the original Bitcoin.  It restores the original Bitcoin \nprotocol, will keep it stable, and allow it to massively scale.  Bitcoin SV will maintain the vision set out by Satoshi \nNakamoto\u2019s white paper in 2008.  This Github repository provides open-source software to enable use of Bitcoin SV.\n\nLicense\n-------\n\nBitcoin SV is released under the terms of the Open BSV license. See [LICENSE](LICENSE) for more information.\n\nSecurity\n--------\nSecurity is core to our values, and we value the input of security researchers acting in good faith to help us maintain \nhigh standards of security and privacy for our users and the Bitcoin SV blockchain.\n\nTo encourage ethical and responsible research into security vulnerabilities, the Bitcoin SV team, with support from \nCoingeek Mining, has instituted a [Responsible Disclosure Policy](doc/rdp.md).\n\nDevelopment Process\n-------------------\n\nThis Github repository contains the source code of releases.\n\nAt this early stage in Bitcoin SV's development, we are not accepting contributions to the project. We expect this to \nchange in the future.\n\nContacting the Bitcoin SV Team\n------------------------------\n\nIf you want to report a non-confidential issue with Bitcoin SV, please use the \n[GitHub issue system](https://github.com/bitcoin-sv/bitcoin-sv/issues).\n\nIf you want to report a security vulnerability, please review the [Responsible Disclosure Policy](doc/rdp.md) and send\ne-mail to <security@bitcoinsv.io>.\n\nFor any other questions or issues, please send e-mail to <support@bitcoinsv.io>.\n"
 },
 {
  "repo": "oleganza/CoreBitcoin",
  "language": "C",
  "readme_contents": "CoreBitcoin\n===========\n\nCoreBitcoin implements Bitcoin protocol in Objective-C and provides many additional APIs to make great apps.\n\nCoreBitcoin deliberately implements as much as possible directly in Objective-C with limited dependency on OpenSSL. This gives everyone an opportunity to learn Bitcoin on a clean codebase and enables all Mac and iOS developers to extend and improve Bitcoin protocol.\n\nDo not confuse this with \"Bitcoin Core\" (previously known as BitcoinQT or \"Satoshi client\") \u2014 the CoreBitcoin is stylized after Apple frameworks (like CoreAnimation and CoreFoundation), and was named this way in 2013, while Bitcoin-QT was renamed into Bitcoin Core in 2014.\n\n\nProjects using CoreBitcoin\n--------------------------\n\n- [Chain-iOS SDK](https://github.com/chain-engineering/chain-ios) (written by Oleg Andreev)\n- [Mycelium iOS Wallet](https://itunes.apple.com/us/app/mycelium-bitcoin-wallet/id943912290) (written by Oleg Andreev)\n- [bitWallet](https://itunes.apple.com/us/app/bitwallet-bitcoin-wallet/id777634714)\n- [Yallet](https://www.yallet.com)\n- [BitStore](http://bitstoreapp.com)\n- [ArcBit](http://arcbit.io)\n\nFeatures\n--------\n\nSee also [Release Notes](ReleaseNotes.md).\n\n- Encoding/decoding addresses: P2PK, P2PKH, P2SH, WIF format ([BTCAddress](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCAddress.h)).\n- Transaction building blocks: inputs, outputs, scripts ([BTCTransaction](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCTransaction.h), [BTCScript](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCScript.h)).\n- EC keys and signatures ([BTCKey](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCKey.h)).\n- High-level convenient and safe transaction builder ([BTCTransactionBuilder](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCTransactionBuilder.h)).\n- Parsing and composing bitcoin URLs and payment requests ([BTCBitcoinURL](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCBitcoinURL.h)).\n- QR Code generator and scanner in a unified API (iOS only for now; [BTCQRCode](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCQRCode.h)).\n- BIP32, BIP44 hierarchical deterministic wallets ([BTCKeychain](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCKeychain.h)).\n- BIP39 implementation ([BTCMnemonic](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCMnemonic.h)).\n- BIP70 implementation ([BTCPaymentProtocol](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCPaymentProtocol.h)).\n- [Automatic Encrypted Wallet Backup](https://github.com/oleganza/bitcoin-papers/blob/master/AutomaticEncryptedWalletBackups.md) scheme ([BTCEncryptedBackup](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCEncryptedBackup.h)).\n\nCurrency tools\n--------------\n\n- Bitcoin currency formatter with support for BTC, mBTC, bits ([BTCNumberFormatter](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCNumberFormatter.h)).\n- Currency converter (not linked to any exchange) with support for various methods to calculate exchange rate ([BTCCurrencyConverter](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCCurrencyConverter.h)).\n- Various price sources and abstract interface for adding new ones ([BTCPriceSource](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCPriceSource.h) with support for Winkdex, Coindesk, Coinbase, Paymium).\n\nAdvanced features\n-----------------\n\n- Deterministic [RFC6979](https://tools.ietf.org/html/rfc6979#section-3.2)-compliant ECDSA signatures.\n- Script evaluation machine to actually validate individual transactions ([BTCScriptMachine](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCScriptMachine.h)).\n- Blind signatures implementation ([BTCBlindSignature](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCBlindSignature.h)).\n- Math on elliptic curves: big numbers, curve points, conversion between keys, numbers and points ([BTCBigNumber](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCBigNumber.h), [BTCCurvePoint](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCCurvePoint.h)).\n- Various cryptographic primitives like hash functions and AES encryption (see [BTCData.h](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCData.h)).\n\n\nOn the roadmap\n--------------\n\nSee [all todo items](https://github.com/oleganza/CoreBitcoin/issues).\n\n- Complete support for blocks and block headers.\n- SPV mode and P2P communication with other nodes.\n- Full blockchain verification procedure and storage.\n- Importing BitcoinQT, Electrum and Blockchain.info wallets.\n- Support for [libsecp256k1](https://github.com/bitcoin/secp256k1) in addition to OpenSSL.\n- Eventual support for libconsensus as it gets more mature and feature-complete.\n\nThe goal is to implement everything useful related to Bitcoin and organize it nicely in a single powerful library. Pull requests are welcome.\n\n\nStarting points\n---------------\n\nTo encode/decode addresses see [BTCAddress](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCAddress.h).\n\nTo perform cryptographic operations, use [BTCKey](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCKey.h), [BTCBigNumber](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCBigNumber.h) and [BTCCurvePoint](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCCurvePoint). [BTCKeychain](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCKeychain.h) implements BIP32 (hierarchical deterministic wallet).\n\nTo fetch unspent coins and broadcast transactions use one of the 3rd party APIs: [BTCBlockchainInfo](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCBlockchainInfo.h) (blockchain.info) or [Chain-iOS](https://github.com/chain-engineering/chain-ios) (recommended).\n\nFor full wallet workflow see [BTCTransaction+Tests.m](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCTransaction+Tests.m) (fetch unspent outputs, compose a transaction, sign inputs, verify and broadcast).\n\nFor multisignature scripts usage see [BTCScript+Tests.m](https://github.com/oleganza/CoreBitcoin/blob/master/CoreBitcoin/BTCScript+Tests.m): compose and unlock multisig output.\n\nAll other files with `+Tests` in their name are worth checking out as they contain useful sample code.\n\n\nUsing CoreBitcoin CocoaPod (recommended)\n----------------------------------------\n\nAdd this to your Podfile:\n\n    pod 'CoreBitcoin', :podspec => 'https://raw.github.com/oleganza/CoreBitcoin/master/CoreBitcoin.podspec'\n\nRun in Terminal:\n\n    $ pod install\n\nInclude headers:\n\n\t#import <CoreBitcoin/CoreBitcoin.h>\n\nIf you'd like to use categories, include different header:\n\n\t#import <CoreBitcoin/CoreBitcoin+Categories.h>\n\n\nUsing CoreBitcoin.framework\n---------------------------\n\nClone this repository and build all libraries:\n\n\t$ ./update_openssl.sh\n\t$ ./build_libraries.sh\n\nCopy iOS or OS X framework located in binaries/iOS or binaries/OSX to your project.\n\nInclude headers:\n\n\t#import <CoreBitcoin/CoreBitcoin.h>\n\t\nThere are also raw universal libraries (.a) with headers located in binaries/include, if you happen to need them for some reason. Frameworks and binary libraries have OpenSSL built-in. If you have different version of OpenSSL in your project, consider using CocoaPods or raw sources of CoreBitcoin.\n\n\nSwift\n-----\n\nWe love Swift and design the code to be compatible with Swift. That means using modern enums, favoring initializers over factory methods, avoiding obscure C features etc. You are welcome to try using CoreBitcoin from Swift, please file bugs if you have problems.\n\nSwift is awesome to write crypto in it (due to explicit optionals, generics and first-class structs) and we would love to rewrite the entire CoreBitcoin and even relevant portions of OpenSSL in it. Unfortunately, for a year or two it's just out of the question due to instability. And then, using Swift-only features on the API level would mean that Objective-C code wouldn't be able to use CoreBitcoin. Given that, in the medium term we will focus solely on Objective-C implementation compatible with Swift. When everyone jumps exclusively on Swift, we'll make a complete rewrite.\n\n\nContribute\n----------\n\nFeel free to open issues, drop us pull requests or contact us to discuss how to do things.\n\nFollow existing code style and use 4 spaces instead of tabs. Methods have opening braces on a new line. There's no line width limit.\n\nEmail: [oleganza@gmail.com](mailto:oleganza@gmail.com)\n\nTwitter: [@oleganza](http://twitter.com/oleganza)\n\nTo publish on CocoaPods:\n\n    $ pod trunk push --verbose --use-libraries\n\n\nLicense\n-------\n\nReleased under [WTFPL](http://www.wtfpl.net) (except for OpenSSL). Have a nice day.\n\n"
 },
 {
  "repo": "janoside/btc-rpc-explorer",
  "language": "JavaScript",
  "readme_contents": "# BTC RPC Explorer\n\n## Self-Hosted Bitcoin explorer for everyone running [Bitcoin Core](https://github.com/bitcoin/bitcoin).\n\n[![npm version][npm-ver-img]][npm-ver-url] [![NPM downloads][npm-dl-alltime-img]][npm-dl-url]\n\n\n---\n\n\n![homepage](./public/img/screenshots/homepage.png)\n\n\n\nThis is a self-hosted explorer for the Bitcoin blockchain, driven by RPC calls to your own [Bitcoin](https://github.com/bitcoin/bitcoin) node. It is easy to run and can be connected to other tools (like Electrum servers) to achieve a full-featured explorer.\n\nWhatever reasons you may have for running a full node (trustlessness, technical curiosity, supporting the network, etc) it's valuable to appreciate the *fullness* of your node. With this explorer, you can explore not just the blockchain database, but also explore all of the functional capabilities of your own node.\n\nLive demos:\n\n* [BitcoinExplorer.org](https://bitcoinexplorer.org) / [testnet](https://testnet.bitcoinexplorer.org) / [signet](https://signet.bitcoinexplorer.org)\n\n\n# Features\n\n* Network Summary dashboard\n* View details of blocks, transactions, and addresses\n* Analysis tools for viewing stats on blocks, transactions, and miner activity\n* JSON REST API\n* See raw JSON content from bitcoind used to generate most pages\n* Search by transaction ID, block hash/height, and address\n* Optional transaction history for addresses by querying from Electrum-protocol servers (e.g. Electrs, ElectrumX), blockchain.com, blockchair.com, or blockcypher.com\n* Mempool summary, with fee, size, and age breakdowns\n* RPC command browser and terminal\n\n\n# Changelog / Release notes\n\nSee [CHANGELOG.md](/CHANGELOG.md).\n\n\n# Getting started\n\n## Prerequisites\n\n1. Install `Bitcoin Core` - [instructions](https://bitcoin.org/en/full-node). Ensure that `Bitcoin Core`'s' RPC server is enabled (`server=1`).\n2. Allow `Bitcoin Core` to synchronize with the Bitcoin network (you *can* use this tool while sychronizing, but some pages may fail).\n3. Install Node.js (12.9+ required, 16+ recommended).\n\n### Note about pruning and indexing configurations\n\nThis tool is designed to work best with full transaction indexing enabled (`txindex=1`) and pruning **disabled**. \nHowever, if you're running Bitcoin Core v0.21+ you can run *without* `txindex` enabled and/or *with* `pruning` enabled and this tool will continue to function, but some data will be incomplete or missing. Also note that such Bitcoin Core configurations receive less thorough testing.\n\nIn particular, with `pruning` enabled and/or `txindex` disabled, the following functionality is altered:\n\n* You will only be able to search for mempool, recently confirmed, and wallet transactions by their txid. Searching for non-wallet transactions that were confirmed over 3 blocks ago is only possible if you provide the confirmed block height in addition to the txid.\n* Pruned blocks will display basic header information, without the list of transactions. Transactions in pruned blocks will not be available, unless they're wallet-related. Block stats will only work for unpruned blocks.\n* The address and amount of previous transaction outputs will not be shown, only the txid:vout.\n* The mining fee will only be available for unconfirmed transactions.\n\n\n## Install / Run\n\nIf you're running on mainnet with the default datadir and port, the default configuration should *Just Work*. Otherwise, see the **Configuration** section below.\n\n#### Install via `npm`:\n\n*Note: npm v7+ is required*\n\n```bash\nnpm install -g btc-rpc-explorer\nbtc-rpc-explorer\n```\n\n#### Run from source:\n\n1. `git clone https://github.com/janoside/btc-rpc-explorer`\n2. `cd btc-rpc-explorer`\n3. `npm install`\n4. `npm start`\n\n\n#### Install via AUR Arch Linux:\n\n###### Note: The below AUR package was created and is maintained by [@dougEfresh](https://github.com/dougEfresh). The details and history of the package can be seen [here](https://aur.archlinux.org/packages/btc-rpc-explorer/).\n\n1. `git clone https://aur.archlinux.org/btc-rpc-explorer.git`\n2. `cd btc-rpc-explorer`\n3. `makepkg -csi`\n4. `systemctl enable --now btc-rpc-explorer`\n\n\n\nAfter a default installation+startup using any of the above methods, the app can be viewed at [http://127.0.0.1:3002/](http://127.0.0.1:3002/)\n\n\n## Configuration\n\nConfiguration options may be set via environment variables or CLI arguments.\n\n#### Configuration with environment variables\n\nTo configure with environment variables, you need to create one of the 2 following files and enter values in it:\n\n1. `~/.config/btc-rpc-explorer.env`\n2. `.env` in the working directory for btc-rpc-explorer\n\nIn either case, refer to [.env-sample](.env-sample) for a list of the options and formatting details.\n\n#### Configuration with CLI args\n\nFor configuring with CLI arguments, run `btc-rpc-explorer --help` for the full list of options. An example execution is:\n\n```bash\nbtc-rpc-explorer --port 8080 --bitcoind-port 18443 --bitcoind-cookie ~/.bitcoin/regtest/.cookie\n```\n\n#### Demo site settings\n\nTo match the features visible on the demo site at [BitcoinExplorer.org](https://bitcoinexplorer.org) you'll need to set the following non-default configuration values:\n\n    BTCEXP_DEMO=true \t\t# enables some demo/informational aspects of the site\n    BTCEXP_NO_RATES=false\t\t# enables querying of exchange rate data\n    BTCEXP_SLOW_DEVICE_MODE=false\t# enables resource-intensive tasks (UTXO set query, 24hr volume querying) that are inappropriate for \"slow\" devices\n    BTCEXP_ADDRESS_API=electrum \t# use electrum-protocol servers for address lookups\n    BTCEXP_ELECTRUM_SERVERS=tcp://your-electrum-protocol-server-host:50001\t\t# address(es) for my electrum-protocol server(s)\n    BTCEXP_IPSTACK_APIKEY=your-api-key\t\t# enable peer ip geo-location\n    BTCEXP_MAPBOX_APIKEY=your-api-key\t\t# enable map of peer locations\n\n#### SSO authentication\n\nYou can configure SSO authentication similar to what ThunderHub and RTL provide.\nTo enable it, make sure `BTCEXP_BASIC_AUTH_PASSWORD` is **not** set and set `BTCEXP_SSO_TOKEN_FILE` to point to a file write-accessible by btc-rpc-explorer.\nThen to access btc-rpc-explorer, your SSO provider needs to read the token from this file and set it in URL parameter `token`.\nFor security reasons the token changes with each login, so the SSO provider needs to read it each time!\n\nAfter successful access with the token, a cookie is set for authentication, so you don't need to worry about it anymore.\nTo improve user experience you can set `BTCEXP_SSO_LOGIN_REDIRECT_URL` to the URL of your SSO provider.\nThis will cause users to be redirected to your login page if needed.\n\n## Run via Docker\n\n1. `docker build -t btc-rpc-explorer .`\n2. `docker run -it -p 3002:3002 -e BTCEXP_HOST=0.0.0.0 btc-rpc-explorer`\n\n\n## Reverse proxy with HTTPS\n\nSee [instructions here](docs/nginx-reverse-proxy.md) for using nginx+certbot (letsencrypt) for an HTTPS-accessible, reverse-proxied site.\n\n\n# Support\n\nIf you get value from this project, please consider supporting my work with a donation. All donations are truly appreciated.\n\nDonate via BTC Pay Server:\n\n* [https://donate.bitcoinexplorer.org](https://donate.bitcoinexplorer.org)\n\nOr, via a lightning address:\n\nthanks@donate.btc21.org\n\n\n[npm-ver-img]: https://img.shields.io/npm/v/btc-rpc-explorer.svg?style=flat\n[npm-ver-url]: https://www.npmjs.com/package/btc-rpc-explorer\n[npm-dl-img]: http://img.shields.io/npm/dm/btc-rpc-explorer.svg?style=flat\n[npm-dl-url]: https://npmcharts.com/compare/btc-rpc-explorer?minimal=true\n\n[npm-dl-weekly-img]: https://badgen.net/npm/dw/btc-rpc-explorer?icon=npm&cache=300\n[npm-dl-monthly-img]: https://badgen.net/npm/dm/btc-rpc-explorer?icon=npm&cache=300\n[npm-dl-yearly-img]: https://badgen.net/npm/dy/btc-rpc-explorer?icon=npm&cache=300\n[npm-dl-alltime-img]: https://badgen.net/npm/dt/btc-rpc-explorer?icon=npm&cache=300&label=total%20downloads\n\n"
 },
 {
  "repo": "m0mchil/poclbm",
  "language": "Python",
  "readme_contents": "Usage: poclbm.py [OPTION]... SERVER[#tag]...\nSERVER is one or more [http[s]|stratum://]user:pass@host:port          (required)\n[#tag] is a per SERVER user friendly name displayed in stats (optional)\n\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  --verbose             verbose output, suitable for redirection to log file\n  -q, --quiet           suppress all output except hash rate display\n  --proxy=PROXY         specify as\n                        [[socks4|socks5|http://]user:pass@]host:port (default\n                        proto is socks5)\n\n  Miner Options:\n    -r RATE, --rate=RATE\n                        hash rate display interval in seconds, default=1 (60\n                        with --verbose)\n    -e ESTIMATE, --estimate=ESTIMATE\n                        estimated rate time window in seconds, default 900 (15\n                        minutes)\n    -a ASKRATE, --askrate=ASKRATE\n                        how many seconds between getwork requests, default 5,\n                        max 10\n    -t TOLERANCE, --tolerance=TOLERANCE\n                        use fallback pool only after N consecutive connection\n                        errors, default 2\n    -b FAILBACK, --failback=FAILBACK\n                        attempt to fail back to the primary pool after N\n                        seconds, default 60\n    --cutoff_temp=CUTOFF_TEMP\n                        (requires github.com/mjmvisser/adl3) temperature at\n                        which to skip kernel execution, in C, default=95\n    --cutoff_interval=CUTOFF_INTERVAL\n                        (requires adl3) how long to not execute calculations\n                        if CUTOFF_TEMP is reached, in seconds, default=0.01\n    --no-server-failbacks\n                        disable using failback hosts provided by server\n\n  Kernel Options:\n    -p PLATFORM, --platform=PLATFORM\n                        use platform by id\n    -d DEVICE, --device=DEVICE\n                        use device by id, by default asks for device\n    -w WORKSIZE, --worksize=WORKSIZE\n                        work group size, default is maximum returned by opencl\n    -f FRAMES, --frames=FRAMES\n                        will try to bring single kernel execution to 1/frames\n                        seconds, default=30, increase this for less desktop\n                        lag\n    -s FRAMESLEEP, --sleep=FRAMESLEEP\n                        sleep per frame in seconds, default 0\n    -v, --vectors       use vectors"
 },
 {
  "repo": "BlockchainCommons/Learning-Bitcoin-from-the-Command-Line",
  "language": "Jupyter Notebook",
  "readme_contents": "# Learning Bitcoin from the Command Line 2.2.0\n### _by Christopher Allen and Shannon Appelcline_\n\n![](https://www.blockchaincommons.com/images/projects/lbtc-screen.png)\n\nLearning Bitcoin from the Command Line is a tutorial for working with Bitcoin (and Lightning) that teaches direct interaction with the servers themselves, as the most robust and secure way to begin cryptocurrency work.\n\n> NOTE: This is a draft in progress, so that I can get some feedback from early reviewers. It is not yet ready for use.\n\n_This tutorial assumes that you have some minimal background of how to use the command line interface. If not, there are many tutorials available, and I have one for Mac users at https://github.com/ChristopherA/intro-mac-command-line._\n\n## Translations\n\n* [Portuguese](https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line/tree/portuguese-translation/pt/README.md) \u2014 v2.0.1 translation\n* [Spanish](https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line/tree/spanish-translation/es/README.md) - v2.0.1 translation\n\nIf you'd like to make your own translation, please see [Contributing](https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line/tree/master#contributing), below.\n\n## Table of Contents\n\n### PART ONE: PREPARING FOR BITCOIN\n\n**Status:** Finished. Updated for 0.20.\n\n* [1.0: Introduction to Programming with Bitcoin Core and Lightning](01_0_Introduction.md)\n    * [Interlude: Introducing Bitcoin](01_1_Introducing_Bitcoin.md)\n* [2.0: Setting Up a Bitcoin-Core VPS](02_0_Setting_Up_a_Bitcoin-Core_VPS.md)\n  * [2.1: Setting Up a Bitcoin-Core VPS with Bitcoin Standup](02_1_Setting_Up_a_Bitcoin-Core_VPS_with_StackScript.md)\n  * [2.2: Setting Up a Bitcoin-Core Machine via Other Means](02_2_Setting_Up_Bitcoin_Core_Other.md)\n\n### PART TWO: USING BITCOIN-CLI\n\n**Status:** Finished. Updated for 0.20.\n\n* [3.0: Understanding Your Bitcoin Setup](03_0_Understanding_Your_Bitcoin_Setup.md)\n  * [3.1: Verifying Your Bitcoin Setup](03_1_Verifying_Your_Bitcoin_Setup.md)\n  * [3.2: Knowing Your Bitcoin Setup](03_2_Knowing_Your_Bitcoin_Setup.md)\n  * [3.3: Setting Up Your Wallet](03_3_Setting_Up_Your_Wallet.md)\n    * [Interlude: Using Command-Line Variables](03_3__Interlude_Using_Command-Line_Variables.md)\n  * [3.4: Receiving a Transaction](03_4_Receiving_a_Transaction.md)\n  * [3.5: Understanding the Descriptor](03_5_Understanding_the_Descriptor.md)\n* [4.0: Sending Bitcoin Transactions](04_0_Sending_Bitcoin_Transactions.md)\n  * [4.1: Sending Coins the Easy Way](04_1_Sending_Coins_The_Easy_Way.md)\n  * [4.2: Creating a Raw Transaction](04_2_Creating_a_Raw_Transaction.md)\n     * [Interlude: Using JQ](04_2__Interlude_Using_JQ.md)\n  * [4.3: Creating a Raw Transaction with Named Arguments](04_3_Creating_a_Raw_Transaction_with_Named_Arguments.md)\n  * [4.4: Sending Coins with Raw Transactions](04_4_Sending_Coins_with_a_Raw_Transaction.md)\n     * [Interlude: Using Curl](04_4__Interlude_Using_Curl.md)\n  * [4.5: Sending Coins with Automated Raw Transactions](04_5_Sending_Coins_with_Automated_Raw_Transactions.md)\n  * [4.6: Creating a Segwit Transaction](04_6_Creating_a_Segwit_Transaction.md)\n* [5.0: Controlling Bitcoin Transactions](05_0_Controlling_Bitcoin_Transactions.md)\n  * [5.1 Watching for Stuck Transactions](05_1_Watching_for_Stuck_Transactions.md)\n  * [5.2: Resending a Transaction with RBF](05_2_Resending_a_Transaction_with_RBF.md)\n  * [5.3: Funding a Transaction with CPFP](05_3_Funding_a_Transaction_with_CPFP.md)\n* [6.0: Expanding Bitcoin Transactions with Multisigs](06_0_Expanding_Bitcoin_Transactions_Multisigs.md)\n  * [6.1: Sending a Transaction with a Multisig](06_1_Sending_a_Transaction_to_a_Multisig.md)\n  * [6.2: Spending a Transaction with a Multisig](06_2_Spending_a_Transaction_to_a_Multisig.md)\n  * [6.3: Sending & Spending an Automated Multisig](06_3_Sending_an_Automated_Multisig.md)\n* [7.0: Expanding Bitcoin Transactions with PSBTs](07_0_Expanding_Bitcoin_Transactions_PSBTs.md)\n  * [7.1: Creating a Partially Signed Bitcoin Transaction](07_1_Creating_a_Partially_Signed_Bitcoin_Transaction.md)\n  * [7.2: Using a Partially Signed Bitcoin Transaction](07_2_Using_a_Partially_Signed_Bitcoin_Transaction.md)\n  * [7.3: Integrating with Hardware Wallets](07_3_Integrating_with_Hardware_Wallets.md)\n* [8.0: Expanding Bitcoin Transactions in Other Ways](08_0_Expanding_Bitcoin_Transactions_Other.md)\n  * [8.1: Sending a Transaction with a Locktime](08_1_Sending_a_Transaction_with_a_Locktime.md)\n  * [8.2: Sending a Transaction with Data](08_2_Sending_a_Transaction_with_Data.md)\n\n### PART THREE: BITCOIN SCRIPTING\n\n**Status:** Finished. Updated for 0.20 and btcdeb.\n\n* [9.0: Introducing Bitcoin Scripts](09_0_Introducing_Bitcoin_Scripts.md)\n  * [9.1: Understanding the Foundation of Transactions](09_1_Understanding_the_Foundation_of_Transactions.md)\n  * [9.2: Running a Bitcoin Script](09_2_Running_a_Bitcoin_Script.md)\n  * [9.3: Testing a Bitcoin Script](09_3_Testing_a_Bitcoin_Script.md)\n  * [9.4: Scripting a P2PKH](09_4_Scripting_a_P2PKH.md)\n  * [9.5: Scripting a P2WPKH](09_5_Scripting_a_P2WPKH.md)\n* [10.0: Embedding Bitcoin Scripts in P2SH Transactions](10_0_Embedding_Bitcoin_Scripts_in_P2SH_Transactions.md)\n  * [10.1: Understanding the Foundation of P2SH](10_1_Understanding_the_Foundation_of_P2SH.md)\n  * [10.2: Building the Structure of P2SH](10_2_Building_the_Structure_of_P2SH.md)\n  * [10.3: Running a Bitcoin Script with P2SH](10_3_Running_a_Bitcoin_Script_with_P2SH.md)\n  * [10.4: Scripting a Multisig](10_4_Scripting_a_Multisig.md)\n  * [10.5: Scripting a Segwit Script](10_5_Scripting_a_Segwit_Script.md)\n  * [10.6: Spending a P2SH Transaction](10_6_Spending_a_P2SH_Transaction.md)\n* [11.0: Empowering Timelock with Bitcoin Scripts](11_0_Empowering_Timelock_with_Bitcoin_Scripts.md)\n  * [11.1: Understanding Timelock Options](11_1_Understanding_Timelock_Options.md)\n  * [11.2: Using CLTV in Scripts](11_2_Using_CLTV_in_Scripts.md)\n  * [11.3: Using CSV in Scripts](11_3_Using_CSV_in_Scripts.md)\n* [12.0: Expanding Bitcoin Scripts](12_0_Expanding_Bitcoin_Scripts.md)\n  * [12.1: Using Script Conditionals](12_1_Using_Script_Conditionals.md)\n  * [12.2: Using Other Script Commands](12_2_Using_Other_Script_Commands.md)\n* [13.0: Designing Real Bitcoin Scripts](13_0_Designing_Real_Bitcoin_Scripts.md)\n  * [13.1: Writing Puzzles Scripts](13_1_Writing_Puzzle_Scripts.md)\n  * [13.2: Writing Complex Multisig Scripts](13_2_Writing_Complex_Multisig_Scripts.md)\n  * [13.3: Empowering Bitcoin with Scripts](13_3_Empowering_Bitcoin_with_Scripts.md)\n\n### PART FOUR: PRIVACY\n\n**Status:** Finished.\n\n* [14.0: Using Tor](14_0_Using_Tor.md)\n  * [14.1: Verifying Your Tor Setup](14_1_Verifying_Your_Tor_Setup.md)\n  * [14.2: Changing Your Bitcoin Hidden Services](14_2_Changing_Your_Bitcoin_Hidden_Services.md)\n  * [14.3: Adding SSH Hidden Services](14_3_Adding_SSH_Hidden_Services.md)\n\n* [15.0: Using i2p](15_0_Using_i2p.md)\n  * [15.1: Bitcoin Core as an I2P (Invisible Internet Project) service](15_1_i2p_service.md)\n\n### PART FIVE: PROGRAMMING WITH RPC\n\n**Status:** Finished.\n\n* [16.0: Talking to Bitcoind with C](16_0_Talking_to_Bitcoind.md)\n  * [16.1: Accessing Bitcoind in C with RPC Libraries](16_1_Accessing_Bitcoind_with_C.md)\n  * [16.2: Programming Bitcoind in C with RPC Libraries](16_2_Programming_Bitcoind_with_C.md)\n  * [16.3: Receiving Notifications in C with ZMQ Libraries](16_3_Receiving_Bitcoind_Notifications_with_C.md)\n* [17.0: Programming Bitcoin with Libwally](17_0_Programming_with_Libwally.md)\n   * [17.1: Setting Up Libwally](17_1_Setting_Up_Libwally.md)\n   * [17.2: Using BIP39 in Libwally](17_2_Using_BIP39_in_Libwally.md)\n   * [17.3: Using BIP32 in Libwally](17_3_Using_BIP32_in_Libwally.md)\n   * [17.4: Using PSBTs in Libwally](17_4_Using_PSBTs_in_Libwally.md)\n   * [17.5: Using Scripts in Libwally](17_5_Using_Scripts_in_Libwally.md)\n   * [17.6: Using Other Functions in Libwally](17_6_Using_Other_Functions_in_Libwally.md)\n   * [17.7: Integrating Libwally and Bitcoin-CLI](17_7_Integrating_Libwally_and_Bitcoin-CLI.md)\n* [18.0: Talking to Bitcoind with Other Languages](18_0_Talking_to_Bitcoind_Other.md)\n  * [18.1: Accessing Bitcoind with Go](18_1_Accessing_Bitcoind_with_Go.md)\n  * [18.2: Accessing Bitcoind with Java](18_2_Accessing_Bitcoind_with_Java.md)\n  * [18.3: Accessing Bitcoind with Node JS](18_3_Accessing_Bitcoind_with_NodeJS.md)\n  * [18.4: Accessing Bitcoind with Python](18_4_Accessing_Bitcoind_with_Python.md)\n  * [18.5: Accessing Bitcoind with Rust](18_5_Accessing_Bitcoind_with_Rust.md)\n  * [18.6: Accessing Bitcoind with Swift](18_6_Accessing_Bitcoind_with_Swift.md)\n\n### PART SIX: USING LIGHTNING-CLI\n\n**Status:** Finished.\n\n* [19.0: Understanding Your Lightning Setup](19_0_Understanding_Your_Lightning_Setup.md)\n  * [19.1: Verifying Your c-lightning Setup](19_1_Verifying_Your_Lightning_Setup.md)\n  * [19.2: Knowing Your c-lightning Setup](19_2_Knowing_Your_lightning_Setup.md)\n     * [Interlude: Accessing a Second Lightning Node](19_2__Interlude_Accessing_a_Second_Lightning_Node.md)\n  * [19.3: Creating a Lightning Channel](19_3_Setting_Up_a_Channel.md)\n* [20.0: Using Lightning](20_0_Using_Lightning.md)\n  * [20.1: Generating a Payment Request](20_1_Generate_a_Payment_Request.md)\n  * [20.2: Paying an Invoice](20_2_Paying_a_Invoice.md)\n  * [20.3: Closing a Lighnting Channel]((20_3_Closing_a_Channel.md))\n  * [20.4: Expanding the Lightning Network](20_4_Lightning_Network_Review.md)\n\n### APPENDICES\n\n**Status:** Finished.\n\n* [Appendices](A0_Appendices.md)\n  * [Appendix I: Understanding Bitcoin Standup](A1_0_Understanding_Bitcoin_Standup.md)\n  * [Appendix II: Compiling Bitcoin from Source](A2_0_Compiling_Bitcoin_from_Source.md)\n  * [Appendix III: Using Bitcoin Regtest](A3_0_Using_Bitcoin_Regtest.md)\n\n## Status - Beta\n\nv2.1.0 of **Learning Bitcoin from the Command Line** is feature complete and has undergone full editing and integration. It is ready for learning\n\nWe are also tentatively considering what we could include in a [v3.0](TODO-30.md) of the course. If you'd like to support work of that sort, become a [GitHub Sponsor](https://github.com/sponsors/BlockchainCommons) or support us at our [BTCPay Server](https://btcpay.blockchaincommons.com/), and let us know that **Learning Bitcoin** was the reason why.\n### Version History\n\n#### 2.2.0 (November 17, 2021)\n\n* [Portuguese translation](https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line/tree/master/pt)\n* [Spanish translation](https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line/tree/master/es)\n\n#### 2.1.0 (October 12, 2021)\n\n* New chapter 15  (i2p).\n* Added fixes to wallet usage from 0.21\n* Updated install to new Bitcoin Scripts for 22.0\n* Incorporated numerous fixes revealed by first translation projects\n\n#### 2.0.1 (June 15, 2021)\n\n* Numerous small patches following 2.0\n* Intended as baseline for translations (2.2.0), but 2.1.0 material on i2p slipped in\n\n#### 2.0.0 (November 3, 2020)\n\n* Second major release of Learning Bitcoin\n* Added material on Segwit, Tor, hardware wallets, lightning, regtest\n* Completely previous unfinished work on programming using a variety of languages\n\n#### 1.0.0 (pre-2020)\n\n* Original, extensive but incomplete version\n* Contained comprehensive sections on setup, bitcoin-cli, and scripting\n\n## Origin, Authors, Copyright & Licenses\n\nUnless otherwise noted (either in this [/README.md](./README.md) or in the file's header comments) the contents of this repository are Copyright \u00a9 2020 by Blockchain Commons, LLC, and are licensed under  [CC-BY](./LICENSE-CC-BY-4.0.md).\n\n## Financial Support\n\n*Learning Bitcoin from the Command Line* is a project of [Blockchain Commons](https://www.blockchaincommons.com/). We are proudly a \"not-for-profit\" social benefit corporation committed to open source & open development. Our work is funded entirely by donations and collaborative partnerships with people like you. Every contribution will be spent on building open tools, technologies, and techniques that sustain and advance blockchain and internet security infrastructure and promote an open web.\n\nTo financially support further development of *Learning Bitcoin from the Command Line* and other projects, please consider becoming a Patron of Blockchain Commons through ongoing monthly patronage as a [GitHub Sponsor](https://github.com/sponsors/BlockchainCommons). You can also support Blockchain Commons with bitcoins at our [BTCPay Server](https://btcpay.blockchaincommons.com/).\n\n## Contributing\n\nWe encourage public contributions through issues and pull requests! Please review [CONTRIBUTING.md](./CONTRIBUTING.md) for details on our development process. All contributions to this repository require a GPG signed [Contributor License Agreement](./CLA.md).\n\nif you would like to provide a translation of Learning Bitcoin into another language, please additionally see [TRANSLATING.md](./TRANSLATING.md).\n\n### Discussions\n\nThe best place to talk about Blockchain Commons and its projects is in our GitHub Discussions areas.\n\n[**Blockchain Commons Discussions**](https://github.com/BlockchainCommons/Community/discussions). For developers, interns, and patrons of Blockchain Commons, please use the discussions area of the [Community repo](https://github.com/BlockchainCommons/Community) to talk about general Blockchain Commons issues, the intern program, or topics other than those covered by the [Gordian Developer Community](https://github.com/BlockchainCommons/Gordian-Developer-Community/discussions) or the \n[Gordian User Community](https://github.com/BlockchainCommons/Gordian/discussions).'\n\n### Other Questions & Problems\n\nAs an open-source, open-development community, Blockchain Commons does not have the resources to provide direct support of our projects. Please consider the discussions area as a locale where you might get answers to questions. Alternatively, please use this repository's [issues](../../issues) feature. Unfortunately, we can not make any promises on response time.\n\nIf your company requires support to use our projects, please feel free to contact us directly about options. We may be able to offer you a contract for support from one of our contributors, or we might be able to point you to another entity who can offer the contractual support that you need.\n\n### Credits\n\nThe following people directly contributed to this repository. You can add your name here by getting involved. The first step is learning how to contribute from our [CONTRIBUTING.md](./CONTRIBUTING.md) documentation.\n\n\n| Name              | Role                | Github                                            | Email                                 | GPG Fingerprint                                    |\n| ----------------- | ------------------- | ------------------------------------------------- | ------------------------------------- | -------------------------------------------------- |\n| Christopher Allen | Lead Author | [@ChristopherA](https://github.com/ChristopherA) | \\<ChristopherA@LifeWithAlacrity.com\\> | FDFE 14A5 4ECB 30FC 5D22  74EF F8D3 6C91 3574 05ED |\n| Shannon Appelcline |  Lead Author | [@shannona](https://github.com/shannona) | \\<shannon.appelcline@gmail.com\\> | 7EC6 B928 606F 27AD |\n\n\nAdditional contributions are listed below:\n\n| Role                | Names                                    |\n| ------------------- | ---------------------------------------- |\n| ***Contributors:*** | [gg2001](https://github.com/gg2001) (Go, Node.js sections), [gorazdko](https://github.com/gorazdko) (Rust section), [Javier Vargas](https://github.com/javiervargas) (C, Java, Lightning, Tor sections), [jodobear](https://github.com/jodobear) (Appendix: Compiling Bitcoin, Python section), [Prayank](    https://github.com/prayank23) (i2p sections)                               |\n| ***Reviewers:***    | Glen Willem [@gwillem](https://github.com/gwillem) |\n| ***Sponsors:***     | Blockstream Corporation                  |\n\n### Translation Credits\n\nThanks to the volunteers who spent extensive time writing and reviewing other-language translations of the original English-language course.\n\n#### Portuguese Translation\n\n| Name              | Role                | Github                                            | \n| ----------------- | ------------------- | ------------------------------------------------- | \n| Namcios | Translator & Reviewer | [@namcios](https://github.com/namcios) | \n| Korea | Translator & Reviewer | [@KoreaComK](https://github.com/KoreaComK) | \n| Luke Pavsky | Translator & Reviewer | [@lukedevj](https://github.com/lukedevj) | \n| hgrams | Translator & Reviewer | [@hgrams](https://github.com/hgrams) | \n\n#### Spanish Translation\n\n Name | Role | GitHub |\n| ---------- | -------- | ------------ |\n| Ian Culp | Translator & Reviewer | [@icculp](https://github.com/icculp) |\n| Maxi Goyheneche | Translator | [@maxcrowar](https://github.com/maxcrowar) |\n| Said Rahal | Translator | [@srahalh](https://github.com/srahalh) |\n| C\u00e9sar A. Vallero | Translator & Reviewer | [@csralvall](https://github.com/csralvall) |\n| Javier Vargas | Translator & Reviewer | [@javiervargas](https://github.com/javiervargas) |\n\n## Responsible Disclosure\n\nWe want to keep all of our software safe for everyone. If you have discovered a security vulnerability, we appreciate your help in disclosing it to us in a responsible manner. We are unfortunately not able to offer bug bounties at this time.\n\nWe do ask that you offer us good faith and use best efforts not to leak information or harm any user, their data, or our developer community. Please give us a reasonable amount of time to fix the issue before you publish it. Do not defraud our users or us in the process of discovery. We promise not to bring legal action against researchers who point out a problem provided they do their best to follow the these guidelines.\n\n### Reporting a Vulnerability\n\nPlease report suspected security vulnerabilities in private via email to ChristopherA@BlockchainCommons.com (do not use this email for support). Please do NOT create publicly viewable issues for suspected security vulnerabilities.\n\nThe following keys may be used to communicate sensitive information to developers:\n\n| Name              | Fingerprint                                        |\n| ----------------- | -------------------------------------------------- |\n| Christopher Allen | FDFE 14A5 4ECB 30FC 5D22  74EF F8D3 6C91 3574 05ED |\n\nYou can import a key by running the following command with that individual\u2019s fingerprint: `gpg --recv-keys \"<fingerprint>\"` Ensure that you put quotes around fingerprints that contain spaces.\n"
 },
 {
  "repo": "jgarzik/pyminer",
  "language": "Python",
  "readme_contents": "#Pyminer\n\nThis is a 'getwork' CPU mining client for bitcoin.\n\nIt is pure-python, and therefore very, very slow.  The purpose is to\nprovide a reference implementation of a miner, for study.\n\n##In order for this software to run you must build and run bitcoind from source on your computer.  \n"
 },
 {
  "repo": "paritytech/parity-bitcoin",
  "language": "Rust",
  "readme_contents": "# The Parity Bitcoin client.\n\n# THIS IS UNMAINTAINED HISTORICAL SOFTWARE\n\n[![Build Status][travis-image]][travis-url] [![Snap Status](https://build.snapcraft.io/badge/paritytech/parity-bitcoin.svg)](https://build.snapcraft.io/user/paritytech/parity-bitcoin)\n\nGitter [![Gitter https://gitter.im/paritytech/parity-bitcoin](https://badges.gitter.im/paritytech/parity-bitcoin.svg)](https://gitter.im/paritytech/parity-bitcoin)\n\n- [Installing from source](#installing-from-source)\n\n- [Installing the snap](#installing-the-snap)\n\n- [Running tests](#running-tests)\n\n- [Going online](#going-online)\n\n- [Importing bitcoind database](#importing-bitcoind-database)\n\n- [Command line interface](#command-line-interface)\n\n- [JSON-RPC](#json-rpc)\n\n- [Logging](#logging)\n\n- [Internal Documentation](#internal-documentation)\n\n- [Project Graph][graph]\n\n[graph]: ./tools/graph.svg\n[travis-image]: https://travis-ci.com/paritytech/parity-bitcoin.svg?token=DMFvZu71iaTbUYx9UypX&branch=master\n[travis-url]: https://travis-ci.com/paritytech/parity-bitcoin\n[doc-url]: https://paritytech.github.io/parity-bitcoin/pbtc/index.html\n\n## Installing from source\n\nInstalling `pbtc` from source requires `rustc` and `cargo`.\n\nMinimal supported version is `rustc 1.23.0 (766bd11c8 2018-01-01)`\n\n#### Install rustc and cargo\n\nBoth `rustc` and `cargo` are a part of rust tool-chain.\n\nAn easy way to install the stable binaries for Linux and Mac is to run this in your shell:\n\n```\ncurl -sSf https://static.rust-lang.org/rustup.sh | sh\n```\n\nWindows binaries can be downloaded from [rust-lang website](https://www.rust-lang.org/en-US/downloads.html).\n\n#### Install C and C++ compilers\n\nYou will need the cc and gcc compilers to build some of the dependencies.\n\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n#### Clone and build pbtc\n\nNow let's clone `pbtc` and enter it's directory:\n\n```\ngit clone https://github.com/paritytech/parity-bitcoin\ncd parity-bitcoin\n```\n\n`pbtc` can be build in two modes. `--debug` and `--release`. Debug is the default.\n\n```\n# builds pbtc in debug mode\ncargo build -p pbtc\n```\n\n```\n# builds pbtc in release mode\ncargo build -p pbtc --release\n```\n\n`pbtc` is now available at either `./target/debug/pbtc` or `./target/release/pbtc`.\n\n## Installing the snap\n\nIn any of the [supported Linux distros](https://snapcraft.io/docs/core/install):\n\n```\nsudo snap install parity-bitcoin --edge\n```\n\n## Running tests\n\n`pbtc` has internal unit tests and it conforms to external integration tests.\n\n#### Running unit tests\n\nAssuming that repository is already cloned, we can run unit tests with this command:\n\n```\ncargo test --all\n```\n\n#### Running external integration tests\n\nRunning integration tests is automated, as the regtests repository is one of the submodules. Let's download it first:\n\n```\ngit submodule update --init\n```\n\nNow we can run them using the command:\n\n```\n./tools/regtests.sh\n```\n\nIt is also possible to run regtests manually:\n\n```\n# let's start pbtc in regtest compatible mode\n./target/release/pbtc --btc --regtest\n\n# now in second shell window\ncd $HOME\ngit clone https://github.com/TheBlueMatt/test-scripts\ncd test-scripts\njava -jar pull-tests-f56eec3.jar\n\n```\n\n## Going online\n\nBy default parity connects to bitcoind-seednodes. Full list is available [here](./pbtc/seednodes.rs).\n\nBefore starting synchronization, you must decide - which fork to follow - Bitcoin Core (`--btc` flag) or Bitcoin Cash (`--bch` flag). On next start, passing the same flag is optional, as the database is already bound to selected fork and won't be synchronized using other verification rules.\n\nTo start syncing the main network, just start the client, passing selected fork flag. For example:\n\n```\n./target/release/pbtc --btc\n```\n\nTo start syncing the testnet:\n\n```\n./target/release/pbtc --btc --testnet\n```\n\nTo not print any syncing progress add `--quiet` flag:\n\n```\n./target/release/pbtc --btc --quiet\n```\n\n## Importing bitcoind database\n\nIt is possible to import existing `bitcoind` database:\n\n```\n# where $BITCOIND_DB is path to your bitcoind database, e.g., \"/Users/user/Library/Application Support\"\n./target/release/pbtc import \"$BITCOIND_DB/Bitcoin/blocks\"\n```\n\nBy default import verifies imported the blocks. You can disable this, by adding `--verification-level=none` flag.\n\n```\n./target/release/pbtc --btc --verification-level=none import \"$BITCOIND_DB/Bitcoin/blocks\"\n```\n\n## Command line interface\n\nFull list of CLI options, which is available under `pbtc --help`:\n\n```\npbtc 0.1.0\nParity Technologies <info@parity.io>\nParity Bitcoin client\n\nUSAGE:\n    pbtc [FLAGS] [OPTIONS] [SUBCOMMAND]\n\nFLAGS:\n        --bch             Use Bitcoin Cash verification rules (BCH).\n        --btc             Use Bitcoin Core verification rules (BTC).\n    -h, --help            Prints help information\n        --no-jsonrpc      Disable the JSON-RPC API server.\n    -q, --quiet           Do not show any synchronization information in the console.\n        --regtest         Use a private network for regression tests.\n        --testnet         Use the test network (Testnet3).\n    -V, --version         Prints version information\n\nOPTIONS:\n        --blocknotify <COMMAND>            Execute COMMAND when the best block changes (%s in COMMAND is replaced by the block hash).\n    -c, --connect <IP>                     Connect only to the specified node.\n    -d, --data-dir <PATH>                  Specify the database and configuration directory PATH.\n        --db-cache <SIZE>                  Sets the database cache size.\n        --jsonrpc-apis <APIS>              Specify the APIs available through the JSONRPC interface. APIS is a comma-delimited list of API names.\n        --jsonrpc-cors <URL>               Specify CORS header for JSON-RPC API responses.\n        --jsonrpc-hosts <HOSTS>            List of allowed Host header values.\n        --jsonrpc-interface <INTERFACE>    The hostname portion of the JSONRPC API server.\n        --jsonrpc-port <PORT>              Specify the PORT for the JSONRPC API server.\n        --only-net <NET>                   Only connect to nodes in network version <NET> (ipv4 or ipv6).\n        --port <PORT>                      Listen for connections on PORT.\n    -s, --seednode <IP>                    Connect to a seed-node to retrieve peer addresses, and disconnect.\n        --verification-edge <BLOCK>        Non-default verification-level is applied until a block with given hash is met.\n        --verification-level <LEVEL>       Sets the Blocks verification level to full (default), header (scripts are not verified), or none (no verification at all).\n\nSUBCOMMANDS:\n    help        Prints this message or the help of the given subcommand(s)\n    import      Import blocks from a Bitcoin Core database.\n    rollback    Rollback the database to given canonical-chain block.\n```\n\n## JSON-RPC\n\nThe JSON-RPC interface is served on port :8332 for mainnet and :18332 for testnet unless you specified otherwise. So if you are using testnet, you will need to change the port in the sample curl requests shown below.\n\n#### Network\n\nThe Parity-bitcoin `network` interface.\n\n##### addnode\n\nAdd the node.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"add\"], \"id\":1 }' localhost:8332\n\nRemove the node.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"remove\"], \"id\":1 }' localhost:8332\n\nConnect to the node.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"addnode\", \"params\": [\"127.0.0.1:8888\", \"onetry\"], \"id\":1 }' localhost:8332\n\n##### getaddednodeinfo\n\nQuery info for all added nodes.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true] }' localhost:8332\n\nQuery info for the specified node.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' localhost:8332\n\n##### getconnectioncount\n\nGet the peer count.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"1\", \"method\": \"getconnectioncount\", \"params\": [] }' localhost:8332\n\n#### Blockchain\n\nThe Parity-bitcoin `blockchain` data interface.\n\n##### getbestblockhash\n\nGet hash of best block.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getbestblockhash\", \"params\": [], \"id\":1 }' localhost:8332\n\n##### getblockcount\n\nGet height of best block.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockcount\", \"params\": [], \"id\":1 }' localhost:8332\n\n##### getblockhash\n\nGet hash of block at given height.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblockhash\", \"params\": [0], \"id\":1 }' localhost:8332\n\n##### getdifficulty\n\nGet proof-of-work difficulty as a multiple of the minimum difficulty\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getdifficulty\", \"params\": [], \"id\":1 }' localhost:8332\n\n##### getblock\n\nGet information on given block.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblock\", \"params\": [\"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"], \"id\":1 }' localhost:8332\n\n##### gettxout\n\nGet details about an unspent transaction output.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxout\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\", 0], \"id\":1 }' localhost:8332\n\n##### gettxoutsetinfo\n\nGet statistics about the unspent transaction output set.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"gettxoutsetinfo\", \"params\": [], \"id\":1 }' localhost:8332\n\n#### Miner\n\nThe Parity-bitcoin `miner` data interface.\n\n##### getblocktemplate\n\nGet block template for mining.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getblocktemplate\", \"params\": [{\"capabilities\": [\"coinbasetxn\", \"workid\", \"coinbase/append\"]}], \"id\":1 }' localhost:8332\n\n#### Raw\n\nThe Parity-bitcoin `raw` data interface.\n\n\n##### getrawtransaction\n\nReturn the raw transaction data.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"getrawtransaction\", \"params\": [\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"], \"id\":1 }' localhost:8332\n\n##### decoderawtransaction\n\nReturn an object representing the serialized, hex-encoded transaction.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"decoderawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' localhost:8332\n\n##### createrawtransaction\n\nCreate a transaction spending the given inputs and creating new outputs.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"createrawtransaction\", \"params\": [[{\"txid\":\"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\",\"vout\":0}],{\"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\":0.01}], \"id\":1 }' localhost:8332\n\n##### sendrawtransaction\n\nAdds transaction to the memory pool && relays it to the peers.\n\n    curl -H 'content-type: application/json' --data-binary '{\"jsonrpc\": \"2.0\", \"method\": \"sendrawtransaction\", \"params\": [\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\"], \"id\":1 }' localhost:8332\n\n## Logging\n\nThis is a section only for developers and power users.\n\nYou can enable detailed client logging by setting the environment variable `RUST_LOG`, e.g.,\n\n```\nRUST_LOG=verification=info ./target/release/pbtc --btc\n```\n\n`pbtc` started with this environment variable will print all logs coming from `verification` module with verbosity `info` or higher. Available log levels are:\n\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n\nIt's also possible to start logging from multiple modules in the same time:\n\n```\nRUST_LOG=sync=trace,p2p=trace,verification=trace,db=trace ./target/release/pbtc --btc\n```\n\n## Internal documentation\n\nOnce released, `pbtc` documentation will be available [here][doc-url]. Meanwhile it's only possible to build it locally:\n\n```\ncd parity-bitcoin\n./tools/doc.sh\nopen target/doc/pbtc/index.html\n```\n"
 },
 {
  "repo": "bitcoinxt/bitcoinxt",
  "language": "C++",
  "readme_contents": "Bitcoin XT\n==========\n\nBitcoin XT is an implementation of a Bitcoin Cash (BCH) full node that embraces Bitcoin's original vision of simple, reliable, low-cost transactions for everyone in the world. Bitcoin XT originated as a series of patches on top of Bitcoin Core and is now a independently maintained software fork. See some selected [features](https://bitcoinxt.software/patches.html).\n\nBitcoin XT downloads are code signed and are built reproducibly using gitian. Discussion can be found at the [XT Gitter](https://gitter.im/bitcoinxt/Lobby).\n\nData Directory Compatibility\n============================\n\nIf using a data directory from a different BCH or BTC full node, specify `-reindex` on first launch.\n\nSet aside `wallet.dat` from Bitcoin Core or Bitcoin ABC (reason: HD wallet not yet supported). Also delete `fee_estimates.dat` from these clients.\n \nBitcoin XT can run in BTC chain mode by specifying `-uahftime=0`. Please note that Bitcoin XT does not validate segwit, and the conversion notes above still apply.\n\n\nDevelopment process\n===================\n\nIdeas for useful features are tracked in Issues.  Pull requests from developers, including well-done cherry picks from other clients or cryptos, are very welcome.\n\nTo discuss Bitcoin Cash development in general, you are welcome to use the [mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-ml/).\n\nWe have a manifesto that lays out things we believe are important, which you can read about here:\n\nhttps://bitcoinxt.software/\n\n"
 },
 {
  "repo": "1200wd/bitcoinlib",
  "language": "Python",
  "readme_contents": "Python Bitcoin Library\n======================\n\nBitcoin, Litecoin and Dash Crypto Currency Library for Python.\n\nIncludes a fully functional wallet with multi-signature, multi-currency and multiple accounts.\nYou this library at a high level and create and manage wallets for the command line or at a low level\nand create your own custom made transactions, keys or wallets.\n\nThe BitcoinLib connects to various service providers automatically to update wallets, transactions and\nblockchain information. It does currently not parse the blockchain itself.\n\n.. image:: https://github.com/1200wd/bitcoinlib/actions/workflows/unittests.yaml/badge.svg\n    :target: https://github.com/1200wd/bitcoinlib/actions/workflows/unittests.yaml\n    :alt: Unittests\n.. image:: https://img.shields.io/pypi/v/bitcoinlib.svg\n    :target: https://pypi.org/pypi/bitcoinlib/\n    :alt: PyPi\n.. image:: https://readthedocs.org/projects/bitcoinlib/badge/?version=latest\n    :target: http://bitcoinlib.readthedocs.io/en/latest/?badge=latest\n    :alt: RTD\n.. image:: https://coveralls.io/repos/github/1200wd/bitcoinlib/badge.svg?branch=installation-documentation-update\n    :target: https://coveralls.io/github/1200wd/bitcoinlib?branch=master\n    :alt: Coveralls\n.. image:: https://snyk.io/test/github/1200wd/bitcoinlib/badge.svg\n    :target: https://snyk.io/test/github/1200wd/bitcoinlib\n    :alt: Known Vulnerabilities\n    \n\nDocumentation\n-------------\n\nRead the full documentation at: http://bitcoinlib.readthedocs.io/\n\n\nDisclaimer\n----------\n\nThis library is still in development, please use at your own risk and test sufficiently before using it in a\nproduction environment.\n\n\nSome Examples\n=============\n\nWallet\n------\n\nThe bitcoin library contains a wallet implementation using SQLAlchemy and SQLite3 to import, create and manage\nkeys in a Hierarchical Deterministic way.\n\nExample: Create wallet and generate new address (key) to receive bitcoins\n\n.. code-block:: pycon\n\n   >>> from bitcoinlib.wallets import Wallet\n   >>> w = Wallet.create('Wallet1')\n   >>> key1 = w.get_key()\n   >>> key1.address\n   '1Fo7STj6LdRhUuD1AiEsHpH65pXzraGJ9j'\n\nNow send a small transaction to your wallet and use the scan() method to update transactions and UTXO's\n\n.. code-block:: pycon\n\n    >>> w.scan()\n    >>> w.info()  # Shows wallet information, keys, transactions and UTXO's\n\nWhen your wallet received a payment and has unspent transaction outputs, you can send bitcoins easily.\nIf successful a transaction ID is returned\n\n.. code-block:: pycon\n\n    >>> t = w.send_to('1PWXhWvUH3bcDWn6Fdq3xhMRPfxRXTjAi1', '0.001 BTC', offline=False)\n    'b7feea5e7c79d4f6f343b5ca28fa2a1fcacfe9a2b7f44f3d2fd8d6c2d82c4078'\n    >>> t.info  # Shows transaction information and send results\n\n\nWallet from passphrase with accounts and multiple currencies\n------------------------------------------------------------\n\nThe following code creates a wallet with two Bitcoin and one Litecoin account from a Mnemonic passphrase.\nThe complete wallet can be recovered from the passphrase, which is the masterkey.\n\n.. code-block:: python\n\n    from bitcoinlib.wallets import Wallet, wallet_delete\n    from bitcoinlib.mnemonic import Mnemonic\n\n    passphrase = Mnemonic().generate()\n    print(passphrase)\n    w = Wallet.create(\"Wallet2\", keys=passphrase, network='bitcoin')\n    account_btc2 = w.new_account('Account BTC 2')\n    account_ltc1 = w.new_account('Account LTC', network='litecoin')\n    w.get_key()\n    w.get_key(account_btc2.account_id)\n    w.get_key(account_ltc1.account_id)\n    w.info()\n\n\nMulti-Signature Wallets\n-----------------------\n\nCreate a Multisig wallet with 2 cosigners which both need to sign a transaction.\n\n.. code-block:: python\n\n    from bitcoinlib.wallets import Wallet\n    from bitcoinlib.keys import HDKey\n\n    NETWORK = 'testnet'\n    k1 = HDKey('tprv8ZgxMBicQKsPd1Q44tfDiZC98iYouKRC2CzjT3HGt1yYw2zuX2awTotzGAZQEAU9bi2M5MCj8iedP9MREPjUgpDEBwBgGi2C8eK'\n                '5zNYeiX8', network=NETWORK)\n    k2 = HDKey('tprv8ZgxMBicQKsPeUbMS6kswJc11zgVEXUnUZuGo3bF6bBrAg1ieFfUdPc9UHqbD5HcXizThrcKike1c4z6xHrz6MWGwy8L6YKVbgJ'\n                'MeQHdWDp', network=NETWORK)\n    w1 = Wallet.create('multisig_2of2_cosigner1', sigs_required=2,\n                         keys=[k1, k2.public_master(multisig=True)], network=NETWORK)\n    w2 = Wallet.create('multisig_2of2_cosigner2',  sigs_required=2,\n                         keys=[k1.public_master(multisig=True), k2], network=NETWORK)\n    print(\"Deposit testnet bitcoin to this address to create transaction: \", w1.get_key().address)\n\nCreate a transaction in the first wallet\n\n.. code-block:: python\n\n    w1.utxos_update()\n    t = w1.sweep('mwCwTceJvYV27KXBc3NJZys6CjsgsoeHmf', min_confirms=0)\n    t.info()\n    t.send()\n\nAnd then import the transaction in the second wallet, sign it and push it to the network\n\n.. code-block:: python\n\n    w2.get_key()\n    t2 = w2.transaction_import(t)\n    t2.sign()\n    t2.send()\n    t2.info()\n\n\nSegregated Witness Wallet\n-------------------------\n\nEasily create and manage segwit wallets. Both native segwit with base32/bech32 addresses and P2SH nested segwit\nwallets with traditional addresses are available.\n\nCreate a native single key P2WPKH wallet:\n\n.. code-block:: pycon\n\n    >>> from bitcoinlib.wallets import Wallet\n    >>> w = Wallet.create('wallet_segwit_p2wpkh', witness_type='segwit')\n    >>> w.get_key().address\n    bc1q84y2quplejutvu0h4gw9hy59fppu3thg0u2xz3\n\nOr create a P2SH nested single key P2SH_P2WPKH wallet:\n\n.. code-block:: pycon\n\n    >>> from bitcoinlib.wallets import Wallet\n    >>> w = Wallet.create('wallet_segwit_p2sh_p2wpkh', witness_type='p2sh-segwit')\n    >>> w.get_key().address\n    36ESSWgR4WxXJSc4ysDSJvecyY6FJkhUbp\n\n\nCommand Line Tool\n-----------------\n\nWith the command line tool you can create and manage a wallet without any Python programming.\n\nTo create a new Bitcoin wallet\n\n.. code-block:: bash\n\n    $ clw newwallet\n    Command Line Wallet for BitcoinLib\n\n    Wallet newwallet does not exist, create new wallet [yN]? y\n\n    CREATE wallet 'newwallet' (bitcoin network)\n\n    Your mnemonic private key sentence is: force humble chair kiss season ready elbow cool awake divorce famous tunnel\n\n    Please write down on paper and backup. With this key you can restore your wallet and all keys\n\n\nYou can use clw to create simple or multisig wallets for various networks, manage public and private keys\nand managing transactions.\n\nFor the full command line wallet documentation please read\n\nhttp://bitcoinlib.readthedocs.io/en/latest/_static/manuals.command-line-wallet.html\n\n\nMnemonic key generation\n-----------------------\n\nAllows you to use easy to remember passphrases consisting of a number of words to store private keys (BIP0039).\nYou can password protect this passphrase (BIP0038), and use the HD Wallet structure to generate an almost infinite \nnumber of new private keys and bitcoin addresses (BIP0043 and BIP0044).\n\nExample: Generate a list of words passphrase and derive a private key seed\n\n.. code-block:: pycon\n\n   >>> from bitcoinlib.mnemonic import Mnemonic\n   >>> from bitcoinlib.encoding import to_hexstring\n   >>> words = Mnemonic().generate()\n   >>> words\n   unique aisle iron extend earn cigar trust source next depart yard bind\n   >>> to_hexstring(Mnemonic().to_seed(words))\n   '9c6f41a347bf4f326f9c989fb522bec1b82c36463580d1769daadba7d59f69a305505fdd5d2131c9c60255c79279d4e8896155e0b126abea036da56a766f81a1'\n\n\nService providers\n-----------------\nCommunicates with pools of bitcoin service providers to retrieve transaction, address, blockchain information. \nCan be used to push a transaction to the network, determine optimal service fee for a transaction or to update your\nwallet's balance.\n\nWhen working with wallets, connections to service providers are automatically managed, so you don't have to worry\nabout them. You can however easily use the Service object directly.\n\nExample: Get estimated transaction fee in Sathosis per Kb for confirmation within 5 blocks\n\n.. code-block:: pycon\n\n   >>> from bitcoinlib.services.services import Service\n   >>> Service().estimatefee(5)\n   138964\n\n\nOther Databases\n---------------\n\nBitcoinlib uses the SQLite database by default, but other databases are supported as well.\nSee http://bitcoinlib.readthedocs.io/en/latest/_static/manuals.databases.html for instructions on how to use\nMySQL or PostgreSQL.\n\n\nMore examples\n-------------\nFor more examples see https://github.com/1200wd/bitcoinlib/tree/master/examples\n\n\nImplements the following Bitcoin Improvement Proposals\n------------------------------------------------------\n- Hierarchical Deterministic Wallets (BIP0032)\n- Passphrase-protected private key (BIP0038)\n- Mnemonic code for generating deterministic keys (BIP0039)\n- Purpose Field for Deterministic Wallets (BIP0043)\n- Multi-Account Hierarchy for Deterministic Wallets (BIP0044)\n- Structure for Deterministic P2SH Multisignature Wallets (BIP0045)\n- Bech32/base32 address format for native v0-16 witness outputs (BIP0173)\n- Native and P2SH nested Segregated Witness transactions (BIP0141 and BIP0143)\n- Bech32m format for v1+ witness addresses (BIP0350)\n- and many more...\n\n\nInstalling and updating\n=======================\n\nPre-requirements Linux\n----------------------\n\n``sudo apt install build-essential python3-dev libgmp3-dev libssl-dev``\n\nTo install OpenSSL development package on Debian, Ubuntu or their derivatives\n\n``sudo apt install libssl-dev``\n\nTo install OpenSSL development package on Fedora, CentOS or RHEL\n\n``sudo yum install gcc openssl-devel``\n\n\nPre-requirements Windows\n------------------------\n\nThis library requires a Microsoft Visual C++ Compiler. See\nhttp://bitcoinlib.readthedocs.io/en/latest/_static/manuals.install.html\n\nThe fastecdsa library is not enabled at this moment on windows, the slower ecdsa library is installed.\n\n\nInstall with pip\n----------------\n\n``pip install bitcoinlib``\n\nThese packages will be installed\n* fastecdsa (or ecdsa on Windows)\n* sqlalchemy\n* requests\n* numpy\n* pycryptodome\n\nIf you want to use BIP38 encrypted private keys, you should also install the much faster scrypt library.\n\n``pip install scrypt``\n\nInstall development environment\n-------------------------------\n\nRequired packages:\n\n``sudo apt install -y postgresql postgresql-contrib mysql-server libpq-dev libmysqlclient-dev``\n\nCreate a virtual environment for instance on linux with virtualenv:\n\n.. code-block:: bash\n\n    $ virtualenv -p python3 venv/bitcoinlib\n    $ source venv/bitcoinlib/bin/activate\n\nThen clone the repository and install dependencies:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/1200wd/bitcoinlib.git\n    $ cd bitcoinlib\n    $ pip install -r requirements-dev.txt\n\n\nTroubleshooting\n---------------\n\nWhen you experience issues with the scrypt package when installing, you can try to solve this by removing and reinstall\nscrypt:\n\n.. code-block:: bash\n\n    $ pip uninstall scrypt\n    $ pip install scrypt\n\nPlease make sure you also have the Python development and SSL development packages installed, see 'Other requirements'\nabove.\n\nYou can also use pyscrypt or pycryptodome instead of scrypt. Pyscrypt is a pure Python scrypt password-based key\nderivation library. It works but it is slow when using BIP38 password protected keys.\n\nIf you run into issues, do not hesitate to contact us or file an issue at https://github.com/1200wd/bitcoinlib/issues\n\n\nUpdate library\n--------------\n\nUpdate to the latest version of the library with\n\n.. code-block:: bash\n\n    $ pip install bitcoinlib --upgrade\n\nTo upgrade make sure everything is backuped and run updatedb.py from the installation directory.\n\n.. code-block:: bash\n\n    $ python updatedb.py -d [<link-to-database-if-not-standard>]\n\n\nFor more information on installing, updating and maintenance see\nhttps://bitcoinlib.readthedocs.io/en/latest/_static/manuals.install.html#installation\n\n\nFuture / Roadmap\n================\n\n* Support advanced scripts\n* Fully support timelocks\n* Support for lightning network\n* Support for Trezor wallet\n"
 },
 {
  "repo": "JulyIghor/QtBitcoinTrader",
  "language": "C++",
  "readme_contents": "## Qt Bitcoin Trader\n\nThis software helps you open and cancel orders very fast. Real time data monitoring. Automated trading using JavaScript powered scripts.\n\nDeveloped on pure Qt, uses OpenSSL, AES 256 key and secret protection.\n\n## Official website\n\n* https://centrabit.com/downloads/\n* https://qttrader.com\n\n## Download binaries\n\n* https://sourceforge.net/projects/bitcointrader/  `Win32`,`Mac`,`Linux`\n* http://www.softpedia.com/get/Others/Finances-Business/Bitcoin-Trader.shtml `Win32`\n* http://mac.softpedia.com/get/Finance/Qt-Bitcoin-Trader.shtml `Mac`\n\n## Compilation on Linux\n* `sudo apt-get install g++ libssl-dev libglu1-mesa-dev qt5-qmake qtscript5-dev qtmultimedia5-dev git`\n* `git clone https://github.com/JulyIGHOR/QtBitcoinTrader.git`\n* `cd ./QtBitcoinTrader/src`\n* `QT_SELECT=5 qmake QtBitcoinTrader_Desktop.pro`\n* `make && make install && make clean`\n\n## Demos\n\n* http://www.youtube.com/watch?v=C--P258DQkk\n\n## Forums\n\n* https://bitcointalk.org/index.php?topic=201062 `ENG`\n* https://bitcointalk.org/index.php?topic=218044 `RUS`\n\n## Social\n\n* http://www.facebook.com/QtBitcoinTrader\n* http://twitter.com/QtBitcoinTrader\n* http://vk.com/QtBitcoinTrader `RUS`\n\n## Change Log\n\nv1.42.10 Released!\n\n- Updated API integration to fix Bitstamp and Poloniex\n- Synchronized currency pairs\n\nv1.42.00 Released!\n\n- Fixed crash while running some scripts/rules\n- Updated API integration to fix Bitstamp, Poloniex and Bittrex\n- Fixed a bug when trade history stays empty\n- Fixed UI bugs\n\nv1.41.00 Released!\n\n- Fixed time syncronization in Binance\n- Translation fixes, added Korean language\n- Fixed bug in trade history of Bittrex exchange\n- Improved request interval limits for Poloniex\n- Qt 6 support, using QJSEngine instead of QtScript\n- Optimized CPU usage\n- Updated currency pairs list\n\nv1.40.55 Released!\n\n- Fixed trader.groupStop(..) script command\n- Synchronized currency pairs\n\nv1.40.54 Released!\n\n- Fixed trader.say(..) script command\n- Fixed crash on unix systems\n\nv1.40.53 Released!\n\n- Fixed critical bug causing missing public trade history items\n- Fixed bug when zero/incorrect balance reached script/rules events\n- Fixed missing script events/wrong rule state for Bitfinex\n- Fixed own trade history items missing for Bitfinex\n- Fixed rounding of buy/sell total calculations\n- Fixed Hitbtc exchange api keys impossible to add\n- Fixed translation issues. French language updated\n- Optimized memory usage\n- Removed exchanges bitmarket.pl, okcoin.cn, btcchina.com, goc.io\n\nv1.40.52 Released!\n\n- Enabled experimental vnc server on a Linux\n- Fixed yobit api, if you ever get nonce error, re-create API keys\n- Improved minimum request interval for Binance to prevent IP bans\n\nv1.40.51 Released!\n\n- Fixed hitbtc balance\n- Fixed binance balance\n\nv1.40.50 Released!\n\n- Fixed hitbtc authorization bug\n- Fixed transaction history in bitstamp\n- Smart paste for spinbox values\n- Synchronized currency pairs\n- Improved text to speech engine\n\nv1.40.43 Released!\n\n- Request interval now can be set less than 0.5 seconds\n- Fixed bug when timers wasn't stopped on group stop\n- Fixed crash when open Debug dialog\n- Fixed incorrect fee value in Bitfinex\n- Fixed filter open orders in Bitfinex\n- Fixed tray icon in Linux\n- Fixed bug caused long delay after network down\n- Fixed on top mode for dock widgets\n- Fixed bug when password was incorrectly detected as weak\n- Currency pairs synchronized in all exchanges\n\nv1.40.42 Released!\n\n- Fixed start window position\n- Removed duplicated info in log view\n- Fixed Own transactions display in Bitstamp\n- Fixed problem with false time\n- Added option to change hostname and port for exchange profile\n- Fixed wrong order amount for Bitfinex, when order partly filled\n- Minor UI fixes, fixed crash in log view\n\nv1.40.41\n- Bitstamp API integration fixed\n- Rules generator dialog critical bug fixed when price with fee used\n- Time sync bug fixed\n- Binance orderbook table fixed\n- Removed Wex exchange\n- Added alternative domain for Yobit\n- Fixed dock panel issue caused blinks\n- Many small fixes\n\nv1.40.40\n- New exchange Poloniex\n- Fixed script language command cancel ask and bid for Binance\n- Fixed bug caused forever API down in some cases\n- Minor fixes\n\nv1.40.30\n- Added new exchange HitBTC\n- Added more decimals for Fee Calculator\n- Fixed canceling order via rule or script for Binance\n- Fixed bug in charts\n- Fixed wex mirror\n- Minor cleanup and optimizations\n\nv1.40.23\n- Added new exchange Bittrex\n- Portable mode for Linux and macOS\n- Secure auto update for Linux x86_64\n- Uninstall option in help menu\n- Fixed Binance own trade history order\n- Time Sync bug fixed\n- HDPI bug fixed\n- Minor fixes\n\nv1.40.22\n- Added new exchange Binance\n- Many small fixes\n- Subscribe to beta of Qt Trader exchange www.QtTrader.com\n\nv1.40.21\n- Qt Trader 2.0 Announced! Visit www.QtTrader.com\n- Fixed bug of Rules dialog\n- Fixed HiDPI mode\n- Fixed Script and Rules enable-disable command\n- Fixed Last Buy and Sell price event bug\n- Memory optimisations, refractoring\n- Minor fixes\n\nv1.40.12\n- Dropped support of Windows XP and macOS 10.9, but you still can compile it manually\n- Removed update size limit for future bigger updates\n- Fixed Bitfinex trade history bug\n- Fixed Bitstamp certificate issue\n- Switched to OpenSSL 1.1, no UPX in release binaries\n- Minor improvements\n\nv1.40.09\n- Fixed FeeCalculator crash\n- Fixed account open orders filtering and calculations\n- UI layout bugs fixed\n\nv1.40.08\n- Added WEX exchange, removed BTC-e\n- Fixed crash on app closing\n- Added confirmation message on script editor clear\n- Minor fixes\n\nv1.40.07\n- Release builds for Win64\n- Fix balance for OKCoin\n- Fix script for Bitfinex\n- Fix order type for Bitfinex\n- JL Script logs now recognize endline and tabulation\n- Fixed bug when silent auto update wont work\n\nv1.40.06\n- Fixed fee calculator issue\n- Added new currencies\n- Minor improvements and fixes\n\nv1.40.03\n- Bitfinex support fixes\n- Secure auto update now works via Proxy\n- YoBit support fixes\n- Added button to force resync currencies\n\nv1.4\n- New Exchange YoBit.net\n- Currency pair synchronization on startup!\n- Fixed issue with functions getPriceByVolume and getVolumeByPrice in JL Script\n- Add HiDPI enable or disable settings\n- Now you can search for currency pairs by keyword\n- Improved many elements of interface\n- Fixed bug with certificate that caused error messages\n- Many other small fixes\n\nv1.30.04\n- Add new pair for BitStamp\n- Fixd fee calculations in Bitfinex\n- Main window title now shows middle price instead of last trade price\n- Fixed issue when app can't start\n\nv1.30.03\n- High screen resolution support for Windows\n- Fixed fee for BTCChina and OKCoin\n- Add new pairs for Bitfinex\n- Fixed authorization for Bitfinex\n- Completed the Norwegian translation\n- Fixed bug on restoring Workspace from previous state\n- Fixed account data and add new pairs for bitstamp\n- Fixed minor bugs\n\nv1.3\n- macOS Sierra support\n- JL Script file read/write support\n- Syncronised currency pairs of Bitfinex, Bitstamp, BTC-e\n- Fixed bugs of history and currency pair in Bitstamp\n- Improved Proxy settings\n- Fixed network stat information\n- Fixed display of balance in bitfinex, bitstamp, btcchina\n- Fix tonce in btcchina\n- Add reducing interface elements spacing (optional in settings)\n- Add inactive start script button\n- Fixed JL Script groups bug\n- Fixed open order/cancel bug in bitstamp\n- Fixed time synchronization bug\n\n\nv1.07.01\n- Hotfix. High CPU load fix. Nonce error fix\n\nv1.07\n- Improved connection stability\n- API engine rewrited\n- Added balances triggers to rules\n- Fixed RUR currency in BTC-e\n- Fixed auto-scroll mode in last trades\n- Fixed many minor bugs\n- Now all binaries is digitally signed\n\nv1.06\n- Bugfix release\n- Fixed critical bug in Mt.Gox engine\n- Fixed Mac OS X \"New window\" bug\n- Fixed minor bugs\n- Improved buy/sell/cancel stability\n\nv1.05\n- Critical bugs fixed\n- Calculations fixes\n- Ui fixes\n- Added PPC, FTC, RTC support\n- Added proxy support\n\nv1.04\n- Fixed UI bugs\n- Added NMC and NVC to BTC-e\n- Now last price displays in title\n- Stability improvements in BTC-e exchange\n- Many small improvements\n- Translation fixes\n\nv1.03\n- SSL security fix\n- Fixed translations\n- Small ui fix\n\nv1.02\n- BTC-E.com support added. Now you can trade with LTC\n- Added trade history display\n- Multi-monitor support (Detachable windows)\n- Improved connection stability\n- Added German translation\n- Fixed UI bugs, translation bugs and some minor bugs\n\nv1.01\n- Fixed traffic heavy load.\n- Added trades fetch to update last values faster.\n\nv1.00\n- Api engine rewrited. Now works faster.\n- Api lag improvements.\n- Fixed minor bugs.\n- Added Norwegian translation.\n\nv0.99\n- Fixed minor bugs\n- Added Spanish translation\n- Translation engine updated\n- Checking update engine rewrited. Secure autoinstall for Mac and Win feature added.\n- Added portable mode for Windows (Just create folder QtBitcoinTrader near exe file)\n\nv0.98\n- Added translation engine. Now you can translate application to your native language\n- Fixed ui bugs\n- Enhanced rules. Now there is two modes, Sequential and Concurrent\n\nv0.97\n- Added profit calculation to main window\n- Optimized ui\n\nv0.96\n- Fixed minor bugs\n- Optimized ui\n- Mac version released\n\nv0.95\n- Fixed fee calculator bug\n- Now supports resolution down to 1024x700\n- Enhanced rules feature\n- Minor bugs fixed\n\nv0.94\n- Rules finally working!\n- Fixed some minor bugs\n\nv0.93\n- Fixed critical ui bug where was wrong field in orders table\n\nv0.92\n- Fixed minor bugs in ui and currencies\n\nv0.91\n - Added Profiles\n - Fixed Ui Bugs\n\nv0.90\n- Added all currencies supported by Mt.Gox\n- Minor fixes\n\nv0.89\n- Fixed critical bug\n\nv0.88\n- Addes Mt.Gox key and secret encryption with AES 256\n- Fixed some ui bugx\n- Minor fixes\n\nv0.87\n- Match more faster engine\n- Fixed some bugs\n- Improved socket stability\n- Tested on Linux, thanks to macman31\n\nv0.86\n- Fixed bug in Orders Log\n- Fixed bug in fee calculation\n- Fixed ui dialogs\n\nv0.85\n- Added SSL switcher\n- Fixed some dialogs\n\nv0.84\n- Interlaced software lag performance\n\nv0.83\n- Added Fee Calculator\n\nv0.82\n- Improved socket stability\n\nv0.81\n- Minor bugs fixed\n- Improved stability\n- Added packet priority for buying and selling\n\nv0.8\n- First public release\n"
 },
 {
  "repo": "stratisproject/StratisBitcoinFullNode",
  "language": "C#",
  "readme_contents": "# StratisBitcoinFullNode\n\nThis repository is now **archived**.\n\nThe [StratisFullNode](https://github.com/stratisproject/StratisFullNode) repository is now maintained with a focus on Stratis Blockchain Technology development.\n"
 },
 {
  "repo": "Multibit-Legacy/multibit",
  "language": "Java",
  "readme_contents": "# Multibit is Deprecated - Do Not Use\n\nWednesday, July 26, 2017\n\nDear Bitcoin Community,\n\nIt is time for us to let Multibit go. \n\nKeepKey acquired Multibit a little over 1 year ago. At the time, the engineers who originally built and supported Multibit had announced that they would no longer be working on it or providing support. Multibit played an important role in the Bitcoin infrastructure. We felt that it was important for Multibit to continue and hoped that with our existing support and development teams, we would be able to keep Multibit alive.\n\nThe reality is that Multibit is in need of a lot of work. It has stubborn bugs that have caused us and Multibit users much grief. Additionally, Bitcoin has gone through a fundamental change in regards to the way fees work. The addition of SegWit in the coming weeks will mean the Multibit software has fallen still further behind.\n\nUnfortunately, KeepKey simply does not have the resources to support the current issues, nor to rebuild Multibit to ensure ideal user experience. By focusing our attention on the KeepKey device, we will continue building and improving the best hardware wallet available.\n\nThus, KeepKey will discontinue support and maintenance of Multibit, effective immediately.\n\nWe recommend that all Multibit users discontinue using it and you move your keys to other wallet software of your choosing. \n\n## Next Steps for Multibit Users \nVideos that demonstrate how to move your wallet to Electrum are available on YouTube.\n\n- Multibit HD: https://youtu.be/E-KcY6KUVnY\n- Multibit Classic: https://youtu.be/LaijbTcxsv8\n\nPlease note that the version of Electrum available for download today (version 2.8.3) doesn\u2019t fully support the importing Multibit HD wallet words. The version shown in the Multibit HD video is the soon-to-be-released next version.\n\nMultibit was a fantastic piece of software in its time, and we want to thank the Multibit developers for such an important contribution to Bitcoin\u2019s history.\n\nSincerely,\n\nKen Heutmaker\n\nCTO, KeepKey \n\n------\n\n### Introduction\n\nMultiBit is a Simplified Payment Verification (SPV) Bitcoin desktop client.\n\nMultiBit is now in maintenance mode as it has largely been replaced by [MultiBit HD](https://multibit.org). To avoid confusion\nwe refer to MultiBit Classic and MultiBit HD to keep them separate.\n\nMultiBit Classic relies on the following technologies:\n\n* Maven as the build system, so the usual Maven processes apply. If you're not familiar\nwith Maven then [download it first](http://maven.apache.org) and follow their installation instructions.\n* [ZXing (\"Zebra Crossing\")](https://code.google.com/p/zxing/) for QR codes\n* [Bitcoinj](https://code.google.com/p/bitcoinj/) for access to the Bitcoin network\n* Install4j for creating installers for Windows, Mac, Linux\n* [Bitcoinj Enforcer Rules](https://github.com/gary-rowe/BitcoinjEnforcerRules) to prevent dependency chain attacks\n* [XChange](https://github.com/timmolter/XChange) for access to several Bitcoin exchanges\n\n### The Bitcoinj \"Alice\" dependency\n\nMultiBit Classic depends on a special fork of Bitcoinj for its Bitcoin support. This is due to legacy wallet serialization issues\nand the MultiBit team are working towards a complete integration through the MultiBit HD project.\n\nWhile it is possible to build MultiBit Classic using our staging repository you may want to review the modified Bitcoinj library\nfor yourself. You can clone from this fork:\n```\nhttps://code.google.com/r/jimburton618-bitcoinj-coinbase-tx/source/checkout\n```\n\nThe branch you should use for the MultiBit master code is: `bcj-0.11.2-mb-alice`\nThe branch you should use for the MultiBit develop code is: `bcj-0.11.2-mb-alice`\n\nOnce cloned, you should then install the custom Bitcoinj library using\n\n```\nmvn clean install\n```\n\n### Branching strategy\n\nThis loosely follows the [\"master-develop\" or \"Git flow\"](http://nvie.com/posts/a-successful-git-branching-model/) pattern.\n\nThere are 2 main branches: `master` and `develop`. The `master` branch is exclusively for releases, while the `develop`\nis exclusively for release candidates. The `develop` branch always has a Maven version of `develop-SNAPSHOT`.\n\nOccasionally a feature branch will be made off `develop` to cover a long-running issue. This will then be merged back into `develop`\n\nWhen `develop` is ready for release it is subjected to extensive testing (manual and automated). The final act is to update the `pom.xml`\nto remove the SNAPSHOT suffix and merge it into `master`.\n\nThe `master` branch is then tagged with the release number. Tags are in the format `v1.2.3` to distinguish them from branch names.\n\nAn announcement is made on the MultiBit website and social media (Twitter, Reddit, Bitcointalk etc) to alert everyone that a new version is available.\n\n### Maven build targets\n\nThe important targets are:\n\n```\nmvn clean install\n```\n\nAfter some processing, you will have the following artifacts in the target directory:\n\n* an executable jar: `multibit-exe.jar`\n\n### Bitcoin Solutions staff\n\nUse the Install4j installer in the multibit-installers project to create your Mac/ Win/ Linux installers.\n\nTo run MultiBit from these artifacts you can follow the instructions [provided on the main MultiBit website](https://multibit.org/help.html)\n\n### Custom configuration\n\nMultiBit Classic is quite flexible and has several features only accessible to power users through the configuration file. This\nis discussed in more detail in [configuration.md](configuration.md)\n\n### Contributing\n\nAll contributors must be OK with releasing their work under the MIT license.\n"
 },
 {
  "repo": "bitpay/insight",
  "language": "TypeScript",
  "readme_contents": "THIS PROYECT HAS BEEN REPLACED BY BITCORE-NODE, AT https://github.com/bitpay/bitcore\n\n"
 },
 {
  "repo": "benjiqq/bitcoinArchive",
  "language": "C++",
  "readme_contents": "# bitcoin original sources\n\narchive of original bitcoin material\n\nOn Sat, 01 Nov 2008 16:16:33 -0700 Satoshi Nakamoto posted the whitepaper bitcoin.pdf. (md5sum d56d71ecadf2137be09d8b1d35c6c042).\n\nOn Thu Jan 8 14:27:40 EST 2009 the first version was released. (md5sum dca1095f053a0c2dc90b19c92bd1ec00 ). http://www.metzdowd.com/pipermail/cryptography/2009-January/014994.html.\n\nIn november 2008 some sources were distributed privately\n\n\"This is the Bitcoin sources from November 16, 2008 - a few months before the current blockchain began.\". \"I was on the Metzdowd cryptography list at that time.\", https://bitcointalk.org/index.php?topic=382374.0 \n\nthe private november 2008 version is in the nov08 folder.\n\nthe study folder contains the main files of the 0.1 version, roughly 7000 LOC.\n\n*  2660 ./main.cpp\n*  1127 ./script.cpp\n*  1020 ./net.cpp\n*   604 ./db.cpp\n*   554 ./sha.cpp\n*   373 ./util.cpp\n*   265 ./irc.cpp\n*  6603 total"
 },
 {
  "repo": "igorbarinov/awesome-bitcoin",
  "language": null,
  "readme_contents": "Awesome Bitcoin\n===============\nA curated list of bitcoin services and tools for software developers\n[![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n## List of content\n\n- [Utilities](#utilities)\n- [Blockchain API and Web services](#blockchain-api-and-web-services)\n- [Wallets API](#wallets-api)\n- [Open Source wallets](#open-source-wallets)\n- [Blockchain Explorers](#blockchain-explorers)\n- [C++ Libraries](#c-libraries)\n- [JavaScript Libraries](#javascript-libraries)\n- [PHP Libraries](#php-libraries)\n- [Ruby Libraries](#ruby-libraries)\n- [Python Libraries](#python-libraries)\n- [Java Libraries](#java-libraries)\n- [Scala Libraries](#scala-libraries)\n- [.Net Libraries](#net-libraries)\n- [Playgrounds](#playgrounds)\n- [Blockchain dump](#blockchain-dump)\n- [Full nodes](#full-nodes)\n- [Read](#read)\n- [Course](#course)\n- [Additional Resources](#additional-resources)\n\n\n## Utilities\n* [Nigiri](https://github.com/vulpemventures/nigiri/) - CLI to quickly fire up a a Bitcoin regtest box along with Electrs and Esplora. Includes faucet and push commands.\n* [Nigiri in Travis](https://github.com/vulpemventures/nigiri-travis) - Travis template for adding Nigiri to your Travis (or Github Action) pipeline.\n* [hal](https://github.com/stevenroose/hal) - Bitcoin CLI swiss-army-knife (based on rust-bitcoin).\n* [BitKey](https://bitkey.io) - Live USB for airgapped transactions and Bitcoin swiss army knife.\n* [Pycoin](https://github.com/richardkiss/pycoin) - Python-based Bitcoin and alt-coin utility library.\n* [bx](https://github.com/libbitcoin/libbitcoin-explorer) - Bitcoin Command Line Tool.\n* [txwatcher](https://github.com/tsileo/txwatcher) - A little Python utility that lets you monitor Bitcoin addresses through Blockchain Websocket API and perform custom callbacks.\n* [hellobitcoin](https://github.com/prettymuchbryce/hellobitcoin) - A collection of simple programs which can generate bitcoin wallets, create and sign transactions, and send transactions over the bitcoin network.\n* [Mining visualization](http://www.yogh.io/#mine:last)\n* [HD Wallet Scanner](https://github.com/alexk111/HD-Wallet-Scanner) - Find all used addresses in your Bitcoin HD wallets bypassing gap limits.\n* [LibreSelery](https://github.com/protontypes/libreselery) - Automated Bitcoin distribution to your project contributors and dependencies integrated into GitHub Actions. \n\n## Blockchain API and Web services\n* [block.io](https://block.io)\n* [BlockCypher](https://www.blockcypher.com)\n* [Esplora](https://github.com/Blockstream/esplora) - Self-hosted blockchain explorer.\n* [Gem.co](https://gem.co)\n* [Insight](https://insight.is)\n* [Chain.com](https://chain.com)\n* [Coinbase Wallet](https://wallet.coinbase.com/)\n* [Smartbit](https://www.smartbit.com.au)\n* [Cashier-BTC](https://github.com/Overtorment/Cashier-BTC) - Self-hosted payment gateway.\n* [Chainradar API](https://github.com/yasaricli/chainradar-api) - Blockchain Explorer API for Chainradar.\n* [One-Time Address](https://github.com/alexk111/One-Time-Address) A better way to share your Bitcoin address.\n\n## Market Data API\n* [CoinMetrics.io](https://docs.coinmetrics.io/api/v2/) JSON REST API (free as well as paid) with access to market data. Also CSV data file download available.\n* [Messari.io](https://messari.io/api) JSON REST API (free as well as paid) with access to market data, news, metrics, profile, etc. \n\n## Wallets API\n* [BitGo](https://bitgo.github.io/bitgo-docs/)\n* [Coinbase](https://developers.coinbase.com)\n* [Blockchain.com](https://www.blockchain.com/api)\n* [BIP32](http://bip32.org)\n\n## Open Source Wallets\n* [CoPay by BitPay](https://copay.io/)\n* [Coinb.in](https://coinb.in)\n* [Electrum](https://electrum.org/)\n\n## Blockchain Explorers\n* [Chain.so](http://chain.so)\n* [Blockchain.com](https://blockchain.com)\n* [Blockstream.info](https://blockstream.info) - Blockchain explorer with API (mainnet, testnet and Liquid).\n* [BlockTrail](https://www.blocktrail.com/BTC) \n* [Bitcoin Transaction Explorer](https://github.com/JornC/bitcoin-transaction-explorer)\n* [Blockexplorer.com](https://blockexplorer.com)\n* [Smartbit](https://www.smartbit.com.au)\n* [Bitkit](https://bitkit.live) - Real time transaction updates.\n\n## C++ Libraries\n* [Libbitcoin](https://libbitcoin.org/)\n* [libwally-core](https://github.com/ElementsProject/libwally-core)\n* [secp256k1](https://github.com/bitcoin-core/secp256k1)\n\n## JavaScript Libraries\n* [Awesome CryptoCoinJS](https://github.com/cryptocoinjs/awesome-cryptocoinjs)\n* [Bitcore Library](https://github.com/bitpay/bitcore/tree/v8.0.0/packages/bitcore-lib)\n* [Bitcoinjs-lib](https://github.com/bitcoinjs/bitcoinjs-lib)\n* [Cryptocoin](http://cryptocoinjs.com/#modules)\n* [BlockTrail SDK NodeJS](https://github.com/blocktrail/blocktrail-sdk-nodejs)\n* [bcoin](https://github.com/bcoin-org/bcoin) - Javascript bitcoin library for node.js and browsers.\n* [Libauth](https://libauth.org/) \u2013 A lightweight, zero-dependency, JavaScript/TypeScript bitcoin library.\n\n## PHP Libraries\n* [PHP-OP_RETURN](https://github.com/coinspark/php-OP_RETURN)\n* [BlockTrail PHP SDK](https://github.com/blocktrail/blocktrail-sdk-php)\n\n## Ruby Libraries\n* [Bitcoin-ruby](https://github.com/lian/bitcoin-ruby)\n\n## Python Libraries\n* [BlockTrail SDK Python](https://github.com/blocktrail/blocktrail-sdk-python)\n* [btctxstore](https://github.com/F483/btctxstore) - Simple library to store/retrieve information in bitcoin transactions using OP_RETURN.\n* [pybitcointools](https://github.com/vbuterin/pybitcointools) - Python library for Bitcoin signatures and transactions from Vitalik Buterin. Project discontinued.\n* [pycoin](https://github.com/richardkiss/pycoin) - Python library for Bitcoin keys, signatures, transactions. Includes full VM implementation and tools for manipulating keys (ku) and transactions (tx).\n* [bitcoin_tools](https://github.com/sr-gi/bitcoin_tools) - Python library for building and analyzing transactions and scripts (both standard and custom). Comes along with a UTXO set analysis tool. Includes several examples and exhaustive documentation.\n* [oogway](https://github.com/merwane/oogway) - A secure Bitcoin utility library for Python.\n\n## Java Libraries\n> Note that you can also use [Scala libraries](#scala-libraries) in Java.\n* [BitcoinJ](https://bitcoinj.github.io)\n* [XChange](https://github.com/knowm/XChange) - Library that provides a simple and consistent API for interacting with 50+ Bitcoin currency exchanges.\n* [Bitcoin Spring Boot Starter](https://github.com/theborakompanioni/bitcoin-spring-boot-starter) - Bitcoin integration for Spring Boot applications.\n\n## Scala libraries\n> Note that you can also use [Java libraries](#java-libraries) in Scala.\n* [Bitcoin-S](https://bitcoin-s.org) - Scala/JVM toolkit for Bitcoin applications, includes Bitcoin data structures, transaction signing, strongly typed `bitcoind`/Eclair RPC clients, and more.\n\n## .Net Libraries\n* [NBitcoin](https://github.com/MetacoSA/NBitcoin) - Comprehensive Bitcoin library for the .NET framework.\n* [BitcoinLib](https://github.com/cryptean/bitcoinlib) - The most complete, up-to-date, battle-tested .net Library and RPC Wrapper for Bitcoin and Altcoins in C#.\n* [QBitNinja](https://github.com/MetacoSA/QBitNinja) - An Open Source and powerful blockchain API.\n\n## Playgrounds\n* [Script Playground](https://www.crmarsh.com/script-playground/)\n* [Bitcoin IDE](https://github.com/siminchen/bitcoinIDE) - Bitcoin Script for dummies.\n* [Script Debugger](https://github.com/kallewoof/btcdeb)\n* [Bitcore Playground](https://bitcore.io/playground/)\n* [Mnemonic Code generator](https://iancoleman.io/bip39/)\n* [blockchain-demo](https://github.com/anders94/blockchain-demo/) - A web-based demonstration of blockchain concepts.\n* [Bitcoin Script Debugger](https://github.com/liuhongchao/bitcoin4s) - Visualize Bitcoin script execution for real transactions.\n* [Bitauth IDE](https://ide.bitauth.com/) \u2013 An interactive development environment for Bitcoin contracts.\n* [ChainQuery Bitcoin RPC](https://chainquery.com) - Run select bitcoin RPC API calls and read full RPC docs in your browser.\n\n## Blockchain dump\n* [WebBTC](http://dumps.webbtc.com/bitcoin/) - These are postgres database dumps of the bitcoin-ruby-blockchain database generated by webbtc.com.\n* [BitcoinDatabaseGenerator](https://github.com/ladimolnar/BitcoinDatabaseGenerator) - A high performance data transfer tool that can be used to copy data from Bitcoin Core blockchain files to a SQL Server database.\n* [Blockparser+SQL](https://github.com/mcdee/blockparser) - Fast, quick and dirty bitcoin blockchain parser.\n* [BitcoinABE](https://github.com/bitcoin-abe/bitcoin-abe) - Abe: block browser for Bitcoin and similar currencies.\n* [NBitcoin.Indexer](https://github.com/MetacoSA/NBitcoin.Indexer) - Scalable and fault-tolerant block chain indexer for Azure cloud platform.\n* [Blockchain2Graph](https://github.com/straumat/blockchain2graph) - Graph Database Builder.\n* [Chaingraph](https://github.com/bitauth/chaingraph/) \u2013 A multi-node blockchain indexer and GraphQL API.\n\n## Full nodes\n* [btcd](https://github.com/btcsuite/btcd/) - Go-based full node since 2013.\n* [Bitcoin-ruby-node](https://github.com/mhanne/bitcoin-ruby-node) - bitcoin node based on bitcoin-ruby-blockchain.\n* [Fullnode](https://github.com/moneybutton/yours-bitcoin) - Javascript implementation of bitcoin.\n* [Bitcore Node](https://github.com/bitpay/bitcore-node) - bitcoind linked to node.js by BitPay.\n* [Bitcore](https://github.com/bitpay/bitcore) - Formerly just a Nodejs library, now a full node.\n\n## Read\n* [A Gentle Introduction to Bitcoin Core Development](https://bitcointechtalk.com/a-gentle-introduction-to-bitcoin-core-development-fdc95eaee6b8)\n* [Mastering Bitcoin](https://github.com/bitcoinbook/bitcoinbook)\n* [Grokking Bitcoin](https://www.manning.com/books/grokking-bitcoin) - An in-depth technical book with rich illustrations.\n* [Bitcoin Stackexchange](https://bitcoin.stackexchange.com)\n* [Elliptic Curve Cryptography A Gentle Introduction](https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/).\n* [Bitcoin Programming with BitcoinJS and Bitcoin Core CLI](https://github.com/bitcoin-studio/Bitcoin-Programming-with-BitcoinJS).\n* [Bitcoin Protocol Development Curriculum - Chaincode Labs](https://github.com/chaincodelabs/bitcoin-curriculum).\n* [Lightning Network Protocol Development Curriculum - Chaincode Labs](https://github.com/chaincodelabs/lightning-curriculum).\n* [btcinformation.org / Developer Documentation](https://btcinformation.org/en/developer-documentation) - Find useful resources, guides and reference material for developers.\n\n## Course\n* [Bitcoin & Cryptocurrency](http://bitcoinbook.cs.princeton.edu/).\n\n## Additional Resources\n* [@lopp / Bitcoin Developers](https://twitter.com/lopp/lists/bitcoin-developers) - Software developers who have experience working on Bitcoin implementations or applications.\n* [@lopp / Lightning Developers](https://twitter.com/lopp/lists/lightning-developers) - Software developers with experience working on LN implementations / applications.\n* [Practical Bitcoin Info - Google Sheets](https://docs.google.com/spreadsheets/d/1Z3Ofa4P8097VWV70Z_bMqIMladngvm-Ck24ot9TDNmw/).\n* [A brief history of Bitcoin development...](https://www.youtube.com/watch?v=ZfFNce6CVsE)\n* [bitcoin-resources.com](https://bitcoin-resources.com/) Meta-list of Bitcoin resources, from books, articles, to podcasts.\n* [Jameson Lopp Bitcoin Resource List](https://www.lopp.net/bitcoin-information.html) Very detailed curated Bitcoin resource list and meta-list by J. Lopp\n* [River Learn](https://river.com/learn) A collection of educational resources to learn about Bitcoin basics, investing, technology, and more.\n---\n\nInspired by the [awesome](https://github.com/sindresorhus/awesome) list thing.\nCreated by BlockchainU fellows.\n\n---\n\n### License\n\n[![CC0](https://i.creativecommons.org/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, [Igor Barinov](https://github.com/igorbarinov/) has waived all copyright and related or neighboring rights to this work.\n"
 },
 {
  "repo": "BitcoinPHP/BitcoinECDSA.php",
  "language": "PHP",
  "readme_contents": "[![Build](https://travis-ci.org/BitcoinPHP/BitcoinECDSA.php.svg?branch=master)](https://travis-ci.org/BitcoinPHP/BitcoinECDSA.php) &nbsp;\n[![Quality Score](https://scrutinizer-ci.com/g/BitcoinPHP/BitcoinECDSA.php/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/BitcoinPHP/BitcoinECDSA.php/?branch=master) &nbsp;\n[![Latest Stable Version](https://poser.pugx.org/bitcoin-php/bitcoin-ecdsa/v/stable.svg)](https://packagist.org/packages/bitcoin-php/bitcoin-ecdsa) &nbsp;\n[![Downloads](http://img.shields.io/packagist/dt/bitcoin-php/bitcoin-ecdsa.svg?style=flat)](https://packagist.org/packages/bitcoin-php/bitcoin-ecdsa)\n\n\nWARNING\n===============\n\nThis piece of software is provided without warranty of any kind, use it at your own risk.\n\nREQUIREMENTS\n===============\n\n*php 5.4.0* or newer.\n\n*php5-gmp* needs to be installed.\n\nIf you want to launch the test file you need to be under a unix system with libbitcoin intalled on it.\n\nUSAGE\n===============\n\n**Installation**\n\nBest way is to use composer\n```\ncomposer require bitcoin-php/bitcoin-ecdsa\n```\nAlternatively add following snippet in you composer.json\n```\n\"bitcoin-php/bitcoin-ecdsa\" : \">=1.3\"\n```\n\n**Instanciation**\n\n```php\nuse BitcoinPHP\\BitcoinECDSA\\BitcoinECDSA;\nrequire_once(\"src/BitcoinPHP/BitcoinECDSA/BitcoinECDSA.php\");\n$bitcoinECDSA = new BitcoinECDSA();\n```\n\n**Set a private key**\n\n```php\n$bitcoinECDSA->setPrivateKey($k);\n```\nexamples of private keys :\n\n4C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D\n00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC\n\n**Generate a random private key**\n\n```php\n$bitcoinECDSA->generateRandomPrivateKey($nonce);\n```\n\nThe nonce is optional, typically the nonce is a chunck of random data you get from the user. This can be mouse coordinates.\nUsing a nonce adds randomness, which means the generated private key is stronger.\n\n**Get the private key**\n\n```php\n$bitcoinECDSA->getPrivateKey();\n```\n\nReturns the private key.\n\n**Get the Wif**\n\n```php\n$bitcoinECDSA->getWif();\n```\n\nreturns the private key under the Wallet Import Format\n\n\n**Get the Public Key**\n\n```php\n$bitcoinECDSA->getPubKey();\n```\nReturns the compressed public key.\nThe compressed PubKey starts with 0x02 if it's y coordinate is even and 0x03 if it's odd, the next 32 bytes corresponds to the x coordinates.\n\nExample : 0226c50013603b085fbc26411d5d7e564b252d88964eedc4e01251d2d495e92c29\n\n**Get the Uncompressed Public Key**\n\n```php\n$bitcoinECDSA->getUncompressedPubKey();\n```\n\nReturns the uncompressed PubKey.\nThe uncompressed PubKey starts with 0x04, the next 32 bytes are the x coordinates, the last 32 bytes are the y coordinates.\n\nExample : 04c80e8af3f1b7816a18aa24f242fc0740e9c4027d67c76dacf4ce32d2e5aace241c426fd288a9976ca750f1b192d3acd89dfbeca07ef27f3e5eb5d482354c4249\n\n**Get the coordinates of the Public Key**\n\n```php\n$bitcoinECDSA->getPubKeyPoints();\n```\n\nReturns an array containing the x and y coordinates of the public key\n\nExample :\nArray ( [x] => a69243f3c4c047aba38d7ac3660317629c957ab1f89ea42343aee186538a34f8 [y] => b6d862f39819060378542a3bb43ff76b5d7bb23fc012f09c3cd2724bebe0b0bd ) \n\n**Get the Address**\n\n```php\n$bitcoinECDSA->getAddress();\n```\n\nReturns the compressed Bitcoin Address.\n\n**Get the uncompressed Address**\n\n```php\n$bitcoinECDSA->getUncompressedAddress();\n```\n\nReturns the uncompressed Bitcoin Address.\n\n\n**Validate an address**\n\n```php\n$bitcoinECDSA->validateAddress($address);\n```\nReturns true if the address is valid and false if it isn't\n\n\n**Validate a Wif key**\n\n```php\n$bitcoinECDSA->validateWifKey($wif);\n```\nReturns true if the WIF key is valid and false if it isn't\n\n\nSignatures\n===============\n\n**Sign a message**\n\n```php\n$bitcoinECDSA->signMessage('message');\n```\n\nReturns a satoshi client standard signed message.\n\n\n**verify a message**\n\n```php\n$bitcoinECDSA->checkSignatureForRawMessage($signedMessage);\n```\n\nReturns true if the signature is matching the address and false if it isn't.\n\n\n**sign a sha256 hash**\n\n```php\n$bitcoinECDSA->signHash($hash);\n```\n\nReturns a DER encoded hexadecimal signature.\n\n\n**verify a signature**\n\n```php\n$bitcoinECDSA->checkDerSignature($pubKey, $signature, $hash)\n```\n\nReturns true if the signature is matching the public key and false if it isn't.\n\nExamples\n===============\n - [Generate an address](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/generateAddress.php)\n - [Sign a message](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/signMessage.php)\n - [Verify a message](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/verifyMessage.php)\n - [Import or export a private key using WIF](https://github.com/BitcoinPHP/BitcoinECDSA.php/blob/master/Examples/wif.php)\n\nLicense\n===============\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
 },
 {
  "repo": "MetacoSA/NBitcoin",
  "language": "C#",
  "readme_contents": "# NBitcoin\n\n[![Join the chat at https://gitter.im/MetacoSA/NBitcoin](https://badges.gitter.im/MetacoSA/NBitcoin.svg)](https://gitter.im/MetacoSA/NBitcoin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build status](https://github.com/MetacoSA/NBitcoin/workflows/CI/badge.svg)](https://github.com/MetacoSA/NBitcoin/actions?query=workflow%3ACI)\n\nNBitcoin is the most complete Bitcoin library for the .NET platform. It implements all most relevant Bitcoin Improvement Proposals (BIPs). It also provides low level access to Bitcoin primitives so you can easily build your application on top of it. Join us in our [gitter chat room](https://gitter.im/MetacoSA/NBitcoin).\nIt works on Windows, Mac and Linux with Xamarin, Unity, .NET Core or CLR. (Porting to Unity should not be that hard if you need it)\n\nThe best documentation available is our [eBook](https://programmingblockchain.gitbooks.io/programmingblockchain/content/), and the excellent unit tests. There are also some more resources below.\n\nYou can also browse the API easily through [the API reference](https://metacosa.github.io/NBitcoin/api/index.html).\n\n# How to use ?\n\nIn .NET Core:\n```bash\ndotnet add package NBitcoin\n```\nIf using legacy .NET Framework in Visual Studio\n```bash\nInstall-Package NBitcoin\n```\nYou can also just use the `Manage NuGet Package` window on your project in Visual Studio.\n\nGo on the [NuGet website](https://www.nuget.org/packages/NBitcoin/) for more information.\n\nThe packages support:\n\n* With full features: Windows Desktop applications, Mono Desktop applications and platforms supported by [.NET Standard 1.3](https://docs.microsoft.com/en-us/dotnet/articles/standard/library) (.NET Core, Xamarin IOS, Xamarin Android, UWP and more).\n* With limited features: platforms supported by [.NET Standard 1.1](https://docs.microsoft.com/en-us/dotnet/articles/standard/library) (Windows Phone, Windows 8.0 apps).\n\nTo compile it by yourself, you can git clone, open the project and hit the compile button in Visual Studio.\n\n\n # How to get started? \n \n First, you need to understand Bitcoin, for this read:\n * [Programming The Blockchain in C#](https://programmingblockchain.gitbooks.io/programmingblockchain/content/)\n\n Once you get familiar with Bitcoin terminology with this book, follow up by reading:\n\n * [NBitcoin documentation](https://github.com/NicolasDorier/NBitcoin.Docs/blob/master/README.md)\n\n This will teach you how to use NBitcoin in a practical way.\n\n# How to use with Altcoins ?\n\n> **Install-Package NBitcoin.Altcoins** \n\nFind more information [here](NBitcoin.Altcoins).\n\n# How to debug in NBitcoin source code?\n\nWhen a new version of `NBitcoin`, `NBitcoin.Altcoins` or `NBitcoin.TestFramework` is released on Nuget, we also upload a separate symbol package (`snupkg`) with SourceLink enabled. This is enabled from version `4.1.1.73`.\n\nThis means that it is possible to debug into NBitcoin code, and the source will be fetched transparently from github.\n\nThis works on both Visual Studio Code and Visual Studio for Windows.\n\n## Debug inside source with Visual Studio\n\nYou need to run at least Visual Studio 15.9.\nThen, you need to:\n\n* Go in `Tools / Options / Debugging / General` and turn off `Enable Just My Code`.\n* Go in `Tools / Options / Debugging / Symbols` and add `https://symbols.nuget.org/download/symbols` to the `Symbol file (.pdb) locations`, make sure it is checked.\n\nYou should also check `Microsoft Symbol Server` or your debugging experience in visual studio will be slowed down.\n\nNow you can Debug your project and step inside any call to NBitcoin.\n\n## Debug inside source with Visual Studio Code\n\nInside your `launch.json`, add the following to `.NET Core Launch (console)` configuration:\n\n```json\n\"justMyCode\": false,\n\"symbolOptions\": {\n    \"searchPaths\": [ \"https://symbols.nuget.org/download/symbols\" ],\n    \"searchMicrosoftSymbolServer\": true\n},\n```\n\nNow you can Debug your project and step inside any call to NBitcoin.\n\n# How to use with my own blockchain?\n\n Find more information [here](NBitcoin.Altcoins).\n\n# How to use in Unity?\n\nYou should use at least `Unity 2018.2` using `Script Runtime Version` `.NET 4.x Equivalent` and `Api Compatibility Level` `.NET Standard 2.0`.\nYou can see more on [this post](https://blogs.unity3d.com/2018/07/11/scripting-runtime-improvements-in-unity-2018-2/).\n\nThen you need to compile NBitcoin:\n\n```powershell\ngit clone https://github.com/MetacoSA/NBitcoin/\ncd NBitcoin/NBitcoin\ndotnet publish -c Release -f netstandard2.0\nRemove-Item -Force -Recurse .\\bin\\Release\\netstandard2.0\\publish\\runtimes\\\n```\n\nThen put the libraries of `.\\bin\\Release\\netstandard2.0` into your asset folder.\n\nIf you need altcoins support, use the same step but with `cd NBitcoin/NBitcoin.Altcoins` instead.\n\n# How to use in .NET Core\n\nIf you want to use .NET Core, first install .NET Core [as documented here](https://www.microsoft.com/net/core#windowsvs2017).\n\nThen:\n```\nmkdir MyProject\ncd MyProject\ndotnet new console\ndotnet add package NBitcoin\ndotnet restore\n```\nThen edit your Program.cs:\n```\nusing System;\nusing NBitcoin;\n\nnamespace _125350929\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World! \" + new Key().GetWif(Network.Main));\n        }\n    }\n}\n```\nYou can then run with\n```\ndotnet run\n```\n\nWe advise you to use [Visual Studio Code](https://code.visualstudio.com/) as the editor for your project.\n\n## Description\nNBitcoin notably includes:\n\n* A [TransactionBuilder](http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All) supporting Stealth, Open Asset, and all standard transactions\n* Full script evaluation and parsing\n* A RPC Client\n* A Rest Client\n* The parsing of standard scripts and creation of custom ones\n* The serialization of blocks, transactions and scripts\n* The signing and verification with private keys (with support for compact signatures) for proving ownership\n* Bloom filters and partial merkle trees\n* Segregated Witness ([BIP 141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki), [BIP 143](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki), [BIP 144](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki))\n* Bech32 segwit address implementation with error detection [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\n* Mnemonic code for generating deterministic keys ([BIP 39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)), credits to [Thasshiznets](https://github.com/Thashiznets/BIP39.NET)\n* Hierarchical Deterministic Wallets ([BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki))\n* Payment URLs ([BIP 21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki))\n* Full Bitcoin P2P implementation with SOCKS5 support for connecting through Tor\n* [A C# implementation of secp256k1](NBitcoin.Secp256k1/README.md)\n\nPlease read our [ebook](https://programmingblockchain.gitbooks.io/programmingblockchain/content/) to understand the capabilities.\n\nNBitcoin is inspired by Bitcoin Core code but provides a simpler object oriented API (e.g., new Key().PubKey.Address.ToString() to generate a key and get the associated address). It relies on the BouncyCastle cryptography library instead of OpenSSL, yet replicates OpenSSL bugs to guarantee compatibility. NBitcoin also ports the integrality of Bitcoin Core unit tests with their original data in order to validate the compatibility of the two implementations.\n\nNBitcoin is licensed under the [MIT License](https://opensource.org/licenses/MIT) and we encourage you to use it to explore, learn, debug, play, share and create software for Bitcoin and with other Metaco services.\n\n## How to connect use a SOCKS5 proxy to connect to a Bitcoin node?\n\nHere an example which assume you run Tor with SOCKS5 proxy on port 9050.\n```csharp\nvar connectionParameters = new NodeConnectionParameters();\nconnectionParameters.TemplateBehaviors.Add(new SocksSettingsBehavior(Utils.ParseEndpoint(\"localhost\", 9050)));\nNode node = await Node.ConnectAsync(Network.Main, \"7xnmrhmkvptbcvpl.onion:8333\", connectionParameters);\nnode.VersionHandshake();\n```\n\n## Some OSS projects using NBitcoin\n\n* [Wasabi](http://github.com/zkSNACKs/WalletWasabi): Privacy focused, ZeroLink compliant Bitcoin wallet.\n\n* [StratisBitcoinFullNode](http://github.com/stratisproject/StratisBitcoinFullNode): Bitcoin full node in C# https://stratisplatform.com\n\n* [Breeze](http://github.com/stratisproject/Breeze): Breeze Wallet, the first full-block SPV bitcoin wallet \n\n* [BlockExplorer](http://github.com/stratisproject/BlockExplorer): A set of projects that can index and query stratis blockchains on the fullnode. \n\n* [BTCPay Server](http://github.com/btcpayserver/btcpayserver): A cross platform, self-hosted server compatible with Bitpay API \n\n* [NTumbleBit](http://github.com/NTumbleBit/NTumbleBit): TumbleBit Implementation in .NET Core \n\n* [BitPoker](http://github.com/bitcoinbrisbane/BitPoker): Decentralised peer to peer poker, using bitcoin http://www.bitpoker.io\n\n* [Zen-Wallet](http://github.com/zenprotocol/zen-wallet): Node and GUI for the Zen Protocol. https://www.zenprotocol.com\n\n* [Metaco-Trader](http://github.com/MetacoSA/Metaco-Trader): Bitcoin Wallet for advanced user based on a NBitcoin.Server \n\n* [Swarmops](http://github.com/Swarmops/Swarmops): Admin backend for any bitcoin-native or swarm organization http://sandbox.swarmops.com/\n\n* [Nako](http://github.com/CoinVault/Nako): A Bitcoin and Altcoin server api that indexes blockchain transactions and addresses \n\n* [NBXplorer](http://github.com/dgarage/NBXplorer): A minimalist UTXO tracker for HD Wallets with bitcoin based altcoin support \n\n* [UnitCurrency](http://github.com/unitcurrency/unitcurrency): UnitCoin - a hybrid scrypt PoW + PoS based cryptocurrency.\n\n* [Openchain](http://github.com/openchain/openchain): Openchain node reference implementation. https://www.openchain.org/\n\n* [BreezeProject](http://github.com/BreezeHub/BreezeProject): Breeze Masternode and Wallet with Breeze Privacy Protocol \n\n* [geewallet](https://gitlab.com/nblockchain/geewallet/): Non-custodial, minimalistic & pragmatist opensource crossplatform lightweight brainwallet to hold the most important cryptoassets in the same application with ease & peace of mind\n\n* [blockcore](https://github.com/block-core/blockcore): Modular Bitcoin fullnode implementation. https://www.blockcore.net/\n\n## Useful doc :\n\n* **Ebook** [Programming The Blockchain in C#](https://www.gitbook.com/book/programmingblockchain/programmingblockchain/details)\n\n* **NBitcoin Github** : [https://github.com/NicolasDorier/NBitcoin](https://github.com/NicolasDorier/NBitcoin \"https://github.com/NicolasDorier/NBitcoin\")\n\n* **NBitcoin Nuget** : [https://www.nuget.org/packages/NBitcoin/](https://www.nuget.org/packages/NBitcoin/ \"https://www.nuget.org/packages/NBitcoin/\")\n\n* **Intro**: [http://www.codeproject.com/Articles/768412/NBitcoin-The-most-complete-Bitcoin-port-Part-Crypt](http://www.codeproject.com/Articles/768412/NBitcoin-The-most-complete-Bitcoin-port-Part-Crypt)\n\n* **Stealth Payment**, and **BIP38** : [http://www.codeproject.com/Articles/775226/NBitcoin-Cryptography-Part](http://www.codeproject.com/Articles/775226/NBitcoin-Cryptography-Part)\n\n* **How to build transaction** : [http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All](http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All \"http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All\")\n\n* **Using the NBitcoin Indexer** : [http://www.codeproject.com/Articles/819567/NBitcoin-Indexer-A-scalable-and-fault-tolerant-blo](http://www.codeproject.com/Articles/819567/NBitcoin-Indexer-A-scalable-and-fault-tolerant-blo \"http://www.codeproject.com/Articles/819567/NBitcoin-Indexer-A-scalable-and-fault-tolerant-blo\")\n\n* **How to Scan the blockchain** : [http://www.codeproject.com/Articles/784519/NBitcoin-How-to-scan-the-Blockchain](http://www.codeproject.com/Articles/784519/NBitcoin-How-to-scan-the-Blockchain \"http://www.codeproject.com/Articles/784519/NBitcoin-How-to-scan-the-Blockchain\") (You can dismiss the ScanState for that, now I concentrate on the indexer)\n\nPlease, use github issues for questions or feedback. For confidential requests or specific demands, contact us on [Metaco support](mailto:support@metaco.com \"support@metaco.com\").\n\n\n## Useful link for a free IDE :\nVisual Studio Community Edition : [https://www.visualstudio.com/products/visual-studio-community-vs](https://www.visualstudio.com/products/visual-studio-community-vs \"https://www.visualstudio.com/products/visual-studio-community-vs\")\n"
 },
 {
  "repo": "bitcoincashorg/bitcoincash.org",
  "language": "CSS",
  "readme_contents": "<p align=\"center\">\n  <a href=\"https://bitcoincash.org\">\n    <img src=\"https://www.bitcoincash.org/media-kit/3-bitcoin-cash-logo-ot-small.png\" height=\"110\" alt=\"Bitcoin Cash\">\n  </a>\n</p>\n\n<h5 align=\"center\">\n  Repository for <a href=\"https://bitcoincash.org\">BitcoinCash.org</a>\n</h5>\n\n#\n\nBitcoin Cash is a peer-to-peer version of electronic money allowing payments to be sent directly from one party to another instantly and almost for free without going through a financial institution.\n\n### How to run the site locally\n\n**Note**: *BitcoinCash.org is changing to Gatsby. See the [README in the v2 directory](./v2) to see the new installation instructions. The instructions below are for the older version of the site.*\n\nIn order to build and run the site you need Ruby \ud83d\udc8e and Docker \ud83d\udc33. Then run:\n\n```shell\ngem install bundler\nbundle install\n\n# run the development server with:\nmake serve\n\n# or test the Docker container with:\nmake run\n\n# or test the v2 build with:\nmake run APP_VERSION=2\n```\n\nOpen a browser to `localhost:4000` or `localhost:8080` respectively.\n\nYou can then submit pull requests to this repository.\n\n### Listing Policy for Exchanges, Wallets, and Projects\n\nBitcoinCash.org is not meant to be an exhaustive directory.  \nThere is limited space and quite simply, we only want to showcase the best of the best.  \nIf you think your project should be listed on BitcoinCash.org, simply submit a pull request.\n\nWe apologize in advance if we're unable to provide a listing for you on BitcoinCash.org.  \nLastly, no listing should be interpreted as our explicit endorsement.\n\n### License\n\nbitcoincash.org is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n"
 },
 {
  "repo": "p2pool/p2pool",
  "language": "Python",
  "readme_contents": "Requirements:\n-------------------------\nGeneric:\n* Bitcoin >=0.11.1\n* Python >=2.6\n* Twisted >=10.0.0\n* python-argparse (for Python =2.6)\n\nLinux:\n* sudo apt-get install python-zope.interface python-twisted python-twisted-web\n* sudo apt-get install python-argparse # if on Python 2.6\n\nWindows:\n* Install [Python 2.7](http://www.python.org/getit/)\n* Install [Twisted](http://twistedmatrix.com/trac/wiki/Downloads)\n* Install [Zope.Interface](http://pypi.python.org/pypi/zope.interface/3.8.0)\n* Install [python win32 api](http://sourceforge.net/projects/pywin32/files/pywin32/Build%20218/)\n* Install [python win32 api wmi wrapper](https://pypi.python.org/pypi/WMI/#downloads)\n* Unzip the files into C:\\Python27\\Lib\\site-packages\n\nRunning P2Pool:\n-------------------------\nTo use P2Pool, you must be running your own local bitcoind. For standard\nconfigurations, using P2Pool should be as simple as:\n\n    python run_p2pool.py\n\nThen run your miner program, connecting to 127.0.0.1 on port 9332 with any\nusername and password.\n\nIf you are behind a NAT, you should enable TCP port forwarding on your\nrouter. Forward port 9333 to the host running P2Pool.\n\nRun for additional options.\n\n    python run_p2pool.py --help\n\nDonations towards further development:\n-------------------------\n    1HNeqi3pJRNvXybNX4FKzZgYJsdTSqJTbk\n\nOfficial wiki:\n-------------------------\nhttps://en.bitcoin.it/wiki/P2Pool\n\nAlternate web frontend:\n-------------------------\n* https://github.com/hardcpp/P2PoolExtendedFrontEnd\n\nNotes for Litecoin:\n=========================\nRequirements:\n-------------------------\nIn order to run P2Pool with the Litecoin network, you would need to build and install the\nltc_scrypt module that includes the scrypt proof of work code that Litecoin uses for hashes.\n\nLinux:\n\n    cd litecoin_scrypt\n    sudo python setup.py install\n\nWindows (mingw):\n* Install MinGW: http://www.mingw.org/wiki/Getting_Started\n* Install Python 2.7: http://www.python.org/getit/\n\nIn bash type this:\n\n    cd litecoin_scrypt\n    C:\\Python27\\python.exe setup.py build --compile=mingw32 install\n\nWindows (Microsoft Visual C++)\n* Open visual studio console\n\nIn bash type this:\n\n    SET VS90COMNTOOLS=%VS110COMNTOOLS%\t           # For visual c++ 2012\n    SET VS90COMNTOOLS=%VS100COMNTOOLS%             # For visual c++ 2010\n    cd litecoin_scrypt\n    C:\\Python27\\python.exe setup.py build --compile=mingw32 install\n\t\nIf you run into an error with unrecognized command line option '-mno-cygwin', see this:\nhttp://stackoverflow.com/questions/6034390/compiling-with-cython-and-mingw-produces-gcc-error-unrecognized-command-line-o\n\nRunning P2Pool:\n-------------------------\nRun P2Pool with the \"--net litecoin\" option.\nRun your miner program, connecting to 127.0.0.1 on port 9327.\nForward port 9338 to the host running P2Pool.\n\nLitecoin's use of ports 9333 and 9332 conflicts with P2Pool running on\nthe Bitcoin network. To avoid problems, add these lines to litecoin.conf\nand restart litecoind:\n\n    rpcport=10332\n    port=10333\n\nSponsors:\n-------------------------\n\nThanks to:\n* The Bitcoin Foundation for its generous support of P2Pool\n* The Litecoin Project for its generous donations to P2Pool\n \nLicense:\n-------------------------\n\n[Available here](COPYING)\n\n\n"
 },
 {
  "repo": "buttercoin/buttercoin",
  "language": "CoffeeScript",
  "readme_contents": "This project is deprecated\u2014 we encourage you to fork it and continue the work\n=============================================================================\n\n\nButtercoin\n==========\n### An Open Source Bitcoin Exchange\n\nCopyright &copy; 2013 Buttercoin Developers\n\nWhat is Buttercoin?\n-------------------\n\nFollowing the events of April 2013 in which Bitcoin value dropped dramatically as a result of the short comings of existing exchanges it was decided that there should be a community driven and open source exchange. As such Buttercoin was born out of neccesity for this. Buttercoin allows the decentralisation of exchange between Bitcoin and other currencies.\n\nLicense\n-------\n\nButtercoin is released under the terms of the MIT license. See `LICENCE` for more\ninformation or see http://opensource.org/licenses/MIT.\n\nDevelopment process\n-------------------\n\nDevelopers work in their own trees, then submit pull requests when they are **sure**\ntheir feature or bug fix is ready.\n\nThe patch will be accepted if there is broad consensus that it is a good thing.\nDevelopers should expect to rework and resubmit patches if the code doesn't\nmatch the project's coding conventions or are controversial.\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable.\n\nThis is an open project and all are encouraged to contribute.\n\nTesting\n-------\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write unit tests for new code, and to\nsubmit new unit tests for old code.\n\nUnit tests for the core code are in `test/`. \n\nDiscussion\n----------\n\n* [Original Post on Reddit](http://www.reddit.com/r/Bitcoin/comments/1c7v6z/buttercoin_open_source_highperformance_bitcoin/)\n* [/r/buttercoin](http://www.reddit.com/r/buttercoin)\n* [#buttercoin](irc://irc.freenode.org/buttercoin)\n* [#buttercoin-dev](irc://irc.freenode.org/buttercoin-dev)\n* [Hackpad](https://buttercoin.hackpad.com/)\n* [Trello](https://trello.com/board/buttercoin/516af0ca86d48fe14f0022ab)\n\n[![Build Status](https://travis-ci.org/buttercoin/buttercoin.png)](https://travis-ci.org/buttercoin/buttercoin)\n"
 },
 {
  "repo": "bitpay/bitcore",
  "language": "JavaScript",
  "readme_contents": "# Bitcore Monorepo\n\n  <p align=\"center\">\n  <img alt=\"npm\" src=\"https://img.shields.io/npm/v/bitcore-lib\">\n  <img alt=\"GitHub commit activity\" src=\"https://img.shields.io/github/commit-activity/m/bitpay/bitcore\">\n  <a href=\"https://opensource.org/licenses/MIT/\" target=\"_blank\"><img alt=\"MIT License\" src=\"https://img.shields.io/badge/License-MIT-blue.svg\" style=\"display: inherit;\"/></a>\n  <img alt=\"GitHub contributors\" src=\"https://img.shields.io/github/contributors/bitpay/bitcore\">\n  <br>\n <img src=\"https://circleci.com/gh/bitpay/bitcore.svg?style=shield\" alt=\"master build\">\n</p>\n  \n**Infrastructure to build Bitcoin and blockchain-based applications for the next generation of financial technology.**\n\n## Applications\n\n- [Bitcore Node](packages/bitcore-node) - A standardized API to interact with multiple blockchain networks\n- [Bitcore Wallet](packages/bitcore-wallet) - A command-line based wallet client\n- [Bitcore Wallet Client](packages/bitcore-wallet-client) - A client for the wallet service\n- [Bitcore Wallet Service](packages/bitcore-wallet-service) - A multisig HD service for wallets\n- [Bitpay Wallet](https://github.com/bitpay/wallet) - An easy-to-use, multiplatform, multisignature, secure bitcoin wallet\n- [Insight](packages/insight) - A blockchain explorer web user interface\n\n## Libraries\n\n- [Bitcore Lib](packages/bitcore-lib) - A powerful JavaScript library for Bitcoin\n- [Bitcore Lib Cash](packages/bitcore-lib-cash) - A powerful JavaScript library for Bitcoin Cash\n- [Bitcore Lib Doge](packages/bitcore-lib-doge) - A powerful JavaScript library for Dogecoin\n- [Bitcore Lib Litecoin](packages/bitcore-lib-ltc) - A powerful JavaScript library for Litecoin\n- [Bitcore Mnemonic](packages/bitcore-mnemonic) - Implements mnemonic code for generating deterministic keys\n- [Bitcore P2P](packages/bitcore-p2p) - The peer-to-peer networking protocol for Bitcoin\n- [Bitcore P2P Cash](packages/bitcore-p2p-cash) - The peer-to-peer networking protocol for Bitcoin Cash\n- [Bitcore P2P Doge](packages/bitcore-p2p-doge) **DEPRECATED**[^1] - The peer-to-peer networking protocol for Dogecoin\n- [Crypto Wallet Core](packages/crypto-wallet-core) - A coin-agnostic wallet library for creating transactions, signing, and address derivation\n\n## Extras\n\n- [Bitcore Build](packages/bitcore-build) - A helper to add tasks to gulp\n- [Bitcore Client](packages/bitcore-client) - A helper to create a wallet using the bitcore-v8 infrastructure\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/bitpay/bitcore/blob/master/Contributing.md) on the main bitcore repo for information about how to contribute.\n\n## License\n\nCode released under [the MIT license](https://github.com/bitpay/bitcore/blob/master/LICENSE).\n\nCopyright 2013-2023 BitPay, Inc. Bitcore is a trademark maintained by BitPay, Inc.\n\n[^1]: The Bitcore P2P Doge library is no longer maintained as all the core functionality is contained in Bitcore P2P\n"
 },
 {
  "repo": "zquestz/bitcoincash",
  "language": "CSS",
  "readme_contents": "[![Build & Push](https://github.com/zquestz/bitcoincash/actions/workflows/build_and_push.yml/badge.svg?branch=master)](https://github.com/zquestz/bitcoincash/actions/workflows/build_and_push.yml?query=branch%3Amaster)\n\n# BitcoinCash.org\n\nThis is the repository for [bitcoincash.org](https://bitcoincash.org). As the Bitcoin Cash community expands, we hope that many will participate and improve this project over time.\n\n## Build & Run the Docker Image\n\nIn order to build and run the site you need ruby and docker. Then run:\n\n1. `gem install bundler`\n2. `bundle install`\n3. `bundle exec rake docker:build`\n4. `docker run -p 8888:80 bitcoincash:latest`\n\nNow the site is running at http://localhost:8888.\n\nTo refresh the site after making changes:\n\n```\n# ctrl-c the running docker process.\nbundle exec rake docker:build && docker run -p 8888:80 bitcoincash:latest\n```\n\nThe site is running at http://localhost:8888 with your changes.\n\n## Contributions\n\nIf you want to submit updates to the website make sure you are editing the templates in the `views` directory. These are used to generate all translated html files via `rake translations:build`.\n\nNote: Image files for projects will not load if against a transparent background or will extend out of card if too oddly sized. Best to use approximately 400x250 plain white card, with logo in the center.\n\n## Adding Translations\n\nTo add translations to the project, use `translations/en.yml` as a template and create a new file for your locale. Then translate all the content inside of the yaml file and send us a pull request.\n\n## Optimizing Images\n\nPlease provide all images as WEBP.\n\n## About Bitcoin Cash\n\nBitcoin Cash brings sound money to the world. Merchants and users are empowered with low fees and reliable confirmations. The future shines brightly with unrestricted growth, global adoption, permissionless innovation, and decentralized development.\n\nAll Bitcoin holders as of block 478558 are now owners of Bitcoin Cash. All Bitcoiners are welcome to join the Bitcoin Cash community as we move forward in creating sound money accessible to the whole world.\n\n## Listing Policy for Exchanges, Wallets, and Projects\n\nAlthough many exchanges, wallets, and other projects would like to be listed on our website, BitcoinCash.org is not meant\nto be an exhaustive directory. There is limited space and quite simply, we only want to showcase the best of the best.\n\nOnly the top several exchanges by trading volume in each country will be considered.\n\nFor wallets, we only want to list those that have the highest trust and best reputation within the community. Relevant factors include the brand, the age of the wallet, as well as the track record of the company, developers, and/or other individuals involved.\n\nWe apologize in advance if we're unable to provide a listing for you on BitcoinCash.org. We acknowledge the criteria for wallet listings are somewhat subjective. Please understand our decisions are not personal, but rather based on a conservative approach and our responsbility to safeguard the community against questionable projects. Lastly, no listing should be interpreted as our explicit endorsement.\n\n## License\n\nbitcoincash.org is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n"
 },
 {
  "repo": "bitpay/bitcoind-rpc",
  "language": "JavaScript",
  "readme_contents": "bitcoind-rpc.js\n===============\n\n[![NPM Package](https://img.shields.io/npm/v/bitcoind-rpc.svg?style=flat-square)](https://www.npmjs.org/package/bitcoind-rpc)\n[![Build Status](https://img.shields.io/travis/bitpay/bitcoind-rpc.svg?branch=master&style=flat-square)](https://travis-ci.org/bitpay/bitcoind-rpc)\n[![Coverage Status](https://img.shields.io/coveralls/bitpay/bitcoind-rpc.svg?style=flat-square)](https://coveralls.io/r/bitpay/bitcoind-rpc?branch=master)\n\nA client library to connect to Bitcoin Core RPC in JavaScript.\n\n## Get Started\n\nbitcoind-rpc.js runs on [node](http://nodejs.org/), and can be installed via [npm](https://npmjs.org/):\n\n```bash\nnpm install bitcoind-rpc\n```\n\n## Examples\n\n```javascript\nvar run = function() {\n  var bitcore = require('bitcore');\n  var RpcClient = require('bitcoind-rpc');\n\n  var config = {\n    protocol: 'http',\n    user: 'user',\n    pass: 'pass',\n    host: '127.0.0.1',\n    port: '18332',\n  };\n\n  // config can also be an url, e.g.:\n  // var config = 'http://user:pass@127.0.0.1:18332';\n\n  var rpc = new RpcClient(config);\n\n  var txids = [];\n\n  function showNewTransactions() {\n    rpc.getRawMemPool(function (err, ret) {\n      if (err) {\n        console.error(err);\n        return setTimeout(showNewTransactions, 10000);\n      }\n\n      function batchCall() {\n        ret.result.forEach(function (txid) {\n          if (txids.indexOf(txid) === -1) {\n            rpc.getRawTransaction(txid);\n          }\n        });\n      }\n\n      rpc.batch(batchCall, function(err, rawtxs) {\n        if (err) {\n          console.error(err);\n          return setTimeout(showNewTransactions, 10000);\n        }\n\n        rawtxs.map(function (rawtx) {\n          var tx = new bitcore.Transaction(rawtx.result);\n          console.log('\\n\\n\\n' + tx.id + ':', tx.toObject());\n        });\n\n        txids = ret.result;\n        setTimeout(showNewTransactions, 2500);\n      });\n    });\n  }\n\n  showNewTransactions();\n};\n```\n\n## License\n\n**Code released under [the MIT license](https://github.com/bitpay/bitcore/blob/master/LICENSE).**\n\nCopyright 2013-2018 BitPay, Inc.\n"
 },
 {
  "repo": "btcsuite/btcd",
  "language": "Go",
  "readme_contents": "btcd\n====\n\n[![Build Status](https://github.com/btcsuite/btcd/workflows/Build%20and%20Test/badge.svg)](https://github.com/btcsuite/btcd/actions)\n[![Coverage Status](https://coveralls.io/repos/github/btcsuite/btcd/badge.svg?branch=master)](https://coveralls.io/github/btcsuite/btcd?branch=master)\n[![ISC License](https://img.shields.io/badge/license-ISC-blue.svg)](http://copyfree.org)\n[![GoDoc](https://img.shields.io/badge/godoc-reference-blue.svg)](https://pkg.go.dev/github.com/btcsuite/btcd)\n\nbtcd is an alternative full node bitcoin implementation written in Go (golang).\n\nThis project is currently under active development and is in a Beta state.  It\nis extremely stable and has been in production use since October 2013.\n\nIt properly downloads, validates, and serves the block chain using the exact\nrules (including consensus bugs) for block acceptance as Bitcoin Core.  We have\ntaken great care to avoid btcd causing a fork to the block chain.  It includes a\nfull block validation testing framework which contains all of the 'official'\nblock acceptance tests (and some additional ones) that is run on every pull\nrequest to help ensure it properly follows consensus.  Also, it passes all of\nthe JSON test data in the Bitcoin Core code.\n\nIt also properly relays newly mined blocks, maintains a transaction pool, and\nrelays individual transactions that have not yet made it into a block.  It\nensures all individual transactions admitted to the pool follow the rules\nrequired by the block chain and also includes more strict checks which filter\ntransactions based on miner requirements (\"standard\" transactions).\n\nOne key difference between btcd and Bitcoin Core is that btcd does *NOT* include\nwallet functionality and this was a very intentional design decision.  See the\nblog entry [here](https://web.archive.org/web/20171125143919/https://blog.conformal.com/btcd-not-your-moms-bitcoin-daemon)\nfor more details.  This means you can't actually make or receive payments\ndirectly with btcd.  That functionality is provided by the\n[btcwallet](https://github.com/btcsuite/btcwallet) and\n[Paymetheus](https://github.com/btcsuite/Paymetheus) (Windows-only) projects\nwhich are both under active development.\n\n## Requirements\n\n[Go](http://golang.org) 1.16 or newer.\n\n## Installation\n\nhttps://github.com/btcsuite/btcd/releases\n\n#### Linux/BSD/MacOSX/POSIX - Build from Source\n\n- Install Go according to the installation instructions here:\n  http://golang.org/doc/install\n\n- Ensure Go was installed properly and is a supported version:\n\n```bash\n$ go version\n$ go env GOROOT GOPATH\n```\n\nNOTE: The `GOROOT` and `GOPATH` above must not be the same path.  It is\nrecommended that `GOPATH` is set to a directory in your home directory such as\n`~/goprojects` to avoid write permission issues.  It is also recommended to add\n`$GOPATH/bin` to your `PATH` at this point.\n\n- Run the following commands to obtain btcd, all dependencies, and install it:\n\n```bash\n$ cd $GOPATH/src/github.com/btcsuite/btcd\n$ GO111MODULE=on go install -v . ./cmd/...\n```\n\n- btcd (and utilities) will now be installed in ```$GOPATH/bin```.  If you did\n  not already add the bin directory to your system path during Go installation,\n  we recommend you do so now.\n\n## Updating\n\n#### Linux/BSD/MacOSX/POSIX - Build from Source\n\n- Run the following commands to update btcd, all dependencies, and install it:\n\n```bash\n$ cd $GOPATH/src/github.com/btcsuite/btcd\n$ git pull\n$ GO111MODULE=on go install -v . ./cmd/...\n```\n\n## Getting Started\n\nbtcd has several configuration options available to tweak how it runs, but all\nof the basic operations described in the intro section work with zero\nconfiguration.\n\n#### Linux/BSD/POSIX/Source\n\n```bash\n$ ./btcd\n```\n\n## IRC\n\n- irc.libera.chat\n- channel #btcd\n- [webchat](https://web.libera.chat/gamja/?channels=btcd)\n\n## Issue Tracker\n\nThe [integrated github issue tracker](https://github.com/btcsuite/btcd/issues)\nis used for this project.\n\n## Documentation\n\nThe documentation is a work-in-progress.  It is located in the [docs](https://github.com/btcsuite/btcd/tree/master/docs) folder.\n\n## Release Verification\n\nPlease see our [documentation on the current build/verification\nprocess](https://github.com/btcsuite/btcd/tree/master/release) for all our\nreleases for information on how to verify the integrity of published releases\nusing our reproducible build system.\n\n## License\n\nbtcd is licensed under the [copyfree](http://copyfree.org) ISC License.\n"
 },
 {
  "repo": "bitpay/insight-api",
  "language": "JavaScript",
  "readme_contents": "\nTHIS PROYECT HAS BEEN REPLACED BY BITCORE-NODE, AT https://github.com/bitpay/bitcore\n"
 },
 {
  "repo": "lefnire/tforce_btc_trader",
  "language": "Jupyter Notebook",
  "readme_contents": "# TensorForce Bitcoin Trading Bot\n\n## Update 2018-08-14\nTag v0.1 has the code which follows this README. Tag v0.2 is a major overhaul after lessons learned in a finance job, and much of this README won't match the new code. I can't get tests to converge in either case, so something is fundamentally missing from this project - ie, don't count on making money (use as a starting-point / education instead). I'm stepping away for a while and won't be very active here, but I'm not completely abandoning.\n\n---\n\n\n[![Join the chat at https://gitter.im/lefnire/tforce_btc_trader](https://badges.gitter.im/lefnire/tforce_btc_trader.svg)](https://gitter.im/lefnire/tforce_btc_trader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA [TensorForce](https://github.com/reinforceio/tensorforce)-based Bitcoin trading bot (algo-trader). Uses deep reinforcement learning to automatically buy/sell/hold BTC based on price history.\n\nThis project goes with Episode 26+ of [Machine Learning Guide](http://ocdevel.com/podcasts/machine-learning). Those episodes are tutorial for this project; including an intro to Deep RL, hyperparameter decisions, etc.\n\n### 1. Setup\n- Python 3.6+ (I use template strings a lot)\n- Install & setup Postgres\n  - Create two databases: `btc_history` and `hyper_runs`. You can call these whatever you want, and just use one db instead of two if you prefer (see Data section).\n  - `cp config.example.json config.json`, pop ^ into `config.json`\n- Install [TA-Lib](https://github.com/mrjbq7/ta-lib) manually.\n- `pip install -r requirements.txt`\n  - If issues, try installing these deps manually.\n- Install TensorForce from git repo (constantly changing, we chase HEAD)\n  - `git clone https://github.com/lefnire/tensorforce.git`\n  - `cd tensorforce && pip install -e .`\n\nNote: you'll wanna run this on a GPU rig with some RAM. I'm using a 1080ti and 16GB RAM; 8GB+ is often in used. You _can_ use a standard PC, no GPU (CPU-only); in that case `pip install -I tensorflow==1.5.0rc1` (instead of `tensorflow-gpu`). The only downside is performance; CPU is _way_ slower than GPU for ConvNet computations. Worth evaluating this repo on a CPU before you decide \"yeah, it's worth the upgrade.\"\n\n### 2. Populate Data\n- Download [mczielinski/bitcoin-historical-data](https://www.kaggle.com/mczielinski/bitcoin-historical-data)\n- Extract to `data/bitcoin-historical-data`\n- `python -c 'from data.data import setup_runs_table;setup_runs_table()'`\n  - if you get `ModuleNotFoundError: No module named 'data.data'`, prefix commands with `PYTHONPATH=. python ...`\n  - If you have trouble with that, just copy/paste the SQL from that file, execute against your `hyper_runs` DB from above.\n\n### 3. Hypersearch\nThe crux of practical reinforcement learning is finding the right hyper-parameter combo (things like neural-network width/depth, L1 / L2 / Dropout numbers, etc). Some papers have listed optimal default hypers. Eg, the Proximate Policy Optimization (PPO) [paper](https://blog.openai.com/openai-baselines-ppo/) has a set of good defaults. But in my experience, they don't work well for our purposes (time-series / trading). I'll keep my own \"best defaults\" updated in this project, but YMMV and you'll very likely need to try different hyper combos yourself. The file `hypersearch.py` will search hypers forever, ever honing in on better and better combos (using Bayesian Optimization (BO), see `gp.py`). See Hypersearch section below for more details.\n\n`python hypersearch.py`\n\nOptional flags:\n- `--guess <int>`: sometimes you don't want BO, which is pretty willy-nilly at first, to do the searching. Instead you want to try a hunch or two of your own first. See instructions in `utils.py#guess_overrides`.\n- `--net-type <lstm|conv2d>`: see discussion below (LSTM v CNN)\n- `--boost`: you can optionally use gradient boosting when searching for the best hyper combo, instead of BO. BO is more exploratory and thorough, gradient boosting is more \"find the best solution _now_\". I tend to use `--boost` after say 100 runs are in the database, since BO may still be dilly-dallying till 200-300 and daylight's burning. Boost will suck in the early runs.\n- `--autoencode`: many of you might hit some GPU RAM constraints (hypersearch crashes due to maxed memory). If so, use this flag. It dimensionality-reduces the price-history timesteps so more can fit into RAM. It does so destructively - think of lossy image compression - but might be required for your case. See [#6](https://github.com/lefnire/tforce_btc_trader/issues/6#issuecomment-364179764) for info on what leads to mem-maxing.\n- `--n-steps <int>`, `--n-tests <int>`: vary how long to train and how often to report. `n-steps` is number of timesteps to train (in 10k; ie `--n-steps 100` means 1M). `n-tests` is how many times to split that and report back to you / save an entry for viz.\n\n### 4. Run\nOnce you've found a good hyper combo from above (this could take days or weeks!), it's time to run your results.\n\n`python run.py --name <str>`\n\n- `--name <str>` (required): name of the folder to save your run (during training) or load from (during `--live/--test-live`.\n- `--id <int>`: the id of some winning hyper-combo you want to run with. Without this, it'll run from the hard-coded hyper defaults.\n- `--early-stop <int>`: sometimes your models can overfit. In particular, PPO can give you great performance for a long time and then crash-and-burn. That kind of behavior will be obvious in your visualization (below), so you can tell your run to stop after x consecutive positive episodes (depends on the agent - some find an optimum and roll for 3 positive episodes, some 8, just eyeball your graph).\n- `--live`: whooa boy, time to put your agent on GDAX and make real trades! I'm gonna let you figure out how to plug it in on your own, 'cause that's danger territory. I ain't responsible for shit. In fact, let's make that real - disclaimer at the end of README.\n- `--test-live`: same as `live`, but without making the real trades. This will start monitoring a live-updated database (from config.json), same as `live`, but instead of making the actual trade, it pretends it did and reports back how much you would have made/lost. Dry-run. You'll definitely want to run this once or twice before running `--live`.\n\nFirst, run `python run.py [--id 10] --name test`. This will train your model using run 10 (from `hypersearch.py`) and save to `saves/test`. Without `--id` it will use the hard-coded deafults. You can hit `Ctrl-C` _once_ during training to kill training (in case you see a sweet-spot and don't want to overfit).\nSecond, run `python run.py [--id 10] --name test --[test-]live` to run in live/test-live mode. If you used `--id` before, use it again here so that loading the model matches it to its net architecture.\n\n## 5. Visualize\nTensorForce comes pre-built with reward visualization on a TensorBoard. Check out their Github, you'll see. I needed much more customization than that for viz, so we're not using TensorBoard. I created a mini Flask server (2 routes) and a D3 React dashboard where you can slice & dice hyper combos, visualize progression, etc. If you click on a single run, it'll display a graph of the buy/sell signals that agent took in a time-slice (test-set) so you can eyeball whether he's being smart.\n\n- Server: `cd visualize;FLASK_APP=server.py flask run`\n- Client:\n  - `cd visualize/client`\n  - `npm install;npm install -g webpack-dev-server`\n  - `npm start` => localhost:8080\n\n![](https://s3.amazonaws.com/lefnirePublicFiles/adam_screenshot.png)\n\n---\n\n## About\n\nThis project is a [TensorForce](https://github.com/reinforceio/tensorforce)-based Bitcoin trading bot (algo-trader). It uses deep reinforcement learning to automatically buy/sell/hold BTC based on what it learns about BTC price history. Most blogs / tutorials / boilerplate BTC trading-bots you'll find out there use supervised machine learning, likely an LTSM. That's well and good - supervised learning learns what makes a time-series tick so it can predict the next-step future. But that's where it stops. It says \"the price will go up next\", but it doesn't tell you what to do. Well that's simple, buy, right? Ah, buy low, sell high - it's not that simple. Thousands of lines of code go into trading rules, \"if this then that\" style. Reinforcement learning takes supervised to the next level - it _embeds_ supervised within its architecture, and then decides what to do. It's beautiful stuff! Check out:\n\n- [Sutton & Barto](http://amzn.to/2EWvnVf): de-facto textbook on RL basics\n- [CS 294](http://rll.berkeley.edu/deeprlcourse/): the modern deep-learning spin on ^.\n- [Machine Learning for Trading](https://www.udacity.com/course/machine-learning-for-trading--ud501): teaches you algo-trading, stock stuff, and applied RL.\n\nThis project goes with Episode 26+ of [Machine Learning Guide](http://ocdevel.com/podcasts/machine-learning). Those episodes are tutorial for this project; including an intro to Deep RL, hyperparameter decisions, etc.\n\n\n### Data\nFor this project I recommend using the Kaggle dataset described in Setup. It's a really solid dataset, best I've found! I'm personally using a friend's live-ticker DB. Unfortunately you can't. It's his personal thing, he may one day open it up as a paid API or something, we'll see. There's also some files in `data/populate` which use the CryptoWat.ch API. Great API _going forward_, but doesn't have the history you'll need to train on. If any y'all find anything better than the Kaggle set, LMK.\n\nSo here's how this project splits up databases (see `config.json`). We start with a `history` DB, which has all the historical BTC prices for multiple exchanges. Import it, train on it. Then we have an optionally separate `runs` database, which saves the results of each of your `hypersearch.py` runs. This data is used by our BO or Boost algo to search for better hyper combos. You can have `runs` table in your `history` database if you want, one-and-the-same. I have them separate because I want the `history` DB on localhost for performance reason (it's a major perf difference, you'll see), and `runs` as a public hosted DB, which allows me to collect runs from separate AWS p3.8xlarge running instances.\n\nThen, when you're ready for live mode, you'll want a `live` database which is real-time, constantly collecting exchange ticker data. `--live` will handle keeping up with that database. Again, these can all 3 be the same database if you want, I'm just doing it my way for performance.\n\n### LSTM v CNN\nYou'll notice the `--net-type <lstm|conv2d>` flag in `hypersearch.py` and `run.py`. This will select between an LSTM Recurrent Neural Networks (RNNs) or Convolutional Neural Networks (CNN). I have them broken out of the hypersearch since they're so different, they kinda deserve their own `runs` DB each - but if someone can consolidate them into the hypersearch framework, please do. You may be thinking, \"BTC prices is time-series, time-series is LSTM... why CNN?\" It strangely turns out that LSTM doesn't do so hot here. In my own experience, in colleagues' experience, and in 2-3 papers I've read ([here's one](https://arxiv.org/pdf/1706.10059.pdf)) - we're all coming to the same conclusion. We're not sure why... the running theory is vanishing/exploding gradient. LSTMs work well in NLP which has some maximum 50-word sentences or so. LSTMs mitigated vanilla RNN's vanishing/exploding gradient for such sentences, true - but BTC history is infinite (on-going). Maybe LSTM can only go so far with time-series. Another possibility is that Deep Reinforcement Learning is most commonly researched, published, and open-sourced using CNNs. This because RL is super video-game centric, self-driving cars, all the vision stuff. So maybe the math behind these models lends better to CNNs? Who knows. The point is - experiment with both. Report back on Github your own findings.\n\nSo how does CNN even make sense for time-series? Well we construct an \"image\" of a time-slice, where the x-axis is time (obviously), the y-axis (height) is nothing... it's [1]. The z-axis (channels) is features (OHLCV, VWAP, bid/ask, etc). This is kinda like our agent literally looking at an image of price actions, like we do when day-trading, but a bit more robot-friendly / less human-friendly.\n\n[Update March 04 2018]: I'm having better success recently w/ LSTMs and have made that the default. A change in TensorForce perhaps?\n\n### Reinforcement Models\n\nTensorForce has all sorts of models you can play with. This project currently only supports Proximate Policy Optimization (PPO), but I encourage y'all to add in other models (esp VPG, TRPO, DDPG, ACKTR, etc) and submit PRs. ACKTR is the current state-of-the-art Policy Gradient model, but not yet available in TensorForce. PPO is the second-most-state-of-the-art, so we're using that. TRPO is 3rd, VPG is old. DDPG I haven't put much thought into.\n\nThose are the Policy Gradient models. Then there's the Q-Learning approaches (DQNs, etc). We're not using those because they only support discrete actions, not continuous actions. Our agent has one discrete action (buy|sell|hold), and one continuous action (how much?). Without that \"how much\" continuous flexibility, building an algo-trader would be... well, not so cool. You could do something like (discrete action = (buy-$200, sell-$200, hold)), but I dunno man... continuous is slicker.\n\n### Hypersearch\n\nYou're likely familiar with _grid search_ and _random search_ when searching for optimial hyperparameters for machine learning models. Grid search searches literally every possible combo - exhaustive, but takes infinity years (especially w/ the number of hypers we work with in this project). Random search throws a dart at random hyper combos over and over, and you just kill it eventually and take the best. Super naive - it works ok for other ML setups, but in RL hypers are the make-or-break; more than model selection. Seriously, I've found L1 / L2 / Dropout selection more consequential than PPO vs DQN, LSTM vs CNN, etc.\n\nThat's why we're using Bayesian Optimization (BO). Or sometimes you'll hear Gaussian Processes (GP), the thing you're optimizing with BO. See `gp.py`. BO starts off like random search, since it doesn't have anything to work with; and over time it hones in on the best hyper combo using Bayesian inference. Super meta - use ML to find the best hypers for your ML - but makes sense. Wait, why not use RL to find the best hypers? We could (and I tried), but deep RL takes 10s of thousands of runs before it starts converging; and each run takes some 8hrs. BO converges much quicker. I've also implemented my own flavor of hypersearch via Gradient Boosting (if you use `--boost` during training); more for my own experimentation.\n\nWe're using `gp.py`, which comes from [thuijskens/bayesian-optimization](https://github.com/thuijskens/bayesian-optimization). It uses scikit-learn's in-built GP functions. I also considered dedicated BO modules, like GPyOpt. I found `gp.py` easier to work with, but haven't compared it's relative performance, nor its optimal hypers (yes, BO has its own hypers... it's turtles all the way down. But luckily I hear you can pretty safely use BO's defaults). If anyone wants to explore any of that territory, please indeed!\n\n### License: AGPLv3.0\n\nGPL bit so we share our findings. Community effort, right? Boats and tides. Affero bit so we can all run our own trading instances w/ personal configs / mods. Heck, any of us could run this as a service / hedge fund. I'm pretty keen on this license, having used it in a prior [internet company](https://habitica.com) I'd founded; but if someone feels strongly about a different license, please open an issue & LMK - open to suggestions. See LICENSE.\n\n### Disclaimer\n\nBy using this code you accept all responsibility for money lost because of this code.\n\nFYI, I haven't made a dime. Doubtful the project as-is will fly. It could benefit from add-ons, like some NLP fundamentals functionality. But it's a start!\n"
 },
 {
  "repo": "bitpay/bitcore-lib",
  "language": "JavaScript",
  "readme_contents": "Bitcore Library\n=======\nTHIS REPO HAVE BEEN MOVED TO BITCORE's MONO REPO. Check: \n\nhttps://github.com/bitpay/bitcore/tree/v8.0.0/packages/bitcore-lib\n"
 },
 {
  "repo": "ofek/bit",
  "language": "Python",
  "readme_contents": "Bit: Bitcoin made easy.\n=======================\n\n.. image:: https://img.shields.io/pypi/v/bit.svg?style=flat-square\n    :target: https://pypi.org/project/bit\n\n.. image:: https://img.shields.io/travis/ofek/bit.svg?branch=master&style=flat-square\n    :target: https://travis-ci.org/ofek/bit\n\n.. image:: https://img.shields.io/codecov/c/github/ofek/bit.svg?style=flat-square\n    :target: https://codecov.io/gh/ofek/bit\n\n.. image:: https://img.shields.io/pypi/pyversions/bit.svg?style=flat-square\n    :target: https://pypi.org/project/bit\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n    :target: https://en.wikipedia.org/wiki/MIT_License\n\n-----\n\nBit is Python's `fastest <https://ofek.github.io/bit/guide/intro.html#why-bit>`_\nBitcoin library and was designed from the beginning to feel intuitive, be\neffortless to use, and have readable source code. It is heavily inspired by\n`Requests <https://github.com/requests/requests>`_ and\n`Keras <https://github.com/keras-team/keras>`_.\n\n**Bit is so easy to use, in fact, you can do this:**\n\n.. code-block:: python\n\n    >>> from bit import Key\n    >>>\n    >>> my_key = Key(...)\n    >>> my_key.get_balance('usd')\n    '12.51'\n    >>>\n    >>> # Let's donate!\n    >>> outputs = [\n    >>>     # Wikileaks\n    >>>     ('1HB5XMLmzFVj8ALj6mfBsbifRoD4miY36v', 0.0035, 'btc'),\n    >>>     # Internet Archive\n    >>>     ('1Archive1n2C579dMsAu3iC6tWzuQJz8dN', 190, 'jpy'),\n    >>>     # The Pirate Bay\n    >>>     ('129TQVAroeehD9fZpzK51NdZGQT4TqifbG', 3, 'eur'),\n    >>>     # xkcd\n    >>>     ('14Tr4HaKkKuC1Lmpr2YMAuYVZRWqAdRTcr', 2.5, 'cad')\n    >>> ]\n    >>>\n    >>> my_key.send(outputs)\n    '9f59f5c6757ec46fdc7440acbeb3920e614c8d1d247ac174eb6781b832710c1c'\n\nHere is the transaction `<https://blockchain.info/tx/9f59f5c6757ec46fdc7440acbeb3920e614c8d1d247ac174eb6781b832710c1c>`_.\n\nFeatures\n--------\n\n- Python's fastest available implementation (100x faster than closest library)\n- Seamless integration with existing server setups\n- Supports keys in cold storage\n- Fully supports 25 different currencies\n- First class support for storing data in the blockchain\n- Deterministic signatures via RFC 6979\n- Access to the blockchain (and testnet chain) through multiple APIs for redundancy\n- Exchange rate API, with optional caching\n- Optimal transaction fee API, with optional caching\n- Compressed public keys by default\n- Multiple representations of private keys; WIF, PEM, DER, etc.\n- Legacy P2PKH and Segwit nested-P2WPKH transactions\n- Legacy P2SH and Segwit nested-P2WSH transactions\n\nIf you are intrigued, continue reading. If not, continue all the same!\n\nInstallation\n------------\n\nBit is distributed on `PyPI`_ as a universal wheel and is available on Linux/macOS\nand Windows and supports Python 3.5+ and PyPy3.5-v5.7.1+. ``pip`` >= 8.1.2 is required.\n\n.. code-block:: bash\n\n    $ pip install bit\n\nDocumentation\n-------------\n\nDocs are `hosted by Github Pages`_ and are automatically built and published\nby Travis after every successful commit to Bit's ``master`` branch.\n\nCredits\n-------\n\n- Logo courtesy of `<https://textcraft.net>`_\n- `Gregory Maxwell`_ (Bitcoin core dev) for teaching me a bit of `ECC`_ math\n- `arubi`_ in #bitcoin for helping me understand transaction gotchas\n- `fuzeman`_ for bestowing me the name ``bit`` on the `Python Package Index`_\n\n.. _PyPI: https://pypi.org/project/bit\n.. _hosted by Github Pages: https://ofek.github.io/bit\n.. _Gregory Maxwell: https://github.com/gmaxwell\n.. _ECC: https://en.wikipedia.org/wiki/Elliptic_curve_cryptography\n.. _arubi: https://github.com/fivepiece\n.. _fuzeman: https://github.com/fuzeman\n.. _Python Package Index: https://pypi.org\n"
 },
 {
  "repo": "ruimarinho/bitcoin-core",
  "language": "JavaScript",
  "readme_contents": "# bitcoin-core\nA modern Bitcoin Core REST and RPC client to execute administrative tasks, [multiwallet](https://bitcoincore.org/en/2017/09/01/release-0.15.0/#multiwallet) operations and queries about network and the blockchain.\n\n## Status\n[![npm version][npm-image]][npm-url] [![build status][travis-image]][travis-url]\n\n## Installation\n\nInstall the package via `yarn`:\n\n```sh\nyarn add bitcoin-core\n```\n\nor via `npm`:\n\nInstall the package via `npm`:\n\n```sh\nnpm install bitcoin-core --save\n```\n\n## Usage\n### Client(...args)\n#### Arguments\n1. `[agentOptions]` _(Object)_: Optional `agent` [options](https://github.com/request/request#using-optionsagentoptions) to configure SSL/TLS.\n2. `[headers=false]` _(boolean)_: Whether to return the response headers.\n3. `[host=localhost]` _(string)_: The host to connect to.\n4. `[logger=debugnyan('bitcoin-core')]` _(Function)_: Custom logger (by default, `debugnyan`).\n5. `[network=mainnet]` _(string)_: The network\n6. `[password]` _(string)_: The RPC server user password.\n7. `[port=[network]]` _(string)_: The RPC server port.\n8. `[ssl]` _(boolean|Object)_: Whether to use SSL/TLS with strict checking (_boolean_) or an expanded config (_Object_).\n9. `[ssl.enabled]` _(boolean)_: Whether to use SSL/TLS.\n10. `[ssl.strict]` _(boolean)_: Whether to do strict SSL/TLS checking (certificate must match host).\n11. `[timeout=30000]` _(number)_: How long until the request times out (ms).\n12. `[username]` _(number)_: The RPC server user name.\n13. `[version]` _(string)_: Which version to check methods for ([read more](#versionchecking)).\n14. `[wallet]` _(string)_: Which wallet to manage ([read more](#multiwallet)).\n\n### Examples\n#### Using network mode\nThe `network` will automatically determine the port to connect to, just like the `bitcoind` and `bitcoin-cli` commands.\n\n```js\nconst Client = require('bitcoin-core');\nconst client = new Client({ network: 'regtest' });\n```\n\n##### Setting a custom port\n\n```js\nconst client = new Client({ port: 28332 });\n```\n\n#### Connecting to an SSL/TLS server with strict checking enabled\nBy default, when `ssl` is enabled, strict checking is implicitly enabled.\n\n```js\nconst fs = require('fs');\nconst client = new Client({\n  agentOptions: {\n    ca: fs.readFileSync('/etc/ssl/bitcoind/cert.pem')\n  },\n  ssl: true\n});\n```\n\n#### Connecting to an SSL/TLS server without strict checking enabled\n\n```js\nconst client = new Client({\n  ssl: {\n    enabled: true,\n    strict: false\n  }\n});\n```\n\n#### Using promises to process the response\n\n```js\nclient.getInfo().then((help) => console.log(help));\n```\n\n#### Using callbacks to process the response\n\nCallback support was removed. Since every method returns a `Promise`, [callbackify()](https://nodejs.org/api/util.html#util_util_callbackify_original) (`>node@v8.2.0`) can be used, or for older `node` versions you can use the npm package [callbackify](https://www.npmjs.com/package/callbackify).\n\n```js\nutil.callbackify(() => client.getInfo())((error, help) => console.log(help));\n```\n\n#### Returning headers in the response\nFor compatibility with other Bitcoin Core clients.\n\n```js\nconst client = new Client({ headers: true });\n\n// Promise style with headers enabled:\nclient.getInfo().then(([body, headers]) => console.log(body, headers));\n\n// Await style based on promises with headers enabled:\nconst [body, headers] = await client.getInfo();\n```\n\n## Named parameters\n\nSince version v0.14.0, it is possible to send commands via the JSON-RPC interface using named parameters instead of positional ones. This comes with the advantage of making the order of arguments irrelevant. It also helps improving the readability of certain function calls when leaving out arguments for their default value.\n\nYou **must** provide a version in the client arguments to enable named parameters.\n\n```js\nconst client = new Client({ version: '0.15.1' });\n```\nFor instance, take the `getBalance()` call written using positional arguments:\n```js\nconst balance = await new Client().getBalance('*', 0);\n```\n\nIt is functionally equivalent to using the named arguments `account` and `minconf`, leaving out `include_watchonly` (defaults to `false`):\n\n```js\nconst balance = await new Client({ version: '0.15.1' }).getBalance({\n  account: '*',\n  minconf: 0\n});\n```\n\nThis feature is available to all JSON-RPC methods that accept arguments.\n\n### Floating point number precision in JavaScript\n\nDue to [JavaScript's limited floating point precision](http://floating-point-gui.de/), all big numbers (numbers with more than 15 significant digits) are returned as strings to prevent precision loss. This includes both the RPC and REST APIs.\n\n## Multiwallet\n\nSince Bitcoin Core v0.15.0, it's possible to manage multiple wallets using a single daemon. This enables use-cases such as managing a personal and a business wallet simultaneously in order to simplify accounting and accidental misuse of funds.\n\nHistorically, the _accounts_ feature was supposed to offer similar functionality, but it has now been replaced by this more powerful feature.\n\nTo enable Multi Wallet support, start by specifying the number of added wallets you would like to have available and loaded on the server using the `-wallet` argument multiple times. For convenience, the bitcoin-core docker image will be used, but it's not a requirement:\n\n```sh\ndocker run --rm -it -p 18332:18332 ruimarinho/bitcoin-core:0.15-alpine \\\n  -printtoconsole \\\n  -server \\\n  -rpcauth='foo:e1fcea9fb59df8b0388f251984fe85$26431097d48c5b6047df8dee64f387f63835c01a2a463728ad75087d0133b8e6' \\\n  -regtest \\\n  -wallet=wallet1.dat \\\n  -wallet=wallet2.dat \\\n  -rpcallowip=172.17.0.0/16\n```\n\nNotice the `rpcauth` hash which has been previously generated for the password `j1DuzF7QRUp-iSXjgewO9T_WT1Qgrtz_XWOHCMn_O-Y=`. Do **not** copy and paste this hash **ever** beyond this exercise.\n\nInstantiate a client for each wallet and execute commands targeted at each wallet:\n\n```js\nconst Client = require('bitcoin-core');\n\nconst wallet1 = new Client({\n  network: 'regtest',\n  wallet: 'wallet1.dat',\n  username: 'foo',\n  password: 'j1DuzF7QRUp-iSXjgewO9T_WT1Qgrtz_XWOHCMn_O-Y='\n});\n\nconst wallet2 = new Client({\n  network: 'regtest',\n  wallet: 'wallet2.dat',\n  username: 'foo',\n  password: 'j1DuzF7QRUp-iSXjgewO9T_WT1Qgrtz_XWOHCMn_O-Y='\n});\n\n(async function() {\n  await wallet2.generate(100);\n\n  console.log(await wallet1.getBalance());\n  // => 0\n  console.log(await wallet2.getBalance());\n  // => 50\n}());\n```\n\n\n### Version Checking\nBy default, all methods are exposed on the client independently of the version it is connecting to. This is the most flexible option as defining methods for unavailable RPC calls does not cause any harm and the library is capable of handling a `Method not found` response error correctly.\n\n```js\nconst client = new Client();\n\nclient.command('foobar');\n// => RpcError: -32601 Method not found\n```\n\nHowever, if you prefer to be on the safe side, you can enable strict version checking. This will validate all method calls before executing the actual RPC request:\n\n```js\nconst client = new Client({ version: '0.12.0' });\n\nclient.getHashesPerSec();\n// => Method \"gethashespersec\" is not supported by version \"0.12.0\"\n```\n\nIf you want to enable strict version checking for the bleeding edge version, you may set a very high version number to exclude recently deprecated calls:\n\n```js\nconst client = new Client({ version: `${Number.MAX_SAFE_INTEGER}.0.0` });\n\nclient.getWork();\n// => Throws 'Method \"getwork\" is not supported by version \"9007199254740991.0.0\"'.\n```\n\nTo avoid potential issues with prototype references, all methods are still enumerable on the library client prototype.\n\n### RPC\nStart the `bitcoind` with the RPC server enabled and optionally configure a username and password:\n\n```sh\ndocker run --rm -it ruimarinho/bitcoin-core:0.12-alpine -printtoconsole -rpcuser=foo -rpcpassword=bar -server\n```\n\nThese configuration values may also be set on the `bitcoin.conf` file of your platform installation.\n\nBy default, port `8332` is used to listen for requests in `mainnet` mode, or `18332` in `testnet` and `regtest` modes (the regtest change will be changed to `18443` in [0.16](https://github.com/bitcoin/bitcoin/pull/10825)). Use the `network` property to initialize the client on the desired mode and automatically set the respective default port. You can optionally set a custom port of your choice too.\n\nThe RPC services binds to the localhost loopback network interface, so use `rpcbind` to change where to bind to and `rpcallowip` to whitelist source IP access.\n\n#### Methods\nAll RPC [methods](src/methods.js) are exposed on the client interface as a camelcase'd version of those available on `bitcoind` (see examples below).\n\nFor a more complete reference about which methods are available, check the [RPC documentation](https://bitcoin.org/en/developer-reference#remote-procedure-calls-rpcs) on the [Bitcoin Core Developer Reference website](https://bitcoin.org/en/developer-reference).\n\n##### Examples\n\n```js\nclient.createRawTransaction([{ txid: '1eb590cd06127f78bf38ab4140c4cdce56ad9eb8886999eb898ddf4d3b28a91d', vout: 0 }], { 'mgnucj8nYqdrPFh2JfZSB1NmUThUGnmsqe': 0.13 });\nclient.sendMany('test1', { mjSk1Ny9spzU2fouzYgLqGUD8U41iR35QN: 0.1, mgnucj8nYqdrPFh2JfZSB1NmUThUGnmsqe: 0.2 }, 6, 'Example Transaction');\nclient.sendToAddress('mmXgiR6KAhZCyQ8ndr2BCfEq1wNG2UnyG6', 0.1,  'sendtoaddress example', 'Nemo From Example.com');\n```\n\n#### Batch requests\nBatch requests are support by passing an array to the `command` method with a `method` and optionally, `parameters`. The return value will be an array with all the responses.\n\n```js\nconst batch = [\n  { method: 'getnewaddress', parameters: [] },\n  { method: 'getnewaddress', parameters: [] }\n]\n\nnew Client().command(batch).then((responses) => console.log(responses)));\n\n// Or, using ES2015 destructuring.\nnew Client().command(batch).then(([firstAddress, secondAddress]) => console.log(firstAddress, secondAddress)));\n```\n\nNote that batched requests will only throw an error if the batch request itself cannot be processed. However, each individual response may contain an error akin to an individual request.\n\n```js\nconst batch = [\n  { method: 'foobar', parameters: [] },\n  { method: 'getnewaddress', parameters: [] }\n]\n\nnew Client().command(batch).then(([address, error]) => console.log(address, error)));\n// => `mkteeBFmGkraJaWN5WzqHCjmbQWVrPo5X3, { [RpcError: Method not found] message: 'Method not found', name: 'RpcError', code: -32601 }`.\n```\n\n### REST\nSupport for the REST interface is still **experimental** and the API is still subject to change. These endpoints are also **unauthenticated** so [there are certain risks which you should be aware](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md#risks), specifically of leaking sensitive data of the node if not correctly protected.\n\nError handling is still fragile so avoid passing user input.\n\nStart the `bitcoind` with the REST server enabled:\n\n```sh\ndocker run --rm -it ruimarinho/bitcoin-core:0.12-alpine -printtoconsole -server -rest\n```\n\nThese configuration values may also be set on the `bitcoin.conf` file of your platform installation. Use `txindex=1` if you'd like to enable full transaction query support (note: this will take a considerable amount of time on the first run).\n\n### Methods\n\nUnlike RPC methods which are automatically exposed on the client, REST ones are handled individually as each method has its own specificity. The following methods are supported:\n\n- [getBlockByHash](#getblockbyhashhash-options)\n- [getBlockHeadersByHash](#getblockheadersbyhashhash-count-options)\n- [getBlockchainInformation](#getblockchaininformation)\n- [getMemoryPoolContent](#getmemorypoolcontent)\n- [getMemoryPoolInformation](#getmemorypoolinformation)\n- [getTransactionByHash](#gettransactionbyhashhash-options)\n- [getUnspentTransactionOutputs](#getunspenttransactionoutputsoutpoints-options)\n\n#### getBlockByHash(hash, [options])\nGiven a block hash, returns a block, in binary, hex-encoded binary or JSON formats.\n\n##### Arguments\n1. `hash` _(string)_: The block hash.\n2. `[options]` _(Object)_: The options object.\n3. `[options.extension=json]` _(string)_: Return in binary (`bin`), hex-encoded binary (`hex`) or JSON (`json`) format.\n\n##### Example\n\n```js\nclient.getBlockByHash('0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206', { extension: 'json' });\n```\n\n#### getBlockHeadersByHash(hash, count, [options])\nGiven a block hash, returns amount of block headers in upward direction.\n\n##### Arguments\n1. `hash` _(string)_: The block hash.\n2. `count` _(number)_: The number of blocks to count in upward direction.\n3. `[options]` _(Object)_: The options object.\n4. `[options.extension=json]` _(string)_: Return in binary (`bin`), hex-encoded binary (`hex`) or JSON (`json`) format.\n\n##### Example\n\n```js\nclient.getBlockHeadersByHash('0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206', 1, { extension: 'json' });\n```\n\n#### getBlockchainInformation()\nReturns various state info regarding block chain processing.\n\n##### Example\n\n```js\nclient.getBlockchainInformation();\n```\n\n#### getMemoryPoolContent()\nReturns transactions in the transaction memory pool.\n\n##### Example\n\n```js\nclient.getMemoryPoolContent();\n```\n\n#### getMemoryPoolInformation()\nReturns various information about the transaction memory pool. Only supports JSON as output format.\n- size: the number of transactions in the transaction memory pool.\n- bytes: size of the transaction memory pool in bytes.\n- usage: total transaction memory pool memory usage.\n\n##### Example\n\n```js\nclient.getMemoryPoolInformation();\n```\n\n#### getTransactionByHash(hash, [options])\nGiven a transaction hash, returns a transaction in binary, hex-encoded binary, or JSON formats.\n\n#### Arguments\n1. `hash` _(string)_: The transaction hash.\n2. `[options]` _(Object)_: The options object.\n3. `[options.summary=false]` _(boolean)_: Whether to return just the transaction hash, thus saving memory.\n4. `[options.extension=json]` _(string)_: Return in binary (`bin`), hex-encoded binary (`hex`) or JSON (`json`) format.\n\n##### Example\n\n```js\nclient.getTransactionByHash('b4dd08f32be15d96b7166fd77afd18aece7480f72af6c9c7f9c5cbeb01e686fe', { extension: 'json', summary: false });\n```\n\n#### getUnspentTransactionOutputs(outpoints, [options])\nQuery unspent transaction outputs (UTXO) for a given set of outpoints. See [BIP64](https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki) for input and output serialisation.\n\n#### Arguments\n1. `outpoints` _(array\\<Object\\>|Object)_: The outpoint to query in the format `{ id: '<txid>', index: '<index>' }`.\n2. `[options]` _(Object)_: The options object.\n3. `[options.extension=json]` _(string)_: Return in binary (`bin`), hex-encoded binary (`hex`) or JSON (`json`) format.\n\n##### Example\n\n```js\nclient.getUnspentTransactionOutputs([{\n  id: '0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206',\n  index: 0\n}, {\n  id: '0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206',\n  index: 1\n}], { extension: 'json' })\n```\n\n### SSL\nThis client supports SSL out of the box. Simply pass the SSL public certificate to the client and optionally disable strict SSL checking which will bypass SSL validation (the connection is still encrypted but the server it is connecting to may not be trusted). This is, of course, discouraged unless for testing purposes when using something like self-signed certificates.\n\n#### Generating a self-signed certificates for testing purposes\nPlease note that the following procedure should only be used for testing purposes.\n\nGenerate an self-signed certificate together with an unprotected private key:\n\n```sh\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 3650 -nodes\n```\n\n#### Connecting via SSL\nOn Bitcoin Core <0.12, you can start the `bitcoind` RPC server directly with SSL:\n\n```sh\ndocker run --rm -it -v $(PWD)/ssl:/etc/ssl ruimarinho/bitcoin-core:0.11-alpine -printtoconsole -rpcuser=foo -rpcpassword=bar -rpcssl -rpcsslcertificatechainfile=/etc/ssl/bitcoind/cert.pem -rpcsslprivatekeyfile=/etc/ssl/bitcoind/key.pem -server\n```\n\nOn Bitcoin Core >0.12, use must use `stunnel` (`brew install stunnel` or `sudo apt-get install stunnel4`) or an HTTPS reverse proxy to configure SSL since the built-in support for SSL has been removed. The trade off with `stunnel` is performance and simplicity versus features, as it lacks more powerful capacities such as Basic Authentication and caching which are standard in reverse proxies.\n\nYou can use `stunnel` by configuring `stunnel.conf` with the following service requirements:\n\n```\n[bitcoin]\naccept = 28332\nconnect = 18332\ncert = /etc/ssl/bitcoind/cert.pem\nkey = /etc/ssl/bitcoind/key.pem\n```\n\nThe `key` option may be omitted if you concatenating your private and public certificates into a single `stunnel.pem` file.\n\nOn some versions of `stunnel` it is also possible to start a service using command line arguments. The equivalent would be:\n\n```sh\nstunnel -d 28332 -r 127.0.0.1:18332 -p stunnel.pem -P ''\n```\n\nThen pass the public certificate to the client:\n\n```js\nconst Client = require('bitcoin-core');\nconst fs = require('fs');\nconst client = new Client({\n  agentOptions: {\n    ca: fs.readFileSync('/etc/ssl/bitcoind/cert.pem')\n  },\n  port: 28332,\n  ssl: true\n});\n```\n\n## Logging\n\nBy default, all requests made with `bitcoin-core` are logged using [uphold/debugnyan](https://github.com/uphold/debugnyan) with `bitcoin-core` as the logging namespace.\n\nPlease note that all sensitive data is obfuscated before calling the logger.\n\n#### Example\n\nExample output defining the environment variable `DEBUG=bitcoin-core`:\n\n```javascript\nconst client = new Client();\n\nclient.getTransactionByHash('b4dd08f32be15d96b7166fd77afd18aece7480f72af6c9c7f9c5cbeb01e686fe');\n\n// {\n//   \"name\": \"bitcoin-core\",\n//   \"hostname\": \"localhost\",\n//   \"pid\": 57908,\n//   \"level\": 20,\n//   \"request\": {\n//     \"headers\": {\n//       \"host\": \"localhost:8332\",\n//       \"accept\": \"application/json\"\n//     },\n//     \"id\": \"82cea4e5-2c85-4284-b9ec-e5876c84e67c\",\n//     \"method\": \"GET\",\n//     \"type\": \"request\",\n//     \"uri\": \"http://localhost:8332/rest/tx/b4dd08f32be15d96b7166fd77afd18aece7480f72af6c9c7f9c5cbeb01e686fe.json\"\n//   },\n//   \"msg\": \"Making request 82cea4e5-2c85-4284-b9ec-e5876c84e67c to GET http://localhost:8332/rest/tx/b4dd08f32be15d96b7166fd77afd18aece7480f72af6c9c7f9c5cbeb01e686fe.json\",\n//   \"time\": \"2017-02-07T14:40:35.020Z\",\n//   \"v\": 0\n// }\n```\n\n### Custom logger\n\nA custom logger can be passed via the `logger` option and it should implement [bunyan's log levels](https://github.com/trentm/node-bunyan#levels).\n\n## Tests\nCurrently the test suite is tailored for Docker (including `docker-compose`) due to the multitude of different `bitcoind` configurations that are required in order to get the test suite passing.\n\nTo test using a local installation of `node.js` but with dependencies (e.g. `bitcoind`) running inside Docker:\n\n```sh\nnpm run dependencies\nnpm test\n```\n\nTo test using Docker exclusively (similarly to what is done in Travis CI):\n\n```sh\nnpm run testdocker\n```\n\n## Release\n\n```sh\nnpm version [<newversion> | major | minor | patch] -m \"Release %s\"\n```\n\n## License\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/bitcoin-core.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/bitcoin-core\n[travis-image]: https://img.shields.io/travis/ruimarinho/bitcoin-core.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ruimarinho/bitcoin-core\n"
 },
 {
  "repo": "jashmenn/bitcoin-reading-list",
  "language": null,
  "readme_contents": "## Programming Bitcoin Reading List and Projects\n\n* The goal of this document is to provide a reading list for learning to program Bitcoin transactions\n* The theme of this document is practical and pragmatic instruction with the goal of writing code \n\nThe document is split into two major sections: [Content](#content) and [Code](#code)\n\n* The Content section contains a reading list which emphasizes programming Bitcoin transactions\n* The Code section contains a list of open-source bitcoin projects ranging from modern popular tools to early historic implementations\n* WIP: please send suggestions to [@eigenjoy](https://twitter.com/eigenjoy) or [open a GitHub issue](https://github.com/jashmenn/bitcoin-reading-list/issues)\n\n### <a name=\"content\"></a>Content\n\n#### Posts\n* [Programming Bitcoin Transaction Scripts](https://docs.google.com/document/d/1D_gi_7Sf9sOyAHG25cMpOO4xtLq3iJUtjRwcZXFLv1E/edit) (Kofler)\n* [Developer\u2019s Introduction to Bitcoin](http://bitcoinmagazine.com/9249/developers-introduction-bitcoin/) (Buterin)\n* [How Bitcoin Works Under the Hood](http://www.imponderablethings.com/2013/07/how-bitcoin-works-under-hood.html) (Driscoll)\n* [Bitcoin Developer Guide](http://bitcoindev.us.to/en/developer-guide)\n* [Bitcoin Scripts](http://www.bitcoinsecurity.org/2012/07/22/7/) (Koshy)\n* [Bitcoins the hard way: Using the raw Bitcoin protocol](http://www.righto.com/2014/02/bitcoins-hard-way-using-raw-bitcoin.html) (Shirriff)\n* [Bitcoin mining the hard way: the algorithms, protocols, and bytes](http://www.righto.com/2014/02/bitcoin-mining-hard-way-algorithms.html) (Shirriff)\n* [Proving Your Bitcoin Reserves](https://iwilcox.me.uk/2014/proving-bitcoin-reserves) (Maxwell)\n\n#### Tutorials\n* [The libbitcoin Tutorial](http://libbitcoin.dyne.org/doc/) (Taaki)\n* [How to Parse the Bitcoin Blockchain](http://codesuppository.blogspot.com/2014/01/how-to-parse-bitcoin-blockchain.html) (Ratcliff)\n* [How to extract every single bitcoin transaction from the blockchain and save it to an ASCII comma separated text file](http://codesuppository.blogspot.com/2014/03/how-to-extract-every-single-bitcoin.html) (Ratcliff)\n* [How To Clone Scrypt Based Altcoins for Fun and Profit](http://devtome.com/doku.php?id=scrypt_altcoin_cloning_guide&rev=1391981820) (shakezula)\n* [Signing Offline Transactions](https://gist.github.com/jashmenn/9811205) (Maxwell)\n* [2 of 2 escrow example](https://gist.github.com/jashmenn/9811198) (Maxwell)\n* [2 of 3 multisig example](https://gist.github.com/jashmenn/9811185) (Andresen)\n* [How to decrypt messages in the blockchain from btcmsg](https://gist.github.com/ripper234/1625828) (ripper234)\n\n#### Papers\n* [Original bitcoin paper](https://bitcoin.org/bitcoin.pdf) (Satoshi)\n* [Annotated bitcoin paper](http://news.rapgenius.com/Satoshi-nakamoto-bitcoin-a-peer-to-peer-electronic-cash-system-annotated) (Satoshi / Rap Genius Community)\n* [Proof of Ownership](http://frozenlock.files.wordpress.com/2011/11/master-bitcoin.pdf) (Fortin)\n* [Colored Coins](https://bitcoil.co.il/BitcoinX.pdf) (Rosenfeld)\n\n#### Specifications\n* [BIP70: Payments Protocol](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) (Andresen)\n* [Working with the Payments Protocol](https://code.google.com/p/bitcoinj/wiki/PaymentProtocol) (Andresen)\n* [BIP32: Hierarchical Deterministic (HD) Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) (Wuille)\n* [BIP32 Implementation: Money Tree HD Wallet](https://github.com/BitVault/money-tree) (BitVault)\n* [Deterministic Wallet](https://en.bitcoin.it/wiki/Deterministic_wallet)\n* [Technical background of version 1 Bitcoin addresses](https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses)\n* [Transactions Reference](https://en.bitcoin.it/wiki/Transactions)\n* [Script Reference](https://en.bitcoin.it/wiki/Script)\n* [Raw Transactions API](https://en.bitcoin.it/wiki/Raw_Transactions)\n* [Colored Coins Protocol Specification](https://github.com/Flavien/colored-coins-protocol/blob/master/specification.mediawiki) (Flavien)\n* [The Mastercoin Protocol Specification](https://github.com/mastercoin-MSC/spec) (Gross)\n* [Counterparty: Financial Instruments (Announcement)](https://bitcointalk.org/index.php?topic=395761.0)\n\n#### Discussion\n* [There Is No 'From' Address](https://iwilcox.me.uk/2014/no-from-address) (iwilcox)\n* [Disentangling Crypto-Coin Mining: Timestamping, Proof-of-Publication, and Validation](http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg03307.html) (Todd)\n* [Double-spending unconfirmed transactions is a lot easier than most people realise](  http://www.reddit.com/r/Bitcoin/comments/239bj1/doublespending_unconfirmed_transactions_is_a_lot/) (Todd)\n* [Replace-by-fee scorched-earth without child-pays-for-parent](http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg05211.html) (Todd / Anonymous)\n\n#### Videos\n* [Programming Bitcoin Youtube Channel](https://www.youtube.com/programmingbitcoin) (Murray)\n* [How Bitcoin Works Under the Hood](https://www.youtube.com/watch?v=Lx9zgZCMqXE) (Driscoll)\n* [Coding Multi-Signature Addresses](https://www.youtube.com/watch?v=zIbUSaZBJgU) (D'Angelo)\n\n#### API Docs\n* [Bitcoin Doxygen](https://dev.visucore.com/bitcoin/doxygen/annotated.html)\n* [Original Bitcoin client/API calls list](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list)\n\n#### Sidechains\n* [Tree-chains preliminary summary](http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04388.html) (Todd)\n* [Why do people think that side-chains are going to be secure?](http://www.reddit.com/r/Bitcoin/comments/22vn4m/why_do_people_think_that_sidechains_are_going_to/cgqy5w6) (Maxwell)\n* [Discussion on 2-way pegging: is there a way to do bitcoin-staging?](http://sourceforge.net/p/bitcoin/mailman/bitcoin-development/thread/20130519132359.GA12366%40netbook.cypherspace.org/#msg30868065)\n* [Sidechains, Treechains, the TL;DR](http://blog.greenaddress.it/2014/06/13/sidechains-treechains-the-tldr/) (Sanders)\n* [Sidechains Explained](http://cryptobizmagazine.com/sidechains-explained/) (Payne)\n* [Side Chains: The How, The Challenges and the Potential](http://bitcoinmagazine.com/12349/side-chains-challenges-potential/) (Buterin)\n* [Sidechain Technical Feasibility Discussion](https://bitcointalk.org/index.php?topic=566704.0;all) (discussion)\n* [Alternative Chains / merged mining](https://en.bitcoin.it/wiki/Alternative_Chains) \n\n#### Beyond Payments\n* [Timelock: time-release encryption incentivised by Bitcoins](http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg05547.html) (Todd / Taaki)\n* [Decentralized digital asset exchange with honest pricing and market depth](http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg03892.html) (Todd / Mizrahi)\n\n\n### <a name=\"code\"></a>Code\n\n#### Core\n* [bitcoin](https://github.com/bitcoin/bitcoin) `C++` (Satoshi) \n* [bitcoinj: Java implementation of a Bitcoin client-only node](https://code.google.com/p/bitcoinj/) `Java` (bitcoinj)\n* [bitcoin-qt: Qt GUI for C++ Bitcoin client](https://github.com/laanwj/bitcoin-qt) `C++` (laanwj)\n* [bitcoinjs-lib: Bitcoin-related functions implemented in pure JavaScript](https://github.com/bitcoinjs/bitcoinjs-lib) `JavaScript` (bitcoinjs)\n* [btcd: alternative full node bitcoin implementation written in Go](https://github.com/conformal/btcd) `Go` (conformal)\n* [bitcore: interface to the bitcoin network](http://bitcore.io/) `Javascript` (BitPay)\n* [cbitcoin low-level bitcoin library in standard C](https://github.com/MatthewLM/cbitcoin/) `C` (Mitchell)\n* [btcwire: Implements the bitcoin wire protocol - core wire protocol package from btcd](https://github.com/conformal/btcwire) `Go` (conformal)\n\n#### Tools\n* [pybitcointools: SImple, common-sense Bitcoin-themed Python ECC library](https://github.com/vbuterin/pybitcointools) `Python` (vbuterin)\n* [bitcointools: Python-based tools for the Bitcoin cryptocurrency system](https://github.com/gavinandresen/bitcointools) `Python` (gavinandresen)\n* [cryptocoin: Python module for working with cryptocurrencies](https://github.com/lyndsysimon/cryptocoin) `Python` (lyndsysimon)\n* [bitcoin-ruby: bitcoin utils and protocol in ruby.](https://github.com/lian/bitcoin-ruby) `Ruby` (lian)\n* [pycoin: Python-based Bitcoin utility library.](https://github.com/richardkiss/pycoin) `Python` (richardkiss)\n* [bitcoin-testnet-box: Create a private, difficulty 1 bitcoin testnet](https://github.com/freewil/bitcoin-testnet-Box) `Shell` (freewil)\n* [mastercoin-tools](https://github.com/grazcoin/mastercoin-tools) `Javascript` (grazcoin)\n\n#### Non-currency Applications\n* [dissent: decentralized, transferable, and open software license system using the Bitcoin protocol](https://github.com/aaron-lebo/dissent) `Python` (Lebo)\n\n#### Beyond Payments\n* [paypub: Trustless payments for information publishing on Bitcoin](https://github.com/unsystem/paypub) `C++` (Taaki / Todd)\n\n#### Miners\n* [poclbm: PyOpenCL bitcoin miner](https://github.com/m0mchil/poclbm) `Python` (m0mchil) \n* [DiabloMiner: OpenCL miner for Bitcoin](https://github.com/Diablo-D3/DiabloMiner) `Java` (Diablo-D3)\n* [cpuminer: CPU miner for bitcoin](https://github.com/jgarzik/cpuminer) `C` (jgarzik)\n* [Open-Source-FPGA-Bitcoin-Miner: Bitcoin Miner for Altera FPGAs](https://github.com/progranism/Open-Source-FPGA-Bitcoin-Miner) `Verilog` (progranism)\n* [jsMiner: A Javascript Bitcoin miner](https://github.com/jwhitehorn/jsMiner) `JavaScript` (jwhitehorn)\n* [pyminer: Python miner for bitcoin](https://github.com/jgarzik/pyminer) `Python` (jgarzik)\n* [Bitcoin-JavaScript-Miner: A Bitcoin miner implemented in JavaScript.](https://github.com/progranism/Bitcoin-JavaScript-Miner) `JavaScript` (progranism)\n* [cellminer: Bitcoin miner for the Cell Broadband Engine Architecture](https://github.com/verement/cellminer) `C` (verement)\n* [oclminer: OpenCL bitcoin miner](https://github.com/tcatm/oclminer) `C` (tcatm)\n* [Phoenix-Miner: Modular, fast, efficient Bitcoin miner](https://github.com/jedi95/Phoenix-Miner) `Python` (jedi95)\n* [tumen_miner: An experimental BitCoin miner, which uses WebCL](https://github.com/temujin9/tumen_miner) `PHP` (temujin9)\n* [Minimal-Bitcoin-Miner: CPU based Bitcoin Miner in C#](https://github.com/lithander/Minimal-Bitcoin-Miner) `C#` (lithander)\n\n#### Wallets\n* [coinpunk: self-hosted Bitcoin wallet service](https://github.com/kyledrake/coinpunk) `Javascript` (kyledrake)\n* [termcoin: A bitcoin wallet for your terminal](https://github.com/chjj/termcoin) `Javascript` (chjj)\n* [pywallet: bitcoin wallet importer/exporter](https://github.com/joric/pywallet) `Python` (joric)\n* [Hive: Bitcoin wallet for OS X](https://github.com/hivewallet/hive-osx) `Objective-C` (jsuder)\n* [bitaddress.org: JavaScript Client-Side Bitcoin Wallet Generator](https://github.com/pointbiz/bitaddress.org) `Javascript` (pointbiz)\n* [Multibit: desktop bitcoin client, powered by bitcoinj](https://github.com/jim618/multibit) `Java` (jim618)\n* [bitcoin-wallet: A new kind of Bitcoin client](https://github.com/elis/bitcoin-wallet) `Python` (elis)\n* [picocoin: A small bitcoin client](https://github.com/jgarzik/picocoin) `C` (jgarzik)\n* [sx: sx - command line Bitcoin to empower the sysadmin](https://github.com/spesmilo/sx) `Python` (spesmilo)\n* [Safebit: Chrome app wallet](https://github.com/elis/Safebit) (elis)\n* [Bitcoin-akka: a client to btcwallet, written in Scala and built on akka](https://github.com/goldmar/bitcoin-akka/) (goldmar)\n\n#### Clients\n* [libbitcoin: libbitcoin asynchronous C++ library for Bitcoin](https://github.com/spesmilo/libbitcoin) `C++` (spesmilo)\n* [electrum: Bitcoin thin client](https://github.com/spesmilo/electrum) `Python` (spesmilo)\n* [BitcoinArmory: Python-Based Bitcoin Software](https://github.com/etotheipi/BitcoinArmory) `Python` (etotheipi)\n* [bitcoin-js-remote: Javascript remote for bitcoind](https://github.com/tcatm/bitcoin-js-remote) `JavaScript` (tcatm)\n* [bitcoinjs-gui: Bitcoin client implementation in HTML5/JavaScript](https://github.com/bitcoinjs/bitcoinjs-gui) `JavaScript` (bitcoinjs)\n* [bitcoin-php: Bitcoin library for PHP](https://github.com/mikegogulski/bitcoin-php) `PHP` (mikegogulski)\n* [bitcoin-python: Friendly bitcoin API binding for Python](https://github.com/toomanysecrets0/bitcoin-python) `Python` (toomanysecrets0)\n* [python-bitcoinrpc: Python interface to bitcoin's JSON-RPC API](https://github.com/jgarzik/python-bitcoinrpc) `Python` (jgarzik)\n* [bitcoinjs: Bitcoin client library in JavaScript using Node.js / MongoDB](https://github.com/bitcoinjs/bitcoinjs-server/) `javascript` (justmoon)\n* [caesure: Python Bitcoin Client](https://github.com/samrushing/caesure) `Python` (samrushing)\n* [chrome-bitcoin: bitcoin client in chrome](https://github.com/kiba/chrome-bitcoin) `JavaScript` (kiba)\n* [node-bitcoin: Communicate with bitcoind via JSON-RPC](https://github.com/freewil/node-bitcoin) `JavaScript` (freewil)\n* [gocoin: Bitcoin client library for Go / golang](https://github.com/piotrnar/gocoin) `Go` (piotrnar)\n* [python-bitcoinlib: Bitcoin library](https://github.com/petertodd/python-bitcoinlib) `Python` (petertodd)\n* [cbitcoin: A low-level bitcoin library written in standard C.](https://github.com/MatthewLM/cbitcoin) `C` (MatthewLM)\n* [GoBit: A Golang implementation of Bitcoin](https://github.com/ThePiachu/GoBit) `Go` (ThePiachu)\n* [Protocoin: A pure Python Bitcoin protocol implementation](https://github.com/perone/protocoin) `Python` (perone)\n* [BitcoinLib: C# Bitcoin, Litecoin and Bitcoin-Clones Library & RPC Wrapper](https://github.com/GeorgeKimionis/BitcoinLib) `C#` (GeorgeKimionis)\n\n#### Mobile\n* [bitcoin-wallet: Bitcoin Wallet app for your Android device](https://github.com/schildbach/bitcoin-wallet) `Java` (schildbach)\n* [bitcoinApp: bitcoin for iOS devices](https://github.com/udibr/bitcoinApp) `Objective-C` (udibr) \n* [bitcoin-android: Send and receive bitcoins from your Android phone](https://github.com/barmstrong/bitcoin-android) `Java` (barmstrong)\n* [bitcoin-mobile-android](https://github.com/bitcoin-labs/bitcoin-mobile-android) `Java` (Schaaf)\n* [BitcoinDroid: A thin Android client for Bitcoin](https://github.com/opposablebrain/BitcoinDroid) `Java` (opposablebrain)\n* [CoreBitcoin: Well-documented Bitcoin implementation in Objective-C](https://github.com/oleganza/CoreBitcoin) `C` (oleganza)\n* [wallet: Mycelium Bitcoin Wallet for Android](https://github.com/mycelium-com/wallet) `Java` (mycelium-com)\n* [BitcoinKit: Cocoa framework for creating Bitcoin wallet apps](https://github.com/hivewallet/BitcoinKit) `C` (hivewallet)\n* [BTCSquared: iOS framework for Bluetooth LE transactions](https://github.com/Gliph/BTCSquared) `Objective C` (Gliph)\n\n#### Exchanges\n* [buttercoin: Opensource Bitcoin Exchange](https://github.com/buttercoin/buttercoin) `Javascript` (buttercoin)\n* [QtBitcoinTrader: Secure Multi Trading Client](https://github.com/JulyIGHOR/QtBitcoinTrader) `C++` (JulyIGHOR)\n* [BitWasp: Open Source Bitcoin Marketplace Software](https://github.com/Bit-Wasp/BitWasp) `PHP` (Bit-Wasp)\n* [bitcoin-central: Bitcoin Central](https://github.com/davout/bitcoin-central) `Ruby` (davout)\n* [ZeroReserve: Friend 2 Friend Payment and Bitcoin exchange](https://github.com/zeroreserve/ZeroReserve) `C++` (zeroreserve)\n* [benjamin: bitcoin trading bot & analytics platform](https://github.com/mathisonian/benjamin) `JavaScript` (mathisonian)\n* [Dark-Exchange: Dark Exchange is a distributed p2p exchange for bitcoin.](https://github.com/macourtney/Dark-Exchange) `Clojure` (macourtney)\n* [btcnearme: Find Bitcoin traders near you... settle in cash](https://github.com/famulus/btcnearme) `Ruby` (famulus)\n* [bitrated: Bitrated.com - Bitcoin arbitration marketplace](https://github.com/shesek/bitrated) `CoffeeScript` (shesek)\n* [intersango: bitcoin exchange](https://github.com/dooglus/intersango) `PHP` (dooglus)\n* [bitwrk: A Bitcoin-friendly, Anonymous Marketplace for Computing Power](https://github.com/indyjo/bitwrk) `Go` (indyjo)\n\n#### Merchant Tools\n* [BitPay: Bitcoin payment application](https://github.com/warpi/BitPay) `Java` (warpi)\n* [bitcoin-wp-e-commerce: Bitcoin payment plugin for WP e-Commerce for WordPress](https://github.com/mikegogulski/bitcoin-wp-e-commerce) `PHP` (mikegogulski)\n* [Magento-Bitcoin-Payment-Module: Magento Payment Gateway Plugin for Bitcoin RPC API](https://github.com/jalder/Magento-Bitcoin-Payment-Module) `PHP` (jalder)\n* [bitcoin-virtuemart: Bitcoin payment plugin for VirtueMart shopping cart for Joomla!](https://github.com/mikegogulski/bitcoin-virtuemart) `PHP` (mikegogulski)\n* [magento-bitcoin: Bitcoin payment module for Magento.](https://github.com/ticean/magento-bitcoin) `PHP` (ticean)\n* [Zen-Cart-Bitcoin-Payment-Module: A payment modules to interact with bitcoind for zen cart.](https://github.com/jalder/Zen-Cart-Bitcoin-Payment-Module) `PHP` (jalder)\n* [MultiBitMerchant: A free and open source Bitcoin ecommerce platform, with several representative clients](https://github.com/gary-rowe/MultiBitMerchant) `Java` (gary-rowe)\n\n#### Bots\n* [Bitcoin arbitrage: opportunity detector](https://github.com/maxme/bitcoin-arbitrage) `Python` (maxme)\n* [gekko: A bitcoin trading bot](https://github.com/askmike/gekko) `Node.js` (askmike)\n* [Redbit: Automated Bitcoin Trading Bot](https://github.com/hyppo/Redbit) `Python` (hyppo)\n* [ArBit: An automated Bitcoin arbitrage trading program.](https://github.com/goteppo/ArBit) `Go` (goteppo)\n* [cryptrade: Node.js Bitcoin bot for MtGox/Bitstamp/BTC-E/CEX.IO](https://github.com/pulsecat/cryptrade) `CoffeeScript` (pulsecat)\n* [btc-trader: Robot for Bitcoin trading on BTC-e](https://github.com/therussianphysicist/btc-trader) `Ruby` (therussianphysicist)\n* [ga-bitbot: Genetic algorithm trade system for bitcoin](https://code.google.com/p/ga-bitbot/) `Python` \n\n#### Block Exploration\n* [bitcoin-abe: Abe: block browser for Bitcoin and similar currencies](https://github.com/jtobey/bitcoin-abe) `Python` (jtobey)\n* [insight: A bitcoin blockchain API for web wallets](https://github.com/bitpay/insight) `JavaScript` (bitpay)\n* [node-bitcoin-explorer: A Block Explorer clone built using node-bitcoin-p2p](https://github.com/bitcoinjs/node-bitcoin-explorer) `JavaScript` (bitcoinjs)\n* [btcplex: BTCplex is an open source Bitcoin block chain browser written in Go, it allows you to search and navigate the block chain.](https://github.com/tsileo/btcplex) `Go` (tsileo)\n* [blockparser: Fast, quick and dirty bitcoin blockchain parser](https://github.com/znort987/blockparser) `C++` (znort987)\n\n#### Pooling\n* [p2pool: Peer-to-peer Bitcoin mining pool](https://github.com/forrestv/p2pool) `Python` (forrestv)\n* [bitcoin-pool: early pooling server](https://github.com/doublec/bitcoin-pool) `C++` (doublec)\n* [What is Pool Hopping?](http://bitcoin.stackexchange.com/questions/5072/what-is-pool-hopping) (Perry)\n* [bitHopper: A python based poolhopper for bitcoin](https://github.com/c00w/bitHopper) `Python` (c00w)\n* [Bitcoin-mining-proxy: Multi-pool, multi-worker proxy for Bitcoin miners ](https://github.com/cdhowie/Bitcoin-mining-proxy) `PHP` (cdhowie)\n* [stratum-mining: Demo implementation of Bitcoin mining pool on Stratum protocol](https://github.com/slush0/stratum-mining) `Python` (slush0)\n\n#### Sites\n* [petulant-lana: A one-time-payment filehosting site, using Bitcoin](https://github.com/bearbin/petulant-lana) `Go` (bearbin)\n* [bitstarter-leaderboard: Bitcoin-powered crowdfunder](https://github.com/startup-class/bitstarter-leaderboard) `Javascript` (Srinivasan)\n* [feedopensource: Iteratively Fund Open Source Projects With Bitcoin](https://github.com/dominictarr/feedopensource) `JavaScript` (dominictarr)\n* [Bitcoin-Poker-Room: Sources for Bitcoin Poker Room.](https://github.com/hippich/Bitcoin-Poker-Room) `Python` (hippich)\n* [BitHub: pay Bitcoin for GitHub commits](https://github.com/WhisperSystems/BitHub) `Java` (WhisperSystems) \n\n#### Related Protocols\n* [bitid: Bitcoin Authentication Open Protocol](https://github.com/bitid/bitid) (Larch)\n"
 },
 {
  "repo": "100trillionUSD/bitcoin",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "breadwallet/breadwallet-core",
  "language": "C",
  "readme_contents": "# breadwallet-core\nSPV bitcoin C library\n\n[getting started](https://github.com/breadwallet/breadwallet-core/wiki)\n"
 },
 {
  "repo": "davout/bitcoin-central",
  "language": "Ruby",
  "readme_contents": "# Bitcoin Central\nBitcoin Central powers bitcoin-central.net, a bitcoin trading platform. It is :\n\n* Open Source,\n* Based on Ruby on Rails,\n* Fully localizable,\n* Multi-currency.\n\n# Installation\nLinux and Windows setup work well, I found the easiest to be an Ubuntu install\n\n## Windows\n* Install Ruby and MySQL\n* Install Ruby Development Kit (https://github.com/oneclick/rubyinstaller/wiki/development-kit)\n* Install rubygems\n\n## Linux (Debian flavors)\n* Install required packages\n\n        $ sudo apt-get install ruby ruby-dev libssl-dev irb rubygems mysql-server libmysql++-dev build-essential git-core\n\n* Add gem binaries to path and re-login\n\n        # I simply add this at the end of /etc/bash.bashrc (feel free to point out a cleaner way)\n        PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/var/lib/gems/1.8/bin\"\n\n## Common\n* Install the `bundler` rubygem, it will easily manage and compile all the other dependencies\n\n        $ sudo gem install bundler\n\n* Fork project if relevant\n* Check out sources with git\n\n        $ git clone https://github.com/davout/bitcoin-central.git\n\n* Get into the sources directory\n\n        $ cd bitcoin-central\n\n* Compile and install the required dependencies\n\n        $ bundle\n\n* Log-in to MySQL console and run the following commands. If you are installing a production machine you'll obviously need to pick different credentials. Update the `config/database.yml` file accordingly.\n\n        > CREATE DATABASE `bitcoin-bank_development`;\n        > GRANT ALL PRIVILEGES ON `bitcoin-bank_development`.* TO 'rails'@'localhost' IDENTIFIED BY 'rails';\n\n* Run a couple of rake tasks (omit the `RAILS_ENV` option if you're setting up a development environment, Rails will grab the database configuration in the `config/database.yml` file under the right section (development, test, or production)\n\n        $ rake db:migrate RAILS_ENV=production\n\n* Edit config/bitcoin.yml to be able to connect your instance to a bitcoin client, the `config/bitcoin.yml` file contents are self-explanatory, just add a production section if you're deploying on a production server.\n\n* You're good to go! Run the rails server\n\n        $ rails s\n\nYour fresh instance should now be running on `http://localhost:3000/` !\n\n## Production deployment\n\nUsually, Rails applications are deployed in production using nginx or Apache, I'll introduce the Apache option.\n\nThe `capistrano` tool is used to automate pretty much every deployment step. Deploying a new version is as easy as typing `cap deploy` in your local command prompt.\n\nTo use the `cap` sweetness a couple of extra steps are required : \n\n* You'll need to fork the project since all your deployment configuration is stored in `config/deploy.rb`, these configs are pulled directly from GitHub when deploying, so go for it, change them to suit your needs.\n* Set the remote machine up by typing `cap deploy:setup`\n* Log in to the remote machine and create the production configuration files in `{APP PATH}/shared/config/*.yml`, they will be used in production (you don't want your production passwords hanging around on GitHub do you ?)\n* Create the remote DB\n* Now you can run locally `cap deploy:migrations`, this will update the remote sources and run the migrations on the remote database\n* Now you just need to install the `passenger` gem on the remote server which will install an apache module\n* Create an apache virtual host and you're good to go.\n\nYou'll just need to issue a `cap deploy` locally for any subsequent deployment.\n\n# Contributions\nAll are welcome, improvements, fixes and translations (the string extraction bounty has been paid).\n\n * The use of the `Numeric#to_f` method is big no-no, every single numeric that passes through the code should be typed as `BigDecimal`,\n * Bugfixes should include a failing test,\n * Pull requests should apply cleanly on top of `master`, rebase if necessary\n\n# Music\nBitcoin-Central was, and is currently being developed with the following musical background :\n\n * [Ali Farka Tour\u00e9 - In The Heart Of The Moon](http://www.amazon.fr/Heart-Farka-Tour%C3%A9-Toumani-Diabat%C3%A9/dp/B0009NDLJA)\n * [Latch\u00e8s](http://www.amazon.fr/Latches/dp/B001CISIGC/ref=sr_1_1?s=music&ie=UTF8&qid=1311581988&sr=1-1)\n * Tons of [Django Reinhardt](http://www.amazon.fr/s/ref=nb_sb_ss_i_0_16?__mk_fr_FR=%C5M%C5Z%D5%D1&url=search-alias%3Dpopular&field-keywords=django+reinhardt&x=0&y=0&sprefix=django+reinhardt)\n * [Bir\u00e9li Lagr\u00e8ne - Blue Eyes](http://www.amazon.fr/Blue-Eyes-Bireli-Lagrene/dp/B000007N92/ref=sr_1_1?s=music&ie=UTF8&qid=1311582073&sr=1-1)\n * Lots of [Gary Potter](http://www.amazon.fr/s/ref=nb_sb_noss?__mk_fr_FR=%C5M%C5Z%D5%D1&url=search-alias%3Dpopular&field-keywords=gary+potter&x=0&y=0)\n * [Tchavolo Schmitt](http://www.amazon.fr/s/ref=nb_sb_ss_i_0_16?__mk_fr_FR=%C5M%C5Z%D5%D1&url=search-alias%3Dpopular&field-keywords=tchavolo+schmitt&x=0&y=0&sprefix=tchavolo+schmitt), [Romane](http://www.amazon.fr/s/ref=nb_sb_ss_i_0_16?__mk_fr_FR=%C5M%C5Z%D5%D1&url=search-alias%3Dpopular&field-keywords=tchavolo+schmitt&x=0&y=0&sprefix=tchavolo+schmitt#/ref=nb_sb_noss?__mk_fr_FR=%C3%85M%C3%85Z%C3%95%C3%91&url=search-alias%3Dpopular&field-keywords=romane&rh=n%3A301062%2Ck%3Aromane), [Angelo Debarre](http://www.amazon.fr/s/ref=nb_sb_ss_i_0_16?__mk_fr_FR=%C5M%C5Z%D5%D1&url=search-alias%3Dpopular&field-keywords=tchavolo+schmitt&x=0&y=0&sprefix=tchavolo+schmitt#/ref=nb_sb_noss?__mk_fr_FR=%C3%85M%C3%85Z%C3%95%C3%91&url=search-alias%3Dpopular&field-keywords=angelo+debarre&rh=n%3A301062%2Ck%3Aangelo+debarre)\n * ....\n\n# License\nAGPL License. Copyright 2010-2011 David FRANCOIS"
 },
 {
  "repo": "bitpay/bitcore-wallet-service",
  "language": "JavaScript",
  "readme_contents": "\n# bitcore-wallet-service\n\n\nTHIS REPO HAVE BEEN MOVED TO BITCORE's MONO REPO. Check: \nhttps://github.com/bitpay/bitcore/tree/master/packages/bitcore-wallet-service\n"
 },
 {
  "repo": "Blockstream/esplora",
  "language": "JavaScript",
  "readme_contents": "# Esplora Block Explorer\n\n[![build status](https://api.travis-ci.org/Blockstream/esplora.svg)](https://travis-ci.org/Blockstream/esplora)\n[![docker release](https://img.shields.io/docker/pulls/blockstream/esplora.svg)](https://hub.docker.com/r/blockstream/esplora)\n[![MIT license](https://img.shields.io/github/license/blockstream/esplora.svg)](https://github.com/blockstream/esplora/blob/master/LICENSE)\n[![Pull Requests Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![IRC](https://img.shields.io/badge/chat-on%20freenode-brightgreen.svg)](https://webchat.freenode.net/?channels=bitcoin-explorers)\n\nBlock explorer web interface based on the [esplora-electrs](https://github.com/Blockstream/electrs) HTTP API.\n\nWritten as a single-page app in a reactive and functional style using\n[rxjs](https://github.com/ReactiveX/rxjs) and [cycle.js](https://cycle.js.org/).\n\nSee live at [Blockstream.info](https://blockstream.info/).\n\nAPI documentation [is available here](API.md).\n\nJoin the translation efforts on [Transifex](https://transifex.com/blockstream/esplora/).\n\n![Esplora](https://raw.githubusercontent.com/Blockstream/esplora/master/flavors/blockstream/www/img/social-sharing.png)\n\n## Features\n\n- Explore blocks, transactions and addresses\n\n- Support for Segwit and Bech32 addresses\n\n- Shows previous output and spending transaction details\n\n- Quick-search for txid, address, block hash or height by navigating to `/<query>`\n\n- Advanced view with script hex/assembly, witness data, outpoints and more\n\n- Mobile-ready responsive design\n\n- Translated to 17 languages\n\n- Light and dark themes\n\n- Noscript support\n\n- For Liquid and other Elements-based chains: support for CT, peg-in/out transactions and multi-asset\n\n- Mainnet, Testnet and Elements high performance electrum server\n\n## Developing\n\nTo start a development server with live babel/browserify transpilation, run:\n\n```bash\n$ git clone https://github.com/Blockstream/esplora && cd esplora\n$ npm install\n$ export API_URL=http://localhost:3000/ # or https://blockstream.info/api/ if you don't have a local API server\n# (see more config options below)\n$ npm run dev-server\n```\n\nThe server will be available at http://localhost:5000/\n\nTo display debugging information for the Rx streams in the web developer console, set `localStorage.debug = '*'` and refresh.\n\n## Building\n\nTo build the static assets directory for production deployment, set config options (see below)\nand run `$ npm run dist`. The files will be created under `dist/`.\n\nBecause Esplora is a single-page app, the HTTP server needs to be configured to serve the `index.html` file in reply to missing pages.\nSee [`contrib/nginx.conf.in`](contrib/nginx.conf.in) for example nginx configuration (TL;DR: `try_files $uri /index.html`).\n\n## Pre-rendering server (noscript)\n\nTo start a pre-rendering server that generates static HTML replies suitable for noscript users, run:\n\n```bash\n# (clone, cd, \"npm install\" and configure as above)\n\n$ export STATIC_ROOT=http://localhost:5000/ # for loading CSS, images and fonts\n$ npm run prerender-server\n```\n\nThe server will be available at http://localhost:5001/\n\n## Configuration options\n\nAll options are optional.\n\n### GUI options\n\n- `NODE_ENV` - set to `production` to enable js minification, or to `development` to disable (defaults to `production`)\n- `BASE_HREF` - base href for user interface (defaults to `/`, change if not served from the root directory)\n- `STATIC_ROOT` - root for static assets (defaults to `BASE_HREF`, change to load static assets from a different server)\n- `API_URL` - URL for HTTP REST API (defaults to `/api`, change if the API is available elsewhere)\n- `CANONICAL_URL` - absolute base url for user interface (optional, only required for opensearch and canonical link tags)\n- `NATIVE_ASSET_LABEL` - the name of the network native asset (defaults to `BTC`)\n- `SITE_TITLE` - website title for `<title>` (defaults to `Block Explorer`)\n- `SITE_DESC` - meta description (defaults to `Esplora Block Explorer`)\n- `HOME_TITLE` - text for homepage title (defaults to `SITE_TITLE`)\n- `SITE_FOOTER` - text for page footer (defaults to `Powered by esplora`)\n- `HEAD_HTML` - custom html to inject at the end of `<head>`\n- `FOOT_HTML` - custom html to inject at the end of `<body>`\n- `CUSTOM_ASSETS` - space separated list of static assets to add to the build\n- `CUSTOM_CSS` - space separated list of css files to append into `style.css`\n- `NOSCRIPT_REDIR` - redirect noscript users to `{request_path}?nojs` (should be captured server-side and redirected to the prerender server, also see `NOSCRIPT_REDIR_BASE` in dev server options)\n\nNote that `API_URL` should be set to the publicly-reachable URL where the user's browser can issue requests at.\n(that is, *not* via `localhost`, unless you're setting up a dev environment where the browser is running on the same machine as the API server.)\n\nElements-only configuration:\n\n- `IS_ELEMENTS` - set to `1` to indicate this is an Elements-based chain (enables asset issuance and peg features)\n- `NATIVE_ASSET_ID` - the ID of the native asset used to pay fees (defaults to `6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d`, the asset id for BTC)\n- `BLIND_PREFIX` - the base58 address prefix byte used for confidential addresses (defaults to `12`)\n- `PARENT_CHAIN_EXPLORER_TXOUT` - URL format for linking to transaction outputs on the parent chain, with `{txid}` and `{vout}` as placeholders. Example: `https://blockstream.info/tx/{txid}#output:{vout}`\n- `PARENT_CHAIN_EXPLORER_ADDRESS` - URL format for linking to addresses on parent chain, with `{addr}` replaced by the address. Example: `https://blockstream.info/address/{addr}`\n- `ASSET_MAP_URL` - url to load json asset map (in the \"minimal\" format)\n\nMenu configuration (useful for inter-linking multiple instances on different networks):\n\n- `MENU_ITEMS` - json map of menu items, where the key is the label and the value is the url\n- `MENU_ACTIVE` - the active menu item identified by its label\n\n### Development server options\n\nAll GUI options, plus:\n\n- `PORT` - port to bind http development server (defaults to `5000`)\n- `CORS_ALLOW` - value to set for `Access-Control-Allow-Origin` header (optional)\n- `NOSCRIPT_REDIR_BASE` - base url for prerender server, for redirecting `?nojs` requests (should be set alongside `NOSCRIPT_REDIR`)\n\n### Pre-rendering server options\n\nAll GUI options, plus:\n\n- `PORT` - port to bind pre-rendering server (defaults to `5001`)\n\nNote that unlike the regular JavaScript-based app that sends API requests from the client-side,\nthe pre-rendering server sends API requests from the server-side. This means that `API_URL` should\nbe configured to the URL reachable by the server, typically `http://localhost:3000/`.\n\n## How to build the Docker image\n\n```\ndocker build -t esplora .\n```\n\n## How to run the explorer for Bitcoin mainnet\n\n```\ndocker run -p 50001:50001 -p 8080:80 \\\n           --volume $PWD/data_bitcoin_mainnet:/data \\\n           --rm -i -t esplora \\\n           bash -c \"/srv/explorer/run.sh bitcoin-mainnet explorer\"\n```\n\n## How to run the explorer for Liquid mainnet\n\n```\ndocker run -p 50001:50001 -p 8082:80 \\\n           --volume $PWD/data_liquid_mainnet:/data \\\n           --rm -i -t esplora \\\n           bash -c \"/srv/explorer/run.sh liquid-mainnet explorer\"\n```\n\n## How to run the explorer for Bitcoin testnet3\n\n```\ndocker run -p 50001:50001 -p 8084:80 \\\n           --volume $PWD/data_bitcoin_testnet:/data \\\n           --rm -i -t esplora \\\n           bash -c \"/srv/explorer/run.sh bitcoin-testnet explorer\"\n```\n\n## How to run the explorer for Bitcoin signet\n\n```\ndocker run -p 50001:50001 -p 8084:80 \\\n           --volume $PWD/data_bitcoin_signet:/data \\\n           --rm -i -t esplora \\\n           bash -c \"/srv/explorer/run.sh bitcoin-signet explorer\"\n```\n\n## How to run the explorer for Liquid testnet\n\n```\ndocker run -p 50001:50001 -p 8096:80 \\\n           --volume $PWD/data_liquid_testnet:/data \\\n           --rm -i -t esplora \\\n           bash -c \"/srv/explorer/run.sh liquid-testnet explorer\"\n```\n\n## How to run the explorer for Liquid regtest\n\n```\ndocker run -p 50001:50001 -p 8092:80 \\\n           --volume $PWD/data_liquid_regtest:/data \\\n           --rm -i -t esplora \\\n           bash -c \"/srv/explorer/run.sh liquid-regtest explorer\"\n```\n\n## How to run the explorer for Bitcoin regtest\n\n```\ndocker run -p 50001:50001 -p 8094:80 \\\n           --volume $PWD/data_bitcoin_regtest:/data \\\n           --rm -i -t esplora \\\n           bash -c \"/srv/explorer/run.sh bitcoin-regtest explorer\"\n```\n\n## Regtest options\n\nWhen run for Bitcoin regtest or Liquid regtest, the esplora container will\ncreate a default wallet and mine 100 blocks internally. You can disable this behavior\nby setting `NO_REGTEST_MINING=1`.\n\n## Docker config options\n\nSet `-e DEBUG=verbose` to enable more verbose logging.\n\nSet `-e NO_PRECACHE=1` to disable pre-caching of statistics for \"popular addresses\",\nwhich may take a long time and is not necessary for personal use.\n\nSet `-e NO_ADDRESS_SEARCH=1` to disable the [by-prefix address search](https://github.com/Blockstream/esplora/blob/master/API.md#get-address-prefixprefix) index.\n\nSet `-e ENABLE_LIGHTMODE=1` to enable [esplora-electrs's light mode](https://github.com/Blockstream/electrs/#light-mode).\n\nSet `-e ONION_URL=http://xyz.onion` to enable the `Onion-Location` header.\n\n## Build new esplora-base\n\n```\ndocker build -t blockstream/esplora-base:latest -f Dockerfile.deps .\ndocker push blockstream/esplora-base:latest\ndocker inspect --format='{{index .RepoDigests 0}}' blockstream/esplora-base\n```\n\n## Build new tor (or you can pull directly from Docker Hub - `blockstream/tor:latest`)\n\n```\ndocker build --squash -t blockstream/tor:latest -f Dockerfile.tor .\ndocker push blockstream/tor:latest\ndocker inspect --format='{{index .RepoDigests 0}}' blockstream/tor\n```\nRun: `docker -d --name hidden_service blockstream/tor:latest tor -f /home/tor/torrc` (could add a `-v /extra/torrc:/home/tor/torrc`, if you have a custom torrc)\n\nExample torrc:\n```\nDataDirectory /home/tor/tor\nPidFile /var/run/tor/tor.pid\n\nControlSocket /var/run/tor/control GroupWritable RelaxDirModeCheck\nControlSocketsGroupWritable 1\nSocksPort unix:/var/run/tor/socks WorldWritable\nSocksPort 9050\n\nCookieAuthentication 1\nCookieAuthFileGroupReadable 1\nCookieAuthFile /var/run/tor/control.authcookie\n\nLog [handshake]debug [*]notice stderr\n\nHiddenServiceDir /home/tor/tor/hidden_service_v3/\nHiddenServiceVersion 3\nHiddenServicePort 80 127.0.0.1:80\n```\n\n## License\n\nMIT\n"
 },
 {
  "repo": "Diablo-D3/DiabloMiner",
  "language": "Java",
  "readme_contents": "# This program is unmaintained and does not support the current miner protocol. Use cgminer instead. Do not create issues about this program being broken because it will not be fixed by the original developers. If you want to fix it, you're welcome to fork it.\n\n# DiabloMiner - OpenCL miner for BitCoin #\n    Copyright (C) 2010 - 2013 Patrick McFarland <diablod3@gmail.com>\n\n    This program is free software: you can redistribute it and_or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org_licenses/>.\n\n# Donations #\nBitcoins and Devcoins: __1DbeWKCxnVCt3sRaSAmZLoboqr8pVyFzP1__\n\n# Warning #\nDiabloMiner is a command line program. This means you need to open a terminal\n(cmd.exe, Terminal.app/iTerm2, xterm, etc) and run the program with the proper\narguments from there.\n\nYou __require__ hardware that is capable of running OpenCL.\n\n# MacOSX Warning #\nApple's OpenCL drivers often exhibit strange bugs.\n\nIf DiabloMiner is displaying warnings about `CL_INVALID_WORK_GROUP_SIZE`, add\n`-w 64` to your arguments.\n\n# How to download #\n__[Binary download here](http://adterrasperaspera.com/DiabloMiner.zip)__\n\nThis download is always kept up to date with the newest version of the source.\n\n# How to build #\nDiabloMiner requires the SDK for Java 6.0 or higher installed, as well as\nMaven 3.x. Maven will download the rest of the dependencies.\n\nDiabloMiner uses launch4j to build Windows binaries. launch4j requires and\npartially includes a build chain for Win32. launch4j cannot be ran on any\n64-bit only version of OSX (10.6 and up) and is difficult to run on Windows.\n\nDiabloMiner's git repo does not contian binaries, so if you want to build\nDiabloMiner from source, heed the above warning and run `mvn package`.\n\n# How to use #\n# Single pool and solo mining #\n`./DiabloMiner-YourOS.sh -u username -p password -o host -r port`\n\nor\n\n`./DiabloMiner-YourOS.sh -l http://username:password@host:port`\n\nFor solo mining, your host is `localhost` your port is `8332`, and your\nusername and password is what you set in your bitcoind's `bitcoin.conf`.\nSee bitcoin documentation for further information on how to enable the RPC\nAPI.\n\n## Multiple pools ##\n`./DiabloMiner-YourOS.sh -u username1,username2 -p password1,password2\n -o host1,host2 -r port1,port2`\n\nDiabloMiner supports unlimited pools and will switch to the next pool on\nconnection failure and return to the first pool every 60 minutes.\n\n# Optimization #\n## MacOSX on any hardware ##\nIt is recommended you use the default settings, see also the MacOSX warning\nabove.\n\n## Nvidia hardware on any OS ##\nIt is recommended you use the default settings, however if your desktop is\nlagging badly try adding `-f 120`, `-f 180`, or `-f 240`.\n\n## Intel hardware on any OS ##\nDiabloMiner has not been tested on Intel GPUs. Default is most likely correct.\n\n## AMD Radeon VLIW4 ##\nR7xx\n\n* Radeon discrete: 43xx, 45xx, 46xx, 47xx, 48xx\n* Radeon mobile: 43xxM, 45xxM, 46xxM, 48xxM, 5xxV, 51xxM\n* FirePro: V3750, V7750, V8700, V8750, 2450, RG220\n* FirePro mobile: M7740\n* FireStream: 9250, 9270\n\n`-v 2`\n\n## AMD Radeon VLIW5 ##\nCedar, Redwood, Juniper, Cypress, Hemlock\n\n* Radeon discrete: 54xx, 55xx, 56xx, 57xx, 58xx, 59xx, 63xx, 6750, 6770, 73xx\n* Radeon mobile: 54xxM, 56xxM, 57xxM, 58xxM, 63xxM, 65xxM, 68xxM,\n* FirePro: V3800, V4800, V5800, V7800, V8800, V9800, 2270, 2460\n* FirePro mobile: M5800, M7820\n* FireStream: 9350, 9370\n\nOn some cards `-v 2,1` is faster, on others `-v 2`. Try both.\n\n## AMD Radeon VLIW5 Gen2 ##\nCaicos, Turks, Barts, Wrestler, Ontario, Zacate, WinterPark, BeaverCreek\n\n* Radeon discrete: 64xx, 65xx, 66xx, 6790, 68xx, 74xx, 75xx, 76xx\n* Radeon mobile: 64xxM, 66xxM, 67xxM, 69xxM, 74xxM, 75xxM, 76xxM\n* Radeon mobile IGP: 63xxG, 64xxG, 65xxG, 66xxG\n* Fusion APU: 62xx, 63xx, 64xxD, 65xxD, 74xxD, 75xxD, 76xxD\n* FirePro: V3900, V4900\n* FirePro mobile: M5950, M8900, M2000\n\nUse `-v 2`\n\n## AMD Radeon VLIW4\nCayman, Antilles, Devastator\n\n* Radeon discrete: 69xx\n* Radeon mobile: 64xxM, 66xxM, 67xxM\n* Fusion APU: 74xxD\n* FirePro: V5900, V7900\n\nUse `-v 2`\n\n## AMD Radeon GCN\nCape Verde, Pitcairn, Tahiti, New Zealand, Malta, Bonaire\n* Radeon discrete: 77xx, 78xx, 79xx\n* Radeon mobile: 77xxM, 78xxM, 79xxM\n* FirePro: W600, W5000, W7000, W8000, W9000, S7000, S9000, S10000, R5000\n* FirePro mobile: M4000, M6000\n* Sky: 500, 700, 900\n\nUse defaults.\n\n# Command line arugments #\n* __-u, -p, -o, -r__ Username, password, host, port\n* __-l__ Fully fledged URL, ex: http://username:password@host:port/\n* __-x__ Proxy, ex: host:port<:username:password>\n* __-d__ Debug output\n* __-D__ Use specific devices. Default is all.\n* __-f__ FPS, controls how many kernel executions a second happen, default is 30\n* __-w__ Controls OpenCL workgroup size, default is hardware detected maximum\n* __-v__: Change manual SIMD parallel alignment.\n * -v 1: The same as off/single hash, and is the default (`uint`)\n * -v 2 through 16: Tries more than one hash via SIMD (`uint2` through `uint16`)\n * -v 1,1, etc: Non-SIMD interleaving on top of SIMD, faster on a very small\n   minority of hardware (`-v 2,1` is faster than `-v 2` on some Radeon VLIW5)\n\n"
 },
 {
  "repo": "freewil/bitcoin-testnet-box",
  "language": "Dockerfile",
  "readme_contents": "# bitcoin-testnet-box\n[![docker pulls](https://img.shields.io/docker/pulls/freewil/bitcoin-testnet-box.svg?style=flat)](https://hub.docker.com/r/freewil/bitcoin-testnet-box/)\n\nCreate your own private bitcoin testnet\n\nYou must have `bitcoind` and `bitcoin-cli` installed on your system and in the\npath unless running this within a [Docker](https://www.docker.com) container\n(see [below](#using-with-docker)).\n\n## Large Git History\nIf you'd like to clone this git repository locally and disk space or bandwidth\nusage is of concern, it's suggested to do a shallow clone, excluding some\nearlier history of the repo, where some testnet data was included.\n\n> Regular clone: `du -sh .` 44M\n\n> Shallow clone: `du -sh .` 168K\n\n### Regular Clone\n```\ngit clone git@github.com:freewil/bitcoin-testnet-box.git\n```\n\n### Shallow Clone\n```\ngit clone --shallow-since 2014-10-18 git@github.com:freewil/bitcoin-testnet-box.git\n```\n\n## Starting the testnet-box\n\nThis will start up two nodes using the two datadirs `1` and `2`. They\nwill only connect to each other in order to remain an isolated private testnet.\nTwo nodes are provided, as one is used to generate blocks and it's balance\nwill be increased as this occurs (imitating a miner). You may want a second node\nwhere this behavior is not observed.\n\nNode `1` will listen on port `19000`, allowing node `2` to connect to it.\n\nNode `1` will listen on port `19001` and node `2` will listen on port `19011`\nfor the JSON-RPC server.\n\n\n```\n$ make start\n```\n\n## Check the status of the nodes\n\n```\n$ make getinfo\nbitcoin-cli -datadir=1  getinfo\n{\n    \"version\" : 90300,\n    \"protocolversion\" : 70002,\n    \"walletversion\" : 60000,\n    \"balance\" : 0.00000000,\n    \"blocks\" : 0,\n    \"timeoffset\" : 0,\n    \"connections\" : 1,\n    \"proxy\" : \"\",\n    \"difficulty\" : 0.00000000,\n    \"testnet\" : false,\n    \"keypoololdest\" : 1413617762,\n    \"keypoolsize\" : 101,\n    \"paytxfee\" : 0.00000000,\n    \"relayfee\" : 0.00001000,\n    \"errors\" : \"\"\n}\nbitcoin-cli -datadir=2  getinfo\n{\n    \"version\" : 90300,\n    \"protocolversion\" : 70002,\n    \"walletversion\" : 60000,\n    \"balance\" : 0.00000000,\n    \"blocks\" : 0,\n    \"timeoffset\" : 0,\n    \"connections\" : 1,\n    \"proxy\" : \"\",\n    \"difficulty\" : 0.00000000,\n    \"testnet\" : false,\n    \"keypoololdest\" : 1413617762,\n    \"keypoolsize\" : 101,\n    \"paytxfee\" : 0.00000000,\n    \"relayfee\" : 0.00001000,\n    \"errors\" : \"\"\n}\n```\n## Creating wallets\n\n```\nbitcoin-cli -datadir=1 createwallet wallet1\n```\n\n```\nbitcoin-cli -datadir=2 createwallet wallet2\n```\n\n## Generating blocks\n\nNormally on the live, real, bitcoin network, blocks are generated, on average,\nevery 10 minutes. Since this testnet-in-box uses Bitcoin Core's (bitcoind)\nregtest mode, we are able to generate a block on a private network\ninstantly using a simple command.\n\nTo generate a block:\n\n```\n$ make generate\n```\n\nTo generate more than 1 block:\n\n```\n$ make generate BLOCKS=10\n```\n\n## Need to generate at least 100 blocks before there will be a balance in the first wallet\n```\n$ make generate BLOCKS=200\n```\n\n## Verify that there is a balance on the first wallet\n```\n$ make getinfo\n```\n\n## Generate a wallet address for the second wallet\n```\n$ make address2\n```\n\n## Sending bitcoins\nTo send bitcoins that you've generated to the second wallet: (be sure to change the ADDRESS value below to wallet address generated in the prior command)\n\n```\n$ make sendfrom1 ADDRESS=mxwPtt399zVrR62ebkTWL4zbnV1ASdZBQr AMOUNT=10\n```\n\n## Does the balance show up?\nRun the getinfo command again. Does the balance show up? Why not?\n```\n$ make getinfo\n```\n\n## Generate another block\n```\n$ make generate\n```\n\n## Stopping the testnet-box\n\n```\n$ make stop\n```\n\nTo clean up any files created while running the testnet and restore to the\noriginal state:\n\n```\n$ make clean\n```\n\n## Using with docker\nThis testnet-box can be used with [Docker](https://www.docker.com/) to run it in\nan isolated container.\n\n### Building docker image\n\nPull the image\n  * `docker pull freewil/bitcoin-testnet-box`\n\nor build it yourself from this directory\n  * `docker build -t bitcoin-testnet-box .`\n\n### Running docker container\nThe docker image will run two bitcoin nodes in the background and is meant to be\nattached to allow you to type in commands. The image also exposes\nthe two JSON-RPC ports from the nodes if you want to be able to access them\nfrom outside the container.\n      \n   `$ docker run -t -i -p 19001:19001 -p 19011:19011 freewil/bitcoin-testnet-box`\n\nor if you built the docker image yourself:\n\n   `$ docker run -t -i -p 19001:19001 -p 19011:19011 bitcoin-testnet-box`\n\n## Running without docker\nTo run without docker, one should download the supported Bitcoin core version. \nTo find the supported version, search for the `BITCOIN_CORE_VERSION` environment variable\nin the `Dockerfile` file.\n"
 },
 {
  "repo": "Bitlits/Bitcoin-Games",
  "language": "PHP",
  "readme_contents": "<p align=\"center\">\n<img src=\"https://i.postimg.cc/HLmRx2My/logo.png\" width=\"140\" align=\"center\">\n  </p>\n<p align=\"center\">\n  <a href=\"https://bitlits.com\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://itunes.apple.com/us/app/\">\n    <img alt=\"Download on the App Store\" title=\"App Store\" src=\"http://i.imgur.com/0n2zqHD.png\" width=\"140\">\n  </a>\n\n  <a href=\"https://play.google.com/store/apps/details?id=io.gonative.android.xrwyjq\">\n    <img alt=\"Get it on Google Play\" title=\"Google Play\" src=\"http://i.imgur.com/mtGRPuM.png\" width=\"140\">\n  </a>\n</p>\n\n## Translations\n\ud83c\uddec\ud83c\uddf7 [\u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddeb\ud83c\uddf7 [Fran\u00e7ais](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddf0\ud83c\uddf7 [\ud55c\uad6d\uc5b4](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/KO_README.md) | \ud83c\udde8\ud83c\uddf3 [\u666e\u901a\u8a71](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddf9\ud83c\uddfc [\u53f0\u7063\u8a71](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddf2\ud83c\uddfd [Espa\u00f1ol](https://github.com/Jfaler/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddf9\ud83c\uddf7 [T\u00fcrk\u00e7e](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\udde9\ud83c\uddea [Deutsch](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddee\ud83c\uddf9 [Italiano](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddee\ud83c\uddf3 [\u0939\u093f\u0928\u094d\u0926\u0940](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | [Arabic](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddf5\ud83c\uddf9 [Portugu\u00eas](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddf7\ud83c\uddfa [\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddef\ud83c\uddf5 [\u65e5\u672c\u8a9e](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/) | \ud83c\uddfb\ud83c\uddf3 [ti\u1ebfng vi\u1ec7t](https://github.com/bitlits/Bitcoin-Casino/blob/master/doc/)\n\n### Features\n\n* \ud83c\udfb0 Designed as a high performance cryptocurrency game.\n* \ud83e\udde0 Built-in high performance RNG-engine.\n* \ud83d\ude4a Anonymous login with no sign up required.\n* \u2696\ufe0f Provably Fair - Each game has a single transaction ID (TXID for short). To get the winning numbers, we convert the TXID from base 16 to base 10 and then pick the first two numbers from the TXID as the winning numbers.\n* \ud83d\udca1 Usability and scalability.\n* \u269b\ufe0f Supports multiple digital currencies (eg. Bitcoin, Litecoin, Dogecoin etc.).\n* \ud83d\udcd6 Powerful admin dashboard and management tools.\n* \ud83d\udd27 Highly configurable and extendable.\n* \ud83d\udd10 Industry standard security out of the box.\n* \ud83d\udcac Active community behind.\n\n## Release History\n\n* 1.0\n    * CHANGE: Update docs (module code remains unchanged)\n\n## \ud83d\udd27 Prerequisites \n\n* Ubuntu 18.04\n* Git 1.7.10+\n* Sqlite\n* Mustache\n* PhpLiteAdmin v1.9.8.2\n* Apache2\n* RedBean\n\n## \ud83d\ude80 Installation & Deployment\n\n* <p>Sign up with <a target=\"_blank\" href=\"https://m.do.co/c/397fb2277475\">Digital Ocean</a><img width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /></p>\n* Install LAMP https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-16-04\n* Edit the configuration file `sudo nano /base/init.php`\n* Install Litecoin & start the Litecoin Daemon `sudo litecoind` https://github.com/bitlits/Bitcoin-Casino/wiki/Install-Litecoin-for-Bitcoin-Casino-&-Bitcoin-Slot-Machine\n* Edit the configuration file `sudo nano /vendor/sql/phpliteadmin.conf.php`\n* Access PhpLiteAdmin Dashboard http://example.com/vendor/sql/phpliteadmin.php\n"
 },
 {
  "repo": "mycelium-com/wallet-android",
  "language": "Java",
  "readme_contents": "Beta channel\n============\n\nIn order to receive updates quicker than others, you need to enable beta versions of the software in\n[Google Play](https://play.google.com/apps/testing/com.mycelium.wallet)\n\nAs beta testers, please make sure you have a recent **backup of the masterseed** and all **private keys** inside Mycelium. Beta testers will experience many bugs.\nSo far, restoring the wallet from masterseed has never been necessary, but we offer no guarantees.\n\nBuilding\n========\n\nTo build everything from source, simply checkout the source and build using gradle on the build system you need:\n\n * JDK 1.8\n\nThe project layout is designed to be used with a recent version of Android Studio (currently 4.1.2)\n\n#### Build commands\n\nTo get the source code, type:\n\n    git clone https://github.com/mycelium-com/wallet-android.git\n    cd wallet-android\n    git submodule update --init --recursive\n\nLinux/Mac type:\n\n    ./gradlew clean test mbw::assembleProdnetRelease mbw::assembleBtctestnetRelease\n\nWindows type:\n\n    gradlew.bat clean test mbw::assembleProdnetRelease mbw::assembleBtctestnetRelease\n\n - Voila, look into `mbw/build/outputs/apk/` to see the generated apk.\n   There are versions for both prodnet and testnet.\n\nAlternatively you can install the latest version from the [Play Store](https://play.google.com/store/apps/details?id=com.mycelium.wallet).\n\nIf you cannot access the Play store, you can obtain the apk directly from the Mycelium Bitcoin\nWallet [download page](https://wallet.mycelium.com/).\n\nApp Download Verification\n-------------------------\n\nAll versions released by Mycelium are signed with the same release keys. If you do not trust the apk\nyou can check that signature with\n[apksigner](https://developer.android.com/studio/command-line/apksigner.html#options-verify):\n\n```\napksigner verify --print-certs --verbose mycelium.apk\n```\n\nThe output should look like:\n\n```\nVerifies\nVerified using v1 scheme (JAR signing): true\nVerified using v2 scheme (APK Signature Scheme v2): true\nVerified using v3 scheme (APK Signature Scheme v3): false\nNumber of signers: 1\nSigner #1 certificate DN: CN=Mycelium Developers, O=Mycelium, L=Vienna, C=AT\nSigner #1 certificate SHA-256 digest: b8e59d4a60b65290efb2716319e50b94e298d7a72c76c2119eb7d8d3afac302e\nSigner #1 certificate SHA-1 digest: be575ec3b3b52e0b2392146cbdb245c91ef5a04f\nSigner #1 certificate MD5 digest: 7aec063675b0206aba3b6175b89abc7d\nSigner #1 key algorithm: RSA\nSigner #1 key size (bits): 2048\nSigner #1 public key SHA-256 digest: 6d9c0cda9dcd3ec5efcdca41243829b1dcf1e9a91c6309bca167807282590a20\nSigner #1 public key SHA-1 digest: b34336038c7ca678285c14aebe78b7d5add90e4c\nSigner #1 public key MD5 digest: a78bdb2b6d074db4b1ff12eb9cddcfa3\nWARNING: ...\n```\n\nDeterministic builds\n====================\n\nTo validate the Mycelium image you obtain from Google Play Store, you can rebuild the Mycelium\nwallet yourself using [Podman](https://podman.io/getting-started/) and compare both images following these steps:\n\n* Get the source as above\n* Create your own builder image from our simple Dockerfile\n\n      $ podman build --no-cache --tag mycelium_builder .\n\n* Build using disorderfs to eliminate non-determinism caused by file ordering\n\n      $ podman run --rm --interactive --tty \\\n          --device /dev/fuse \\\n          --cap-add SYS_ADMIN \\\n          --volume .:/app \\\n          mycelium_builder \\\n          bash -c \"apt update;\n          apt install -y disorderfs;\n          mkdir /project/\n          disorderfs --sort-dirents=yes --reverse-dirents=no /app/ /project/;\n          cd /project/\n          ./gradlew -x lint -x test clean :mbw:assembleProdnetRelease;\"\n\n  If you see errors about local paths not being found, remove/move away `local.properties`.\n\n  As container might run as a different user, its generated files will also be \"not yours\".\n  Make them yours using `chown` as super user.\n  \n  The app can now be found in `mbw/build/outputs/apk/prodnet/release/mbw-prodnet-release.apk`.\n  \n  As maintainer with release keys you want to run a slightly different command:\n  Add these parameters: `--volume 'path/to/keys.properties':/project/keys.properties --volume 'path/to/keystore_mbwProd':/project/keystore_mbwProd --volume 'path/to/keystore_mbwTest':/project/keystore_mbwTest`\n  Build all these targets `:mbw:assBtctRel :mbw:assProdRel :mbw:assBtctDeb :mbw:assProdDeb`\n  and to get an error on missing release keys, add this gradle option `-PenforceReleaseSigning`\n  \n  Note: for those who use Docker Toolbox $(pwd) should be under your home user folder since this is the [only folder that is shared with VM](https://github.com/docker/kitematic/issues/2738).\n\n* Retrieve Google Play Mycelium APK from your phone\n  Gets package path:\n\n        $ adb shell pm path com.mycelium.wallet\n        package:/data/app/com.mycelium.wallet-1/base.apk\n\n  Retrieve file:\n\n        $ adb pull /data/app/com.mycelium.wallet-1/base.apk mycelium-signed.apk\n        \n* Extract content from both apks you want to compare, using [ApkTool](https://ibotpeaches.github.io/Apktool/):\n\n        java -jar ~/path/to/apktool.jar d mbw-prodnet-release.apk\n        java -jar ~/path/to/apktool.jar d mycelium-signed.apk\n\n* Compare signed apk with unsigned locally built apk using a diff tool\n\n        diff --brief --recursive  mbw-prodnet-release/ mycelium-signed/ | grep -v \"META-INF/CERT.RSA\\|META-INF/CERT.SF\\|META-INF/MANIFEST.MF\"\n\n* The expected difference between these files are elements that depend on the signature, that only\n  the project's maintainer can reproduce:\n  \n  * `original/META-INF/CERT.RSA` \n  * `original/META-INF/CERT.SF` \n  * `original/META-INF/MANIFEST.MF`\n\nFeatures\n========\n\nWith the Mycelium Bitcoin Wallet you can send and receive Bitcoins using your mobile phone.\n\n - HD enabled - manage multiple accounts and never reuse addresses ([Bip32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)/[Bip44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) compatible)\n - Masterseed based - make one backup and be safe for ever. ([Bip39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki))\n - 100% control over your private keys, they never leave your device unless you export them\n - No block chain download - install and run in seconds\n - Ultra fast connection to the Bitcoin network through our super nodes\n - For enhanced privacy and availability you can connect to our super nodes via a tor-hidden service ( *.onion* address)\n - Watch-only addresses (single or xPub) & private key (single or xPriv) import for secure cold-storage integration\n - Directly spend from paper wallets (single key, xPriv or master seed)\n - Trezor enabled - directly spend from trezor-secured accounts.\n - [Mycelium Entropy](https://mycelium.com/entropy) compatible Shamir-Secret-Shared 2-out-of-3 keys spending\n - Secure your wallet with a PIN\n - Compatible with other bitcoin services through the `bitcoin:` URI scheme\n\n\nPlease note that bitcoin is still experimental and this app comes with no warranty - while we make sure to adhere to the highest standards of software craftsmanship we can not exclude that the software contains bugs. Please make sure you have backups of your private keys and do not use this for more than you are willing to lose.\n\nThis application's source is published at https://github.com/mycelium-com/wallet\nWe need your feedback. If you have a suggestion or a bug to report [create an issue](https://github.com/mycelium-com/wallet/issues).\n\nMore features:\n - Sources [available for review](https://github.com/mycelium-com/wallet-android)\n - Multiple HD accounts, private keys, external xPub or xPriv accounts\n - Multiple Bitcoin denominations: BTC, mBTC, bits and uBTC\n - View your balance in multiple fiat currencies: USD, AUD, CAD, CHF, CNY, DKK, EUR, GBP, HKD, JPY, NZD, PLN, RUB, SEK, SGD, THB, and many more\n - Send and receive by specifying an amount in fiat and switch between fiat and BTC while entering the amount\n - Address book for commonly used addresses\n - Transaction history with detailed information and local stored comments\n - Import private keys using SIPA (the ones beginning with a 5) and mini private key format (Casascius private keys) from QR-codes or clipboard\n - Export private-, xPub- or xPriv-keys as QR-codes, on clipboard or share with other applications\n - Share your bitcoin address using Twitter, Facebook, email and more.\n - Integrated QR-code scanner\n - Client side load balancing between three 100% redundant server nodes located in different data centers.\n - Sign Messages using your private keys (compatible with bitcoin-qt)\n\nAuthors\n=======\n - Jan M\u00f8ller\n - [Andreas Petersson](https://github.com/apetersson)\n - [Daniel Weigl](https://github.com/DanielWeigl)\n - [Jan Dreske](https://github.com/jandreske)\n - Dmitry Murashchik\n - Constantin Vennekel\n - [Leo Wandersleb](https://github.com/Giszmo)\n - [Daniel Krawisz](https://github.com/DanielKrawisz)\n - [Jerome Rousselot](https://github.com/jeromerousselot)\n - [Nelson Melina](https://github.com/DaLN)\n - [Elvis Kurtnebiev](https://github.com/xElvis89x)\n - [Sergey Dolgopolov](https://github.com/itserg)\n - [Sergey Lappo](https://github.com/sergeylappo)\n - Alexander Makarov\n - [Nadia Poletova](https://github.com/poletova-n)\n - [Kristina Tezieva](https://github.com/agneslovelace)\n - [Nuru Nabiyev](https://github.com/NuruNabiyev)\n \n\nCredits\n=======\nThanks to all collaborators who provided us with code or helped us with integrations!\nJust to name a few:\n\n - [Nicolas Bacca from Ledger](https://github.com/btchip)\n - Sipa, Marek and others from Trezor\n - Jani and Ale\u0161 from Cashila\n - [Kalle Rosenbaum, Bip120/121](https://github.com/kallerosenbaum)\n - David and Alex from Glidera\n - [Wiz](https://twitter.com/wiz) for helping us with KeepKey\n - Tom Bitton and Asa Zaidman from Simplex\n - (if you think you should be mentioned here, just notify us)\n\nThanks to Jethro for tirelessly testing the app during beta development.\n\nThanks to our numerous volunteer translators who provide high-quality translations in many languages. Your name should be listed here, please contact me so I know you want to be included.\n\nThanks to Johannes Zweng for his testing and providing pull requests for fixes.\n\nThanks to all beta testers to provide early feedback.\n"
 },
 {
  "repo": "dooglus/intersango",
  "language": "PHP",
  "readme_contents": "This is the exchange software used on intersango.com and britcoin.co.uk\n\nCopyright is held by Bitcoin Consultancy (bitcoinconsultancy.com)\n\nYou are free to use all artwork and code in this repository in accordance of the\nterms of the AGPL.\n\n"
 },
 {
  "repo": "butor/blackbird",
  "language": "C++",
  "readme_contents": "[![Build Status](https://travis-ci.org/butor/blackbird.svg?branch=master)](https://travis-ci.org/butor/blackbird)  [![Blackbird chat](https://badges.gitter.im/blackbird_bitcoin_arbitrage/Lobby.svg)](https://gitter.im/blackbird_bitcoin_arbitrage/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) ![license](https://img.shields.io/badge/license-MIT-blue.svg)\n\n<p align=\"center\">\n<img src=\"https://cloud.githubusercontent.com/assets/11370278/10808535/02230d46-7dc3-11e5-92d8-da15cae8c6e9.png\" width=\"50%\" alt=\"Blackbird Bitcoin Arbitrage\">\n</p>\n\n### Introduction\n\nBlackbird Bitcoin Arbitrage is a C++ trading system that does automatic long/short arbitrage between Bitcoin exchanges.\n\n### How It Works\n\nBitcoin is still a new and inefficient market. Several Bitcoin exchanges exist around the world and the bid/ask prices they propose can be briefly different from an exchange to another. The purpose of Blackbird is to automatically profit from these temporary price differences while being market-neutral.\n\nHere is a real example where an arbitrage opportunity exists between Bitstamp (long) and Bitfinex (short):\n\n<p align=\"center\">\n<img src=\"https://cloud.githubusercontent.com/assets/11370278/11164055/5863e750-8ab3-11e5-86fc-8f7bab6818df.png\"  width=\"60%\" alt=\"Spread Example\">\n</p>\n\nAt the first vertical line, the spread between the exchanges is high so Blackbird buys Bitstamp and short sells Bitfinex. Then, when the spread closes (second vertical line), Blackbird exits the market by selling Bitstamp and buying Bitfinex back.\n\n#### Advantages\n\nUnlike other Bitcoin arbitrage systems, Blackbird doesn't sell but actually _short sells_ Bitcoin on the short exchange. This feature offers two important advantages:\n\n1. The strategy is always market-neutral: the Bitcoin market's moves (up or down) don't impact the strategy returns. This removes a huge risk from the strategy. The Bitcoin market could suddenly lose half its value that this won't make any difference in the strategy returns.\n\n2. The strategy doesn't need to transfer funds (USD or BTC) between Bitcoin exchanges. The buy/sell and sell/buy trading activities are done in parallel on two different exchanges, independently. Advantage: no need to deal with transfer latency issues.\n\nMore details about _short selling_ and _market neutrality_ can be found on <a href=\"https://github.com/butor/blackbird/issues/100\" target=\"_blank\">issue #100</a>.\n\n### Disclaimer\n\n__USE THE SOFTWARE AT YOUR OWN RISK. YOU ARE RESPONSIBLE FOR YOUR OWN MONEY. PAST PERFORMANCE IS NOT NECESSARILY INDICATIVE OF FUTURE RESULTS.__\n\n__THE AUTHORS AND ALL AFFILIATES ASSUME NO RESPONSIBILITY FOR YOUR TRADING RESULTS.__\n\n### Code Information\n\nThe trade results are stored in CSV files and the detailed activity is stored in log files. New files are created every time Blackbird is started.\n\nIt is possible to automatically stop Blackbird after the next trade has closed by creating, at any time, an empty file named _stop_after_notrade_.\n\nBlackbird uses functions written by <a href=\"http://www.adp-gmbh.ch/cpp/common/base64.html\" target=\"_blank\">Ren\u00e9 Nyffenegger</a> to encode and decode base64.\n\n### How To Test Blackbird\n\nPlease make sure that you understand the disclaimer above if you want to test Blackbird with real money, and start with a small amount of money.\n\n__IMPORTANT: all your BTC accounts must be empty before starting Blackbird. Make sure that you only have USD on your accounts and no BTC.__\n\nIt is never entirely safe to just tell Blackbird to use, say, $25 per exchange. You also need to only have $25 available on each of your trading accounts as well as 0 BTC. In this case, you are sure that even with a bug your maximum loss on an exchange won't be greater than $25 no matter what.\n\nNote: on Bitfinex, your money has to be available on the _Margin_ account.\n\n#### Implemented Exchanges\n\n| Exchange | Long | Short | Tested | Note |\n| -------- |:----:|:-----:|:------:| ---- |\n| <a href=\"https://www.bitfinex.com\" target=\"_blank\">Bitfinex</a> | \u2713 | \u2713 | \u2713 | |\n| <a href=\"https://www.okcoin.com\" target=\"_blank\">OKCoin</a> | \u2713 |  | \u2713 |their API now offers short selling: <a href=\"https://www.okcoin.com/about/rest_api.do\" target=\"_blank\">link here</a> |\n| <a href=\"https://www.bitstamp.net\" target=\"_blank\">Bitstamp</a> | \u2713 |  | \u2713 | |\n| <a href=\"https://gemini.com\" target=\"_blank\">Gemini</a> | \u2713 |  | \u2713 | |\n| <a href=\"https://www.kraken.com\" target=\"_blank\">Kraken</a> | \u2713 | \u2713 | | Validation in progress. Shorting is currently in testing | \n| <a href=\"https://exmo.com\" target=\"_blank\">EXMO</a> | \u2713 |  | | New exchange from PR <a href=\"https://github.com/butor/blackbird/pull/336\" target=\"_blank\">#336</a>. <b>Might be a <a href=\"https://bitcointalk.org/index.php?topic=1919799.0\" target=\"_blank\">scam</a></b> |\n| <a href=\"https://www.quadrigacx.com\" target=\"_blank\">QuadrigaCX</a> | \u2713 |  |  |\n| <a href=\"https://www.gdax.com\" target=\"_blank\">GDAX</a> | \u2713 |  |  | Validation in progress. Shorting is not currently supported. |\n\n\n\n\n#### Potential Exchanges\n\n| Exchange | Long | Short | Note |\n| -------- |:----:|:-----:| ---- |\n| <a href=\"https://poloniex.com\" target=\"_blank\">Poloniex</a> | \u2713 | \u2713 | BTC/USD trading not supported, BTC/USDT margin trading not supported |\n| <a href=\"https://cex.io/\" target=\"_blank\">CEX.IO</a> | \u2713 | \u2713 | Implementation in progress |\n| <a href=\"https://wex.nz\" target=\"_blank\">WEX</a> | \u2713 |  |  |\n| <a href=\"https://www.itbit.com\" target=\"_blank\">itBit</a> | \u2713 |  |  |\n| <a href=\"https://bittrex.com\" target=\"_blank\">Bittrex</a> | \u2713 |  | Implementation in progress, BTC/USD not supported (coming soon.) |\n| <a href=\"https://binance.com\" target=\"_blank\">Binance</a> | \u2713 |  | Implementation in progress, BTC/USD not supported |\n\nIf `DemoMode=true`, all the exchanges are shown in the log file.\n\nIf `DemoMode=false`, only the exchanges for which the credentials exist in _blackbird.conf_ are used.\n\n#### Credentials\n\nFor each of your exchange accounts, you need to create the API authentication keys. This is usually done in the _Settings_ section of your accounts.\n\nThen, you need to add your API keys into the file _blackbird.conf_. You need at least two exchanges and one of them should allow short selling. __Never__ share this file as it will contain your personal exchange credentials!\n\n#### Blackbird Parameters\n\nParameter | Default Value | Description\n| ------------ | ------------------- | ------------- |\n| DemoMode | true | The demo mode will show the spreads but won't actually trade anything |\n| Leg1 | BTC | The first leg of the traded pair. This leg is hedged against market risk |\n| Leg2 | USD | The second leg of the traded pair. This leg is __not__ hedged against market risk |\n| UseFullExposure | false | When true, all the `Leg2` exposure available on your accounts will be used. Otherwise, the amount defined by `TestedExposure` will be used. Note: the cash used for a trade will be the minimum of the two exchanges, minus 1.00% as a small margin: if there is $1,000 on the first account and $1,100 on the second one, $990 will be used for each exchange, i.e. $1,000 - (1% * $1,000). The exposure is $1,980 |\n| TestedExposure | 25 | If UseFullExposure is false, that parameter defines the USD amount that will be used. The minimum has to be $10 otherwise some exchanges might reject the orders |\n| MaxExposure | 25,000 | Maximum exposure per exchange. If the limit is $25,000 then Blackbird won't send any order larger than that on each exchange |\n| MaxLength | 5,184,000 | The maximum length of a trade in number of iterations. If this value is reached then Blackbird will exit the market regardless of the spread. Warning: with this value, the system can exit with a loss so It's recommended to use a large value. The default is 180 days with GapSec at 3 seconds |\n| DebugMaxIteration | 3,200,000 | The maximum number of iteration. Once DebugMaxIteration is reached Blackbird is terminated with return=0. Useful for troubleshooting the software |\n| Verbose | true | Write the bid/ask and then spreads to the log file at every iteration. The log file size will be larger but it will show how Blackbird analyses the spreads |\n| Interval | 3 sec. | Timelapse in seconds of an iteration. By default, the quotes download and the spreads analysis for all the exchanges are done every 3 seconds |\n| SpreadEntry | 0.0080 | The spread threshold above which the trailing spreads are generated to capture an arbitrage opportunity |\n| SpreadTarget | 0.0050 | This is the targeted profit. It represents the net profit and takes the exchange fees into account. If SpreadEntry is at 0.80% and trades are generated at that level on two exchanges with 0.25% fees each, Blackbird will set the exit threshold at -0.70% (0.80% spread entry - 4x0.25% fees - 0.50% target = -0.70%) |\n| PriceDeltaLimit | 0.10 | The maximum difference between the target limit price and the computed limit price of an order. That is the price generated by looking at the current liquidity in the order books. If the difference is greater than PriceDeltaLimit then no trades will be generated because there is not enough liquidity (risk of slippage) |\n| TrailingSpreadLim | 0.0008 | The limit under which the trailing spread is generated. If the current spread is above SpreadTarget and at 0.70%, then by default, the trailing spread will be generated at 0.62% |\n| TrailingSpreadCount | 1 |  The number of times the spread must be between SpreadTarget and the trailing spread before sending the orders to the market |\n| OrderBookFactor | 3.0 | In order to be executed as fast as possible and avoid slippage, Blackbird checks the liquidity in the order books of the exchanges and makes sure there are at least 3.0 times the needed liquidity before executing the order |\n| UseVolatility | false |  If true, display the spreads volatility information in the log file. This is not used for the moment and only displayed as information |\n| VolatilityPeriod | 600 | The period length of the volatility in number of iterations. This is not used for the moment and only displayed as information |\n| SendEmail | false | When true, an e-mail will be sent every time an arbitrage trade is completed, with information such as the names of the exchanges and the trade return |\n| DBFile | 'blackbird.db' | SQLite3 database file to use for storing the bid/ask information of the exchanges for reference. Blackbird will create this file if it doesn't already exist |\n\n#### Getting and building the software\n\nYou need the following libraries: <a href=\"https://www.openssl.org/source\" target=\"_blank\">OpenSSL</a>, <a href=\"http://www.digip.org/jansson\" target=\"_blank\">Jansson</a> (v2.7 minimum), <a href=\"http://curl.haxx.se\" target=\"_blank\">cURL</a>, <a href=\"http://www.sqlite.org\" target=\"_blank\">SQLite3</a> and <a href=\"http://caspian.dotconf.net/menu/Software/SendEmail\" target=\"_blank\">sendEmail</a>. Usually this is what you need to install:\n\n```\nlibssl-dev\nlibjansson-dev\nlibcurl4-openssl-dev\nlibsqlite3-dev (available as a Blackbird submodule)\nbuild-essential\ncmake\nsendemail\n```\n\nDownload the source from GitHub with:\n\n    mkdir blackbird\n    cd blackbird\n    git clone --recursive  git://github.com/butor/blackbird.git .\n\nAlternatively, if you already have the existing source tree use:\n\n    git submodule update --init\n\nto sync the submodules.\n\nOnce you have downloaded the source code, build Blackbird by typing:\n\n    cmake -B./build -H. -DCMAKE_BUILD_TYPE=Debug\n\nor\n\n    cmake -B./build -H. -DCMAKE_BUILD_TYPE=Release\n    \nthen\n    \n    cmake --build ./build -- install\n\nIf all goes well this produces a Blackbird executable in the project directory.\n\n#### Ubuntu (Amazon EC2 compatible)\n\n1. Run the following commands:\n\n  ```\n  sudo apt-get install libssl-dev libjansson-dev libcurl4-openssl-dev libsqlite3-dev sendemail make gcc g++ build-essential cmake\n  mkdir blackbird\n  cd blackbird\n  git clone --recursive  git://github.com/butor/blackbird.git .\n  cmake -B./build -H. -DCMAKE_BUILD_TYPE=Release\n  cmake --build ./build -- install\n  ```\n\n2. Run the software, by typing:\n\n  ```\n  ./blackbird\n  ```\n\n#### Docker\n\n1. Download and install Docker (with Docker Compose) [here](https://www.docker.com/).\n\n2. Download the source from GitHub with\n  ```\n  mkdir blackbird\n  cd blackbird\n  git clone --recursive  git://github.com/butor/blackbird.git .\n  ```\nAlternatively, if you already have the existing source tree use:\n  ```\n  git submodule update --init\n  ```\n\n3. Build the container:\n\n  ```\n  docker build -t blackbird .\n  ```\n\n4. Spin up the entire stack with docker-compose (OSX/Linux):\n\n  ```\n  docker-compose up\n  ```\n\n#### Mac OS X\n\n1. Install [Homebrew](https://brew.sh/)\n\n2. Run the following commands:\n\n  ```\n  xcode-select --install\n  brew install cmake openssl jansson curl sqlite3 sendemail\n  mkdir blackbird\n  cd blackbird\n  git clone --recursive  git://github.com/butor/blackbird.git .\n  cmake -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -B./build -H. -DCMAKE_BUILD_TYPE=Release\n  cmake --build ./build -- install\n  ```\n\n3. Run the software, by typing:\n\n  ```\n  ./blackbird\n  ```\n\n#### Understanding and debugging the software\n\nStep-through debugging is a helpful method to understand how any software application works.  Various scripts and metadata files are included alongside the source code to facilitate building the application so you can use GDB and VisualStudio Code to debug the application while it executes in a Docker container.\n\nOnce you have successfully launched Blackbird following the instructions in the \"Docker\" section, you need to do the following:\n\n1. <a href=\"https://code.visualstudio.com\" target=\"_blank\">Download and install Visual Studio Code</a>\n\n2. <a href=\"https://code.visualstudio.com/docs/languages/cpp\" target=\"_blank\">Setup the C/C++ extension for Visual Studio Code</a>\n\n3. You need to have GDB installed on your machine (this is described in the \"Debugging\" section of <a href=\"https://code.visualstudio.com/docs/languages/cpp\" target=\"_blank\">Setup the C/C++ extension for Visual Studio Code</a>).  \n\n4. From VS Code, File > Open Workspace... and select the \"blackbird\" workspace (this is in the root directory of your blackbird clone; the one you created this during \"Download source code\" step) \n\n5. Press F5 to start the debugger.  This will build and launch the Docker container, Blackbird w/ debug symbols, and a GDB Server running Blackbird on the Docker container.  Since there is a delay between when the Docker container gets launched and the GDB Server is running, you may need to start the debugger a few times before it attaches to the GDB server.  (If you can figure out how to create a \"pause\" between when the container launches and VS Code attempts to attach to GDB Server, that will fix it).\n\n### Contact\n\n* If you found a bug, please open a new <a href=\"https://github.com/butor/blackbird/issues\" target=\"_blank\">issue</a> with the label _bug_\n* If you have a general question or have troubles running Blackbird, you can open a new  <a href=\"https://github.com/butor/blackbird/issues\" target=\"_blank\">issue</a> with the label _question_ or _help wanted_\n* For anything else you can contact the author at julien.hamilton@gmail.com\n\n### Log Output Example\n\nThis is what the log file looks like when Blackbird is started:\n\n\n```\nBlackbird Bitcoin Arbitrage\nDISCLAIMER: USE THE SOFTWARE AT YOUR OWN RISK.\n\n[ Targets ]\n   Spread Entry:  0.80%\n   Spread Target: 0.30%\n\n[ Current balances ]\n   Bitfinex:    1,857.79 USD    0.000000 BTC\n   OKCoin:      1,801.38 USD    0.000436 BTC\n   Bitstamp:    1,694.15 USD    0.000000 BTC\n   Gemini:      1,720.38 USD    0.000000 BTC\n\n[ Cash exposure ]\n   FULL cash used!\n\n[ 10/31/2015 08:32:45 ]\n   Bitfinex:    325.21 / 325.58\n   OKCoin:      326.04 / 326.10\n   Bitstamp:    325.37 / 325.82\n   Gemini:      325.50 / 328.74\n   ----------------------------\n   OKCoin/Bitfinex:     -0.27% [target  0.80%, min -0.27%, max -0.27%]\n   Bitstamp/Bitfinex:   -0.19% [target  0.80%, min -0.19%, max -0.19%]\n   Gemini/Bitfinex:     -1.07% [target  0.80%, min -1.07%, max -1.07%]\n\n[ 10/31/2015 08:32:48 ]\n   Bitfinex:    325.21 / 325.58\n   OKCoin:      326.04 / 326.10\n   Bitstamp:    325.39 / 325.68\n   Gemini:      325.50 / 328.67\n   ----------------------------\n   OKCoin/Bitfinex:     -0.27% [target  0.80%, min -0.27%, max -0.27%]\n   Bitstamp/Bitfinex:   -0.14% [target  0.80%, min -0.19%, max -0.14%]\n   Gemini/Bitfinex:     -1.05% [target  0.80%, min -1.07%, max -1.05%]\n```\n"
 },
 {
  "repo": "inoutcode/bitcoin_book_2nd",
  "language": "Python",
  "readme_contents": "### [\u300a\u7cbe\u901a\u6bd4\u7279\u5e01\uff08\u7b2c\u4e8c\u7248\uff09-- \u533a\u5757\u94fe\u7f16\u7a0b\u300b](https://bitcoinbook.info/) \u4e2d\u6587\u7248\n### [Mastering Bitcoin 2nd Edition - Programming the Open Blockchain]( https://bitcoinbook.info/ ) in Chinese (Simplified)\n\n![Mastering Bitcoin 2nd Edition](images/cover.png)\n\n\u672c\u4e66\u4e3b\u8981\u9762\u5411\u5f00\u53d1\u4eba\u5458\uff0c\u524d\u4e24\u7ae0\u5bf9\u6bd4\u7279\u5e01\u7684\u4ecb\u7ecd\u4e5f\u9002\u7528\u4e8e\u975e\u5f00\u53d1\u4eba\u5458\u3002\u4efb\u4f55\u5bf9\u6280\u672f\u6709\u57fa\u672c\u4e86\u89e3\u7684\u4eba\u90fd\u53ef\u4ee5\u9605\u8bfb\u524d\u4e24\u7ae0\uff0c\u4ee5\u6df1\u5165\u4e86\u89e3\u6bd4\u7279\u5e01\u3002\n\n### \u76ee\u5f55\n\n[\u524d\u8a00](\u524d\u8a00.asciidoc)\n\n[\u672f\u8bed](\u672f\u8bed.asciidoc)\n\n[\u7b2c\u4e00\u7ae0 \u6982\u8ff0](\u7b2c\u4e00\u7ae0.asciidoc)\n\n[\u7b2c\u4e8c\u7ae0 \u6bd4\u7279\u5e01\u5982\u4f55\u8fd0\u4f5c](\u7b2c\u4e8c\u7ae0.asciidoc)\n\n[\u7b2c\u4e09\u7ae0 Bitcoin Core\u53c2\u8003\u5b9e\u73b0](\u7b2c\u4e09\u7ae0.asciidoc)\n\n[\u7b2c\u56db\u7ae0 \u5bc6\u94a5\u548c\u5730\u5740](\u7b2c\u56db\u7ae0.asciidoc)\n\n[\u7b2c\u4e94\u7ae0 \u94b1\u5305](\u7b2c\u4e94\u7ae0.asciidoc)\n\n[\u7b2c\u516d\u7ae0 \u4ea4\u6613](\u7b2c\u516d\u7ae0.asciidoc)\n\n[\u7b2c\u4e03\u7ae0 \u9ad8\u7ea7\u4ea4\u6613\u548c\u811a\u672c](\u7b2c\u4e03\u7ae0.asciidoc)\n\n[\u7b2c\u516b\u7ae0 \u6bd4\u7279\u5e01\u7f51\u7edc](\u7b2c\u516b\u7ae0.asciidoc)\n\n[\u7b2c\u4e5d\u7ae0 \u533a\u5757\u94fe](\u7b2c\u4e5d\u7ae0.asciidoc)\n\n[\u7b2c\u5341\u7ae0 \u6316\u77ff\u548c\u5171\u8bc6](\u7b2c\u5341\u7ae0.asciidoc)\n\n[\u7b2c\u5341\u4e00\u7ae0 \u6bd4\u7279\u5e01\u5b89\u5168](\u7b2c\u5341\u4e00\u7ae0.asciidoc)\n\n[\u7b2c\u5341\u4e8c\u7ae0 \u533a\u5757\u94fe\u5e94\u7528](\u7b2c\u5341\u4e8c\u7ae0.asciidoc)\n\n### \u539f\u4e66\u8d2d\u4e70\u94fe\u63a5\uff1a\n[Amazon](https://www.amazon.com/Mastering-Bitcoin-Programming-Open-Blockchain/dp/1491954388)\n\n### \u5173\u4e8e\u8bd1\u8005\n\u4e92\u8054\u7f51\u4ece\u4e1a\u8005\uff0c\u5bf9\u7ecf\u6d4e\u5b66\u611f\u5174\u8da3\uff0c\u5f88\u65e9\u52a0\u5165\u6570\u5b57\u8d27\u5e01\u548c\u533a\u5757\u94fe\u7814\u7a76\u3002\n\n\u95f2\u6687\u65f6\u95f4\u7ffb\u8bd1\uff0c\u6b22\u8fce\u6307\u6b63\uff0c\u611f\u8c22\u52a0\u661f~\n\n[\u4e0b\u4e00\u7ae0\uff1a\u524d\u8a00](\u524d\u8a00.asciidoc)\n### \u6253\u8d4f\n![](images/thanks.jpeg)\n"
 },
 {
  "repo": "siminchen/bitcoinIDE",
  "language": "JavaScript",
  "readme_contents": "Bitcoin Script IDE\n============================\n\nA Bitcoin Script IDE to facilitate the learning, testing, and teaching of Bitcoin Script.\n\nFeatures\n--------\n\n* Syntax highlighting\n* Auto-complete\n* Translation to and from assembly\n* Stack visualizer\n* Step-by-step debugger\n\nTry it out!\n--------------------\n1. Open up IDE in https://siminchen.github.io/bitcoinIDE/\n2. In the **Script pane**, type in some script code:\n  * ex. 1  2  OP_ADD\n  * ex. 123  OP_HASH256\n  * ex. 1  OP_IF  2  OP_ELSE  3  OP_ENDIF\n3. View the equivalent assembly code by clicking the **Assembly tab**\n4. To execute the script, return to the Script tab and hit the **Run** button on the bottom to run the code\n5. Note the stack operations in the **Stack pane** on the right.\n6. To process the script one command at a time, hit the **Step** button on the bottom\n7. Note the stack operations\n8. Note the text box on the bottom that shows the next command\n9. To process the remainder of the commands, hit the **Continue** button on the bottom\n10. If the script was a valid script, then the text box on the bottom will be green and the stack elements will be orange.\n11. If the script was invalid, then the text box and the stack elements will be red\n\n\n\n"
 },
 {
  "repo": "znort987/blockparser",
  "language": "C",
  "readme_contents": "blockparser\n===========\n\n    Who wrote it ?\n    --------------\n\n        Author:\n\n            znort987@yahoo.com\n\n        Tip here if you find it useful:\n\n            1ZnortsoStC1zSTXbW6CUtkvqew8czMMG\n\n        I've also been cherry-picking changes I found useful from various github forks.\n        Credits for these:\n\n             git log | grep Author | grep -iv Znort\n\n    Canonical source code repo:\n    ---------------------------\n\n        git clone github.com:znort987/blockparser.git\n\n    License:\n    --------\n\n        Code is in the public domain.\n\n    What is it ?\n    ------------\n\n        A barebone C++ block parser that parses the entire block chain from scratch\n        to extract various types of information from it.\n\n        The code chews \"linearly\" through the block chain and calls \"user-defined\"\n        callbacks when it hits on certain \"events\" in the chain. Here:\n\n            \"events\" essentially means that the parser is starting to assemble a new\n            blockchain data structure (a block, a tx, an input, etc ...), or that the\n            parser has just completed a data structure, in which case it will usually\n            run the callback with the completed data structure. The blockchain data\n            structure level of granularity at which these \"events\" happen is somewhat\n            arbitrary.  For example you won't get called every time a new byte is seen.\n\n            \"user-defined\" means that if you want to extract new types of information\n            from the chain, you have to add your own C++ piece of code to those already\n            in directory \"cb\". Your C++ code will get called by the main parser at\n            \"events\" of your choosing.\n\n            \"linearly\" is a bit of an abuse because the parser code often has to jump\n            back to previously seen parts of the blockchain to provide user callbacks\n            with fully complete data structures. The parser code also has to walk the\n            blockchain a few times to compute the longest (valid) chain. But the user\n            callbacks get a fairly linear view of it all.\n\n\n        Blockparser was designed for bitcoin but works on most altcoins that were\n        derived from the bitcoin code base.\n\n    What it is not:\n    ---------------\n\n        Blockparser is *not* a verifier. It assumes a clean blockchain, as typically\n        constructed and verified by the bitcoin core client. blockparser does not\n        perform any kind of verification and will likely crash if applied to an unclean\n        chain.\n\n        Blockparser is not very efficient if you want to perform repetitive tasks on\n        thr block chain: the basic idea/premise of blockparser is that it's going to\n        chew through the *entire* block chain, *every* time. Given the size of the\n        blockchain these days, that's not something you want to do very 5 minutes.\n\n        Blockparser is not lean and mean. It used to be, when the blockchain was still\n        relatively small.  Now that we are inching towards the 100's of gigabytes, the\n        very proposition that it has to chew through entire chain by design implies that\n        it's going to take quite a while, whichever way you slice it. Also, the entire\n        index is built on the fly and kept in RAM. At current sizes, this is not a very\n        smart choice. This might get addressed in the near future.\n\n    Why write this ?\n    ----------------\n\n        It started as an exercise for me to get a \"close to the metal\" understanding of\n        how bitcoin works. The quality and state of the original bitcoin codebase made\n        this damn near impossible (it's clear to me satosh, albeit clearly a genius, was\n        not a professional software engineer. Also, things have vastly improved since then).\n        It then grew into a fun hobby project.\n\n        The parser code is minimal and very easy to follow. If someone wants to quickly\n        understand \"for real\" how the block chain is structured, it is a good place to\n        start\n\n        It has also slowly grown into an altcoin zoo. It is very far from being a\n        compendium (there's so many of the darn things these days), but adding your\n        fave alt is very easy.\n\n        Talking about zoo, I've also started to track and document \"weird\" TXO's\n        in the chain (comments, p2sh, multi-sigs, bugs, etc ...). Not a complete\n        compendium yet, but getting there.\n\n        A side goal was also to build something that can independently (as in : the\n        codebase is *very* different from that of bitcoin core) verify some of the\n        conclusions of other bitcoin implementations, such as how many coins are\n        attached to an address.\n\n        Another thing that blockparser is really nice for is to easily reconstruct\n        \"snapshots\" of the state of the blockchain from a specific time (e.g. the -a\n        option of the \"allBalances\" command).\n\n    How do I build it ?\n    -------------------\n\n        You'll need a 64-bit Unix box (because of RAM consumption, blockparser won't work\n        inside a 32bit address space).\n\n        If you are unfortunate enough to still have to use windows, there is a port floating\n        somehwere on github.\n\n        I also have heard rumors of it working on OSX.\n\n        You'll need a block chain somewhere on your hard drive. This is typically created\n        by a statoshi bitcoin client such as this one: https://github.com/bitcoin/bitcoin.git\n\n        Install dependencies:\n\n            sudo apt-get install libssl-dev build-essential g++ libboost-all-dev libsparsehash-dev git-core perl\n\n        Get the source:\n\n            git clone git://github.com/znort987/blockparser.git\n\n        Build it:\n\n            cd blockparser\n            make\n\n    It crashes\n    ----------\n\n        At this point, blockparser uses a *lot* of memory (20+ Gig is typical). This\n        can cause all sorts of woes on an under-dimensioned box, chief amongst which:\n\n            - box goes into heavy swapping, and parser takes for ever to complete task\n\n            - parser eats up all RAM and all SWAP and crashes. Here's a possible remedy:\n\n                 http://askubuntu.com/questions/178712/how-to-increase-swap-space\n\n    How does blockparser deal with multi-sig transactions ?\n    --------------------------------------------------------\n\n        AFAIK, there are two types of multi-sig transactions:\n\n            1) Pay-to-script (which is in fact more general than multisig). This one is\n               easy, because it pays to a hash, which can readily be converted to an\n               address that starts with the character '3' instead of '1'\n\n            2) Naked multi-sig transactions. These are harder, because the output of\n               the transactions does not neatly map to a specific bitcoin address. I\n               think I have found a neat work-around: I compute:\n\n                     hash160(M, N, sortedListOfAddresses)\n\n               which can now be properly mapped to a bitcoin address. To mark the fact\n               that this addres is neither a \"pay to script\" (type '3') nor a\n               \"pay to pubkey or pubkeyhash\" (type '1'), I prefix them with '4'\n\n               Note : this may be worthy of an actual BIP. If someone writes one,\n               I'll happily adjust the code.\n\n               Note : this trick is only a blockparser thing. This means that these\n               new address types starting with a '4' won't be recognized by other\n               bitcoin implementations (such as blockchain.info)\n\n    Examples\n    --------\n\n        . Show all supported commands\n\n            ./parser help\n\n        . Show help for a specific command\n\n            ./parser allBalances --help\n\n        . Compute simple blockchain stats\n\n            ./parser simple\n\n        . Extract all transactions for a very popular address 1dice6wBxymYi3t94heUAG6MpG5eceLG1\n\n            ./parser transactions 06f1b66fa14429389cbffa656966993eab656f37\n\n        . Compute the closure of an address, that is the list of addresses that very probably belong to the same person:\n\n            ./parser closure 06f1b66fa14429389cbffa656966993eab656f37\n\n        . Compute and print the balance for all keys ever used since the beginning of time:\n\n            ./parser all >all.txt\n\n        . See how much of the BTC 10K pizza tainted all the subsequent TX in the chain\n          (chances are you have some dust coming from that famous TX lingering on one\n          of your addresses)\n\n            ./parser taint >pizzaTaint.txt\n\n        . See all the block rewards and fees:\n\n            ./parser rewards >rewards.txt\n\n        . See a greatly detailed dump of the famous pizza transaction\n\n            ./parser show\n\n        . Track all mined blocks with unspent reward:\n\n            ./parser pristine\n\n        . Show the first valid \"pay to script hash (P2SH)\" transaction in the chain:\n\n            ./parser showtx 9c08a4d78931342b37fd5f72900fb9983087e6f46c4a097d8a1f52c74e28eaf6\n\n        . Show the first valid naked multi-sig transaction in the chain (it's a 1 Of 2 multi-sig)\n\n            ./parser showtx 60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\n\n    NOTE: the general syntax is:\n\n        ./parser <command> <option> <option> ... <arg> <arg> ...\n\n\n    NOTE: use \"parser help <command>\" or \"parser <command> --help\" to get detailed\n          help for a specific command.\n\n    NOTE: <command> may have multiple aliases and can also be abbreviated. For\n          example, \"parser tx\", \"parser tr\", and \"parser transactions\" are equivalent.\n\n    NOTE: whenever specifying a list of things (e.g. a list of addresses), you can\n          instead enter \"file:list.txt\" and the list will be read from the file.\n\n    NOTE: whenever specifying a list file, you can use \"file:-\" and blockparser\n          will read the list directly from stdin.\n\n\n    Caveats:\n    --------\n\n        . You will need an x86-84 ubuntu box and a recent version of GCC(>=4.4), a recent version of\n          boost and openssl-dev. You may be able to compile on other platforms, but the code wasn't\n          really designed for those.\n\n        . As of this writing, it needs a log of RAM to work, typically upwards of 25Gigs. I will switch\n          to an on-disk hash table at some point, but for now you'll just need that if you ever hope to\n          see it finish in a reasonable amount of time (or at all if your swap space is too small).\n\n        . The code could be cleaner and better architected. It was just a quick and dirty way for me\n          to learn about bitcoin. There really isn't much in the way of comments either :D\n\n        . OTOH, it is fairly simple, short. If you want to understand how the blockchain data structures\n          work, the code in parser.cpp is a solid way to start.\n\n    Hacking the code:\n    -----------------\n\n        . parser.cpp contains the generic parser that reads the blockchain, parses it and calls\n          \"user-defined\" callbacks as it hits interesting bits of information. It typically calls\n          out when it begins reading finishes assembling a data structure.\n\n        . util.cpp contains a grab-bag of useful bitcoin related routines. Interesting examples include:\n\n            showScript\n            getBaseReward\n            solveOutputScript\n            decompressPublicKey\n\n        . blockparser comes with a bunch of interesting \"user callbacks\".\n\n            . cb/allBalances.cpp    :   code to all balance of all addresses.\n            . cb/closure.cpp        :   code to compute the transitive closure of an address\n            . cb/dumpTX.cpp         :   code to display a transaction in very great detail\n            . cb/help.cpp           :   code to dump detailed help for all other commands\n            . cb/pristine.cpp       :   code to show all \"pristine\" (i.e. unspent) blocks\n            . cb/rewards.cpp        :   code to show all block rewards (including fees)\n            . cb/simpleStats.cpp    :   code to compute simple stats.\n            . cb/sql.cpp            :   code to product an SQL dump of the blockchain\n            . cb/taint.cpp          :   code to compute the taint from a given TX to all TXs.\n            . cb/transactions.cpp   :   code to extract all transactions pertaining to an address.\n\n\n        . You can very easily add your own custom command. You can use the existing callbacks in\n          directory ./cb/ as a template to build your own:\n\n                cp cb/allBalances.cpp cb/myExtractor.cpp\n                Add to Makefile\n                Hack away\n                Recompile\n                Run\n\n        . You can also read the file callback.h (the base class from which you derive to implement your\n          own new commands). It has been heavily commented and should provide a good basis to pick what\n          to overload to achieve your goal.\n\n        . The code makes heavy use of the google dense hash maps. You can switch it to use sparse hash\n          maps (see Makefile, search for: DENSE, undef it). Sparse hash maps are slower but save quite a\n          bit of RAM.\n\n"
 },
 {
  "repo": "kingrock/BitcoinExchange",
  "language": "PHP",
  "readme_contents": "BitcoinExchangeScript\n=====================\n\nA opensource exchange script for digital currencies like Bitcoin and other alt-coins. \n\nThe trading section is not fully completed at this time. \n\nFeel free to contribute\n"
 },
 {
  "repo": "ccxt/ccxt",
  "language": "JavaScript",
  "readme_contents": "# CCXT \u2013 CryptoCurrency eXchange Trading Library\n\n[![Build Status](https://travis-ci.com/ccxt/ccxt.svg?branch=master)](https://travis-ci.com/ccxt/ccxt) [![npm](https://img.shields.io/npm/v/ccxt.svg)](https://npmjs.com/package/ccxt) [![PyPI](https://img.shields.io/pypi/v/ccxt.svg)](https://pypi.python.org/pypi/ccxt) [![NPM Downloads](https://img.shields.io/npm/dy/ccxt.svg)](https://www.npmjs.com/package/ccxt) [![Discord](https://img.shields.io/discord/690203284119617602?logo=discord&logoColor=white)](https://discord.gg/ccxt) [![Supported Exchanges](https://img.shields.io/badge/exchanges-111-blue.svg)](https://github.com/ccxt/ccxt/wiki/Exchange-Markets) [![Twitter Follow](https://img.shields.io/twitter/follow/ccxt_official.svg?style=social&label=CCXT)](https://twitter.com/ccxt_official)\n\nA JavaScript / Python / PHP library for cryptocurrency trading and e-commerce with support for many bitcoin/ether/altcoin exchange markets and merchant APIs.\n\n### [Install](#install) \u00b7 [Usage](#usage) \u00b7 [Manual](https://docs.ccxt.com/en/latest/manual.html) \u00b7 [FAQ](https://github.com/ccxt/ccxt/wiki/FAQ) \u00b7 [Examples](https://github.com/ccxt/ccxt/tree/master/examples) \u00b7 [Contributing](https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md) \u00b7 [Social](#social) \u00b7 [CCXT Pro](https://ccxt.pro)\n\nThe **CCXT** library is used to connect and trade with cryptocurrency exchanges and payment processing services worldwide. It provides quick access to market data for storage, analysis, visualization, indicator development, algorithmic trading, strategy backtesting, bot programming, and related software engineering.\n\nIt is intended to be used by **coders, developers, technically-skilled traders, data-scientists and financial analysts** for building trading algorithms.\n\nCurrent feature list:\n\n- support for many cryptocurrency exchanges \u2014 more coming soon\n- fully implemented public and private APIs\n- optional normalized data for cross-exchange analytics and arbitrage\n- an out of the box unified API that is extremely easy to integrate\n- works in Node 10.4+, Python 3, PHP 8.1+, and web browsers\n\n\n## See Also\n\n- <sub>[![TabTrader](https://user-images.githubusercontent.com/1294454/66755907-9c3e8880-eea1-11e9-846e-0bff349ceb87.png)](https://tab-trader.com/?utm_source=ccxt)</sub> **[TabTrader](https://tab-trader.com/?utm_source=ccxt)** \u2013 trading on all exchanges in one app. Available on **[Android](https://play.google.com/store/apps/details?id=com.tabtrader.android&referrer=utm_source%3Dccxt)** and **[iOS](https://itunes.apple.com/app/apple-store/id1095716562?mt=8)**!\n- <sub>[![Freqtrade](https://user-images.githubusercontent.com/1294454/114340585-8e35fa80-9b60-11eb-860f-4379125e2db6.png)](https://www.freqtrade.io)</sub> **[Freqtrade](https://www.freqtrade.io)** \u2013 leading opensource cryptocurrency algorithmic trading software!\n- <sub>[![OctoBot](https://user-images.githubusercontent.com/1294454/132113722-007fc092-7530-4b41-b929-b8ed380b7b2e.png)](https://www.octobot.online)</sub> **[OctoBot](https://www.octobot.online)** \u2013 cryptocurrency trading bot with an advanced web interface.\n- <sub>[![TokenBot](https://user-images.githubusercontent.com/1294454/152720975-0522b803-70f0-4f18-a305-3c99b37cd990.png)](https://tokenbot.com/?utm_source=github&utm_medium=ccxt&utm_campaign=algodevs)</sub> **[TokenBot](https://tokenbot.com/?utm_source=github&utm_medium=ccxt&utm_campaign=algodevs)** \u2013 discover and copy the best algorithmic traders in the world.\n\n\n## Certified Cryptocurrency Exchanges\n\n\n| logo                                                                                                                                                                                                            | id           | name                                                                                                    | ver                                                                                                               | certified                                                                                                                   | pro                                                                          | discount                                                                                                                                                                                                                                         |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|---------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| [![binance](https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                        | binance      | [Binance](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                        | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/spot/en)      | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Binance using CCXT's referral link for a 10% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d10%25&color=orange)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                        |\n| [![binancecoinm](https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                  | binancecoinm | [Binance COIN-M](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                 | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/delivery/en/) | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Binance COIN-M using CCXT's referral link for a 10% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d10%25&color=orange)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                 |\n| [![binanceusdm](https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                   | binanceusdm  | [Binance USD\u24c8-M](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                 | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/futures/en/)  | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Binance USD\u24c8-M using CCXT's referral link for a 10% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d10%25&color=orange)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                 |\n| [![bitget](https://user-images.githubusercontent.com/1294454/195989417-4253ddb0-afbe-4a1c-9dea-9dbcd121fa5d.jpg)](https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j)                | bitget       | [Bitget](https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j)                 | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://bitgetlimited.github.io/apidoc/en/mix)       | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                                                  |\n| [![bitmart](https://user-images.githubusercontent.com/1294454/129991357-8f47464b-d0f4-41d6-8a82-34122f0d1398.jpg)](http://www.bitmart.com/?r=rQCFLh)                                                            | bitmart      | [BitMart](http://www.bitmart.com/?r=rQCFLh)                                                             | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://developer-pro.bitmart.com/)                  | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with BitMart using CCXT's referral link for a 30% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d30%25&color=orange)](http://www.bitmart.com/?r=rQCFLh)                                                             |\n| [![bitvavo](https://user-images.githubusercontent.com/1294454/169202626-bd130fc5-fcf9-41bb-8d97-6093225c73cd.jpg)](https://bitvavo.com/?a=24F34952F7)                                                           | bitvavo      | [Bitvavo](https://bitvavo.com/?a=24F34952F7)                                                            | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.bitvavo.com/)                           | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                                                  |\n| [![bybit](https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg)](https://www.bybit.com/register?affiliate_id=35953)                                             | bybit        | [Bybit](https://www.bybit.com/register?affiliate_id=35953)                                              | [![API Version 5](https://img.shields.io/badge/5-lightgray)](https://bybit-exchange.github.io/docs/inverse/)      | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                                                  |\n| [![gate](https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg)](https://www.gate.io/ref/2436035)                                                                 | gate         | [Gate.io](https://www.gate.io/ref/2436035)                                                              | [![API Version 4](https://img.shields.io/badge/4-lightgray)](https://www.gate.io/docs/apiv4/en/index.html)        | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Gate.io using CCXT's referral link for a 20% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d20%25&color=orange)](https://www.gate.io/ref/2436035)                                                              |\n| [![huobi](https://user-images.githubusercontent.com/1294454/76137448-22748a80-604e-11ea-8069-6e389271911d.jpg)](https://www.huobi.com/en-us/v/register/double-invite/?inviter_id=11343840&invite_code=6rmm2223) | huobi        | [Huobi](https://www.huobi.com/en-us/v/register/double-invite/?inviter_id=11343840&invite_code=6rmm2223) | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://huobiapi.github.io/docs/spot/v1/en/)         | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Huobi using CCXT's referral link for a 15% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d15%25&color=orange)](https://www.huobi.com/en-us/v/register/double-invite/?inviter_id=11343840&invite_code=6rmm2223) |\n| [![idex](https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg)](https://idex.io)                                                                                | idex         | [IDEX](https://idex.io)                                                                                 | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://docs.idex.io/)                               | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                                                  |\n| [![kucoin](https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg)](https://www.kucoin.com/ucenter/signup?rcode=E5wkqe)                                           | kucoin       | [KuCoin](https://www.kucoin.com/ucenter/signup?rcode=E5wkqe)                                            | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.kucoin.com)                             | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                                                  |\n| [![mexc](https://user-images.githubusercontent.com/1294454/137283979-8b2a818d-8633-461b-bfca-de89e8c446b2.jpg)](https://m.mexc.com/auth/signup?inviteCode=1FQ1G)                                                | mexc         | [MEXC Global](https://m.mexc.com/auth/signup?inviteCode=1FQ1G)                                          | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://mxcdevelop.github.io/APIDoc/)                | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                                                  |\n| [![okx](https://user-images.githubusercontent.com/1294454/152485636-38b19e4a-bece-4dec-979a-5982859ffc04.jpg)](https://www.okx.com/join/1888677)                                                                | okx          | [OKX](https://www.okx.com/join/1888677)                                                                 | [![API Version 5](https://img.shields.io/badge/5-lightgray)](https://www.okx.com/docs-v5/en/)                     | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                                                  |\n\n## Supported Cryptocurrency Exchange Markets\n\nThe CCXT library currently supports the following 105 cryptocurrency exchange markets and trading APIs:\n\n| logo                                                                                                                                                                                                            | id                 | name                                                                                                    | ver                                                                                                                                                | certified                                                                                                                   | pro                                                                          |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|---------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------|\n| [![ace](https://user-images.githubusercontent.com/1294454/216908003-fb314cf6-e66e-471c-b91d-1d86e4baaa90.jpg)](https://ace.io/)                                                                                 | ace                | [ACE](https://ace.io/)                                                                                  | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://github.com/ace-exchange/ace-offical-api-docs)                                 |                                                                                                                             |                                                                              |\n| [![alpaca](https://user-images.githubusercontent.com/1294454/187234005-b864db3d-f1e3-447a-aaf9-a9fc7b955d07.jpg)](https://alpaca.markets)                                                                       | alpaca             | [Alpaca](https://alpaca.markets)                                                                        | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://alpaca.markets/docs/)                                                         |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![ascendex](https://user-images.githubusercontent.com/1294454/112027508-47984600-8b48-11eb-9e17-d26459cc36c6.jpg)](https://ascendex.com/en-us/register?inviteCode=EL6BXBQM)                                    | ascendex           | [AscendEX](https://ascendex.com/en-us/register?inviteCode=EL6BXBQM)                                     | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://ascendex.github.io/ascendex-pro-api/#ascendex-pro-api-documentation)          |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bequant](https://user-images.githubusercontent.com/1294454/55248342-a75dfe00-525a-11e9-8aa2-05e9dca943c6.jpg)](https://bequant.io)                                                                           | bequant            | [Bequant](https://bequant.io)                                                                           | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://api.bequant.io/)                                                              |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bigone](https://user-images.githubusercontent.com/1294454/69354403-1d532180-0c91-11ea-88ed-44c06cefdf87.jpg)](https://b1.run/users/new?code=D3LLBVFT)                                                        | bigone             | [BigONE](https://b1.run/users/new?code=D3LLBVFT)                                                        | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://open.big.one/docs/api.html)                                                   |                                                                                                                             |                                                                              |\n| [![binance](https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                        | binance            | [Binance](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                        | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/spot/en)                                       | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![binancecoinm](https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                  | binancecoinm       | [Binance COIN-M](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                 | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/delivery/en/)                                  | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![binanceus](https://user-images.githubusercontent.com/1294454/65177307-217b7c80-da5f-11e9-876e-0b748ba0a358.jpg)](https://www.binance.us/?ref=35005074)                                                       | binanceus          | [Binance US](https://www.binance.us/?ref=35005074)                                                      | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://github.com/binance-us/binance-official-api-docs)                              |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![binanceusdm](https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                   | binanceusdm        | [Binance USD\u24c8-M](https://accounts.binance.com/en/register?ref=D7YA7CLY)                                 | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/futures/en/)                                   | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bit2c](https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg)](https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf)                                   | bit2c              | [Bit2C](https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf)                                   | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://www.bit2c.co.il/home/api)                                                     |                                                                                                                             |                                                                              |\n| [![bitbank](https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg)](https://bitbank.cc/)                                                                          | bitbank            | [bitbank](https://bitbank.cc/)                                                                          | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.bitbank.cc/)                                                             |                                                                                                                             |                                                                              |\n| [![bitbns](https://user-images.githubusercontent.com/1294454/117201933-e7a6e780-adf5-11eb-9d80-98fc2a21c3d6.jpg)](https://ref.bitbns.com/1090961)                                                               | bitbns             | [Bitbns](https://ref.bitbns.com/1090961)                                                                | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://bitbns.com/trade/#/api-trading/)                                              |                                                                                                                             |                                                                              |\n| [![bitfinex](https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg)](https://www.bitfinex.com/?refcode=P61eYxFL)                                                  | bitfinex           | [Bitfinex](https://www.bitfinex.com/?refcode=P61eYxFL)                                                  | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.bitfinex.com/v1/docs)                                                    |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bitfinex2](https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg)](https://www.bitfinex.com)                                                                   | bitfinex2          | [Bitfinex](https://www.bitfinex.com)                                                                    | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.bitfinex.com/v2/docs/)                                                   |                                                                                                                             |                                                                              |\n| [![bitflyer](https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg)](https://bitflyer.com)                                                                        | bitflyer           | [bitFlyer](https://bitflyer.com)                                                                        | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://lightning.bitflyer.com/docs?lang=en)                                          |                                                                                                                             |                                                                              |\n| [![bitforex](https://user-images.githubusercontent.com/51840849/87295553-1160ec00-c50e-11ea-8ea0-df79276a9646.jpg)](https://www.bitforex.com/en/invitationRegister?inviterId=1867438)                           | bitforex           | [Bitforex](https://www.bitforex.com/en/invitationRegister?inviterId=1867438)                            | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://github.com/githubdev2020/API_Doc_en/wiki)                                     |                                                                                                                             |                                                                              |\n| [![bitget](https://user-images.githubusercontent.com/1294454/195989417-4253ddb0-afbe-4a1c-9dea-9dbcd121fa5d.jpg)](https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j)                | bitget             | [Bitget](https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j)                 | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://bitgetlimited.github.io/apidoc/en/mix)                                        | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bithumb](https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg)](https://www.bithumb.com)                                                                      | bithumb            | [Bithumb](https://www.bithumb.com)                                                                      | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://apidocs.bithumb.com)                                                          |                                                                                                                             |                                                                              |\n| [![bitmart](https://user-images.githubusercontent.com/1294454/129991357-8f47464b-d0f4-41d6-8a82-34122f0d1398.jpg)](http://www.bitmart.com/?r=rQCFLh)                                                            | bitmart            | [BitMart](http://www.bitmart.com/?r=rQCFLh)                                                             | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://developer-pro.bitmart.com/)                                                   | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bitmex](https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg)](https://www.bitmex.com/register/upZpOX)                                                        | bitmex             | [BitMEX](https://www.bitmex.com/register/upZpOX)                                                        | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://www.bitmex.com/app/apiOverview)                                               |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bitopro](https://user-images.githubusercontent.com/1294454/158227251-3a92a220-9222-453c-9277-977c6677fe71.jpg)](https://www.bitopro.com)                                                                     | bitopro            | [BitoPro](https://www.bitopro.com)                                                                      | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://github.com/bitoex/bitopro-offical-api-docs/blob/master/v3-1/rest-1/rest.md)   |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bitpanda](https://user-images.githubusercontent.com/51840849/87591171-9a377d80-c6f0-11ea-94ac-97a126eac3bc.jpg)](https://www.bitpanda.com/en/pro)                                                            | bitpanda           | [Bitpanda Pro](https://www.bitpanda.com/en/pro)                                                         | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://developers.bitpanda.com/exchange/)                                            |                                                                                                                             |                                                                              |\n| [![bitrue](https://user-images.githubusercontent.com/1294454/139516488-243a830d-05dd-446b-91c6-c1f18fe30c63.jpg)](https://www.bitrue.com/activity/task/task-landing?inviteCode=EZWETQE&cn=900000)               | bitrue             | [Bitrue](https://www.bitrue.com/activity/task/task-landing?inviteCode=EZWETQE&cn=900000)                | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://github.com/Bitrue-exchange/bitrue-official-api-docs)                          |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bitso](https://user-images.githubusercontent.com/51840849/87295554-11f98280-c50e-11ea-80d6-15b3bafa8cbf.jpg)](https://bitso.com/?ref=itej)                                                                   | bitso              | [Bitso](https://bitso.com/?ref=itej)                                                                    | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://bitso.com/api_info)                                                           |                                                                                                                             |                                                                              |\n| [![bitstamp](https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg)](https://www.bitstamp.net)                                                                    | bitstamp           | [Bitstamp](https://www.bitstamp.net)                                                                    | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://www.bitstamp.net/api)                                                         |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bitstamp1](https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg)](https://www.bitstamp.net)                                                                   | bitstamp1          | [Bitstamp](https://www.bitstamp.net)                                                                    | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://www.bitstamp.net/api)                                                         |                                                                                                                             |                                                                              |\n| [![bittrex](https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg)](https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B)                               | bittrex            | [Bittrex](https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B)                                | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://bittrex.github.io/api/v3)                                                     |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bitvavo](https://user-images.githubusercontent.com/1294454/169202626-bd130fc5-fcf9-41bb-8d97-6093225c73cd.jpg)](https://bitvavo.com/?a=24F34952F7)                                                           | bitvavo            | [Bitvavo](https://bitvavo.com/?a=24F34952F7)                                                            | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.bitvavo.com/)                                                            | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![bkex](https://user-images.githubusercontent.com/1294454/158043180-bb079a65-69e8-45a2-b393-f094d334e610.jpg)](https://www.bkex.com/)                                                                          | bkex               | [BKEX](https://www.bkex.com/)                                                                           | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://bkexapi.github.io/docs/api_en.htm)                                            |                                                                                                                             |                                                                              |\n| [![bl3p](https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg)](https://bl3p.eu)                                                                                 | bl3p               | [BL3P](https://bl3p.eu)                                                                                 | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://github.com/BitonicNL/bl3p-api/tree/master/docs)                               |                                                                                                                             |                                                                              |\n| [![blockchaincom](https://user-images.githubusercontent.com/1294454/147515585-1296e91b-7398-45e5-9d32-f6121538533f.jpeg)](https://blockchain.com)                                                               | blockchaincom      | [Blockchain.com](https://blockchain.com)                                                                | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://api.blockchain.com/v3)                                                        |                                                                                                                             |                                                                              |\n| [![btcalpha](https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg)](https://btc-alpha.com/?r=123788)                                                             | btcalpha           | [BTC-Alpha](https://btc-alpha.com/?r=123788)                                                            | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://btc-alpha.github.io/api-docs)                                                 |                                                                                                                             |                                                                              |\n| [![btcbox](https://user-images.githubusercontent.com/51840849/87327317-98c55400-c53c-11ea-9a11-81f7d951cc74.jpg)](https://www.btcbox.co.jp/)                                                                    | btcbox             | [BtcBox](https://www.btcbox.co.jp/)                                                                     | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://blog.btcbox.jp/en/archives/8762)                                              |                                                                                                                             |                                                                              |\n| [![btcex](https://user-images.githubusercontent.com/1294454/173489620-d49807a4-55cd-4f4e-aca9-534921298bbf.jpg)](https://www.btcex.com/en-us/register?i=48biatg1)                                               | btcex              | [BTCEX](https://www.btcex.com/en-us/register?i=48biatg1)                                                | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.btcex.com/)                                                              |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![btcmarkets](https://user-images.githubusercontent.com/51840849/89731817-b3fb8480-da52-11ea-817f-783b08aaf32b.jpg)](https://btcmarkets.net)                                                                   | btcmarkets         | [BTC Markets](https://btcmarkets.net)                                                                   | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://api.btcmarkets.net/doc/v3)                                                    |                                                                                                                             |                                                                              |\n| [![btctradeua](https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg)](https://btc-trade.com.ua/registration/22689)                                               | btctradeua         | [BTC Trade UA](https://btc-trade.com.ua/registration/22689)                                             | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit) |                                                                                                                             |                                                                              |\n| [![btcturk](https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg)](https://www.btcturk.com)                                                                     | btcturk            | [BTCTurk](https://www.btcturk.com)                                                                      | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://github.com/BTCTrader/broker-api-docs)                                         |                                                                                                                             |                                                                              |\n| [![buda](https://user-images.githubusercontent.com/1294454/47380619-8a029200-d706-11e8-91e0-8a391fe48de3.jpg)](https://www.buda.com)                                                                            | buda               | [Buda](https://www.buda.com)                                                                            | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://api.buda.com)                                                                 |                                                                                                                             |                                                                              |\n| [![bybit](https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg)](https://www.bybit.com/register?affiliate_id=35953)                                             | bybit              | [Bybit](https://www.bybit.com/register?affiliate_id=35953)                                              | [![API Version 5](https://img.shields.io/badge/5-lightgray)](https://bybit-exchange.github.io/docs/inverse/)                                       | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![cex](https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg)](https://cex.io/r/0/up105393824/0/)                                                                | cex                | [CEX.IO](https://cex.io/r/0/up105393824/0/)                                                             | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://cex.io/cex-api)                                                               |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![coinbase](https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg)](https://www.coinbase.com/join/58cbe25a355148797479dbd2)                                      | coinbase           | [Coinbase](https://www.coinbase.com/join/58cbe25a355148797479dbd2)                                      | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://developers.coinbase.com/api/v2)                                               |                                                                                                                             |                                                                              |\n| [![coinbaseprime](https://user-images.githubusercontent.com/1294454/44539184-29f26e00-a70c-11e8-868f-e907fc236a7c.jpg)](https://exchange.coinbase.com)                                                          | coinbaseprime      | [Coinbase Prime](https://exchange.coinbase.com)                                                         | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://docs.exchange.coinbase.com)                                                   |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![coinbasepro](https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg)](https://pro.coinbase.com/)                                                                | coinbasepro        | [Coinbase Pro](https://pro.coinbase.com/)                                                               | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://docs.pro.coinbase.com)                                                        |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![coincheck](https://user-images.githubusercontent.com/51840849/87182088-1d6d6380-c2ec-11ea-9c64-8ab9f9b289f5.jpg)](https://coincheck.com)                                                                     | coincheck          | [coincheck](https://coincheck.com)                                                                      | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://coincheck.com/documents/exchange/api)                                         |                                                                                                                             |                                                                              |\n| [![coinex](https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg)](https://www.coinex.com/register?refer_code=yw5fz)                                             | coinex             | [CoinEx](https://www.coinex.com/register?refer_code=yw5fz)                                              | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://github.com/coinexcom/coinex_exchange_api/wiki)                                |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![coinfalcon](https://user-images.githubusercontent.com/1294454/41822275-ed982188-77f5-11e8-92bb-496bcd14ca52.jpg)](https://coinfalcon.com/?ref=CFJSVGTUPASB)                                                  | coinfalcon         | [CoinFalcon](https://coinfalcon.com/?ref=CFJSVGTUPASB)                                                  | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.coinfalcon.com)                                                          |                                                                                                                             |                                                                              |\n| [![coinmate](https://user-images.githubusercontent.com/51840849/87460806-1c9f3f00-c616-11ea-8c46-a77018a8f3f4.jpg)](https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0)                   | coinmate           | [CoinMate](https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0)                    | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://coinmate.docs.apiary.io)                                                      |                                                                                                                             |                                                                              |\n| [![coinone](https://user-images.githubusercontent.com/1294454/38003300-adc12fba-323f-11e8-8525-725f53c4a659.jpg)](https://coinone.co.kr)                                                                        | coinone            | [CoinOne](https://coinone.co.kr)                                                                        | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://doc.coinone.co.kr)                                                            |                                                                                                                             |                                                                              |\n| [![coinspot](https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg)](https://www.coinspot.com.au/register?code=PJURCU)                                            | coinspot           | [CoinSpot](https://www.coinspot.com.au/register?code=PJURCU)                                            | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://www.coinspot.com.au/api)                                                      |                                                                                                                             |                                                                              |\n| [![cryptocom](https://user-images.githubusercontent.com/1294454/147792121-38ed5e36-c229-48d6-b49a-48d05fc19ed4.jpeg)](https://crypto.com/exch/5835vstech)                                                       | cryptocom          | [Crypto.com](https://crypto.com/exch/5835vstech)                                                        | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html)                      |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![currencycom](https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg)](https://currency.com/trading/signup?c=362jaimv&pid=referral)                              | currencycom        | [Currency.com](https://currency.com/trading/signup?c=362jaimv&pid=referral)                             | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://currency.com/api)                                                             |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![delta](https://user-images.githubusercontent.com/1294454/99450025-3be60a00-2931-11eb-9302-f4fd8d8589aa.jpg)](https://www.delta.exchange/app/signup/?code=IULYNB)                                             | delta              | [Delta Exchange](https://www.delta.exchange/app/signup/?code=IULYNB)                                    | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.delta.exchange)                                                          |                                                                                                                             |                                                                              |\n| [![deribit](https://user-images.githubusercontent.com/1294454/41933112-9e2dd65a-798b-11e8-8440-5bab2959fcb8.jpg)](https://www.deribit.com/reg-1189.4038)                                                        | deribit            | [Deribit](https://www.deribit.com/reg-1189.4038)                                                        | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.deribit.com/v2)                                                          |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![digifinex](https://user-images.githubusercontent.com/51840849/87443315-01283a00-c5fe-11ea-8628-c2a0feaf07ac.jpg)](https://www.digifinex.com/en-ww/from/DhOzBg?channelCode=ljaUPp)                            | digifinex          | [DigiFinex](https://www.digifinex.com/en-ww/from/DhOzBg?channelCode=ljaUPp)                             | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://docs.digifinex.com)                                                           |                                                                                                                             |                                                                              |\n| [![exmo](https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg)](https://exmo.me/?ref=131685)                                                                     | exmo               | [EXMO](https://exmo.me/?ref=131685)                                                                     | [![API Version 1.1](https://img.shields.io/badge/1.1-lightgray)](https://exmo.me/en/api_doc?ref=131685)                                            |                                                                                                                             |                                                                              |\n| [![flowbtc](https://user-images.githubusercontent.com/51840849/87443317-01c0d080-c5fe-11ea-95c2-9ebe1a8fafd9.jpg)](https://one.ndax.io/bfQiSL)                                                                  | flowbtc            | [flowBTC](https://one.ndax.io/bfQiSL)                                                                   | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://www.flowbtc.com.br/api.html)                                                  |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![fmfwio](https://user-images.githubusercontent.com/1294454/159177712-b685b40c-5269-4cea-ac83-f7894c49525d.jpg)](https://fmfw.io/referral/da948b21d6c92d69)                                                    | fmfwio             | [FMFW.io](https://fmfw.io/referral/da948b21d6c92d69)                                                    | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://api.fmfw.io/api/2/explore/)                                                   |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![gate](https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg)](https://www.gate.io/ref/2436035)                                                                 | gate               | [Gate.io](https://www.gate.io/ref/2436035)                                                              | [![API Version 4](https://img.shields.io/badge/4-lightgray)](https://www.gate.io/docs/apiv4/en/index.html)                                         | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![gemini](https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg)](https://gemini.com/)                                                                           | gemini             | [Gemini](https://gemini.com/)                                                                           | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.gemini.com/rest-api)                                                     |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![hitbtc](https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg)](https://hitbtc.com/?ref_id=5a5d39a65d466)                                                      | hitbtc             | [HitBTC](https://hitbtc.com/?ref_id=5a5d39a65d466)                                                      | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://api.hitbtc.com/v2)                                                            |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![hitbtc3](https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg)](https://hitbtc.com/?ref_id=5a5d39a65d466)                                                     | hitbtc3            | [HitBTC](https://hitbtc.com/?ref_id=5a5d39a65d466)                                                      | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://api.hitbtc.com)                                                               |                                                                                                                             |                                                                              |\n| [![hollaex](https://user-images.githubusercontent.com/1294454/75841031-ca375180-5ddd-11ea-8417-b975674c23cb.jpg)](https://pro.hollaex.com/signup?affiliation_code=QSWA6G)                                       | hollaex            | [HollaEx](https://pro.hollaex.com/signup?affiliation_code=QSWA6G)                                       | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://apidocs.hollaex.com)                                                          |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![huobi](https://user-images.githubusercontent.com/1294454/76137448-22748a80-604e-11ea-8069-6e389271911d.jpg)](https://www.huobi.com/en-us/v/register/double-invite/?inviter_id=11343840&invite_code=6rmm2223) | huobi              | [Huobi](https://www.huobi.com/en-us/v/register/double-invite/?inviter_id=11343840&invite_code=6rmm2223) | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://huobiapi.github.io/docs/spot/v1/en/)                                          | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![huobijp](https://user-images.githubusercontent.com/1294454/85734211-85755480-b705-11ea-8b35-0b7f1db33a2f.jpg)](https://www.huobi.co.jp/register/?invite_code=znnq3)                                          | huobijp            | [Huobi Japan](https://www.huobi.co.jp/register/?invite_code=znnq3)                                      | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://api-doc.huobi.co.jp)                                                          |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![idex](https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg)](https://idex.io)                                                                                | idex               | [IDEX](https://idex.io)                                                                                 | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://docs.idex.io/)                                                                | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![independentreserve](https://user-images.githubusercontent.com/51840849/87182090-1e9e9080-c2ec-11ea-8e49-563db9a38f37.jpg)](https://www.independentreserve.com)                                               | independentreserve | [Independent Reserve](https://www.independentreserve.com)                                               | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://www.independentreserve.com/API)                                               |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![indodax](https://user-images.githubusercontent.com/51840849/87070508-9358c880-c221-11ea-8dc5-5391afbbb422.jpg)](https://indodax.com/ref/testbitcoincoid/1)                                                   | indodax            | [INDODAX](https://indodax.com/ref/testbitcoincoid/1)                                                    | [![API Version 2.0](https://img.shields.io/badge/2.0-lightgray)](https://github.com/btcid/indodax-official-api-docs)                               |                                                                                                                             |                                                                              |\n| [![itbit](https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg)](https://www.itbit.com)                                                                          | itbit              | [itBit](https://www.itbit.com)                                                                          | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://api.itbit.com/docs)                                                           |                                                                                                                             |                                                                              |\n| [![kraken](https://user-images.githubusercontent.com/51840849/76173629-fc67fb00-61b1-11ea-84fe-f2de582f58a3.jpg)](https://www.kraken.com)                                                                       | kraken             | [Kraken](https://www.kraken.com)                                                                        | [![API Version 0](https://img.shields.io/badge/0-lightgray)](https://www.kraken.com/features/api)                                                  |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![krakenfutures](https://user-images.githubusercontent.com/24300605/81436764-b22fd580-9172-11ea-9703-742783e6376d.jpg)](https://futures.kraken.com/)                                                           | krakenfutures      | [Kraken Futures](https://futures.kraken.com/)                                                           | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://support.kraken.com/hc/en-us/categories/360001806372-Futures-API)              |                                                                                                                             |                                                                              |\n| [![kucoin](https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg)](https://www.kucoin.com/ucenter/signup?rcode=E5wkqe)                                           | kucoin             | [KuCoin](https://www.kucoin.com/ucenter/signup?rcode=E5wkqe)                                            | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.kucoin.com)                                                              | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![kucoinfutures](https://user-images.githubusercontent.com/1294454/147508995-9e35030a-d046-43a1-a006-6fabd981b554.jpg)](https://futures.kucoin.com/?rcode=E5wkqe)                                              | kucoinfutures      | [KuCoin Futures](https://futures.kucoin.com/?rcode=E5wkqe)                                              | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.kucoin.com/futures)                                                      |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![kuna](https://user-images.githubusercontent.com/51840849/87153927-f0578b80-c2c0-11ea-84b6-74612568e9e1.jpg)](https://kuna.io?r=kunaid-gvfihe8az7o4)                                                          | kuna               | [Kuna](https://kuna.io?r=kunaid-gvfihe8az7o4)                                                           | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://kuna.io/documents/api)                                                        |                                                                                                                             |                                                                              |\n| [![latoken](https://user-images.githubusercontent.com/1294454/61511972-24c39f00-aa01-11e9-9f7c-471f1d6e5214.jpg)](https://latoken.com/invite?r=mvgp2djk)                                                        | latoken            | [Latoken](https://latoken.com/invite?r=mvgp2djk)                                                        | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://api.latoken.com)                                                              |                                                                                                                             |                                                                              |\n| [![lbank](https://user-images.githubusercontent.com/1294454/38063602-9605e28a-3302-11e8-81be-64b1e53c4cfb.jpg)](https://www.lbank.info/invitevip?icode=7QCY)                                                    | lbank              | [LBank](https://www.lbank.info/invitevip?icode=7QCY)                                                    | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://github.com/LBank-exchange/lbank-official-api-docs)                            |                                                                                                                             |                                                                              |\n| [![lbank2](https://user-images.githubusercontent.com/1294454/38063602-9605e28a-3302-11e8-81be-64b1e53c4cfb.jpg)](https://www.lbank.info/invitevip?icode=7QCY)                                                   | lbank2             | [LBank](https://www.lbank.info/invitevip?icode=7QCY)                                                    | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://www.lbank.info/en-US/docs/index.html)                                         |                                                                                                                             |                                                                              |\n| [![luno](https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg)](https://www.luno.com/invite/44893A)                                                              | luno               | [luno](https://www.luno.com/invite/44893A)                                                              | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://www.luno.com/en/api)                                                          |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![lykke](https://user-images.githubusercontent.com/1294454/155840500-1ea4fdf0-47c0-4daa-9597-c6c1cd51b9ec.jpg)](https://www.lykke.com)                                                                         | lykke              | [Lykke](https://www.lykke.com)                                                                          | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://hft-apiv2.lykke.com/swagger/ui/index.html)                                    |                                                                                                                             |                                                                              |\n| [![mercado](https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg)](https://www.mercadobitcoin.com.br)                                                            | mercado            | [Mercado Bitcoin](https://www.mercadobitcoin.com.br)                                                    | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://www.mercadobitcoin.com.br/api-doc)                                            |                                                                                                                             |                                                                              |\n| [![mexc](https://user-images.githubusercontent.com/1294454/137283979-8b2a818d-8633-461b-bfca-de89e8c446b2.jpg)](https://m.mexc.com/auth/signup?inviteCode=1FQ1G)                                                | mexc               | [MEXC Global](https://m.mexc.com/auth/signup?inviteCode=1FQ1G)                                          | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://mxcdevelop.github.io/APIDoc/)                                                 | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![mexc3](https://user-images.githubusercontent.com/1294454/137283979-8b2a818d-8633-461b-bfca-de89e8c446b2.jpg)](https://m.mexc.com/auth/signup?inviteCode=1FQ1G)                                               | mexc3              | [MEXC Global](https://m.mexc.com/auth/signup?inviteCode=1FQ1G)                                          | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://mxcdevelop.github.io/apidocs/spot_v3_en/)                                     |                                                                                                                             |                                                                              |\n| [![ndax](https://user-images.githubusercontent.com/1294454/108623144-67a3ef00-744e-11eb-8140-75c6b851e945.jpg)](https://one.ndax.io/bfQiSL)                                                                     | ndax               | [NDAX](https://one.ndax.io/bfQiSL)                                                                      | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://apidoc.ndax.io/)                                                              |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![novadax](https://user-images.githubusercontent.com/1294454/92337550-2b085500-f0b3-11ea-98e7-5794fb07dd3b.jpg)](https://www.novadax.com.br/?s=ccxt)                                                           | novadax            | [NovaDAX](https://www.novadax.com.br/?s=ccxt)                                                           | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://doc.novadax.com/pt-BR/)                                                       |                                                                                                                             |                                                                              |\n| [![oceanex](https://user-images.githubusercontent.com/1294454/58385970-794e2d80-8001-11e9-889c-0567cd79b78e.jpg)](https://oceanex.pro/signup?referral=VE24QX)                                                   | oceanex            | [OceanEx](https://oceanex.pro/signup?referral=VE24QX)                                                   | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://api.oceanex.pro/doc/v1)                                                       |                                                                                                                             |                                                                              |\n| [![okcoin](https://user-images.githubusercontent.com/51840849/87295551-102fbf00-c50e-11ea-90a9-462eebba5829.jpg)](https://www.okcoin.com/account/register?flag=activity&channelId=600001513)                    | okcoin             | [OKCoin](https://www.okcoin.com/account/register?flag=activity&channelId=600001513)                     | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://www.okcoin.com/docs/en/)                                                      |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![okx](https://user-images.githubusercontent.com/1294454/152485636-38b19e4a-bece-4dec-979a-5982859ffc04.jpg)](https://www.okx.com/join/1888677)                                                                | okx                | [OKX](https://www.okx.com/join/1888677)                                                                 | [![API Version 5](https://img.shields.io/badge/5-lightgray)](https://www.okx.com/docs-v5/en/)                                                      | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![paymium](https://user-images.githubusercontent.com/51840849/87153930-f0f02200-c2c0-11ea-9c0a-40337375ae89.jpg)](https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj)                          | paymium            | [Paymium](https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj)                           | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://github.com/Paymium/api-documentation)                                         |                                                                                                                             |                                                                              |\n| [![phemex](https://user-images.githubusercontent.com/1294454/85225056-221eb600-b3d7-11ea-930d-564d2690e3f6.jpg)](https://phemex.com/register?referralCode=EDNVJ)                                                | phemex             | [Phemex](https://phemex.com/register?referralCode=EDNVJ)                                                | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://github.com/phemex/phemex-api-docs)                                            |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![poloniex](https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg)](https://poloniex.com/signup?c=UBFZJRPJ)                                                      | poloniex           | [Poloniex](https://poloniex.com/signup?c=UBFZJRPJ)                                                      | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://docs.poloniex.com)                                                            |                                                                                                                             |                                                                              |\n| [![poloniexfutures](https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg)](https://poloniex.com/signup?c=UBFZJRPJ)                                               | poloniexfutures    | [Poloniex Futures](https://poloniex.com/signup?c=UBFZJRPJ)                                              | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://futures-docs.poloniex.com)                                                    |                                                                                                                             |                                                                              |\n| [![probit](https://user-images.githubusercontent.com/51840849/79268032-c4379480-7ea2-11ea-80b3-dd96bb29fd0d.jpg)](https://www.probit.com/r/34608773)                                                            | probit             | [ProBit](https://www.probit.com/r/34608773)                                                             | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs-en.probit.com)                                                           |                                                                                                                             |                                                                              |\n| [![ripio](https://user-images.githubusercontent.com/1294454/94507548-a83d6a80-0218-11eb-9998-28b9cec54165.jpg)](https://exchange.ripio.com)                                                                     | ripio              | [Ripio](https://exchange.ripio.com)                                                                     | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://exchange.ripio.com/en/api/)                                                   |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![stex](https://user-images.githubusercontent.com/1294454/69680782-03fd0b80-10bd-11ea-909e-7f603500e9cc.jpg)](https://app.stex.com?ref=36416021)                                                               | stex               | [STEX](https://app.stex.com?ref=36416021)                                                               | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://apidocs.stex.com/)                                                            |                                                                                                                             |                                                                              |\n| [![tidex](https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg)](https://tidex.com/exchange)                                                                     | tidex              | [Tidex](https://tidex.com/exchange)                                                                     | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://tidex.com/exchange/public-api)                                                |                                                                                                                             |                                                                              |\n| [![timex](https://user-images.githubusercontent.com/1294454/70423869-6839ab00-1a7f-11ea-8f94-13ae72c31115.jpg)](https://timex.io/?refcode=1x27vNkTbP1uwkCck)                                                    | timex              | [TimeX](https://timex.io/?refcode=1x27vNkTbP1uwkCck)                                                    | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.timex.io)                                                                |                                                                                                                             |                                                                              |\n| [![tokocrypto](https://user-images.githubusercontent.com/1294454/183870484-d3398d0c-f6a1-4cce-91b8-d58792308716.jpg)](https://tokocrypto.com)                                                                   | tokocrypto         | [Tokocrypto](https://tokocrypto.com)                                                                    | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://www.tokocrypto.com/apidocs/)                                                  |                                                                                                                             |                                                                              |\n| [![upbit](https://user-images.githubusercontent.com/1294454/49245610-eeaabe00-f423-11e8-9cba-4b0aed794799.jpg)](https://upbit.com)                                                                              | upbit              | [Upbit](https://upbit.com)                                                                              | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.upbit.com/docs/%EC%9A%94%EC%B2%AD-%EC%88%98-%EC%A0%9C%ED%95%9C)          |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![wavesexchange](https://user-images.githubusercontent.com/1294454/84547058-5fb27d80-ad0b-11ea-8711-78ac8b3c7f31.jpg)](https://waves.exchange)                                                                 | wavesexchange      | [Waves.Exchange](https://waves.exchange)                                                                | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://docs.waves.exchange)                                                          |                                                                                                                             |                                                                              |\n| [![wazirx](https://user-images.githubusercontent.com/1294454/148647666-c109c20b-f8ac-472f-91c3-5f658cb90f49.jpeg)](https://wazirx.com/invite/k7rrnks5)                                                          | wazirx             | [WazirX](https://wazirx.com/invite/k7rrnks5)                                                            | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.wazirx.com/#public-rest-api-for-wazirx)                                  |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![whitebit](https://user-images.githubusercontent.com/1294454/66732963-8eb7dd00-ee66-11e9-849b-10d9282bb9e0.jpg)](https://whitebit.com/referral/d9bdf40e-28f2-4b52-b2f9-cd1415d82963)                          | whitebit           | [WhiteBit](https://whitebit.com/referral/d9bdf40e-28f2-4b52-b2f9-cd1415d82963)                          | [![API Version 4](https://img.shields.io/badge/4-lightgray)](https://github.com/whitebit-exchange/api-docs)                                        |                                                                                                                             |                                                                              |\n| [![woo](https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg)](https://referral.woo.org/BAJS6oNmZb3vi3RGA)                                                      | woo                | [WOO X](https://referral.woo.org/BAJS6oNmZb3vi3RGA)                                                     | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.woo.org/)                                                                |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![yobit](https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg)](https://www.yobit.net)                                                                          | yobit              | [YoBit](https://www.yobit.net)                                                                          | [![API Version 3](https://img.shields.io/badge/3-lightgray)](https://www.yobit.net/en/api/)                                                        |                                                                                                                             |                                                                              |\n| [![zaif](https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg)](https://zaif.jp)                                                                                 | zaif               | [Zaif](https://zaif.jp)                                                                                 | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://techbureau-api-document.readthedocs.io/ja/latest/index.html)                  |                                                                                                                             |                                                                              |\n| [![zb](https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg)](https://www.zb.com/en/register?ref=4301lera)                                                       | zb                 | [ZB](https://www.zb.com/en/register?ref=4301lera)                                                       | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://www.zb.com/i/developer)                                                       |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n| [![zonda](https://user-images.githubusercontent.com/1294454/159202310-a0e38007-5e7c-4ba9-a32f-c8263a0291fe.jpg)](https://auth.zondaglobal.com/ref/jHlbB4mIkdS1)                                                 | zonda              | [Zonda](https://auth.zondaglobal.com/ref/jHlbB4mIkdS1)                                                  | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://docs.zonda.exchange/)                                                         |                                                                                                                             |                                                                              |\n\nThe list above is updated frequently, new crypto markets, exchanges, bug fixes, and API endpoints are introduced on a regular basis. See the [Manual](https://docs.ccxt.com/en/latest/manual.html) for more details. If you can't find a cryptocurrency exchange in the list above and want it to be added, post a link to it by opening an issue here on GitHub or send us an email.\n\nThe library is under [MIT license](https://github.com/ccxt/ccxt/blob/master/LICENSE.txt), that means it's absolutely free for any developer to build commercial and opensource software on top of it, but use it at your own risk with no warranties, as is.\n\n---\n\n## Install\n\nThe easiest way to install the CCXT library is to use a package manager:\n\n- [ccxt in **NPM**](https://www.npmjs.com/package/ccxt) (JavaScript / Node v7.6+)\n- [ccxt in **PyPI**](https://pypi.python.org/pypi/ccxt) (Python 3.5.3+)\n- [ccxt in **Packagist/Composer**](https://packagist.org/packages/ccxt/ccxt) (PHP 7.0+)\n\nThis library is shipped as an all-in-one module implementation with minimalistic dependencies and requirements:\n\n- [js/](https://github.com/ccxt/ccxt/blob/master/js/) in JavaScript\n- [python/](https://github.com/ccxt/ccxt/blob/master/python/) in Python (generated from JS)\n- [php/](https://github.com/ccxt/ccxt/blob/master/php/) in PHP (generated from JS)\n\nYou can also clone it into your project directory from [ccxt GitHub repository](https://github.com/ccxt/ccxt):\n\n```shell\ngit clone https://github.com/ccxt/ccxt.git  # including 1GB of commit history\n\n# or\n\ngit clone https://github.com/ccxt/ccxt.git --depth 1  # avoid downloading 1GB of commit history\n```\n\n### JavaScript (NPM)\n\nJavaScript version of CCXT works in both Node and web browsers. Requires ES6 and `async/await` syntax support (Node 7.6.0+). When compiling with Webpack and Babel, make sure it is [not excluded](https://github.com/ccxt/ccxt/issues/225#issuecomment-331905178) in your `babel-loader` config.\n\n[ccxt in **NPM**](https://www.npmjs.com/package/ccxt)\n\n```shell\nnpm install ccxt\n```\n\n```JavaScript\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n### JavaScript (for use with the `<script>` tag):\n\nAll-in-one browser bundle (dependencies included), served from a CDN of your choice:\n\n* jsDelivr: https://cdn.jsdelivr.net/npm/ccxt@2.8.98/dist/ccxt.browser.js\n* unpkg: https://unpkg.com/ccxt@2.8.98/dist/ccxt.browser.js\n\nCDNs are not updated in real-time and may have delays. Defaulting to the most recent version without specifying the version number is not recommended. Please, keep in mind that we are not responsible for the correct operation of those CDN servers.\n\n```HTML\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@2.8.98/dist/ccxt.browser.js\"></script>\n```\n\nCreates a global `ccxt` object:\n\n```JavaScript\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n### Python\n\n[ccxt in **PyPI**](https://pypi.python.org/pypi/ccxt)\n\n```shell\npip install ccxt\n```\n\n```Python\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\nThe library supports concurrent asynchronous mode with asyncio and async/await in Python 3.5.3+\n\n```Python\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n### PHP\n\n[ccxt in PHP with **Packagist/Composer**](https://packagist.org/packages/ccxt/ccxt) (PHP 7.0+)\n\nIt requires common PHP modules:\n\n- cURL\n- mbstring (using UTF-8 is highly recommended)\n- PCRE\n- iconv\n- gmp (this is a built-in extension as of PHP 7.2+)\n\n```PHP\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\nThe library supports concurrent asynchronous mode using tools from [RecoilPHP](https://github.com/recoilphp/recoil) and [ReactPHP](https://reactphp.org/) in PHP 7.1+. Read the [Manual](https://docs.ccxt.com/en/latest/manual.html) for more details.\n\n### Docker\n\nYou can get CCXT installed in a container along with all the supported languages and dependencies. This may be useful if you want to contribute to CCXT (e.g. run the build scripts and tests \u2014 please see the [Contributing](https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md) document for the details on that).\n\nUsing `docker-compose` (in the cloned CCXT repository):\n\n```shell\ndocker-compose run --rm ccxt\n```\n\nYou don't need the Docker image if you're not going to develop CCXT. If you just want to use CCXT \u2013\u00a0just install it as a regular package into your project.\n\n---\n\n## Documentation\n\nRead the [Manual](https://docs.ccxt.com/en/latest/manual.html) for more details.\n\n## Usage\n\n### Intro\n\nThe CCXT library consists of a public part and a private part. Anyone can use the public part immediately after installation. Public APIs provide unrestricted access to public information for all exchange markets without the need to register a user account or have an API key.\n\nPublic APIs include the following:\n\n- market data\n- instruments/trading pairs\n- price feeds (exchange rates)\n- order books\n- trade history\n- tickers\n- OHLC(V) for charting\n- other public endpoints\n\nIn order to trade with private APIs you need to obtain API keys from an exchange's website. It usually means signing up to the exchange and creating API keys for your account. Some exchanges require personal info or identification. Sometimes verification may be necessary as well. In this case you will need to register yourself, this library will not create accounts or API keys for you. Some exchanges expose API endpoints for registering an account, but most exchanges don't. You will have to sign up and create API keys on their websites.\n\nPrivate APIs allow the following:\n\n- manage personal account info\n- query account balances\n- trade by making market and limit orders\n- deposit and withdraw fiat and crypto funds\n- query personal orders\n- get ledger history\n- transfer funds between accounts\n- use merchant services\n\nThis library implements full public and private REST APIs for all exchanges. WebSocket and FIX implementations in JavaScript, PHP, Python are available in [CCXT Pro](https://ccxt.pro), which is a professional addon to CCXT with support for WebSocket streams.\n\nThe CCXT library supports both camelcase notation (preferred in JavaScript) and underscore notation (preferred in Python and PHP), therefore all methods can be called in either notation or coding style in any language.\n\n```JavaScript\n// both of these notations work in JavaScript/Python/PHP\nexchange.methodName ()  // camelcase pseudocode\nexchange.method_name () // underscore pseudocode\n```\n\nRead the [Manual](https://docs.ccxt.com/en/latest/manual.html) for more details.\n\n### JavaScript\n\n```JavaScript\n'use strict';\nconst ccxt = require ('ccxt');\n\n(async function () {\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobipro  = new ccxt.huobipro ()\n    let okcoinusd = new ccxt.okcoin ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'YOUR_API_KEY',\n            'secret': 'YOUR_SECRET',\n        })\n\n    console.log (kraken.id,    await kraken.loadMarkets ())\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobipro.id,  await huobipro.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobipro.id,  await huobipro.fetchTrades ('ETH/USDT'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive \u0e3f1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n\n}) ();\n```\n\n### Python\n\n```Python\n# coding=utf-8\n\nimport ccxt\n\nhitbtc   = ccxt.hitbtc({'verbose': True})\nbitmex   = ccxt.bitmex()\nhuobipro = ccxt.huobipro()\nexmo     = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\nkraken = ccxt.kraken({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\nprint(huobipro.id, huobipro.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobipro.fetch_trades('LTC/USDT'))\n\nprint(exmo.fetch_balance())\n\n# sell one \u0e3f for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n\n# limit buy BTC/EUR, you pay \u20ac2500 and receive \u0e3f1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n### PHP\n\n```PHP\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex ();\n$bittrex  = new \\ccxt\\bittrex  (array ('verbose' => true));\n$quoinex  = new \\ccxt\\quoinex   ();\n$zaif     = new \\ccxt\\zaif     (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n$hitbtc   = new \\ccxt\\hitbtc   (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoinex->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoinex->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay \u00a5 and receive \u0e3f immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive \u0e3f1 for \u00a5285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n## Contributing\n\nPlease read the [CONTRIBUTING](https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md) document before making changes that you would like adopted in the code. Also, read the [Manual](https://docs.ccxt.com/en/latest/manual.html) for more details.\n\n## Support Developer Team\n\nWe are investing a significant amount of time into the development of this library. If CCXT made your life easier and you want to help us improve it further, or if you want to speed up development of new features and exchanges, please support us with a tip. We appreciate all contributions!\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website.\n\n[[Become a sponsor](https://opencollective.com/ccxt#sponsor)]\n\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/sponsor/9/avatar.svg\"></a>\n\n### Supporters\n\nSupport this project by becoming a supporter. Your avatar will show up here with a link to your website.\n\n[[Become a supporter](https://opencollective.com/ccxt#supporter)]\n\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ccxt/tiers/supporter/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/supporter/9/avatar.svg\"></a>\n\n### Backers\n\nThank you to all our backers! [[Become a backer](https://opencollective.com/ccxt#backer)]\n\n<a href=\"https://opencollective.com/ccxt#backers\" target=\"_blank\"><img src=\"https://opencollective.com/ccxt/tiers/backer.svg?width=890\"></a>\n\nThank you!\n\n## Social\n\n- [Follow us on Twitter](https://twitter.com/ccxt_official)\n- [Read our blog on Medium](https://medium.com/@ccxt)\n- <sub>[![Discord](https://img.shields.io/discord/690203284119617602?logo=discord&logoColor=white)](https://discord.gg/dhzSKYU)</sub>\n- [CCXT Channel on Telegram](https://t.me/ccxt_announcements) (important announcements)\n- [CCXT Chat on Telegram](https://t.me/ccxt_chat) (technical support)\n\n## Contact Us\n\nFor business inquiries: info@ccxt.trade\n"
 },
 {
  "repo": "aceat64/EasyBitcoin-PHP",
  "language": "PHP",
  "readme_contents": "EasyBitcoin-PHP\n===============\n\nA simple class for making calls to Bitcoin's API using PHP.\n\nGetting Started\n---------------\n1. Include easybitcoin.php into your PHP script:\n\n    ```php\n    require_once('easybitcoin.php');\n    ```\n2. Initialize Bitcoin connection/object:\n\n    ```php\n    $bitcoin = new Bitcoin('username','password');\n    ```\n\n    Optionally, you can specify a host, port. Default is HTTP on localhost port 8332.\n\n    ```php\n    $bitcoin = new Bitcoin('username','password','localhost','8332');\n    ```\n\n    If you wish to make an SSL connection you can set an optional CA certificate or leave blank\n    ```php\n    $bitcoin->setSSL('/full/path/to/mycertificate.cert');\n    ````\n\n3. Make calls to bitcoind as methods for your object. Examples:\n\n    ```php\n    $bitcoin->getinfo();\n    \n    $bitcoin->getrawtransaction('0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098',1);\n    \n    $bitcoin->getblock('000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f');\n   \n    $bitcoin->bumpfee('f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16', [\"fee_rate\" => 50]);\n    ```\n\nAdditional Info\n---------------\n* When a call fails for any reason, it will return false and put the error message in `$bitcoin->error`\n\n* The HTTP status code can be found in $bitcoin->status and will either be a valid HTTP status code or will be 0 if cURL was unable to connect.\n\n* The full response (not usually needed) is stored in `$bitcoin->response` while the raw JSON is stored in `$bitcoin->raw_response`\n"
 },
 {
  "repo": "libbitcoin/libbitcoin-explorer",
  "language": "C++",
  "readme_contents": "See README.md"
 },
 {
  "repo": "eveybcd/BitcoinDiamond",
  "language": "C++",
  "readme_contents": "Bitcoin Diamond\n===============\n\nhttps://www.bitcoindiamond.org\n\nWhat is BitcoinDiamond?\n-----------------------\n\nBitcoin Diamond (BCD) is a fork of Bitcoin that occurs at the predetermined height of block 495866 \nand therewith a new chain will be generated as the BCD. Bitcoin Diamond miners will begin creating \nblocks with a new proof-of-work algorithm, and will consecutively develop and enhance the protection \nfor account transfer and privacy based on original features of BTC. This will cause a bifurcation of \nthe Bitcoin blockchain. The original Bitcoin blockchain will continue on unaltered, but a new branch\nof the blockchain will split off from the original chain. It shares the same transaction history \nwith Bitcoin until it starts branching and coming into a unique block from which it diverges. \nAs a result of this process, a new cryptocurrency was created which we call \u201cBitcoin Diamond\u201d.\nFor more information, see https://www.bitcoindiamond.org\n\nLicense\n-------\n\nBitcoinDiamond is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n\nAnti replay attacks\n------------------\n\nBitcoin Diamond has an anti-replay-attacks function to prevent bitcoin-diamond transactions replay\non bitcoin network, or bitcoin transactions replay on bitcoin-diamond network.\n\nWhat is the total amount for Bitcoin Diamond (BCD)?\n---------------------------------------------------\n\nThe total amount of BCD is 210 million. No more increase.170 million BCD, 1BTC : 10BCD will be presented \nto the Bitcoin holders for the long-term Bitcoin ECOSYSTEM support.The rest 40 million will be automatically \ntransferred into the community rewards pool as tributes and mining.\n\nWhat problems do Bitcoin Diamond attempt to solve?\n--------------------------------------------------\nAfter nine years of rapid development of Bitcoin, high transactions fees and Bitcoin no longer meets the \ndemands from rising numbers of clients. And various kinds of problems have arisen, which mainly consist \nof the following aspects: \n1. Lack of privacy protection.\n2. Slow transaction confirmations.\n3. High threshold for new members."
 },
 {
  "repo": "phishman3579/Bitcoin",
  "language": "Java",
  "readme_contents": "# Bitcoin\nAn example Bitcoin implementation which can be used to learn about Bitcoin/Blockchain. This implementations is for educational use only.\n\n# Overview.\n\n## Wallet\n\nThe Wallet is how peers interact with the Bitcoin peer-to-peer network. The Wallet generates a public key and a private key which it uses to sign each Transaction. The pulic key is the send-to address used by the Bitcoin network. Each Wallet has the ability to send coins from your account to another account and it also has the ability to confirm Transactions (except it's own) which it receives from the Bitcoin peer-to-peer network.\n\n```\n    Wallet {\n      sendCoin(entity, value); // Creates a new Transaction\n      handleTransaction(Transaction); // Receives a unconfirmed Transaction\n      handleConfirmation(Transaction); // Receives a confirmed Transaction and adds to blockchain\n    }\n```\n\n## Transaction\n\nTransactions are just a collection of input transactions, output transactions, a value, and a signature. \n\n```\n    Transaction {\n        byte[] header;\n        Transaction[] inputs;\n        Transaction[] outputs;\n        long value;\n        byte[] signature;\n    }\n```\n\nSee the [Transaction Class](https://github.com/phishman3579/Bitcoin/blob/master/src/com/jwetherell/bitcoin/data_model/Transaction.java) for reference.\n\n#### The Wallet also has a number of Transaction rules:\n\n* Once a Transaction has been used as an input, it cannot be used again. \n* All inputs on a Transaction have to be completely consumed on a transaction.\n\nNote: To send a Bitcoin transaction, you have to already own a Bitcoin. Getting an initial Bitcoin is usually done by trading something for a number of Bitcoins. One caveat of, having to own a Bitcoin to make a transaction, is the first transaction. The first transaction is called the genesis transaction, it is the only transaction which does not need input transactions.\n\n### An example Transaction\n\nIf Justin wants to send 6 coins to George:\n\nLedger:\n\n|  Justin's unused Transactions  |  George's unused Transaction  |\n|  ----------------------------- | ----------------------------- | \n| Transaction #1 : 5 Coins       |                               |\n| Transaction #2 : 3 Coins       |                               |\n| Transaction #3 : 7 Coins       |                               |\n\n```\n    Aggregate Transaction #4 {\n      byte[]        header      \"6 coins for George and 2 coins to Justin\"\n      Transaction[] input       { Transaction #1, Transaction #2 }\n      Transaction[] output      { Transaction #5, Transaction #6 }\n      int           value       0\n      byte[]        signature   \"Justin's signature based on the Header\"\n    }\n```\nNote: The 'value' on the Aggregate Transaction (#4) is a reward for anyone who confirms the Transaction. The higher the reward, the better chance the Transaction will be processed quicker.\n\n```\n    Transaction #5 {\n      byte[]        header      \"2 coins to Justin\"\n      Transaction[] input       { Transaction #1, Transaction #2 }\n      Transaction[] output      { }\n      int           value       2\n      byte[]        signature   \"Justin's signature based on the Header\"\n    }\n\n    Transaction #6 {\n      byte[]        header      \"6 coins for George\"\n      Transaction[] input       { Transaction #1, Transaction #2 }\n      Transaction[] output      { }\n      int           value       6\n      byte[]        signature   \"Justin's signature based on the Header\"\n    }\n```\n\nThe Aggregate Transaction (#4) will remove Transaction #1 and #2 from Justin's unused Transactions. Since the total of all inputs is 8 coins, which is 2 more than what Justin wants to send to George, the output will contain a Transaction which sends 2 coins back to Justin.\n\nThe Wallet will use it's private key to sign the Header of the Aggregate Transactions (#4) and it will also sign each of the output Transactions (#5 & #6). It will then send Transaction #4 to the Bitcoin network for confirmation. \n\nEach peer on the Bitcoin network will receive the Transaction and try to confirm it. \n\nTo confirm a Transaction, a Peer will:\n* Check the Signature of Transaction against the public key of the sender. \n\nIf it passes:\n* Send the confirmed Transaction to the Bitcoin network.\n\n## Block\n\nThe confirmed Transaction (#4) is added to a pool of confirmed Transactions. Peers (also called Miners) will gather confirmed Transactions from the pool and put them into a Block. A Block contains a number of confirmed Transactions, the Miner's signature, and a couple of other fields used for \"Proof of work\" processing.\n\n```\n    Block {\n      Transaction[]     transactions\n      int               nonce\n      int               zeros\n      byte[]            previousHash\n      byte[]            nextHash\n      byte[]            signature\n    }\n```\n\nSee the [Block Class](https://github.com/phishman3579/Bitcoin/blob/master/src/com/jwetherell/bitcoin/data_model/Block.java) for reference.\n\nMiners will create a single 'block hash' from all the confirmed Transactions in the Block. They will then go through the process of \"Proof of work\". The goal of the \"Proof of work\" is to create a hash which begins with a random number of zeros (see the 'zeros' field). \"Proof of work\" is designed to be processor intensive which adds randomness to the time it takes to process a Block. A Miner will take the 'block hash' and append a random integer (called a 'nonce') to it. It will then create a new hash from 'block hash + nonce' and see if it satisfies the \"Proof of work\", this process will repeat until it finds a 'nonce' which satisfies the \"Proof of work\"\n\nSee the [Proof of work](https://github.com/phishman3579/Bitcoin/blob/master/src/com/jwetherell/bitcoin/ProofOfWork.java) for reference.\n\nOnce a Miner finds a 'nonce' which satisfies the \"Proof of work\", it will:\n* Create another hash (see 'nextHash') using the Blockchain's current hash (see 'previousHash') and the 'block hash' \n* Send the Block to the Bitcoin network.\n\n```\n    Block #1 {\n      Transaction[]     transactions    { Transaction #4 }\n      int               nonce           453;\n      int               zeros           3;\n      byte[]            previousHash    \"Blockchain hash #1\";\n      byte[]            nextHash        \"Blockchain hash #2\";\n      byte[]            signature       \"Miner's signature\";\n    }\n```\nPeers on the Bitcoin network will receive the Block and start confirming it. \n\nTo confirm the Block, A Peer will:\n* Make sure the 'nonce' satisfies the \"Proof of work\"\n* Check the Block's signature \n* Check the signature of each Trasaction in the Block.\n\nIf everything passes:\n* Add the block to it's Blockchain.\n* Send the confirmed Block to the Bitcoin network\n\n## Blockchain\n\nThe Blockchain is a simple structure which contains a list of confirmed Blocks, a list of Transactions in chronological order, a list of unused Transactions, and the current hash.\n\nNote: all transactions in the same block are said to have happened at the same time.\n\n```\n    Blockchain {\n        List<Block>         blockchain\n        List<Transactions>  transactions\n        List<Transaction>   unused\n        byte[]              currentHash\n    }\n```\n\nSee the [Blockchain](https://github.com/phishman3579/Bitcoin/blob/master/src/com/jwetherell/bitcoin/BlockChain.java) for reference.\n\n\nWhen the Peer adds the Block to the Blockchain, the Blockchain will:\n* Check to see if the 'previousHash' from the Block matches it's 'currentHash', \n* Check to see if the input Transactions from all the Transactions in the Block are 'unused'\n\nIf everything passes:\n* The Block is added to the 'blockChain'\n* The Transaction is added to the 'transactions' list\n* All 'input' transactions are removed from the 'unused' list\n* All the 'output' transactions are added to the 'unused' list\n* The 'currentHash' is updated to 'nextHash' from the current Block.\n\n```\n    Blockchain {\n        List<Block>         blockchain      { Block #0 }\n        List<Transactions>  transactions    { Transaction #0 }\n        List<Transaction>   unused          { Transaction #1, Transaction #2, Transaction #3 }\n        byte[]              currentHash     \"Blockchain hash #1\"\n    }\n```\n\nUpdated Blockchain.\n\n```\n    Blockchain {\n        List<Block>         blockchain      { Block #0, Block #1 };\n        List<Transactions>  transactions    { Transaction #0, Transaction #4 }\n        List<Transaction>   unused          { Transaction #3, Transaction #5, Transaction #6 }\n        byte[]              currentHash     \"Blockchain hash #2\"\n    }\n```\n\nLedger:\n\n|  Justin's unused Transactions  |  George's unused Transaction  |\n|  ----------------------------- | ----------------------------- | \n| Transaction #3 : 7 Coins       | Transaction #6 : 6 Coins      |\n| Transaction #5 : 2 Coins       |                               |\n|                                |                               |\n\nBased off of [1](http://www.michaelnielsen.org/ddi/how-the-bitcoin-protocol-actually-works/) and [2](http://www.imponderablethings.com/2013/07/how-bitcoin-works-under-hood.html)\n\nAlso see the [original paper](https://bitcoin.org/bitcoin.pdf)\n"
 },
 {
  "repo": "blockchain-etl/bitcoin-etl",
  "language": "Python",
  "readme_contents": "# Bitcoin ETL\n\n[![Join the chat at https://gitter.im/ethereum-eth](https://badges.gitter.im/ethereum-etl.svg)](https://gitter.im/ethereum-etl/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.com/blockchain-etl/bitcoin-etl.png)](https://travis-ci.com/blockchain-etl/bitcoin-etl)\n[Join Telegram Group](https://t.me/joinchat/GsMpbA3mv1OJ6YMp3T5ORQ)\n\nInstall Bitcoin ETL:\n\n```bash\npip install bitcoin-etl\n```\n\nExport blocks and transactions ([Schema](#blocksjson), [Reference](#export_blocks_and_transactions)):\n\n```bash\n> bitcoinetl export_blocks_and_transactions --start-block 0 --end-block 500000 \\\n--provider-uri http://user:pass@localhost:8332 --chain bitcoin \\\n --blocks-output blocks.json --transactions-output transactions.json\n```\n\nSupported chains:\n- bitcoin\n- bitcoin_cash\n- bitcoin_gold\n- dogecoin\n- litecoin\n- dash\n- zcash\n\nStream blockchain data continually to console ([Reference](#stream)):\n\n```bash\n> pip install bitcoin-etl[streaming]\n> bitcoinetl stream -p http://user:pass@localhost:8332 --start-block 500000\n```\n\nStream blockchain data continually to Google Pub/Sub ([Reference](#stream)):\n\n```bash\n> export GOOGLE_APPLICATION_CREDENTIALS=/path_to_credentials_file.json\n> bitcoinetl stream -p http://user:pass@localhost:8332 --start-block 500000 --output projects/your-project/topics/crypto_bitcoin\n\n```\n\nFor the latest version, check out the repo and call\n```bash\n> pip install -e .[streaming]\n> python bitcoinetl.py\n```\n\n## Table of Contents\n\n- [Bitcoin ETL](#bitcoin-etl)\n  - [Table of Contents](#table-of-contents)\n  - [Schema](#schema)\n    - [blocks.json](#blocksjson)\n    - [transactions.json](#transactionsjson)\n    - [transaction_input](#transactioninput)\n    - [transaction_output](#transactionoutput)\n  - [Exporting the Blockchain](#exporting-the-blockchain)\n    - [Running in Docker](#running-in-docker)\n    - [Command Reference](#command-reference)\n      - [export_blocks_and_transactions](#exportblocksandtransactions)\n      - [enrich_transactions](#enrichtransactions)\n      - [get_block_range_for_date](#getblockrangefordate)\n      - [export_all](#exportall)\n      - [stream](#stream)\n    - [Running Tests](#running-tests)\n    - [Running Tox Tests](#running-tox-tests)\n    - [Public Datasets in BigQuery](#public-datasets-in-bigquery)\n\n\n## Schema\n\n### blocks.json\n\nField               | Type            |\n--------------------|-----------------|\nhash                | hex_string      |\nsize                | bigint          |\nstripped_size       | bigint          |\nweight              | bigint          |\nnumber              | bigint          |\nversion             | bigint          |\nmerkle_root         | hex_string      |\ntimestamp           | bigint          |\nnonce               | hex_string      |\nbits                | hex_string      |\ncoinbase_param      | hex_string      |\ntransaction_count   | bigint          |\n\n### transactions.json\n\nField                   | Type                  |\n------------------------|-----------------------|\nhash                    | hex_string            |\nsize                    | bigint                |\nvirtual_size            | bigint                |\nversion                 | bigint                |\nlock_time               | bigint                |\nblock_number            | bigint                |\nblock_hash              | hex_string            |\nblock_timestamp         | bigint                |\nis_coinbase             | boolean               |\nindex                   | bigint                |\ninputs                  | []transaction_input   |\noutputs                 | []transaction_output  |\ninput_count             | bigint                |\noutput_count            | bigint                |\ninput_value             | bigint                |\noutput_value            | bigint                |\nfee                     | bigint                |\n\n### transaction_input\n\nField                   | Type                  |\n------------------------|-----------------------|\nindex                   | bigint                |\nspent_transaction_hash  | hex_string            |\nspent_output_index      | bigint                |\nscript_asm              | string                |\nscript_hex              | hex_string            |\nsequence                | bigint                |\nrequired_signatures     | bigint                |\ntype                    | string                |\naddresses               | []string              |\nvalue                   | bigint                |\n\n### transaction_output\n\nField                   | Type                  |\n------------------------|-----------------------|\nindex                   | bigint                |\nscript_asm              | string                |\nscript_hex              | hex_string            |\nrequired_signatures     | bigint                |\ntype                    | string                |\naddresses               | []string              |\nvalue                   | bigint                |\n\n\nYou can find column descriptions in [schemas](https://github.com/blockchain-etl/bitcoin-etl-airflow/tree/master/dags/resources/stages/enrich/schemas)\n\n**Notes**:\n\n1. Output values returned by Dogecoin API had precision loss in the clients prior to version 1.14.\nIt's caused by this issue https://github.com/dogecoin/dogecoin/issues/1558\nThe explorers that used older versions to export the data may show incorrect address balances and transaction amounts.\n\n1. For Zcash, `vjoinsplit` and `valueBalance` fields are converted to inputs and outputs with type 'shielded'\nhttps://zcash-rpc.github.io/getrawtransaction.html, https://zcash.readthedocs.io/en/latest/rtd_pages/zips/zip-0243.html\n\n\n## Exporting the Blockchain\n\n1. Install python 3.5.3+ https://www.python.org/downloads/\n\n1. Install Bitcoin node https://hackernoon.com/a-complete-beginners-guide-to-installing-a-bitcoin-full-node-on-linux-2018-edition-cb8e384479ea\n\n1. Start Bitcoin.\nMake sure it downloaded the blocks that you need by executing `$ bitcoin-cli getblockchaininfo` in the terminal.\nYou can export blocks below `blocks`, there is no need to wait until the full sync\n\n1. Install Bitcoin ETL:\n\n    ```bash\n    > pip install bitcoin-etl\n    ```\n\n1. Export blocks & transactions:\n\n    ```bash\n    > bitcoinetl export_all --start 0 --end 499999  \\\n    --partition-batch-size 100 \\\n    --provider-uri http://user:pass@localhost:8332 --chain bitcoin\n    ```\n\n    The result will be in the `output` subdirectory, partitioned in Hive style:\n\n    ```bash\n    output/blocks/start_block=00000000/end_block=00000099/blocks_00000000_00000099.csv\n    output/blocks/start_block=00000100/end_block=00000199/blocks_00000100_=00000199.csv\n    ...\n    output/transactions/start_block=00000000/end_block=00000099/transactions_00000000_00000099.csv\n    ...\n    ```\n\n    In case `bitcoinetl` command is not available in PATH, use `python -m bitcoinetl` instead.\n\n### Running in Docker\n\n1. Install Docker https://docs.docker.com/install/\n\n1. Build a docker image\n    ```bash\n    > docker build --platform linux/x86_64 -t bitcoin-etl:latest .\n    > docker image ls\n    ```\n\n1. Run a container out of the image\n    ```bash\n    > docker run --platform linux/x86_64 -v $HOME/output:/bitcoin-etl/output bitcoin-etl:latest export_blocks_and_transactions --start-block 0 --end-block 500000 \\\n        --provider-uri http://user:pass@localhost:8332 --blocks-output output/blocks.json --transactions-output output/transactions.json\n    ```\n\n1. Run streaming to console or Pub/Sub\n    ```bash\n    > docker build --platform linux/x86_64 -t bitcoin-etl:latest-streaming -f Dockerfile_with_streaming .\n    > echo \"Stream to console\"\n    > docker run --platform linux/x86_64 bitcoin-etl:latest-streaming stream -p http://user:pass@localhost:8332 --start-block 500000\n    > echo \"Stream to Pub/Sub\"\n    > docker run --platform linux/x86_64 -v /path_to_credentials_file/:/bitcoin-etl/ --env GOOGLE_APPLICATION_CREDENTIALS=/bitcoin-etl/credentials_file.json bitcoin-etl:latest-streaming stream -p http://user:pass@localhost:8332 --start-block 500000 --output projects/your-project/topics/crypto_bitcoin\n    ```\n\n1. Refer to https://github.com/blockchain-etl/bitcoin-etl-streaming for deploying the streaming app to\nGoogle Kubernetes Engine.\n\n### Command Reference\n\n- [export_blocks_and_transactions](#export_blocks_and_transactions)\n- [enrich_transactions](#enrich_transactions)\n- [get_block_range_for_date](#get_block_range_for_date)\n- [export_all](#export_all)\n- [stream](#stream)\n\nAll the commands accept `-h` parameter for help, e.g.:\n\n```bash\n> bitcoinetl export_blocks_and_transactions --help\nUsage: bitcoinetl.py export_blocks_and_transactions [OPTIONS]\n\n  Export blocks and transactions.\n\nOptions:\n  -s, --start-block INTEGER   Start block\n  -e, --end-block INTEGER     End block  [required]\n  -b, --batch-size INTEGER    The number of blocks to export at a time.\n  -p, --provider-uri TEXT     The URI of the remote Bitcoin node\n  -w, --max-workers INTEGER   The maximum number of workers.\n  --blocks-output TEXT        The output file for blocks. If not provided\n                              blocks will not be exported. Use \"-\" for stdout\n  --transactions-output TEXT  The output file for transactions. If not\n                              provided transactions will not be exported. Use\n                              \"-\" for stdout\n  --help                      Show this message and exit.\n```\n\nFor the `--output` parameters the supported type is json. The format type is inferred from the output file name.\n\n#### export_blocks_and_transactions\n\n```bash\n> bitcoinetl export_blocks_and_transactions --start-block 0 --end-block 500000 \\\n  --provider-uri http://user:pass@localhost:8332 \\\n  --blocks-output blocks.json --transactions-output transactions.json\n```\n\nOmit `--blocks-output` or `--transactions-output` options if you want to export only transactions/blocks.\n\nYou can tune `--batch-size`, `--max-workers` for performance.\n\nNote that `required_signatures`, `type`, `addresses`, and `value` fields will be empty in transactions inputs.\nUse [enrich_transactions](#enrich_transactions) to populate those fields.\n\n#### enrich_transactions\n\nYou need to run bitcoin daemon with option `txindex=1` for this command to work.\n\n```bash\n> bitcoinetl enrich_transactions  \\\n  --provider-uri http://user:pass@localhost:8332 \\\n  --transactions-input transactions.json --transactions-output enriched_transactions.json\n```\n\nYou can tune `--batch-size`, `--max-workers` for performance.\n\n#### get_block_range_for_date\n\n```bash\n> bitcoinetl get_block_range_for_date --provider-uri http://user:pass@localhost:8332 --date=2017-03-01\n```\n\nThis command is guaranteed to return the block range that covers all blocks with `block.time` on the specified\ndate. However the returned block range may also contain blocks outside the specified date, because block times are not\nmonotonic https://twitter.com/EvgeMedvedev/status/1073844856009576448. You can filter\n`blocks.json`/`transactions.json` with the below command:\n\n```bash\n> bitcoinetl filter_items -i blocks.json -o blocks_filtered.json \\\n-p \"datetime.datetime.fromtimestamp(item['timestamp']).astimezone(datetime.timezone.utc).strftime('%Y-%m-%d') == '2017-03-01'\"\n```\n\n#### export_all\n\n```bash\n> bitcoinetl export_all --provider-uri http://user:pass@localhost:8332 --start 2018-01-01 --end 2018-01-02\n```\n\nYou can tune `--export-batch-size`, `--max-workers` for performance.\n\n#### stream\n\n```bash\n> bitcoinetl stream --provider-uri http://user:pass@localhost:8332 --start-block 500000\n```\n\n- This command outputs blocks and transactions to the console by default.\n- Use `--output` option to specify the Google Pub/Sub topic where to publish blockchain data,\ne.g. `projects/your-project/topics/crypto_bitcoin`. Blocks and transactions will be pushed to\n`projects/your-project/topics/crypto_bitcoin.blocks` and `projects/your-project/topics/crypto_bitcoin.transactions`\ntopics.\n- The command saves its state to `last_synced_block.txt` file where the last synced block number is saved periodically.\n- Specify either `--start-block` or `--last-synced-block-file` option. `--last-synced-block-file` should point to the\nfile where the block number, from which to start streaming the blockchain data, is saved.\n- Use the `--lag` option to specify how many blocks to lag behind the head of the blockchain. It's the simplest way to\nhandle chain reorganizations - they are less likely the further a block from the head.\n- Use the `--chain` option to specify the type of the chain, e.g. `bitcoin`, `litecoin`, `dash`, `zcash`, etc.\n- You can tune `--period-seconds`, `--batch-size`, `--max-workers` for performance.\n\n\n### Running Tests\n\n```bash\n> pip install -e .[dev]\n> echo \"The below variables are optional\"\n> export BITCOINETL_BITCOIN_PROVIDER_URI=http://user:pass@localhost:8332\n> export BITCOINETL_LITECOIN_PROVIDER_URI=http://user:pass@localhost:8331\n> export BITCOINETL_DOGECOIN_PROVIDER_URI=http://user:pass@localhost:8330\n> export BITCOINETL_BITCOIN_CASH_PROVIDER_URI=http://user:pass@localhost:8329\n> export BITCOINETL_DASH_PROVIDER_URI=http://user:pass@localhost:8328\n> export BITCOINETL_ZCASH_PROVIDER_URI=http://user:pass@localhost:8327\n> pytest -vv\n```\n\n### Running Tox Tests\n\n```bash\n> pip install tox\n> tox\n```\n\n### Public Datasets in BigQuery\n\nhttps://cloud.google.com/blog/products/data-analytics/introducing-six-new-cryptocurrencies-in-bigquery-public-datasets-and-how-to-analyze-them\n"
 },
 {
  "repo": "blinktrade/bitex",
  "language": "Python",
  "readme_contents": "#This documentation is outdated.\nYou must be a Senior Python Developer in order to understand what is going on. Don't try to run an exchange without an expert.\n\nBlinkTrade\n=====\n\nBlinkTrade - Open Source Exchange Platform\n\n[How to install on Google Compute Engine](https://github.com/blinktrade/bitex/wiki/HOW-TO-DEPLOY-BLINKTRADE-ON-GOOGLE-COMPUTE-ENGINE) \n\n[![Build Status](https://travis-ci.org/blinktrade/bitex.svg?branch=master)](https://travis-ci.org/blinktrade/bitex)\n\n#Get Started\n\n```\n$ pip install -r requirements.txt\n```\n\n#Build and Run\n\nDownload and install the pyblinktrade package from https://github.com/blinktrade/pyblinktrade\n\n```\ncd ~\ncd pyblinktrade\nchmod +x setup.py\nsudo ./setup.py install\n```\n\nDownload and install the frontend project from https://github.com/blinktrade/frontend.git\n\n```\n$ cd ./jsdev\n$ ./build_release.sh  # Or ./build_release.bat [Windows]\n\n$ ./apps/trade/main.py\n$ ./apps/ws_gateway/main.py\n$ ./apps/mailer/main.py\n```\n\n# Applications - Trade\nMatching engine and the core of the BitEx platform\n\n# Applications - Ws Gateway\nThe HTTP/WebSocket gateway is based on Tornado.  It relays HTTP or websocket API\nrequests to the trade engine in order to place orders or fetching market data.\n\n# Applications - Mailer\nThe mailing application... sends mail. To that end, \nit uses Mailchimp's transaction email solution, Mandrill.\n\nE-mail templates are stored under the templates/ dir,\nand which template to use (and the data to fill it out)\nare supplied by listening on the zeromq socket.\n\n# Translating\n\n```\ncd ./jsdev/tools\n$ python extract_messages.py  > /tmp/file_to_be_translated.xml\n\n# translate the xml\n$ cp /tmp/file_to_be_translated.xml  ./jsdev/translations/pt_BR.xtb\n\n# edit the build_release.sh to include the translated version.\n$ vi ./jsdev/build_release.sh\n\n$ ./jsdev/build_release.sh  # recompile the application using the translated file\n\n# translated the html static page\n# vi ./static/statoshi_square.html\n```\n\n#Why the name of the folder is Bitex ?\n\nBitex stands for Bitcoin EXchange and it was the first that we came up it name of our platform, by mid 2014 a company called bitex.la was formed in Argentina and we were forced to change our name, this source code it is not related in any form to bitex.la.\n\n## Contributing\n \n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request\n\n#License\n\n**Code released under [the GNU GPL license](https://github.com/pinhopro/bitex/blob/master/LICENSE).**\n\nCopyright 2014 BitEx, LTDA. BitEx is a trademark maintained by BitEx, LTDA.\n\n**VIOLATORS OF THE GNU GPL LICENSE WILL BE PROSECUTED TO THE FULL EXTENT OF THE LAW**\n**FREE SOFTWARE FOR FREE PEOPLE**\n"
 },
 {
  "repo": "untitled-dice/untitled-dice.github.io",
  "language": "JavaScript",
  "readme_contents": "# untitled-dice\n\n##### Live demo: https://untitled-dice.github.io\n\nMore info (including changelog and FAQ) in the bitcointalk.org thread: https://bitcointalk.org/index.php?topic=1062680\n\nUntitled Dice is a bare-bones bitcoin dice casino built on top of the [Moneypot.com gambling API](https://www.moneypot.com/api-docs.html) that lets anyone run their own dice site by forking this project.\n\nSince Moneypot handles the user accounts, betting, faucet, and chat, Untitled Dice does not need a server of its own. It's fully client-side (just some javascript files), so it can be hosted anywhere including Github.\n\nMoneypot even handles the bankroll. Profits are split between you, Moneypot, and Moneypot's investors. See: <https://www.moneypot.com/investment>.\n\n![Screenshot](http://i.imgur.com/dTwOR01.png)\n\n## Run your own dice site\n\nIf you want to run your own dice casino, all you need to do is clone/fork this project, create an app at Moneypot (https://www.moneypot.com/apps/new), and set the `config.app_id` at the top of the `app.js` file.\n\n## Host it on Github\n\n1. Fork this project\n2. Rename the repository from `untitled-dice.github.io` to `{YOUR_USERNAME}.github.io`\n3. Edit the config at the top of `app.js`\n4. Visit `https://{YOUR_USERNAME}.github.io`\n\n## Run it locally (for development)\n\n    cd untitled-dice\n    npm install\n    python -m SimpleHTTPServer 5000\n\nThen visit <http://localhost:5000>\n\n## License\n\nMIT\n"
 },
 {
  "repo": "dryphp/bitcoin.php",
  "language": "PHP",
  "readme_contents": "bitcoin-php\r\n===========\r\n\r\nA [Bitcoin][Bitcoin] library for [PHP](http://www.php.net/).\r\n\r\nDocumentation\r\n-------------\r\n\r\nDocumentation can be found at [code.gogulski.com](http://code.gogulski.com/).\r\n\r\nRequirements\r\n------------\r\n\r\n### PHP requirements:\r\n* PHP5\r\n* cURL support  \r\n* SSL support (if you're using HTTPS to talk to bitcoind)\r\n\r\nDonate\r\n------\r\n\r\n* Bitcoin payments: 1E3d6EWLgwisXY2CWXDcdQQP2ivRN7e9r9\r\n* Gifts via other methods: <http://www.nostate.com/support-nostatecom/>\r\n\r\nAuthors\r\n-------\r\n\r\n* [Mike Gogulski](http://github.com/mikegogulski) -\r\n  <http://www.nostate.com/> <http://www.gogulski.com/>\r\n\r\nCredits\r\n-------\r\n\r\nbitcoin-php incorporates code from:\r\n\r\n* [XML-RPC for PHP][XML-RPC-PHP] by Edd Dumbill (for JSON-RPC support)\r\n\r\nLicense\r\n-------\r\n\r\nbitcoin-php is free and unencumbered public domain software. For more\r\ninformation, see <http://unlicense.org/> or the accompanying UNLICENSE file.\r\n\r\n\r\n[Bitcoin]:\t\thttp://www.bitcoin.org/\r\n[XML-RPC-PHP]:\thttp://phpxmlrpc.sourceforge.net/"
 },
 {
  "repo": "bcoin-org/bcoin",
  "language": "JavaScript",
  "readme_contents": "# Bcoin\n\n[![Build Status][circleci-status-img]][circleci-status-url]\n[![Coverage Status][coverage-status-img]][coverage-status-url]\n\n**Bcoin** is an alternative implementation of the Bitcoin protocol, written in\nJavaScript and C/C++ for Node.js.\n\nBcoin is well tested and aware of all known consensus rules. It is currently\nused in production as the consensus backend and wallet system for\n[purse.io][purse].\n\n## Uses\n\n- Full Node\n- SPV Node\n- Wallet Backend\n- Mining Backend (getblocktemplate support)\n- Layer 2 Backend (lightning)\n- General Purpose Bitcoin Library\n\n## Install\n\n```\n$ git clone https://github.com/bcoin-org/bcoin\n$ cd bcoin\n$ npm rebuild\n$ ./bin/bcoin\n```\n\nSee the [Getting started][guide] guide for more in-depth installation\ninstructions, including verifying releases. If you're upgrading, see the\nlatest changes via the [Changelog][changelog].\n\n## Documentation\n\n- General docs: [docs/](docs/README.md)\n- Wallet and node API docs: https://bcoin.io/api-docs/\n- Library API docs: https://bcoin.io/docs/\n\n## Support\n\nJoin us on [freenode][freenode] in the [#bcoin][irc] channel.\n\n## Disclaimer\n\nBcoin does not guarantee you against theft or lost funds due to bugs, mishaps,\nor your own incompetence. You and you alone are responsible for securing your\nmoney.\n\n## Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work. `</legalese>`\n\n## License\n\n- Copyright (c) 2014-2015, Fedor Indutny (MIT License).\n- Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n\nSee LICENSE for more info.\n\n[purse]: https://purse.io\n[guide]: docs/getting-started.md\n[freenode]: https://freenode.net/\n[irc]: irc://irc.freenode.net/bcoin\n[changelog]: CHANGELOG.md\n\n[coverage-status-img]: https://codecov.io/gh/bcoin-org/bcoin/badge.svg?branch=master\n[coverage-status-url]: https://codecov.io/gh/bcoin-org/bcoin?branch=master\n[circleci-status-img]: https://circleci.com/gh/bcoin-org/bcoin/tree/master.svg?style=shield\n[circleci-status-url]: https://circleci.com/gh/bcoin-org/bcoin/tree/master\n"
 },
 {
  "repo": "csunny/py-bitcoin",
  "language": "Python",
  "readme_contents": "\n<a href=\"https://travis-ci.org/csunny/py-bitcoin\"><img src=\"https://travis-ci.com/csunny/py-bitcoin.svg?branch=master\" /></a>\n### \u6bd4\u7279\u5e01\u9879\u76ee\u7684python\u7b80\u6613\u5b9e\u73b0\uff0c\u5229\u7528python\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u533a\u5757\u94fe\u9879\u76ee\n\n\u6ce8\u610f: \u672c\u9879\u76ee\u5c5e\u4e8e\u4e1a\u4f59\u9879\u76ee\uff0c\u5e76\u4e0d\u6253\u7b97\u5b8c\u5168\u5b9e\u73b0bitcoin\u5168\u90e8\u534f\u8bae\uff0c\u751a\u81f3\u4f1a\u52a0\u4e00\u4e9b\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u6700\u8fd1\u6b63\u5728\u601d\u8003\u5229\u7528V8+llvm\u5b9e\u73b0\u865a\u62df\u673a\uff0c\u8bf4\u8fd9\u4e2a\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u6709\u4e9b\u56fd\u4eba\u5b9e\u5728\u7d20\u8d28\u582a\u5fe7\uff0c\u4e0a\u6765\u5c31\u8bf4\u4e0d\u662f\u5b8c\u6574\u5b9e\u73b0\uff0c\u72c2\u55b7\u3002 \u8fd9\u91cc\u7279\u522b\u8bf4\u660e\u4e0b\uff0c\u4e0d\u4f3a\u5019\u55b7\u5b50\uff0c\u55b7\u5b50\u8bf7\u7ed5\u9053\u5427\uff01\n\n\u4ece\u96f6\u7528python\u5b9e\u73b0\u7b80\u6613\u6bd4\u7279\u5e01\u9879\u76ee\uff0c \u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u533a\u5757\u94fe\u3002\n\n- \u52a0\u5bc6\u7b97\u6cd5\u7684\u5e94\u7528 (Base58)\n- p2p \u7f51\u7edc\n- \u533a\u5757\u94fe\u6570\u636e\u7684\u6301\u4e45\u5316\u5b58\u50a8\n- \u94fe\u4e0a\u6570\u636e\u7684\u67e5\u8be2\n- UTXO \u6a21\u578b\u5b9e\u73b0\n- Mekletree \n- Wallet & Transaction\n\n\n\n#### \u9879\u76ee\u67b6\u6784\u4ecb\u7ecd\n\n**\u5982\u4e0b\u4e3a\u6574\u4e2a\u9879\u76ee\u7684\u67b6\u6784\u56fe\u3002\u8fd9\u91cc\u4ece\u4e0b\u5f80\u4e0a\u5bf9\u4e0b\u56fe\u4f9d\u6b21\u505a\u4e2a\u8bf4\u660e**\n\n![\u67b6\u6784\u56fe](https://github.com/csunny/py-bitcoin/blob/master/docs/resource/img/py-bitcoin.jpeg)\n\n\n**\u4e00\u3001**  **Crypto** \u6b64\u6a21\u5757\u4e3aBTC\u94fe\u4e2d\u7528\u5230\u7684\u5bc6\u7801\u5b66\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e3b\u8981\u5305\u62ec**Base58**\u3001**hash**\u4ee5\u53ca**\u692d\u5706\u52a0\u5bc6**\u7b49\u7b97\u6cd5\u3002\u5728\u533a\u5757\u94fe\u4e2d\u4e00\u4e2a\u975e\u5e38\u6838\u5fc3\u7684\u5c31\u662f\u5c31\u662f**\u52a0\u5bc6\u6280\u672f**\uff0c\u6240\u4ee5**Crypto**\u5728\u6574\u4e2a\u6280\u672f\u67b6\u6784\u4e2d\u662f\u5360\u636e\u7740\u4e00\u4e2a\u76f8\u5f53\u91cd\u8981\u7684\u4f4d\u7f6e\uff0c\u662f\u6574\u4e2a\u533a\u5757\u94fe\u6280\u672f\u7684\u57fa\u77f3\uff0c\u627f\u8f7d\u7740\u6574\u4e2a\u533a\u5757\u94fe\u9879\u76ee\u7684\u987a\u5229\u8fd0\u884c\u3002\n\n**\u4e8c\u3001**  **Net** \u662f\u533a\u5757\u94fe\u4e2d\u7684**\u5bf9\u7b49\u7f51\u7edc**\u90e8\u5206\uff0c\u4e5f\u5c31\u662f**P2P**\uff08Peer-to-Peer\uff09\u7f51\u7edc\uff0c\u533a\u5757\u94fe\u6280\u672f\u662f\u4e00\u79cd\u53bb\u4e2d\u5fc3\u8bdd\u7684\u6280\u672f\uff0c\u533a\u522b\u4e8e\u4f20\u7edf\u7684\u4e2d\u5fc3\u5316\u6280\u672f\u67b6\u6784\uff0c\u5176\u4e0d\u662f**B/S**\uff08Brower/Server\uff09\u4e5f\u4e0d\u662f**C/S**\uff08Client/Server\uff09\u7684\u6a21\u5f0f\uff0c\u5176\u5404\u4e2a\u8282\u70b9\u4e4b\u95f4\u662f\u5b8c\u5168\u5bf9\u7b49\u7684\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u4e0d\u540c\u7684\u94fe\u6765\u8bf4\uff0c\u6216\u8005\u57fa\u4e8e\u4e0d\u540c\u7684\u5171\u8bc6\u7b97\u6cd5\uff0c\u5176\u8282\u70b9\u6240\u627f\u62c5\u7684\u89d2\u8272\u6709\u6240\u5dee\u5f02\u3002\u6bd4\u5982\u6709\u4e9b\u8282\u70b9\u8d1f\u8d23\u6316\u77ff\u662f\u77ff\u5de5\u8282\u70b9\uff0c\u6709\u4e9b\u8282\u70b9\u8d1f\u8d23\u662f\u94b1\u5305\u8f7b\u8282\u70b9(spv)\uff0c\u6709\u4e9b\u662f\u5168\u8282\u70b9 **full node** \uff08\u5b58\u50a8\u4e86\u5b8c\u6574\u7684\u94fe\u6570\u636e\uff09\u6240\u4ee5\u7f51\u7edc\u4e5f\u662f\u533a\u5757\u94fe\u4e2d\u6491\u8d77\u6574\u4e2a\u6280\u672f\u67b6\u6784\u7684\u4e00\u4e2a\u5e95\u5c42\u6280\u672f\u3002\n\n**\u4e09\u3001** **Storage \u5b58\u50a8**\uff0c\u5b58\u50a8\u60f3\u5fc5\u91cd\u8981\u6027\u4e0d\u7528\u8bb2\u5927\u5bb6\u4e5f\u90fd\u975e\u5e38\u6e05\u695a\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u8fd8\u662f\u8981\u5570\u55e6\u4e24\u53e5\u3002 \u4e0d\u7ba1\u662f\u5728**\u4e2d\u5fc3\u5316\u7684\u4e92\u8054\u7f51\u6280\u672f\u67b6\u6784**\u6216\u8005\u662f\u4f20\u7edf\u884c\u4e1a\u7684\u6280\u672f\u67b6\u6784\u6216\u8005\u4efb\u4f55\u5176\u4ed6\u4eba\u7c7b\u4ece\u4e8b\u7684\u6d3b\u52a8\u4e2d\uff0c\u5b58\u50a8\u4e00\u76f4\u90fd\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u8bdd\u9898\u3002 \u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u4eba\u8111\u662f\u6700\u65e9\u7684\u5b58\u50a8\u201c\u8bbe\u5907\u201d\uff0c\u4eba\u4e00\u5f00\u59cb\u6ca1\u6709\u53d1\u660e\u8bb0\u5e10\u5de5\u5177\u7684\u65f6\u5019\uff0c\u4eba\u8111\u5c31\u5728\u62c5\u4efb\u6b64\u9879\u529f\u80fd\uff0c\u968f\u7740\u4eba\u7c7b\u793e\u4f1a\u7684\u53d1\u5c55\u4e0e\u8fdb\u6b65\uff0c\u4eba\u4eec\u5b58\u50a8\u77e5\u8bc6\u7684\u65b9\u5f0f\u4e0e\u624b\u6bb5\u8d8a\u6765\u8d8a\u4e30\u5bcc\uff0c\u5230\u76ee\u524d\u4e3b\u8981\u4ee5\u7535\u5b50\u8bbe\u5907\u4e3a\u4e3b\u3002 \u5f53\u7136\u4e86\uff0c\u5728\u533a\u5757\u94fe\u7684\u4e16\u754c\u91cc\uff0c\u5b58\u50a8\u4e5f\u662f\u4e00\u4e2a\u9003\u4e0d\u5f00\u7684\u8bdd\u9898\uff0c\u751a\u81f3\u8bf4\uff0c\u5728**\u53bb\u4e2d\u5fc3\u5316\u7684\u67b6\u6784**\u5f53\u4e2d\uff0c\u5b58\u50a8\u662f\u4e00\u4e2a\u65b0\u7684\u673a\u9047\u4e0e\u6311\u6218\u3002\u76ee\u524d\u6bd4\u7279\u5e01\u94fe\u4e0a\u7684\u6570\u636e\u8fd8\u4e0d\u5927\uff0c\u4e5f\u4e3b\u8981\u6709\u51e0\u79cd\u4e3b\u6d41\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u6bd4\u5982\u5185\u5b58\u5b58\u50a8\u554a\uff0ck-v\u6570\u636e\u5e93\u5b58\u50a8\u554a\uff0c\u7b49\u7b49\u3002 \u8fd1\u5e74\u6765\uff0c\u968f\u7740\u533a\u5757\u94fe\u6280\u672f\u7684\u53d1\u5c55\u4ee5\u53ca\u66f4\u591a\u6570\u636e\u7684\u4ea7\u751f\u4e0e\u4e0a\u94fe\uff0c\u65b0\u7684\u5b58\u50a8\u65b9\u6848\u4e5f\u5df2\u7ecf\u8fdb\u5165\u4e86\u5927\u4f17\u7684\u89c6\u89d2\uff0c\u5176\u4e2d\u6700\u5177\u6709\u4ee3\u8868\u6027\u7684\u5c31\u662f**IPFS**   \n\n**\u56db\u3001** \u8bb2\u5b8c\u4e86\u57fa\u7840\u7684\u90e8\u5206\uff0c\u7ec8\u4e8e\u8981\u8fdb\u5165\u5230\u6bd4\u7279\u5e01\u7684\u6838\u5fc3\u90e8\u5206\u4e86\uff0c\u56e0\u4e3a\u524d\u9762\u90fd\u662f\u57fa\u7840\u90e8\u5206\u3002\u9996\u5148\u6211\u4eec\u4ece**BlockChain**\u5f00\u59cb\uff0cBlockChain\uff0c\u55ef\uff0c\u662f\u7684\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6574\u4e2a\u6280\u672f\u67b6\u6784\u7684\u4e3b\u89d2\uff0c\u56e0\u4e3aBlockChain\u5c31\u662f\u533a\u5757\u94fe\u554a\uff08\u54c8\u54c8\uff0c\u771f\u662f\u5e9f\u8bdd)\u3002\u5728**\u6bd4\u7279\u5e01\u767d\u76ae\u4e66**\u63cf\u8ff0\u5f53\u4e2d\uff0c\u4e3a\u4e86\u80fd\u591f\u5b9e\u73b0\u53bb\u4e2d\u4ecb\u5316\u7684\u76ee\u7684\uff0c\u4e5f\u5c31\u662f\u5728\u6ca1\u6709\u7b2c\u4e09\u65b9\u53c2\u4e0e\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u89e3\u51b3double-pay\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5:\n- **\u533a\u5757\u94fe**\n- **POW**\n\n\u4e00\u6761\u94fe\u5176\u672c\u8d28\u5c31\u662f\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a**\u94fe\u8868**\uff0c\u4e0a\u4e00\u4e2aNode\u6307\u5411\u4e0b\u4e00\u4e2aNode\uff0c\u53ea\u4e0d\u8fc7\u5728\u8fd9\u4e2a\u94fe\u8868\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u94fe\u8868\uff0c\u5176\u8bbe\u7f6e\u4e0d\u80fd\u88ab\u66f4\u6539\uff0c\u662f\u4e00\u4e2a\u53ea\u80fd\u6dfb\u52a0\u7684\u94fe\u8868\u3002\u5e76\u4e14\u6c38\u8fdc\u90fd\u53ea\u8ba4\u6700\u957f\u7684\u90a3\u4e00\u6761\u94fe\uff0c\u5176\u4ed6\u94fe\u90fd\u4e3a\u5047\uff0c\u53ea\u6709\u6700\u957f\u94fe\u662f\u771f\u3002 \n\n\u6b63\u5982\u56fe\u4e2d\u6240\u793a\uff0c\u4e00\u4e2a\u94fe\u4e2d\u5305\u542b\u6709\u5f88\u591a\u4fe1\u606f\u3002 \u9996\u5148\u4e00\u6761\u94fe\u662f\u7531\u5f88\u591a\u4e2a**Block**\u7ec4\u6210\uff0c\u4e5f\u5c31\u662f\u5177\u6709\u5f88\u591a\u4e2a\u5757\uff0c\u5bf9\u5e94\u4e0e\u94fe\u8868\u4e2d\u5c31\u662f\u4e00\u4e2a\u94fe\u8868\u7531\u5f88\u591a\u4e2a\u8282\u70b9\u7ec4\u6210\u3002 \u800c\u8fd9\u6bcf\u4e2a\u8282\u70b9\u4e2d\u53c8\u5305\u542b\u5f88\u591a\u4fe1\u606f\uff0c\u6700\u91cd\u8981\u7684\u56db\u4e2a\u4fe1\u606f\u5c31\u662f**Timestramp\uff08\u65f6\u95f4\u6233\uff09**\u3001**Hash\uff08\u81ea\u5df1\u7684hash\u503c\uff09**\u3001**PrevHash\uff08\u4e0a\u4e00\u4e2a\u5757\u7684Hash\u503c\uff09**\u3001**Transactions\uff08\u4ea4\u6613\u4fe1\u606f\uff09**\uff0c\u8fd9\u51e0\u4e2a\u503c\u90fd\u76f8\u5f53\u91cd\u8981\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u4e00\u5b9a\u8981\u7262\u8bb0\u3002 \n\n\u76f8\u4fe1\u4f60\u4e5f\u770b\u5230\u4e86**Transactions**\u6211\u662f\u5199\u7684\u590d\u6570\uff0c\u662f\u7684\u4e00\u4e2aBlock\u91cc\u9762\u53ef\u80fd\u4f1a\u5305\u542b\u5f88\u591a\u4e2a\u4ea4\u6613\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4ea4\u6613\u4fe1\u606f\u4e5f\u6b63\u662f\u6bd4\u7279\u5e01\u80fd\u591f\u7528\u4e8e\u652f\u4ed8\u3001\u4ea4\u6613\u7684\u4e3b\u8981\u539f\u56e0\u3002\u5728\u6bd4\u7279\u5e01\u5f53\u4e2d\uff0c\u4ea4\u6613\u4e3b\u8981\u7531\u4e09\u4e2a\u4e3b\u8981\u7684\u4fe1\u606f\u7ec4\u6210\uff1a\n-  **\u8f93\u5165**  \n-  **\u8f93\u51fa** \n-  **\u4ea4\u6613\u4fe1\u606f\uff0c\u4ea4\u6613\u503c**\n \n\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5148\u6682\u505c\u4e0b\uff0c\u5148\u6765\u4e86\u89e3\u4e0b**Address**\uff0c\u4e5f\u5c31\u662f**\u5730\u5740**\u3002 \u5728\u4f20\u7edf\u7684\u91d1\u878d\u9886\u57df\uff0c\u4e5f\u5c31\u662f\u76ee\u524d\u6211\u4eec\u4f7f\u7528\u7684\u5404\u4e2a\u94f6\u884c\u8d26\u53f7\uff0c\u6216\u8005\u652f\u4ed8\u5b9d\u8d26\u53f7\uff0c\u5176\u90fd\u662f**\u8d26\u6237\u6a21\u578b**\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4eba\u5bf9\u5e94\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8d26\u53f7\uff0c\u662f\u4e00\u79cd\u5b9e\u540d\u5236\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u5176\u6570\u636e\u5b8c\u5168\u7531**\u7b2c\u4e09\u65b9\u7684\u4e2d\u95f4\u673a\u6784**\u6240\u638c\u63e1\uff0c\u4e5f\u5c31\u662f\u94f6\u884c\uff0c\u6211\u4eec\u56e0\u4e3a\u76f8\u4fe1\u94f6\u884c\u7684\u4fe1\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u6015\u5c06\u6211\u4eec\u7684\u4e2a\u4eba\u4fe1\u606f\u6cc4\u9732\u7ed9\u94f6\u884c\uff0c\u4e5f\u4e0d\u662f\u7279\u522b\u62c5\u5fc3\u94f6\u884c\u4f1a\u5c06\u6211\u4eec\u7684\u4e2a\u4eba\u4fe1\u606f\u6cc4\u9732\u51fa\u53bb\u3002 \u5f53\u7136\uff0c\u968f\u7740\u4eba\u4eec\u5bf9\u4e2a\u4eba\u9690\u79c1\u610f\u8bc6\u7684\u5347\u7ea7\uff0c\u4ee5\u53ca\u94f6\u884c\u7b49\u4e2d\u95f4\u673a\u6784\u7684\u5f3a\u52bf\uff0c\u8fd9\u79cd\u4fe1\u4efb\u4e5f\u51fa\u73b0\u4e86\u5371\u673a\u3002\n\n\u6211\u4eec\u56de\u5230\u6bd4\u7279\u5e01\u4e0a\u6765\uff0c\u5728\u6bd4\u7279\u5e01\u91cc\u9762\u91c7\u7528\u7684\u662f\u524d\u9762\u63d0\u5230\u7684**\u692d\u5706\u52a0\u5bc6\u7684\u7b97\u6cd5**\uff0c\u5176\u7528\u692d\u5706\u52a0\u5bc6\u7b97\u6cd5\u751f\u6210\u4e86\u516c\u3001\u79c1\u94a5\u3002\u4e5f\u5c31\u662f\u5bf9\u5e94\u4e0e\u6211\u4eec\u94f6\u884c\u8d26\u6237\u7684\u8d26\u6237\u3001\u5bc6\u7801\u3002\u5bc6\u7801\u662f\u6709\u6211\u4eec\u4e2a\u4eba\u4fdd\u7ba1\u7684\uff0c\u516c\u94a5\u5319\u516c\u5f00\u7684\uff0c\u8c01\u90fd\u53ef\u4ee5\u67e5\u5230\uff0c\u5305\u62ec\u8fd9\u4e2a\u8d26\u53f7\u91cc\u7684\u94b1\u554a\u3001\u8f6c\u8d26\u8bb0\u5f55\u554a\u7b49\u7b49\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u67e5\u5230\uff0c \u770b\u5230\u8fd9\u91cc\u6709\u4e9b\u4eba\u4f30\u8ba1\u8981\u5fc3\u91cc\u5f00\u59cb\u6253\u9f13\u4e86\uff0c\u90a3\u65e2\u7136\u6211\u7684\u8d26\u53f7\u662f\u516c\u5f00\u7684\uff0c\u90a3\u4e48\u96be\u9053\u8bf4\u6211\u53bb\u4e2a\u4e1c\u839e\u3001\u641e\u4e2a\u5ae9\u6a21\u4e5f\u80fd\u88ab\u67e5\u5230\uff1f \u51c6\u786e\u6765\u8bf4\uff0c\u662f\u7684\uff01\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u76f8\u5f53\u7cbe\u5999\u7684\u8bbe\u8ba1\uff0c\u90a3\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u8ddf\u4eba\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9\u5e94\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u522b\u4eba\u80fd\u77e5\u9053\u8fd9\u4e2a\u5730\u5740\u5e72\u4e86\u5565\uff0c\u5374\u4e0d\u80fd\u77e5\u9053\u662f\u4f60\u5e72\u7684\u3002\uff08\u5f53\u7136\u4f60\u5982\u679c\u628a\u81ea\u5df1\u7684\u5730\u5740+\u8eab\u4efd\u516c\u5f00\uff0c\u90a3\u4f60\u8d76\u7d27\u51c6\u5907\u8dea\u6413\u8863\u677f\u5427\uff01\uff09 \u54c8\u54c8\uff0c\u6211\u77e5\u9053\uff0c\u8bf4\u5b8c\u8fd9\u4e2a\u7edd\u5927\u591a\u6570\u4eba\u90fd\u677e\u4e86\u4e00\u53e3\u6c14\u3002\n\n\u8bf4\u5b8c\u5730\u5740\uff0c\u90a3\u6211\u4eec\u7ee7\u7eed\u63a5\u7740\u804a\u4e0a\u9762\u7684\u4ea4\u6613\uff0c\u5176\u5b9e\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u4ea7\u751f\u90fd\u662f\u8ddf\u5730\u5740\u76f4\u63a5\u76f8\u5173\u7684\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u4ea4\u6613\u4fe1\u606f\u91cc\u9762\u5929\u7136\u6db5\u76d6\u4e86\u4ea4\u6613\u5730\u5740\uff0c\u5f53\u7136\u5728\u6bd4\u7279\u5e01\u4ea4\u6613\u4fe1\u606f\u91cc\u9762\u4f60\u53ef\u80fd\u770b\u4e0d\u5230\uff0c\u56e0\u4e3a\u8fd9\u80cc\u540e\u53c8\u662f\u5bc6\u7801\u5b66\u7684\u4e1c\u897f\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\uff0c\u603b\u4e4b\u4f60\u77e5\u9053\uff0c\u4f60\u7684\u6bcf\u4e00\u7b14\u4ea4\u6613\u90fd\u4f1a\u8ddf\u4f60\u7684\u5730\u5740\u76f4\u63a5\u76f8\u5173\uff0c\u800c\u4e14\u5f53\u4f60\u53d1\u751f\u4ea4\u6613\u7684\u65f6\u5019\u90fd\u4f1a\u89e6\u53d1**UTXO**\uff08\u6bd4\u7279\u5e01\u91cc\u9762\u72ec\u6709\u7684\u4ea4\u6613\u6a21\u578b\uff09\u6765\u9a8c\u8bc1\u662f\u5426\u6709\u8db3\u591f\u7684\u4f59\u989d\u4ee5\u53ca\u786e\u8ba4\u4ea4\u6613\u7684\u987a\u5229\u8fdb\u884c\uff0c\u8fd9\u6240\u6709\u7684\u4e1c\u897f\u7ec4\u5728\u4e00\u8d77\u5c31\u751f\u6210\u4e86\u4e00\u6761\u6bd4\u7279\u5e01\u94fe\u3002\u662f\u4e0d\u662f\u89c9\u5f97\u76f8\u5f53\u5f3a\u5927\uff1f \u55ef\uff0c\u66f4\u5f3a\u5927\u7684\u8fd8\u5728\u540e\u9762\u3002\n\n**\u4e94\u3001** \u91cd\u70b9\u6765\u4e86\uff0c\u524d\u9762\u8bb2\u5230\u4ea4\u6613\u7684\u65f6\u5019\u8981\u7528\u5230**UTXO**\uff0c\u90a3\u4e48\u5230\u5e95\u4ec0\u4e48\u662f**UTXO**\uff1f  **UTXO**\u662f\u6bd4\u7279\u5e01\u7279\u6709\u7684**\u4ea4\u6613\u6a21\u578b**\uff0c\u9632\u6b62\u4f60\u7684\u4ea4\u6613\u51fa\u9519\uff0c\u9a8c\u8bc1\u4f60\u7684\u8d26\u53f7\u4f59\u989d\u7b49\u4e00\u7cfb\u5217\u7684\u4e8b\u60c5\uff0c\u90fd\u662f\u57fa\u4e8e**UTXO**\u3002**UTXO**\u7684\u5b98\u65b9\u89e3\u91ca\u662f\uff1a**Unspent Transaction output.** \u600e\u4e48\u7ffb\u8bd1\u53ef\u4ee5\u81ea\u5df1\u67e5\u67e5\u5b57\u5178\uff0c\u6211\u89c9\u5f97\u7ffb\u8bd1\u8fc7\u6765\u6bd4\u8f83\u602a\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5**UTXO**\u4e86\uff0c\u90a3\u4e48**UTXO**\u600e\u4e48\u7406\u89e3\u5462\uff1f \u524d\u9762\u6709\u8bf4\u5728\u4e00\u4e2a\u4ea4\u6613\u91cc\u9762\u4f1a\u6709\u8f93\u5165\u3001\u8f93\u51fa\u3002\u5176\u5b9e\u5728\u6bcf\u6b21\u4ea4\u6613\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u53bb\u904d\u5386\u6574\u4e2a\u94fe\uff0c\u53bb\u67e5\u627e\u8fd9\u4e2a\u8d26\u53f7\u4e0b\u7684\u6240\u6709\u4ea4\u6613\uff0c\u7136\u540e\u5c06\u6240\u6709\u7684\u8f93\u5165\u3001\u8ddf\u8f93\u51fa\u8fdb\u884c\u5bf9\u6bd4\u3002\u5982\u679c\u8fd8\u6709\u5269\u4f59\u7684\u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u8fd8\u6709\u94b1\u6ca1\u82b1\u51fa\u53bb\uff0c\u800c\u4e14\u4f60\u53d1\u751f\u4ea4\u6613\u7684\u6570\u989d\u53c8\u6b63\u597d\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4f60\u5269\u4f59\u7684\u652f\u51fa\uff0c\u90a3\u4e48ok\uff0c\u4f60\u53ef\u4ee5\u53d1\u751f\u8fd9\u7b14\u4ea4\u6613\uff0c\u4e5f\u5c31\u662f\u4f60\u8fd8\u6709\u94b1\u4ea4\u6613\u3002\u5426\u5219\uff0c\u4f60\u5c31\u4e0d\u80fd\u8fdb\u884c\u4ea4\u6613\uff0c\u5c31\u8ddf\u4f60\u6ca1\u94b1\u4e0d\u80fd\u6d88\u8d39\u662f\u4e00\u6837\u7684\u9053\u7406\u3002\n\n\u5f53\u7136**UTXO**\u7684\u8bbe\u8ba1\u975e\u5e38\u7cbe\u7f8e\uff0c\u5176\u4e0d\u540c\u4e0e\u6211\u4eec\u65e5\u5e38\u6240\u7528\u7684\u8d26\u6237\u6a21\u578b\uff0c\u4e0d\u518d\u662f\u8d44\u4ea7\u3001\u8d1f\u503a\u8868\u7684\u90a3\u4e00\u5957\uff0c\u662f\u4e00\u4e2a\u5168\u65b0\u7684\u6982\u5ff5\uff0c\u6211\u8ba4\u4e3a\u76f8\u5f53\u60ca\u8273\u3002\u5f53\u7136\uff0c\u4f60\u6216\u8bb8\u4f1a\u8bb2\uff0c\u6bcf\u4e00\u6b21\u4ea4\u6613\u90fd\u8981\u91cd\u65b0\u67e5\u4e00\u904d\u6211\u5386\u53f2\u7684\u6240\u6709\u4ea4\u6613\uff0c\u90a3\u5c82\u4e0d\u662f\u5f88\u6162\uff1f \u55ef\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u5f53\u6570\u636e\u91cf\u5f88\u5927\u7684\u65f6\u5019\uff0c\u662f\u5f88\u6162\u3002\u8fd9\u4e00\u70b9\u6bd4\u7279\u5e01\u4e5f\u60f3\u5230\u4e86\uff0c\u6240\u4ee5\u4ed6\u91c7\u7528\u4e86**chainstate** \u6211\u8fd9\u91cc\u53eb**\u72b6\u6001\u673a**\u6765\u4fdd\u5b58\u8d26\u6237\u7684\u5386\u53f2\u4ea4\u6613\u72b6\u6001\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u6bcf\u6b21\u90fd\u8981\u904d\u5386\u6574\u4e2a\u94fe\uff0c\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u6548\u7387\u3002\n\n**\u516d\u3001** **POW** \u524d\u9762\u63d0\u5230\u4e3a\u4e86\u5b9e\u73b0\u53bb\u4e2d\u5fc3\u5316\u7684\u76ee\u7684\uff0c\u6bd4\u7279\u5e01\u63d0\u51fa\u4e86\u4e24\u4e2a\u6838\u5fc3\u7684\u6982\u5ff5\uff0c\u4e00\u4e2a\u662f\u94fe\u3001\u53e6\u4e00\u4e2a\u5c31\u662f\u5171\u8bc6\u7b97\u6cd5**POW**\uff08proof-of-work\uff09\u5de5\u4f5c\u91cf\u8bc1\u660e\u7b97\u6cd5\uff0c\u7b80\u5355\u7406\u89e3\u5c31\u662f\u8c01\u5e72\u7684\u6d3b\u6700\u591a\uff0c\u8c01\u6765\u8bb0\u8d26\uff0c\u5c06\u533a\u5757\u7684\u4ea4\u6613\u4fe1\u606f\u5199\u5230\u94fe\u6761\u4e0a\u3002**POW**\u7b97\u6cd5\uff0c\u662f\u76ee\u524d\u6700\u4e3a\u6210\u719f\u7684\u7b97\u6cd5\uff0c\u6b63\u662f\u56e0\u4e3a**POW**\uff0c\u9020\u5c31\u4e86**\u6316\u77ff**\u884c\u4e1a\uff0c\u4e5f\u8ba9\u6211\u56fd\u7684\u534a\u5bfc\u4f53\u82af\u7247\u884c\u4e1a\u6709\u4e86\u5341\u8db3\u7684\u8fdb\u6b65\u3002\u5982\u679c\u975e\u8981\u8bf4\u6211\u4eec\u5728\u534a\u5bfc\u4f53\u9886\u57df\u91cc\u9762\u8dd1\u5728\u6700\u524d\u9762\u7684\u662f\u4ec0\u4e48\uff1f\u90a3\u6211\u4e00\u5b9a\u4f1a\u8bf4\u662f**\u77ff\u673a**\u3002\n\n**\u4e03\u3001** **RPC**\u4f5c\u4e3a\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e4b\u95f4\u7684\u4e00\u79cd\u901a\u4fe1\u65b9\u5f0f\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u8981\u8bf4\u7684\u3002 \n\n**\u516b\u3001** **API**\u5c42\u5c31\u662f\u6574\u4e2a\u7cfb\u7edf\u66b4\u9732\u5728\u5916\u9762\u7684\u90e8\u5206\uff0c\u662f\u5916\u90e8\u4e0e\u7cfb\u7edf\u8fdb\u884c\u901a\u4fe1\u7684\u7a97\u53e3\u3002\n\n\n\n#### \u603b\u7ed3\n\u770b\u4f3c\u7b80\u7b80\u5355\u5355\u7684\u4e00\u5f20\u56fe\uff0c\u8bb2\u4e86\u5927\u534a\u5929\uff0c\u8fd8\u611f\u89c9\u6ca1\u8bb2\u5f88\u5b8c\u6574\uff0c\u91cc\u9762\u8fd8\u6709\u5f88\u591a\u5185\u5bb9\u9700\u8981\u9610\u8ff0\u3001\u9700\u8981\u6316\u6398\uff0c\u8fd9\u4e5f\u6b63\u4ece\u4fa7\u9762\u8bf4\u660e\u4e86\u6bd4\u7279\u5e01\u6574\u4e2a\u7cfb\u7edf\u7684\u5f3a\u5927\uff0c\u770b\u4f3c\u7b80\u5355\u7684\u7cfb\u7edf\u91cc\u9762\uff0c\u5305\u542b\u4e86\u592a\u591a\u7684\u4e1c\u897f\u3002 \u9700\u8981\u6211\u4eec\u6162\u6162\u53bb\u6316\u6398\uff0c\u53bb\u5403\u900f\u3002 \u67b6\u6784\u7684\u90e8\u5206\u5c31\u7b80\u5355\u8bb2\u5230\u8fd9\u91cc\uff0c\u65e2\u7136\u8fd9\u662f\u4e00\u4e2a\u7cfb\u5217\u7684\u6559\u7a0b\uff0c\u540c\u65f6\u4ee3\u7801\u53c8\u662f\u4f1a\u5f00\u6e90\u51fa\u6765\u7684\uff0c\u90a3\u4e48\u5c31\u5f88\u6709\u5fc5\u8981\u5728\u8fd9\u91cc\u8d34\u4e00\u4e0b\uff0c\u6574\u4e2a\u9879\u76ee\u7684\u4ee3\u7801\u7ec4\u7ec7\u67b6\u6784\uff0c\u6bd5\u7adf\uff0ctalk is cheap\uff0c show me the code \u662f\u6211\u4eec\u7684\u9075\u65e8\u3002\n\n\n#### \u6587\u6863\n- [\u4e13\u680f\u6587\u6863](https://xiaozhuanlan.com/eosio)\n\n- \u7ecf\u6d4e\u673a\u5668\u662f\u4ec0\u4e48\u8fd0\u4f5c\u7684 [\u4e2d\u6587](https://v.qq.com/x/page/n0515obtcil.html) [\u82f1\u6587](https://www.youtube.com/watch?v=PHe0bXAIuk0)  \uff08\u6709\u52a9\u4e8e\u7406\u89e3\u6bd4\u7279\u5e01UTXO\u4ea4\u6613\u6a21\u578b\uff09\n\n\n#### Licence\n\npy-bitcoin code is licensed under the GNU GENERAL PUBLIC LICENSE  Version 3, 29 June 2007 (https://github.com/csunny/py-bitcoin/blob/master/LICENSE)\n"
 },
 {
  "repo": "gurnec/btcrecover",
  "language": "Python",
  "readme_contents": "# *btcrecover* [![Build Status](https://travis-ci.org/gurnec/btcrecover.svg?branch=master)](https://travis-ci.org/gurnec/btcrecover) ![license](https://img.shields.io/badge/license-GPLv2-blue.svg) #\n\n*btcrecover* is an open source Bitcoin wallet password and seed recovery tool. It is designed for the case where you already know most of your password or seed, but need assistance in trying different possible combinations.\n\n\n## Quick Start ##\n\nTo try recovering your password, please start with the **[Password Recovery Quick Start](TUTORIAL.md#btcrecover-tutorial)**.\n\nIf you mostly know your recovery seed/mnemonic (12-24 recovery words), but think there may be a mistake in it, please see the **[Seed Recovery Quick Start](docs/Seedrecover_Quick_Start_Guide.md)**.\n\nIf you find *btcrecover* helpful, please consider a small donation:\n**[3Au8ZodNHPei7MQiSVAWb7NB2yqsb48GW4](bitcoin:3Au8ZodNHPei7MQiSVAWb7NB2yqsb48GW4?label=btcrecover)**\n\n**Thank You!**\n\n\n## Features ##\n\n * Bitcoin wallet password recovery support for:\n     * [Armory](https://btcarmory.com/)\n     * [Bitcoin Unlimited](https://www.bitcoinunlimited.info/)/[Classic](https://bitcoinclassic.com/)/[XT](https://bitcoinxt.software/)/[Core](https://bitcoincore.org/)\n     * [MultiBit HD](https://multibit.org/) and [MultiBit Classic](https://multibit.org/help/v0.5/help_contents.html)\n     * [Electrum](https://electrum.org/) (1.x and 2.x)\n     * Most wallets based on [bitcoinj](https://bitcoinj.github.io/), including [Hive for OS X](https://github.com/hivewallet/hive-mac/wiki/FAQ)\n     * BIP-39 passphrases, Bitcoin & Ethereum supported (e.g. [TREZOR](https://www.bitcointrezor.com/) & [Ledger](https://www.ledgerwallet.com/) passphrases)\n     * [mSIGNA (CoinVault)](https://ciphrex.com/products/)\n     * [Blockchain.info](https://blockchain.info/wallet)\n     * [pywallet --dumpwallet](https://github.com/jackjack-jj/pywallet) of Bitcoin Unlimited/Classic/XT/Core wallets\n     * [Bitcoin Wallet for Android/BlackBerry](https://play.google.com/store/apps/details?id=de.schildbach.wallet) spending PINs and encrypted backups\n     * [KnC Wallet for Android](https://github.com/kncgroup/bitcoin-wallet) encrypted backups\n     * [Bither](https://bither.net/)\n * Altcoin password support for most wallets derived from one of those above, including:\n     * [Litecoin Core](https://litecoin.org/)\n     * [Electrum-LTC](https://electrum-ltc.org/)\n     * [Litecoin Wallet for Android](https://litecoin.org/) encrypted backups\n     * [Dogecoin Core](http://dogecoin.com/)\n     * [MultiDoge](http://multidoge.org/)\n     * [Dogecoin Wallet for Android](http://dogecoin.com/) encrypted backups\n * Bitcoin & Ethereum seed recovery support for:\n     * [Electrum](https://electrum.org/) (1.x and 2.x, plus wallet file loading support)\n     * BIP-32/39 compliant wallets ([bitcoinj](https://bitcoinj.github.io/)), including:\n         * [MultiBit HD](https://multibit.org/)\n         * [Bitcoin Wallet for Android/BlackBerry](https://play.google.com/store/apps/details?id=de.schildbach.wallet) (with seeds previously extracted by [decrypt\\_bitcoinj\\_seeds](https://github.com/gurnec/decrypt_bitcoinj_seed))\n         * [Hive for Android](https://play.google.com/store/apps/details?id=com.hivewallet.hive.cordova), [for iOS](https://github.com/hivewallet/hive-ios), and [Hive Web](https://hivewallet.com/)\n         * [breadwallet for iOS](https://breadwallet.com/)\n     * BIP-32/39/44 Bitcoin & Ethereum compliant wallets, including:\n         * [Mycelium for Android](https://wallet.mycelium.com/)\n         * [TREZOR](https://www.bitcointrezor.com/)\n         * [Ledger](https://www.ledgerwallet.com/)\n         * [Jaxx](https://jaxx.io/)\n         * [MyEtherWallet](https://www.myetherwallet.com/)\n         * [Bither](https://bither.net/)\n         * [Blockchain.info](https://blockchain.info/wallet)\n * [Free and Open Source](http://en.wikipedia.org/wiki/Free_and_open-source_software) - anyone can download, inspect, use, and redistribute this software\n * Supported on Windows, Linux, and OS X\n * Support for Unicode passwords and seeds\n * Multithreaded searches, with user-selectable thread count\n * Experimental [GPU acceleration](docs/GPU_Acceleration.md) for Bitcoin Unlimited/Classic/XT/Core, Armory, and derived altcoin wallets\n * Wildcard expansion for passwords\n * Typo simulation for passwords and seeds\n * Progress bar and ETA display (at the command line)\n * Optional autosave - interrupt and continue password recoveries without losing progress\n * Automated seed recovery with a simple graphical user interface\n * \u201cOffline\u201d mode for nearly all supported wallets - use one of the [extract scripts (click for more information)](docs/Extract_Scripts.md) to extract just enough information to attempt password recovery, without giving *btcrecover* or whoever runs it access to *any* of the addresses or private keys in your Bitcoin wallet.\n * \u201cNearly offline\u201d mode for Armory - use an [extract script (click for more information)](docs/Extract_Scripts.md) to extract a single private key for attempting password recovery. *btcrecover* and whoever runs it will only have access to this one address/private key from your Bitcoin wallet (read the link above for an important caveat).\n"
 },
 {
  "repo": "denpamusic/php-bitcoinrpc",
  "language": "PHP",
  "readme_contents": "# Simple Bitcoin JSON-RPC client based on GuzzleHttp\n\n[![Latest Stable Version](https://poser.pugx.org/denpa/php-bitcoinrpc/v/stable)](https://packagist.org/packages/denpa/php-bitcoinrpc)\n[![License](https://poser.pugx.org/denpa/php-bitcoinrpc/license)](https://packagist.org/packages/denpa/php-bitcoinrpc)\n[![ci](https://github.com/denpamusic/php-bitcoinrpc/actions/workflows/ci.yml/badge.svg)](https://github.com/denpamusic/php-bitcoinrpc/actions/workflows/ci.yml)\n[![Code Climate](https://codeclimate.com/github/denpamusic/php-bitcoinrpc/badges/gpa.svg)](https://codeclimate.com/github/denpamusic/php-bitcoinrpc)\n[![Code Coverage](https://codeclimate.com/github/denpamusic/php-bitcoinrpc/badges/coverage.svg)](https://codeclimate.com/github/denpamusic/php-bitcoinrpc/coverage)\n\n## Installation\nRun ```php composer.phar require denpa/php-bitcoinrpc``` in your project directory or add following lines to composer.json\n```javascript\n\"require\": {\n    \"denpa/php-bitcoinrpc\": \"^2.2\"\n}\n```\nand run ```php composer.phar install```.\n\n## Requirements\nPHP 8.0 or higher  \n_For PHP 5.6 to 7.0 use [php-bitcoinrpc v2.0.x](https://github.com/denpamusic/php-bitcoinrpc/tree/2.0.x)._  \n_For PHP 7.0 to 7.4 use [php-bitcoinrpc v2.0.x](https://github.com/denpamusic/php-bitcoinrpc/tree/2.1.x)._  \n\n## Usage\nCreate new object with url as parameter\n```php\n/**\n * Don't forget to include composer autoloader by uncommenting line below\n * if you're not already done it anywhere else in your project.\n **/\n// require 'vendor/autoload.php';\n\nuse Denpa\\Bitcoin\\Client as BitcoinClient;\n\n$bitcoind = new BitcoinClient('http://rpcuser:rpcpassword@localhost:8332/');\n```\nor use array to define your bitcoind settings\n```php\n/**\n * Don't forget to include composer autoloader by uncommenting line below\n * if you're not already done it anywhere else in your project.\n **/\n// require 'vendor/autoload.php';\n\nuse Denpa\\Bitcoin\\Client as BitcoinClient;\n\n$bitcoind = new BitcoinClient([\n    'scheme'        => 'http',                 // optional, default http\n    'host'          => 'localhost',            // optional, default localhost\n    'port'          => 8332,                   // optional, default 8332\n    'user'          => 'rpcuser',              // required\n    'password'      => 'rpcpassword',          // required\n    'ca'            => '/etc/ssl/ca-cert.pem',  // optional, for use with https scheme\n    'preserve_case' => false,                  // optional, send method names as defined instead of lowercasing them\n]);\n```\nThen call methods defined in [Bitcoin Core API Documentation](https://bitcoin.org/en/developer-reference#bitcoin-core-apis) with magic:\n```php\n/**\n * Get block info.\n */\n$block = $bitcoind->getBlock('000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f');\n\n$block('hash')->get();     // 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n$block['height'];          // 0 (array access)\n$block->get('tx.0');       // 4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\n$block->count('tx');       // 1\n$block->has('version');    // key must exist and CAN NOT be null\n$block->exists('version'); // key must exist and CAN be null\n$block->contains(0);       // check if response contains value\n$block->values();          // array of values\n$block->keys();            // array of keys\n$block->random(1, 'tx');   // random block txid\n$block('tx')->random(2);   // two random block txid's\n$block('tx')->first();     // txid of first transaction\n$block('tx')->last();      // txid of last transaction\n\n/**\n * Send transaction.\n */\n$result = $bitcoind->sendToAddress('mmXgiR6KAhZCyQ8ndr2BCfEq1wNG2UnyG6', 0.1);\n$txid = $result->get();\n\n/**\n * Get transaction amount.\n */\n$result = $bitcoind->listSinceBlock();\n$bitcoin = $result->sum('transactions.*.amount');\n$satoshi = \\Denpa\\Bitcoin\\to_satoshi($bitcoin);\n```\nTo send asynchronous request, add Async to method name:\n```php\n$bitcoind->getBlockAsync(\n    '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f',\n    function ($response) {\n        // success\n    },\n    function ($exception) {\n        // error\n    }\n);\n```\n\nYou can also send requests using request method:\n```php\n/**\n * Get block info.\n */\n$block = $bitcoind->request('getBlock', '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f');\n\n$block('hash');            // 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n$block['height'];          // 0 (array access)\n$block->get('tx.0');       // 4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\n$block->count('tx');       // 1\n$block->has('version');    // key must exist and CAN NOT be null\n$block->exists('version'); // key must exist and CAN be null\n$block->contains(0);       // check if response contains value\n$block->values();          // get response values\n$block->keys();            // get response keys\n$block->first('tx');       // get txid of the first transaction\n$block->last('tx');        // get txid of the last transaction\n$block->random(1, 'tx');   // get random txid\n\n/**\n * Send transaction.\n */\n$result = $bitcoind->request('sendtoaddress', 'mmXgiR6KAhZCyQ8ndr2BCfEq1wNG2UnyG6', 0.06);\n$txid = $result->get();\n\n```\nor requestAsync method for asynchronous calls:\n```php\n$bitcoind->requestAsync(\n    'getBlock',\n    '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f',\n    function ($response) {\n        // success\n    },\n    function ($exception) {\n        // error\n    }\n);\n```\n\n## Multi-Wallet RPC\nYou can use `wallet($name)` function to do a [Multi-Wallet RPC call](https://en.bitcoin.it/wiki/API_reference_(JSON-RPC)#Multi-wallet_RPC_calls):\n```php\n/**\n * Get wallet2.dat balance.\n */\n$balance = $bitcoind->wallet('wallet2.dat')->getbalance();\n\necho $balance->get(); // 0.10000000\n```\n\n## Exceptions\n* `Denpa\\Bitcoin\\Exceptions\\BadConfigurationException` - thrown on bad client configuration.\n* `Denpa\\Bitcoin\\Exceptions\\BadRemoteCallException` - thrown on getting error message from daemon.\n* `Denpa\\Bitcoin\\Exceptions\\ConnectionException` - thrown on daemon connection errors (e. g. timeouts)\n\n\n## Helpers\nPackage provides following helpers to assist with value handling.\n#### `to_bitcoin()`\nConverts value in satoshi to bitcoin.\n```php\necho Denpa\\Bitcoin\\to_bitcoin(100000); // 0.00100000\n```\n#### `to_satoshi()`\nConverts value in bitcoin to satoshi.\n```php\necho Denpa\\Bitcoin\\to_satoshi(0.001); // 100000\n```\n#### `to_ubtc()`\nConverts value in bitcoin to ubtc/bits.\n```php\necho Denpa\\Bitcoin\\to_ubtc(0.001); // 1000.0000\n```\n#### `to_mbtc()`\nConverts value in bitcoin to mbtc.\n```php\necho Denpa\\Bitcoin\\to_mbtc(0.001); // 1.0000\n```\n#### `to_fixed()`\nTrims float value to precision without rounding.\n```php\necho Denpa\\Bitcoin\\to_fixed(0.1236, 3); // 0.123\n```\n\n## License\n\nThis product is distributed under MIT license.\n\n## Donations\n\nIf you like this project, please consider donating:<br>\n**BTC**: 3L6dqSBNgdpZan78KJtzoXEk9DN3sgEQJu<br>\n**Bech32**: bc1qyj8v6l70c4mjgq7hujywlg6le09kx09nq8d350\n\n\u2764Thanks for your support!\u2764\n"
 },
 {
  "repo": "richox/okcoin-leeks-reaper",
  "language": "Groovy",
  "readme_contents": "OKCoin\u97ed\u83dc\u6536\u5272\u673a\n================\n\n\u8fd9\u662f\u4e00\u4e2a\u5728OKCoin\u6bd4\u7279\u5e01\u4ea4\u6613\u5e73\u53f0\u4e0a\u7684\u9ad8\u9891\u4ea4\u6613\u673a\u5668\u4eba\u7a0b\u5e8f\uff0c\u4ece2016\u5e746\u6708\u7b56\u7565\u57fa\u672c\u5b9a\u578b\uff0c\u52302017\u5e741\u6708\u4e2d\u65ec\uff0c\u8fd9\u4e2a\u7b56\u7565\u6210\u529f\u7684\u628a\u6700\u521d\u6295\u5165\u76846000\u5757\u94b1\u5237\u5230\u4e86250000\u3002\u7531\u4e8e\u8fd1\u65e5\u592e\u884c\u5bf9\u6bd4\u7279\u5e01\u5b9e\u884c\u9ad8\u538b\u653f\u7b56\uff0c\u5404\u5927\u5e73\u53f0\u90fd\u505c\u6b62\u4e86\u914d\u8d44\uff0c\u5e76\u4e14\u5f00\u59cb\u5f81\u6536\u4ea4\u6613\u8d39\uff0c\u8be5\u7b56\u7565\u5b9e\u9645\u4e0a\u5df2\u7ecf\u5931\u6548\u4e86\u3002\n\n ![image](https://github.com/richox/okcoin-leeks-reaper/raw/master/img/screenshot.png)\n\n\u672c\u673a\u5668\u4eba\u7a0b\u5e8f\u57fa\u4e8e\u4e24\u4e2a\u4e3b\u8981\u7b56\u7565\uff1a\n\n1. \u8d8b\u52bf\u7b56\u7565\uff1a\u5728\u4ef7\u683c\u53d1\u751f\u8d8b\u52bf\u6027\u7684\u6ce2\u52a8\u65f6\uff0c\u53ca\u65f6\u4e0b\u5355\u8ddf\u8fdb\uff0c\u5373\u4fd7\u8bdd\u8bf4\u7684**\u8ffd\u6da8\u6740\u8dcc**\u3002\n2. \u5e73\u8861\u7b56\u7565\uff1a\u4ed3\u4f4d\u504f\u79bb50%\u65f6\uff0c\u653e\u51fa\u5c0f\u5355\u4f7f\u4ed3\u4f4d\u9010\u6e10\u56de\u5f5250%\uff0c\u9632\u6b62\u8d8b\u52bf\u672b\u671f\u7684\u53cd\u8f6c\u9020\u6210\u56de\u64a4\uff0c\u5373**\u6536\u76ca\u843d\u888b\uff0c\u4e0d\u5403\u9c7c\u5c3e**\u3002\n\n\u672c\u7a0b\u5e8f\u8981\u6c42\u5e73\u8861\u4ed3\u4f4d\uff0c\u5373\uff08\u672c\u91d1+\u878d\u8d44=\u878d\u5e01\uff09\uff0c\u4f7f\u5f97\u4ed3\u4f4d\u572850%\u65f6\u51c0\u8d44\u4ea7\u4e0d\u968f\u7740\u4ef7\u683c\u6ce2\u52a8\uff0c\u4e5f\u4fdd\u8bc1\u4e86\u53d1\u751f\u8d8b\u52bf\u6027\u6ce2\u52a8\u65f6**\u6da8\u8dcc\u90fd\u8d5a**\u3002\n\n\u611f\u8c22\u4ee5\u4e0b\u4e24\u4e2a\u9879\u76ee\uff1a\n\n* https://github.com/sutra/okcoin-client\n* https://github.com/timmolter/xchange\n\n\u611f\u8c22OKCoin\uff1a\n\n* https://www.okcoin.cn\n\nBTC: 3QFn1qfZMhMQ4FhgENR7fha3T8ZVw1bEeU\n"
 },
 {
  "repo": "Michal2SAB/Bitcoin-Stealer",
  "language": "JavaScript",
  "readme_contents": "# Bitcoin-Stealer\nGenerate random bitcoin wallets & private keys (seeds) and then check if they match any wallet that has a positive balance, and then take all the btc from it.\n\n# CHANGELOG\n<details>\n   <summary>2023-01-11</summary>\n   \n   - Now calling garbage collector to potentially stop from memory leaking\n   - Releasing references to objects to allow the gc reclaim the memory\n   - Loading riches.txt contents to a map() object to increase the scripts overall performance\n</details>\n\n<details>\n   <summary>2022-04-04</summary>\n  \n   - Added a message to console when program starts, to calm down people who think the program isn't working because the console is blank.\n</details>\n\n<details>\n   <summary>2021-12-09</summary>\n  \n   - Fixed big memory leak issue and removed extra scripts that were necessary before, that are unnecesary now.\n</details>\n\n<details>\n   <summary>2021-09-26</summary>\n  \n   - Linux support: linux users will go to the \"linux\" directory to run the program.\n</details>\n\n# REQUIREMENTS\n1. Install Node.js\n2. npm i\n3. Lots of time on your hands.. there's a lot and I mean A LOT of possible addresses and keys, you will be extremely lucky to find any that will match your list.\n\n# HOW TO RUN\nJust start run.bat (or run.sh if you're on linux).\n\n# SPEED / PERFORMANCE\nResults from a somewhat decent computer:\n- 1.56 million checks every 1 minute\n- 7.2 billion checks in 1 day\n- 54 billion checks in a week\n- 216 billion checks in a month\n- 2.8 trillion checks in a year\n\nBut please keep in mind that this is still really not much compared to all possible combinations that should be checked.\n\n# VIDEO\n\n[![YT VID](http://img.youtube.com/vi/JaKDEWXOKn0/0.jpg)](http://www.youtube.com/watch?v=JaKDEWXOKn0 \"Bitcoin - Find Private Keys (Seeds) For Lost and Rich Wallets | NEW 2021\")\n\n# TEST IT\nGo to the test folder and hit run. It will show you what would happen if a wallet from your list was found.\n\n# WHY DO THIS?\nThere are a lot of wallets with high balances that are lost forever, which means nobody can access them and the money is basically there just to be picked up by anyone. This program can possibly find these lost wallets and their matching private keys and take the btc out of them.\n\n# WANT TO THANK ME?\nIf you would like to tip me in case you won anything or you appreciate the program, here is my BTC wallet and ETH. It will be greatly appreciated. Also you can give this project a star :)\n\nMy Bitcoin: 1B8xs4LWbwFq4Zi4pzEmjNYkTCgsUByb5L\n\nMy Ethereum: 0xe89c84A7758429b4D11a2091e1dccf7433328Fa9\n\n# NOTE\nI'm not actually responsible for what you do with this. Don't steal active wallet money, that's just wrong. Not to mention the new wallets are most likely protected much more and stuff.\n\n# Also Note\nIt's almost impossible to find anything. Even though this method is not bruteforce and is creating random keys, the chances of winning are still very very low. You could get lucky though, good luck!\n\n# Check out the new project, for ethereum!\nhttps://github.com/Michal2SAB/Ethereum-Stealer\n"
 },
 {
  "repo": "matja/bitcoin-tool",
  "language": "C",
  "readme_contents": "## Introduction\nbitcoin-tool is a simple tool written in C to convert Bitcoin keys to addresses,\nand various other conversions of keys.\n\nDisclaimer: THIS CODE IS EXPERIMENTAL, IT IS PROBABLY BUGGY. PLEASE DO NOT\nTRUST YOUR BITCOINS WITH IT.  IT IS EASY TO MAKE AN IRREVERSIBLE MISTAKE AND\nSEND YOUR BITCOINS TO A ADDRESS WITH NO WAY OF GETTING THEM BACK.\n\n## Build Instructions\nRun `make test` to compile and run all tests.\n\n### Requirements\n* A C compiler\n* OpenSSL headers and libraries (with elliptic curve support)\n* GNU make : Packages: FreeBSD `gmake`\n* GNU bash (for running tests)\n* xxd (for running tests) : Packages: Linux `vim`, FreeBSD `vim` or `vim-lite`\n\n## Platform-specific Instructions\n### Gentoo Linux\nGentoo by default enables the `bindist` flag on the openssl package, which disables\nelliptic curve support, presumably because of software patent concerns.  Since\nthe `openssh` package also has `bindist` USE-flag set, the USE-flag must be disabled\nin both, then re-emerged to get an OpenSSL library with elliptic curve support.\n\n### FreeBSD\nUse `gmake` to process the Makefile.\n\nTested on:\n* FreeBSD 10.4 amd64, clang 3.4.1\n* FreeBSD 11.1 amd64, clang 4.0.0\n\n### Windows\nTested on Windows 10 64-bit edition using Cygwin (64-bit) with\n`x86_64_w64_mingw32-gcc` compiler.\n\nRequires Cygwin packages: `bash`, `make`, `mingw64-x86_64-gcc-core`, `openssl-devel`\n\nUse `make CC=other_cc` to specify a different compiler if needed.\n\n## Description\nI created this because I couldn't find an offline tool or library able\nto create addresses from Bitcoin private keys, and as a learning exercise in\nBitcoin address formats and ECDSA.\n\nSome day I'd like to replace the dependancy on OpenSSL with my own\nimplementation of ECDSA (for portability).\n\nThe option names are a little verbose but I wanted to make it clear exactly what\neach one is referring to, especially when it is possible to make a costly\nmistake.\n\nI've tried to add as much sanity checking as possible, to remove the scope\nfor errors and misinterpretation of data.  This sometimes boreders on the\npedantic and annoying.  For example, if the file for `--input-file` contains\nmore data than is expected, then it'll refuse to process it at all.\n\n### Command-line options\n```\n  --input-type : Input data type, must be one of :\n      mini-private-key : 30 character Casascius mini private key\n      private-key      : 32 byte ECDSA private key\n      private-key-wif  : 33/34 byte ECDSA WIF private key\n      public-key       : 33/65 byte ECDSA public key\n      public-key-sha   : 32 byte SHA256(public key) hash\n      public-key-rmd   : 20 byte RIPEMD160(SHA256(public key)) hash\n      address          : 21 byte Bitcoin address (prefix + hash)\n  --input-format : Input data format, must be one of :\n      raw         : Raw binary\n      hex         : Hexadecimal encoded\n      base58      : Base58 encoded\n      base58check : Base58Check encoded (most common)\n  --output-type  : Output data type, must be one of :\n      all              : All output types, as type:value pairs, most of which\n                         are never commonly used, probably for good reason.\n      mini-private-key : 30 character Casascius mini private key\n      private-key      : 32 byte ECDSA private key\n      private-key-wif  : 33/34 byte ECDSA WIF private key\n      public-key       : 33/65 byte ECDSA public key\n      public-key-sha   : 32 byte SHA256(public key) hash\n      public-key-rmd   : 20 byte RIPEMD160(SHA256(public key)) hash\n      address          : 21 byte Bitcoin address (prefix + hash)\n  --output-format : Output data format, must be one of :\n      raw         : Raw binary\n      hex         : Hexadecimal encoded\n      base58      : Base58 encoded\n      base58check : Base58Check encoded (most common)\n\n  --input               : Specify input data on command line\n  --input-file          : Specify file name to read for input ('-' for stdin)\n  --batch               : Read multiple lines of input from --input-file\n  --ignore-input-errors : Continue processing batch input if errors are found.\n\n  --public-key-compression : Can be one of :\n      auto         : determine compression from base58 private key (default)\n      compressed   : force compressed public key\n      uncompressed : force uncompressed public key\n    (must be specified for raw/hex keys, should be auto for base58)\n  --network        : Network type of keys, one of :\n      bitcoin\n      bitcoin-testnet\n      litecoin\n      litecoin-testnet\n      feathercoin\n      feathercoin-testnet\n      dogecoin\n      dogecoin-testnet\n      quarkcoin\n      quarkcoin-testnet\n      darkcoin\n      darkcoin-testnet\n      jumbucks\n      jumbucks-testnet\n  --fix-base58check : Attempt to fix a Base58Check string by changing\n                      characters until the checksum matches.\n  --fix-base58check-change-chars : Maximum number of characters to change\n                                   (default=3)\n```\nThe `mini-private-key` input-type requires --input to be a 30 character ASCII\nstring in valid mini private key format and --input-format to be `raw`.\n\nIf raw keys are input and an address output is required, then the key type\nprefix must be specified via --network\n\n### Examples\n\n#### Manual address / key generation\n\nLet's manually generate a Bitcoin address and private key for the purpose of an offline wallet (cold storage).\n\nCreate private key:\n```\n$ openssl rand 32 > key.bin\n```\n\nInspect private key:\n```\n$ hexdump -e '32/1 \"%02X\" \"\\n\"' key.bin\n\n62A87AD3272B41E67108FEA10C57BA6ED609F2F7A2264A83B690CD45707090D1\n```\n\nConvert private key to WIF (Wallet Import Format).  Since it is a raw key, the\nnetwork type must be explicitally set (to bitcoin in this case) because it\ncannot be determined from the raw key :\n```\n$ ./bitcoin-tool \\\n    --network bitcoin \\\n    --input-type private-key \\\n    --input-format raw \\\n    --input-file key.bin \\\n    --output-type private-key-wif \\\n    --output-format base58check \\\n    --public-key-compression uncompressed\n\n5JZjfs5wJv1gNkJXCmYpyj6VxciqPkwmK4yHW8zMmPN1PW7Hk7F\n```\nSpecifying --public-key-compression is mandatory because the WIF output is\ndifferent depending on which public key compression type you choose, and there\nis no way to guess from a raw private key.\n\nSame again but compressed public key :\n```\n$ ./bitcoin-tool \\\n    --network bitcoin \\\n    --input-type private-key \\\n    --input-format raw \\\n    --input-file key.bin \\\n    --output-type private-key-wif \\\n    --output-format base58check \\\n    --public-key-compression compressed\n\nKzXVLY4ni4yznz8LJwdUmNoGpUfebSxiakXRqcGAeuhihzaVe3Rz\n```\n\nNote that the WIF private key is longer with public key compression on, because\nan extra byte flag is stored to indicate that the public key should be compressed\n(the private key is exactly the same).\n\nShow address for uncompressed WIF private key:\n```\n$ ./bitcoin-tool \\\n    --input-type private-key-wif \\\n    --input-format base58check \\\n    --input 5JZjfs5wJv1gNkJXCmYpyj6VxciqPkwmK4yHW8zMmPN1PW7Hk7F \\\n    --output-type address \\\n    --output-format base58check\n\n1KYv3U6gWcxS5UfbNzP25eDEjd5PHHB5Gh\n```\n\nShow address for compressed WIF private key:\n```\n$ ./bitcoin-tool \\\n    --input-type private-key-wif \\\n    --input-format base58check \\\n    --input KzXVLY4ni4yznz8LJwdUmNoGpUfebSxiakXRqcGAeuhihzaVe3Rz \\\n    --output-type address \\\n    --output-format base58check\n\n1Lm2DPqbhsutDkKoK9ZPPUkDKnGxQfpJLW\n```\nThis demonstrates why it is necessary to be careful when converting raw private\nkeys to addresses; the same private key will (almost definitely) result in two\nseperate addresses, one for each intermediate form of the public key.\n\nConvert the WIF private key to a QR code so we can print it and import it\neasily later:\n```\n$ qrencode -d 300 -s 3 -l H 5JZjfs5wJv1gNkJXCmYpyj6VxciqPkwmK4yHW8zMmPN1PW7Hk7F -o privkey.png\n```\n\nNow you can receive Bitcoins using the address above, but you will need to\nimport the private key into your wallet at a later time in order to spend them\n(`bitcoind importprivkey`, for the official client), or at least be able to\nsign transactions with that key (not necessarily online).\n\n#### Generate address from random private key\n```\n./bitcoin-tool \\\n    --network bitcoin \\\n    --input-type private-key \\\n    --input-format raw \\\n    --input-file <(openssl rand 32) \\\n    --output-type address \\\n    --output-format base58check \\\n    --public-key-compression compressed\n```\nThis outputs an address you can send Bitcoins to, if you want to loose them forever (because the private key is never output!).\n\n#### Poor-mans brainwallet\n\nHash a text phrase with SHA256, which is then used as the private key to generate an address from.\n\n**Never use this example for an actual wallet, it will be stolen almost immediately!** (I did a test with another dictionary word and it took all of 4 seconds for someone to steal it!)\n\nThis shows the `--output-type all` option, which spews out lots of unnecessary\ngarbage which I can't imagine would ever be useful, but it does so because it can.\nSo There.\n```\n./bitcoin-tool \\\n    --input-type private-key \\\n    --input-format raw \\\n    --input-file <(echo -n sausage|openssl dgst -sha256 -binary) \\\n    --public-key-compression uncompressed \\\n    --network bitcoin \\\n    --output-type all\n\naddress.hex:000511096ab078473911e0222fcbc3375314e2bab1\naddress.base58:156T6Af12SKCQGbjEWNeTkADhJNk\naddress.base58check:1TnnhMEgic5g4ttrCQyDopwqTs4hheuNZ\npublic-key-ripemd160.hex:0511096ab078473911e0222fcbc3375314e2bab1\npublic-key-ripemd160.base58:56T6Af12SKCQGbjEWNeTkADhJNk\npublic-key-ripemd160.base58check:TnnhMEgic5g4ttrCQyDopwqTs4k6XbAK\npublic-key-sha256.hex:b17978b7528353483429a758fb9ec833882a5ddbb27c1fc2bb4a66436f7e342f\npublic-key-sha256.base58:CwnbNMmu9yCkXE32543pfPAgVSynE2wjGYv9Mip4yrb8\npublic-key-sha256.base58check:2MAMBCve8eVyrbxxBzqn5HLNqqyc8CysKPdfaKPzA81mHxPvyu\npublic-key.hex:04a32ed011213146495f58d3ed83a6cc3fc0fd107d5fa2887bbc2fcea81e8bc84f650e81f4ddc84424daab546945f0d7d9dfd4dce39ce3776ee6b8ba78e6eddc7a\npublic-key.base58:QjfX2h4LdAA21NTa2K5dVcxcuQVTtvT3dL5JFLvxAMuCGKY3t8yCKNzJid8MHWbYmoHSRXAS9hggkhQUDiwaaGAV\npublic-key.base58check:3gKQTqtZhdBHDDe1echja7ac39tup3SnNSzwZSrnHb417QbL7T8JcTfW7GgEQsvhYrPqLsiraabne6xDrSGZ6bBB4S5YGM\nprivate-key-wif.hex:8030caae2fcb7c34ecadfddc45e0a27e9103bd7cfc87730d7818cc096b1266a683\nprivate-key-wif.base58:f5g1GA5uH4gsfEU6ANnGCzoe1VZvnZ1mYh3frnVSPR1nJ\nprivate-key-wif.base58check:5JBmuBc64pVrKLyDc8ktyXJmAeEwKQogn6jsk6taeq8zRMtGZrE\nprivate-key.hex:30caae2fcb7c34ecadfddc45e0a27e9103bd7cfc87730d7818cc096b1266a683\nprivate-key.base58:4HTpd7gVSeVJDurhJKYGEYyFWMZRCNjSnXaEcan9K6Gz\nprivate-key.base58check:NVKW9zzMvs4LawZwJztUZdx3R27Gwc4Hg6WvqqQxHMFkbn3Wz\n```\n\n#### Batch processing\n\nYou can read multiple lines of input from a text file and process individually\nwith the `--batch` option.  This requires the `--input-file` option to be\nset.  This will be faster than spawning a new instance of bitcoin-tool for\neach line of a line - from a shell script, for example.\n\n**Generate 1000 random private keys in hex format**\n`keys=1000 ; openssl rand $[32*keys] | xxd -p -c32 > hexkeys`\n\n**Convert all the private keys to addresses**\n```\n./bitcoin-tool \\\n--batch \\\n--input-file hexkeys \\\n--input-format hex \\\n--input-type private-key \\\n--network bitcoin \\\n--public-key-compression compressed \\\n--output-type address \\\n--output-format base58check\n\n"
 },
 {
  "repo": "lightninglabs/neutrino",
  "language": "Go",
  "readme_contents": "# Neutrino: Privacy-Preserving Bitcoin Light Client\n\n[![Build Status](https://github.com/lightninglabs/neutrino/actions/workflows/main.yml/badge.svg)](https://github.com/lightninglabs/neutrino/actions/workflows/main.yml)\n[![Godoc](https://godoc.org/github.com/lightninglabs/neutrino?status.svg)](https://godoc.org/github.com/lightninglabs/neutrino)\n[![Coverage Status](https://coveralls.io/repos/github/lightninglabs/neutrino/badge.svg?branch=master)](https://coveralls.io/github/lightninglabs/neutrino?branch=master)\n\nNeutrino is a Bitcoin light client written in Go and designed with mobile\nLightning Network clients in mind. It uses a\n[new proposal](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014474.html)\nfor compact block filters to minimize bandwidth and storage use on the client\nside, while attempting to preserve privacy and minimize processor load on full\nnodes serving light clients.\n\n## Mechanism of operation\nThe light client synchronizes only block headers and a chain of compact block\nfilter headers specifying the correct filters for each block. Filters are loaded\nlazily and stored in the database upon request; blocks are loaded lazily and not\nsaved.\n\n## Usage\nThe client is instantiated as an object using `NewChainService` and then\nstarted. Upon start, the client sets up its database and other relevant files\nand connects to the p2p network. At this point, it becomes possible to query the\nclient.\n\n### Queries\nThere are various types of queries supported by the client. There are many ways\nto access the database, for example, to get block headers by height and hash; in\naddition, it's possible to get a full block from the network using\n`GetBlockFromNetwork` by hash. However, the most useful methods are specifically\ntailored to scan the blockchain for data relevant to a wallet or a smart\ncontract platform such as a [Lightning Network node like \n`lnd`](https://github.com/lightningnetwork/lnd). These are described below.\n\n#### Rescan\n`Rescan` allows a wallet to scan a chain for specific TXIDs, outputs, and\naddresses. A start and end block may be specified along with other options. If\nno end block is specified, the rescan continues until stopped. If no start block\nis specified, the rescan begins with the latest known block. While a rescan\nruns, it notifies the client of each connected and disconnected block; the\nnotifications follow the\n[btcjson](https://github.com/btcsuite/btcd/blob/master/btcjson/chainsvrwsntfns.go)\nformat with the option to use any of the relevant notifications. It's important\nto note that \"recvtx\" and \"redeemingtx\" notifications are only sent when a\ntransaction is confirmed, not when it enters the mempool; the client does not\ncurrently support accepting 0-confirmation transactions.\n\n#### GetUtxo\n`GetUtxo` allows a wallet or smart contract platform to check that a UTXO exists\non the blockchain and has not been spent. It is **highly recommended** to\nspecify a start block; otherwise, in the event that the UTXO doesn't exist on\nthe blockchain, the client will download all the filters back to block 1\nsearching for it. The client scans from the tip of the chain backwards, stopping\nwhen it finds the UTXO having been either spent or created; if it finds neither,\nit keeps scanning backwards until it hits the specified start block or, if a\nstart block isn't specified, the first block in the blockchain. It returns a\n`SpendReport` containing either a `TxOut` including the `PkScript` required to\nspend the output, or containing information about the spending transaction,\nspending input, and block height in which the spending transaction was seen.\n\n### Stopping the client\nCalling `Stop` on the `ChainService` client allows the user to stop the client;\nthe method doesn't return until the `ChainService` is cleanly shut down.\n"
 },
 {
  "repo": "stacks-network/stacks",
  "language": null,
  "readme_contents": "## Stacks: A Bitcoin Layer for Smart Contracts\n\n\nStacks is a Bitcoin layer for smart contracts; it enables smart contracts and decentralized applications to trustlessly use Bitcoin as an asset and settle transactions on the Bitcoin blockchain. \n\n\u27a1\ufe0f Read the Stacks whitepaper [html](https://stacks-network.github.io/stacks/stacks.html) [pdf](https://stacks-network.github.io/stacks/stacks.pdf)<br>\n\u27a1\ufe0f Read the sBTC whitepaper [html](https://stacks-network.github.io/stacks/sbtc.html) [pdf](https://stacks-network.github.io/stacks/sbtc.pdf)<br>\n[>> See the Stacks overview slides](https://drive.google.com/file/d/19IX1PHshiXfdg7HXVJSQ8bPME_uizH6-/view) (slightly outdated).\n\nThe initial version of Stacks, launched in early 2021, introduced Bitcoin settlement of transactions, the Clarity language for safe contracts that can respond to Bitcoin transactions, and atomic swaps of assets with BTC. The next major proposed upgrade of Stacks, the Nakamoto release (see [SIP-021](https://github.com/stacksgov/sips/blob/56b73eada5ef1b72376f4a230949297b3edcc562/sips/sip-021/sip-021-trustless-two-way-peg-for-bitcoin.md)), adds important capabilities that will enhance the power of Stacks as a Bitcoin layer: (a) a trustless, two-way Bitcoin peg to move BTC in/out of the layer and write to Bitcoin, (b) transactions secured by Bitcoin finality, and (c) fast transactions in between Bitcoin blocks. The resulting Stacks layer makes Bitcoin a fully programmable asset in a trustless manner. This can make hundreds of billions of dollars of passive Bitcoin capital productive, and make Bitcoin the backbone of a more secure web3.\n\nThe Stacks layer for smart contracts has the following innovations that make it unique:<br><br>\n**S \u2013 S**ecured by the entire hash power of Bitcoin (Bitcoin finality).<br>\n**T \u2013 T**rustless Bitcoin peg mechanism; write to Bitcoin.<br>\n**A \u2013 A**tomic BTC swaps and assets owned by BTC addresses.<br>\n**C \u2013 C**larity language for safe, decidable contracts.<br>\n**K \u2013 K**nowledge of full Bitcoin state; read from Bitcoin.<br>\n**S \u2013 S**calable, fast transactions that settle on Bitcoin.<br>\n\nWhy Bitcoin? Bitcoin is the most durable and secure blockchain. Bitcoin is minimal by design and is meant to not change. Stacks layer brings more functionality to Bitcoin without modifying Bitcoin L1. Thousands of transactions at the Stacks layer result in a settlement at the Bitcoin L1, and Stacks microblocks offer fast confirmations of streaming transactions. Bitcoin is used as a settlement layer and fast transactions in-between two Bitcoin blocks are proposed for the Nakamoto release ([SIP-21](https://github.com/stacksgov/sips/blob/56b73eada5ef1b72376f4a230949297b3edcc562/sips/sip-021/sip-021-trustless-two-way-peg-for-bitcoin.md)). Further, scalability is enabled as [subnets](https://github.com/hirosystems/stacks-subnets), amongst other scalability solutions (like [appchains](https://gist.github.com/jcnelson/c982e52075337ba75e00b79942164e31)).\n\nBitcoin's Stacks layer makes BTC productive in two ways:\n- Stacks consensus enables a trust-minimized Bitcoin peg mechanism, called sBTC. A dynamic group of economically incentivized actors operate the peg. See the [sBTC page](https://stacks.co/sbtc) for more details.\n- Further, through atomic swaps BTC can be trustlessly swaped and deployed into DeFi applications, NFT marketplaces etc. For example, see [Magic BTC atomic swaps](https://magic.fun) and [Catamaran BTC atomic swaps](https://www.hiro.so/blog/bitcoin-defi-is-here-a-deep-dive-into-trust-less-swaps), and [Lightning swaps](https://lnswap.org). \n\nYou can see some applications built using Stacks [here](https://www.stacks.co/explore/discover-apps).\n\nStacks asset (STX) is used for mining incentives (block subsidy for miners) of the Stacks layer and for incentives for sBTC peg-out signing. These miners secure the global ledger of the Stacks layer. This data cannot be stored at the Bitcoin main chain and needs to be stored outside Bitcoin. STX is also used as gas for smart contract execution. STX is a unique crypto asset that can be locked by STX holders to earn Bitcoin rewards from the protocol. More details on earning Bitcoin rewards are at [stacking.club](https://stacking.club).\n\nSTX was distributed to the general public through the first-ever SEC qualified token offering in US history. The project decentralized before the mainnet launch in Jan 2021. There are [30+ independent companies](https://twitter.com/zrixes/status/1433248424271355905?s=20) that work in the ecosystem.\n\n## Clarity Language for Smart Contracts\n\nClarity is a new language for smart contracts that [focuses on safety](https://stacks.org/bringing-clarity-to-8-dangerous-smart-contract-vulnerabilities/). Clarity is a decidable language, meaning you can know, with certainty, from the code itself what the program will do. Clarity is interpreted (not compiled) and the source code is published on the blockchain (see [this deployed code](https://explorer.stacks.co/txid/SP000000000000000000002Q6VF78.pox?chain=mainnet) for the PoX contract).\n\nFor details, see the [Clarity book](https://book.clarity-lang.org/) and [Clarity website](https://clarity-lang.org).\n\n## Proof-of-Transfer (PoX)\n\n[PoX consensus](https://blockstack.org/pox.pdf) is a new algorithm that spans consensus between the Bitcoin blockchain and the Stacks layer. Unlike burning electricity in proof-of-work, miners bid by spending BTC and get a random probability for becoming a leader. Leader election happens on Bitcoin and new blocks are written on the Stacks layer. Miners use BTC to mine newly minted STX. PoX recyles proof-of-work energy to provide Nakamoto-style consensus for the Stacks layer. \n\nSee [this post](https://medium.com/@sonkaos999/the-bullish-case-for-stacks-8ef75849861f) on PoX for more details.\n\n## Resources\n\nSome resources for further details:\n- [Working groups](https://github.com/stacks-network/stacks/discussions) for non-custodial BTC peg and faster blocks<br>\n- In-depth [video interview](https://www.youtube.com/watch?v=dEQFPNWaOHY) for Stacks blockchain and consensus.\n- [Stacks Improvement Proposals](https://github.com/stacksgov/sips/tree/main/sips) (SIPS)\n\n## Code\n\nCheck out the [latest docs](https://docs.stacks.co/) for the easiest way to get started!\n\nIf you're just starting with Stacks, here are the main software repositories you should checkout:\n\n- [Stacks Layer Code](https://github.com/stacks-network/stacks-blockchain) - the reference implementation of the Stacks layer in Rust.\n- [Stacks Documentation](https://github.com/stacks-network/docs) - community documentation for Stacks\n- [stacks.js](https://github.com/hirosystems/stacks.js) - a JavaScript library for using identity, auth, and storage in your apps.\n- [Stacks Explorer](https://github.com/hirosystems/explorer) - explorer for Stacks layer.\n\n## How to Help\n\n- **Contribute open-source code** - send us pull requests with improvements! See some [good first issues](https://github.com/stacks-network/stacks-blockchain/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22).\n- **Help with software testing** - we encourage the community to run the software and file issues.\n- **Become a community evangelist** - [join community leaders](https://community.stacks.org/evangelists) around the world supporting our mission.\n- **Weekly Stacks meetings** on [Discord](https://stacks.chat).\n\n## Resources\n\n- [Stacks Forum](https://forum.stacks.org)\n- [Telegram](https://t.me/StacksChat)\n- [Discord](https://stacks.chat)\n- [Mailing List](https://stacks.org/updates)\n- [YouTube Videos](https://www.youtube.com/channel/UC3J2iHnyt2JtOvtGVf_jpHQ)\n- [Twitter](https://twitter.com/stacks)\n"
 },
 {
  "repo": "philsong/bitcoin-broker",
  "language": "Go",
  "readme_contents": "## BTC trading market broker\n\n    \u4f5c\u4e3a\u7ecf\u7eaa\u5546\u89d2\u8272\uff0c\u63d0\u4f9bthrift\u6807\u51c6\u670d\u52a1\u63a5\u53e3\u3002\n\n    \u63d0\u4f9b\u5408\u5e76\u4ea4\u6613\u6240\u6df1\u5ea6\u7684\u6807\u51c6\u4ef7\u683c\u6a21\u578b\uff0c\n    \u5927\u5e76\u53d1\u8ba2\u5355\u5185\u90e8\u81ea\u52a8\u64ae\u5408\u51b2\u9500\uff0c\n    \u667a\u80fd\u81ea\u52a8\u8def\u7531\u8ba2\u5355\u5e76\u62c6\u5927\u5355\u4e3a\u5c0f\u5355\u5230\u4e0d\u540c\u4ea4\u6613\u6240\uff0c\n    \u5931\u8d25\u8ba2\u5355\u81ea\u52a8\u91cd\u8bd5\u5904\u7406\u3002\n\n    \u652f\u6301haobtc,okcoin,huobi,chbtc\u7b49\u4ea4\u6613\u6240\u3002\n\n# \u672c\u5730\u642d\u5efa #\n\n1\u3001\u5b89\u88c5golang\u5f00\u53d1\u8fd0\u884c\u73af\u5883\n\t\n\thttp://golang.org/doc/install\n\n2\u3001\u4e0b\u8f7d\u5b89\u88c5\u4f9d\u8d56\u5e93\u5e76\u7f16\u8bd1 broker\n\n\t./install\n\t\n3\u3001\u5bfc\u5165\u6570\u636e\u5e93\u8868\u7ed3\u6784\n\n\t\u5bfc\u5165etc\u76ee\u5f55\u4e0b\u7684*.sql\u6587\u4ef6\u5230PostgresDB\n\n4\u3001\u4fee\u6539\u914d\u7f6e\n\n    \u4fee\u6539conf/config_sample.json \u4e3a conf/config.json\n\n5\u3001\u8fd0\u884c broker\n\n\t./bin/broker\n\n\u4e00\u5207\u987a\u5229\u7684\u8bdd\uff0cbroker\u5e94\u8be5\u5c31\u542f\u52a8\u4e86\u3002\n"
 },
 {
  "repo": "bitcoin-s/bitcoin-s",
  "language": "Scala",
  "readme_contents": "![Bitcoin-S logo](website/static/img/bitcoin-s-dark-logo.png)\n[![Build Status](https://github.com/bitcoin-s/bitcoin-s/workflows/Release/badge.svg)](https://github.com/bitcoin-s/bitcoin-s/actions) [![Coverage Status](https://coveralls.io/repos/github/bitcoin-s/bitcoin-s/badge.svg?branch=master)](https://coveralls.io/github/bitcoin-s/bitcoin-s?branch=master) [![Maven Central](https://img.shields.io/badge/Maven%20Central-1.9.7-brightgreen.svg)](https://mvnrepository.com/artifact/org.bitcoin-s) [![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/bitcoin-s-core)\n\nFeature-rich toolkit for making Bitcoin and Lightning applications on the JVM.\n\nFor a complete guide on how to get started with Bitcoin-S, see our website at [Bitcoin-S.org](https://bitcoin-s.org).\n\n### Contents\n\n- [Running bitcoin-s](#running-bitcoin-s)\n- [Getting started (non-developers)](#getting-started--non-developers-)\n- [Adding bitcoin-s to your library](#adding-bitcoin-s-to-your-library)\n- [Docker images](#docker-images)\n- [Contributing](#contributing)\n- [Good first issues](#good-first-issues)\n- [License](#license)\n\n### Running bitcoin-s\n\n#### Docker\n\nIn this repo, you can just run\n\n```\nAPP_PASSWORD=topsecret docker-compose up\n```\n\nwhich will spin up a docker environment that starts syncing the backend and will allow you to visit\nthe web frontend of the wallet at `localhost:3002`\n\nor you can build and run the electron app natively.\n\n```\ngit clone https://github.com/bitcoin-s/bitcoin-s-ts.git\ncd bitcoin-s-ts && ./build-wallet-electron.sh\n```\n\n### Getting setup (developers)\n\nFor a complete guide on how to get setup with bitcoin-s, see our [Getting setup](https://bitcoin-s.org/docs/getting-setup).\n\nThis link is intended for setting up development of bitcoin-s. If you want to just install bitcoin-s rather than develop, see **Getting started** above.\n\n### Adding bitcoin-s to your library\n\nThe latest release of bitcoin-s is `1.9.7`, here is how you can use the dependencies in your projects:\n\n```\nlibraryDependencies += \"org.bitcoin-s\" % \"bitcoin-s-secp256k1jni\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-core\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-crypto\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-chain\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-dlc-oracle\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-oracle-explorer-client\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-app-commons\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-db-commons\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-fee-provider\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-bitcoind-rpc\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-eclair-rpc\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-lnd-rpc\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-key-manager\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-node\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-dlc-node\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-wallet\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-dlc-wallet\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-testkit-core\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-testkit\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-zmq\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-tor\" % \"1.9.7\"\n\nlibraryDependencies += \"org.bitcoin-s\" %% \"bitcoin-s-cli\" % \"1.9.7\"\n\n```\n\n#### Docker images\n\nWe publish docker images to docker hub on every PR merge and tag on github.\nYou can obtain the images for both the app server and oracle server on these\ndocker hub repos\n\n[bitcoin-s docker hub repo](https://hub.docker.com/r/bitcoinscala/bitcoin-s-server/tags?page=1&ordering=last_updated)\n\n[oracle-server docker hub repo](https://hub.docker.com/r/bitcoinscala/bitcoin-s-oracle-server/tags?page=1&ordering=last_updated)\n\n### Contributing\n\nBitcoin-S is an open source project where anyone is welcome to contribute. All contributions are encouraged and appreciated, whether that is code, testing, documentation or something else entirely.\n\nSee [here](https://bitcoin-s.org/docs/contributing) for more information.\n\n### Good first issues\n\n[Here](https://github.com/bitcoin-s/bitcoin-s/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) is a list of good first issues that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with the bitcoin-s contribution process.\n\n### License\n\nBitcoin-s is MIT licensed, as found in the [LICENSE](LICENSE) file.\n"
 },
 {
  "repo": "btcsuite/btcutil",
  "language": null,
  "readme_contents": "This package is now a sub-package in the\n[btcutil](https://github.com/btcsuite/btcd/tree/master/btcutil) directory\nof the [btcd](https://github.com/btcsuite/btcd) repository.\n \n"
 },
 {
  "repo": "ladimolnar/BitcoinDatabaseGenerator",
  "language": "C#",
  "readme_contents": "# BitcoinDatabaseGenerator\n\nBitcoinDatabaseGenerator is a high performance data transfer tool that can be used to copy data from Bitcoin Core blockchain files to a SQL Server database. \n\n[Prerequisites](../../wiki/Prerequisites)\n\n[How it works](../../wiki/How-it-works)\n\n[Usage](../../wiki/Usage)\n\n[Typical output](../../wiki/Typical-output)\n\n[Performance](../../wiki/Performance)\n\n[Database schema](../../wiki/Database-schema)\n\n[External Links](../../wiki/External-Links)\n\n***\n\n**Build prerequisites**\n\nThe build of this solution was tested on the following configuration:\n\n* OS: Windows 10 Pro\n\n* Microsoft Visual Studio Community 2015\n\n"
 },
 {
  "repo": "bitcoinaverage/bitcoinaverage",
  "language": "HTML",
  "readme_contents": "\n19/06/2017\n----------\n\nVersion 2 of our API has now been running for around 9 months, as such Version 1 of the API has been switched off.\n\n**All bitcoin, ethereum, litecoin, ripple price data is freely available.**\n\n* Documentation: https://apiv2.bitcoinaverage.com/\n* Register: https://bitcoinaverage.com/en/register\n* Homepage: https://bitcoinaverage.com/\n\n------------------------------------------------------------------------------------\n\n03/12/2015\n----------\n\nThis version of the reposisitory will remain \"as-is\" going forward. Many changes have been made privately to this version. The repository is working but will no longer be maintained.\n\n------------------------------------------------------------------------------------\n*this is the source of BitcoinAverage.com website*\n\n*licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License*\n\nrun instructions\n---------------------\n- download sources\n- copy server.py.dist into server.py in the same folder and setup paths to folders (see comments in the file).\n- install dependencies with `sudo apt-get install python-dev libevent-dev libxml2-dev python-pip libxslt1-dev redis-server && sudo apt-get build-dep libxml2 && sudo pip install SQLObject eventlet requests libxslt-dev lxml redis simplejson`\n- to run the api_daemon.py you need python 2.7, no db or other storage engines needed. Install any other missing dependencies if needed.\n\nsystem structure\n--------------------\nThere are several \\*_daemon.py files in the project root folder - these are parts of the backend that make whole thing work. Despite \"daemon\" name these are not real system daemons yet (there is an outstanding task in github for that).  \nDaemons are:\n- /api_daemon.py - main script, it loads all settings from bitcoinaverage/config.py, queries all external exchanges APIs, creates bitcoinaverage own API and regenerates API files (except for history part). \n- /history_daemon.py - fetches current data from live API and generates history API csv files. It uses HTTP to fetch API data so it can seamlessly run on separate server if needed.\n- /twitter_daemon.py - sends updates to twitter.\n- /image_daemon.py - generates price images (I wonder if anybody uses these images)\n- /monitor_daemon.py - monitors last update timestamps for api and history daemons, triggers email alerts if timestamp is older than 5 min.\n- /api folder - stores all API files. Yes, whole bitcoinaverage API is read only and based on static JSON files generated by api_daemon and served by nginx. Simple, but very high performance (only bandwidth is the limit). whole contents of this folder is generated automatically, just configure server.py and run api_daemon.\nThis folder must be web accessible as web API.\n- /www folder - actual website. Static, must be web accessible. Files in /www/charts/* and /www/currencies/* are generated automatically and are not meant to be user viewed. \n\n\nWhole frontend is JS-driven, it fetches JSON API via AJAX and renders the page. \n\n\n*Feel free to contact us at bitcoinaverage@gmail.com for with questions on any matters about this system and website.*\n\n\n\nrelated thirdparty libraries\n--------------------\n- python calculator module - https://gist.github.com/miohtama/7814435\n- ruby API wrapper - https://github.com/git-toni/bitcoinaverage\n"
 },
 {
  "repo": "SMH17/bitcoin-hacking-tools",
  "language": "C",
  "readme_contents": "The source code of main tools used in Bitcoin \"non-malware-based\" attacks.\n\n## Tools list:\n\n# Misc tools\n\n- Double Spender\n\n# Private Key Harvesters\n\n- Electrum cracker\n\n- Brainflayer\n\n- Bruteforce Wallet\n\n- Wallet Collision\n\n- ECDSA Private Key Recovery\n\n- Large Bitcoin Collider Pool Script\n\n\n# # DISCLAIMER\n\nDo not ask questions about how to configure or use the software.\n\nI'm not responsible for improper use of the code contained in these repositories.\nThis code is mostly proof of concept and it has been shared only for security research purpose to integrate a related article. \nNo support will be provided.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n\nRelated repositories:\nhttps://github.com/ryancdotorg/brainflayer\nhttps://github.com/glv2/bruteforce-wallet\nhttps://github.com/impakho/wallet-collision\nhttps://github.com/tintinweb/ecdsa-private-key-recovery\nhttps://github.com/ankleslapper/Double-Spender\n"
 },
 {
  "repo": "kangasbros/django-bitcoin",
  "language": "Python",
  "readme_contents": "Please Note! Not maintained.\n============================\n\nCurrently ``django-bitcoin`` is not maintained. I don't recommend using it.\n\nIf you want to develop it, don't issue pull requests, but create your own fork. Thanks!\n\nIntroduction\n================\n\n\n\n``django-bitcoin`` is a `Django web framework <http://djangoproject.com/>`_\napplication for building Bitcoin web apps.\n\n.. contents ::\n\nFeatures\n============\n\n* Simple Bitcoin wallet management\n\n* Bitcoin payment processing\n\n* Bitcoin market information\n\nInstallation\n============\n\nTo install, just add the app to your settings.py INSTALLED_APPS like::\n\n    INSTALLED_APPS = [\n        ...\n        'django_bitcoin',\n        ...\n    ]\n\nAlso you have to run a local bitcoind instance, and specify connection string in settings::\n\n    BITCOIND_CONNECTION_STRING = \"http://bitcoinuser:password@localhost:8332\"\n\nUsage\n=====\n\nTutorial\n---------\n\n`There is a small tutorial about how to use django-bitcoin to create your own instawallet <http://blog.kangasbros.fi/?p=85>`_.\n\nWallet websites, escrow services using the \"Wallet\"-model\n------------------------------------------------------------\n\nYou can use the `Wallet` class to do different bitcoin-moving applications. Typical example would be a marketplace-style site, where there are multiple sellers and buyer. Or job freelance site, where escrow is needed. Or even an exchange could be done with this abstraction (a little extra classes would be needed however).\n\nNote that while you move bitcoins between Wallet-objects, only bitcoin transactions needed are incoming and outgoing transactions.\nTransactions between the system \"Wallet\"-objects don't generate \"real\" bitcoin transactions. Every transaction (except incoming transactions) is logged to `WalletTransaction` object to ease accounting.\n\nThis also means that outgoing bitcoin transactions are \"mixed\"::\n\n\n    from django_bitcoin import Wallet, currency\n\n    class Profile(models.Model):\n        wallet = ForeignKey(Wallet)\n        outgoing_bitcoin_address = CharField()\n\n    class Escrow(models.Model):\n        wallet = ForeignKey(Wallet)\n        buyer_happy = BooleanField(default=False)\n\n    buyer=Profile.objects.create()\n    seller=Profile.objects.create()\n\n    purchase=Escrow.objects.create()\n\n    AMOUNT_USD=\"9.99\"\n\n    m=currency.Money(AMOUNT_USD, \"USD\")\n    btc_amount=currency.exchange(m, \"BTC\")\n\n    print \"Send \"+str(btc_amount)+\" BTC to address \"+buyer.wallet.receiving_address()\n\n    sleep(5000) # wait for transaction\n\n    if p1.wallet.total_balance()>=btc_amount:\n        p1.send_to_wallet(purchase, btc_amount)\n\n        sleep(1000) # wait for product/service delivery\n\n        if purchase.buyer_happy:\n            purchase.wallet.send_to_wallet(seller.wallet)\n            seller.wallet.send_to_address(seller.outgoing_bitcoin_address, seller.wallet.total_balance())\n        else:\n            print \"WHY U NO HAPPY\"\n            #return bitcoins to buyer, 50/50 split or something\n\nTemplatetags\n----------------\n\nTo display transaction history and simple wallet tagline in your views, use the following templatetags::\n\n    {% load currency_conversions %}\n    <!-- display balance tagline, estimate in USD and received/sent -->\n    {% wallet_tagline profile.bitcoin_wallet %}\n    <!-- display list of transactions as a table -->\n    {% wallet_history profile.bitcoin_wallet %}\n\nEasy way to convert currencies from each other: `btc2usd, usd2btc, eur2btc, btc2eur`\n\nAlso currency2btc, btc2currency for any currencies on bitcoincharts.com::\n\n    {% load currency_conversions %}\n    Hi, for the pizza: send me {{bitcoin_amount}}BTC (about {{ bitcoin_amount|btc2usd }}USD).\n\nDisplay QR code of the bitcoin payment using google charts API::\n\n    {% load currency_conversions %}\n    Pay the following payment with your android bitcoin wallet:\n    {% bitcoin_payment_qr wallet.receiving_address bitcoin_amount %}.\n\n    The same but display also description and an estimate in EUR:\n    {% bitcoin_payment_qr wallet.receiving_address bitcoin_amount \"One beer\" \"EUR\" %}.\n\nTransaction notifications\n-----------------------------\n\nTo enable bitcoin transaction notifications, set the following flag in your ``settings.py``::\n\n    BITCOIN_TRANSACTION_SIGNALING = True\n\nAfter that, you need to setup a *cron* job to run each minute, something like the following::\n\n\n    * * * * * (cd $APP_PATH && python manage.py python manage.py CheckTransactions >> $APP_PATH/logs/email_sends.log 2>&1)\n\n\nAfter that you can define your balance_changed and balance_changed_confirmed signals::\n\n    from django_bitcoin.models import balance_changed, balance_changed_confirmed\n    from django.dispatch import receiver\n\n\n    @receiver(balance_changed)\n    def balance_changed_handler(sender, **kwargs):\n        pass\n        # try:\n        # print \"balance changed\", sender.id, kwargs[\"changed\"], sender.total_balance()\n\n\n    @receiver(balance_changed_confirmed)\n    def balance_changed_confirmed_handler(sender, **kwargs):\n        pass\n\nSupport and source code\n=========================\n\n`Issue tracker at Github.com <https://github.com/kangasbros/django-bitcoin>`_.\n\n"
 },
 {
  "repo": "askmike/gekko",
  "language": "JavaScript",
  "readme_contents": "# This repo is not maintained anymore\n\nI am officially not maintaining this project anymore. It was an amazing journey and I want to thank everyone for\nplaying the role in this amazing story!\n\nMore details can be found here: [https://medium.com/@gekkoplus/archiving-open-source-gekko-dba02e6efc7](https://medium.com/@gekkoplus/archiving-open-source-gekko-dba02e6efc7)\n\nThis only impacts my Gekko repo (askmike/gekko). There might be other forks of Gekko out there that are being maintained!\n\n------\n\nOld content:\n\n------\n\n\n# Gekko [![npm](https://img.shields.io/npm/dm/gekko.svg)]() [![Build Status](https://travis-ci.org/askmike/gekko.png)](https://travis-ci.org/askmike/gekko) [![Build status](https://ci.appveyor.com/api/projects/status/github/askmike/gekko?branch=stable&svg=true)](https://ci.appveyor.com/project/askmike/gekko)\n\n![Gordon Gekko](http://mikevanrossum.nl/static/gekko.jpg)\n\n*The most valuable commodity I know of is information.*\n\n-Gordon Gekko\n\nGekko is a Bitcoin TA trading and backtesting platform that connects to popular Bitcoin exchanges. It is written in JavaScript and runs on [Node.js](http://nodejs.org).\n\n*Use Gekko at your own risk.*\n\n## Documentation\n\nSee [the documentation website](https://gekko.wizb.it/docs/introduction/about_gekko.html).\n\n## Installation & Usage\n\nSee [the installing Gekko doc](https://gekko.wizb.it/docs/installation/installing_gekko.html).\n\n## Community & Support\n\nGekko has [a forum](https://forum.gekko.wizb.it/) that is the place for discussions on using Gekko, automated trading and exchanges. In case you rather want to chat in realtime about Gekko feel free to join the [Gekko Support Discord](https://discord.gg/26wMygt).\n\n## Final\n\nIf Gekko helped you in any way, you can always leave me a tip at (BTC) 13r1jyivitShUiv9FJvjLH7Nh1ZZptumwW\n"
 },
 {
  "repo": "bitcoin-only/bitcoin-only",
  "language": "Vue",
  "readme_contents": "# Bitcoin-Only\n\nThis is the repository for [bitcoin-only.com](https://bitcoin-only.com). \n\n[Click Here](https://github.com/bitcoin-only/bitcoin-only/issues/new/choose) to raise an issue (e.g. to request content be added).\n\n![](/static/og-image.png)\n\n\n## Build Setup\n\n```bash\n# install dependencies\n$ npm install\n\n# serve with hot reload at localhost:1111\n$ npm run dev\n\n# generate static project (dist folder)\n$ npm run generate\n```\n\nFor detailed explanation on how things work, check out [Nuxt.js docs](https://nuxtjs.org).\n"
 },
 {
  "repo": "bitcoin-core/gitian.sigs",
  "language": "Python",
  "readme_contents": "This repository contains Gitian signatures for releases and release candiates of Bitcoin Core.\n\n## How to Make and Submit Gitian Sigs\n\nSee the [Bitcoin Core Gitian documentation](https://github.com/bitcoin-core/docs/blob/master/gitian-building.md)\nand the [Bitcoin Core Release Process](https://github.com/bitcoin/bitcoin/blob/master/doc/release-process.md)\nfor instructions on Gitian building. You might have to use the release process of **the tag that you are building**.\n"
 },
 {
  "repo": "cryptoapi/Payment-Gateway",
  "language": "CSS",
  "readme_contents": "\nGoUrl.io Cryptocoin Payment Gateway API\n-----------------------------------------\n\nVersion 2.2.3\n\n**Accept Bitcoin, Bitcoin Cash, Bitcoin SV, Litecoin, Dash, Dogecoin, Speedcoin, Reddcoin, Potcoin, Feathercoin, Vertcoin, Peercoin, UniversalCurrency, MonetaryUnit Payments Online on your website**\n\n# ![Payment-Gateway](https://gourl.io/images/gateway.jpg)\n\n\nOur Payment Gateway with Instant Checkout allows you to easily organise your website -\n\n* 100% Free Open Source on Github.com\n* No Monthly Fee, Transaction Fee from 0%\n* No ID Required, No Bank Account Needed\n* White Label Solution - Bitcoin/Altcoin Payment Box with Your Own [Company Logo](https://gourl.io/lib/examples/example_customize_box.php)\n* Get payments straight to your bitcoin/altcoin wallets and convert to [USD/EUR/etc](https://gourl.io/#usd) later\n* [Custom Payment Box](https://gourl.io/lib/examples/example_customize_box.php) - json format; customise your bitcoin payment box with your own text / logo\n* [White Label Product](https://gourl.io/lib/examples/example_customize_box.php?logo=custom&method=curl&boxtype=1) - Bitcoin Payments with your own logo and all payment requests through your server\n* [Pay-Per-Product](https://gourl.io/lib/examples/pay-per-product-multi.php) - sell your products for bitcoin, bitcoin cash, bitcoin sv, litecoin, etc. online on your website. It is easy!\n* [Pay-Per-Download](https://gourl.io/lib/examples/pay-per-download-multi.php) -  make money on file downloads/other digital content from your website online\n* [Pay-Per-Post](https://gourl.io/lib/examples/pay-per-post-multi.php) - get separate payments for each post/article published on your website\n* [Pay-Per-Registration](https://gourl.io/lib/examples/pay-per-registration-multi.php) - earn money on user registration on your website; stop spam\n* [Pay-Per-Page-Access](https://gourl.io/lib/examples/pay-per-page-multi.php) - sell paid access to selected web page(es) to unregistered visitors online\n* [Pay-Per-Membership](https://gourl.io/lib/examples/pay-per-membership-multi.php) - sell monthly/daily membership of your website to members online\n* Set your own Prices in USD. It will automatically convert usd to cryptocoins using Live [exchange rates](https://poloniex.com/)\n* Direct Integration on your website (iframe), no external payment pages opens (as other payment gateways offer)\n* User will see successful payment result typically within 5 seconds after the payment has been sent\n* Your website users and visitors will see GoUrl payment box on your website in their own native languages\n* Our Payment Gateway supports the following interface languages: [English](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=en#gourlcryptolang), [Spanish](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=es#gourlcryptolang), [French](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=fr#gourlcryptolang), [German](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=de#gourlcryptolang), [Dutch](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=nl#gourlcryptolang), [Italian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=it#gourlcryptolang), [Russian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=ru#gourlcryptolang), [Polish](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=pl#gourlcryptolang), [Portuguese](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=pt#gourlcryptolang), [Persian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=fa#gourlcryptolang), [Korean](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=ko#gourlcryptolang), [Japanese](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=ja#gourlcryptolang), [Indonesian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=id#gourlcryptolang), [Turkish](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=tr#gourlcryptolang), [Arabic](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=ar#gourlcryptolang), [Simplified Chinese](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=cn#gourlcryptolang), [Traditional Chinese](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=zh#gourlcryptolang), [Hindi](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=hi#gourlcryptolang), [Finnish](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=fi#gourlcryptolang), [Swedish](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=sv#gourlcryptolang), [Greek](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=el#gourlcryptolang), [Czech](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=cs#gourlcryptolang), [Slovenian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=sl#gourlcryptolang), [Serbian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=sr#gourlcryptolang), [Estonian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=et#gourlcryptolang), [Albanian](https://gourl.io/bitcoin-payment-gateway-api.html?gourlcryptolang=sq#gourlcryptolang). We can also add any new language to payment system on [request](https://gourl.io/api-php.html#lan)\n* [Affiliate Program for Web Developers](https://gourl.io/affiliates.html) - Earn 0.50% Lifetime from each cryptocoin payment made by users through GoUrl Payment Gateway\n* Global, Anonymous, Secure, Zero Risk, No Chargebacks, No visitor registration is needed.\n* GoUrl Bitcoin Official [Wordpress Plugin](https://gourl.io/bitcoin-wordpress-plugin.html) - easy to use on your website\n* [Free Support](https://gourl.io/view/contact/Contact_Us.html) in the integration of our GoUrl Crypto Payment Gateway in your scripts/plugins/website\n\n\nInformation\n------------------------------------\n\nCopyright &copy; 2014-2023 [Delta Consultants](https://gourl.io)\n\nWebsite: [https://gourl.io](https://gourl.io)\n\nAPI PHP Instruction: [https://gourl.io/api-php.html](https://gourl.io/api-php.html)\n\nAPI Python,Java,Node.js,etc: [https://gourl.io/api-php.html](https://gourl.io/api.html)\n\nWordpress Plugin: [https://gourl.io/bitcoin_wordpress_plugin.html](https://gourl.io/bitcoin-wordpress-plugin.html)\n\nDemo: [https://gourl.io/bitcoin-payment-gateway-api.html](https://gourl.io/bitcoin-payment-gateway-api.html)\n\n\n\n\nIntroduction\n----------------\n\nPHP Cryptocoin Payment Gateway is a simple PHP/MySQL script / Wordpress Plugin which you can easily integrate into your own website in minutes.\n\nStart accepting payments on your website, including all major cryptocoins, and start selling online in minutes. No application process.\n\nThe big benefit of Cryptocoin Payment Box is that it fully integrated on your website, no external payment pages opens (as other payment gateways offer). \n\nYour website will receive full user payment information immediately after cryptocoin payment is made and you can process it in automatic mode.\n\n\n# ![Payment-Box](https://gourl.io/images/white_label_box.png)\n\n\n\nHow It Works\n----------------\n\n**A. Website Owner / Seller Side**\n\nYou can use the following steps to sell your products on your website for cryptocoins if you wish to and can automatically convert them to USD\n\n* [Install](https://gourl.io/api-php.html#installation) GoUrl crypto Payment Box on your website and dynamically configure order id, currency, amount to pay, etc. Or use [Monetiser Online](https://gourl.io/view/newurl/Cryptocoin_Monetiser_Make_Money_Online.html) if you don't have your own website.\n* You can accept payments in Bitcoins only or you can accept other coins - Bitcoin Cash, Bitcoin SV, Dogecoin, Litecoin, Dash, etc also. See [Demo1](https://gourl.io/lib/examples/pay-per-product-multi.php) (multiple coins) or [Demo2](https://gourl.io/lib/examples/pay-per-membership.php?gourlcryptocoin=bitcoin) (Bitcoin only)\n* When you [setup](https://gourl.io/editrecord/coin_boxes/0) Cryptocoin Payment Box, you can enter the [original amount](https://gourl.io/images/instruction-config2.png) in USD or in cryptocoins. The USD amount will be automatically converted to cryptocoin amount using today's LIVE cryptocurrency exchange rates (updated every 30 minutes) and the cryptocoin amount will be displayed in the payment box. For example, if you entered 20 USD, it will display 0.059 BTC in the payment box.\n* You will need to create an account on [Poloniex.com](https://poloniex.com/) or on [Bitstamp.net](https://www.bitstamp.net/) (trading platforms)\n* [Setup](https://gourl.io/images/instruction-config3.png) so that all your received payments are automatically forwarded from your GoUrl.io account to your account on Poloniex / Bitstamp (enter your Poloniex/Bitstamp coin wallet address in gourl [payment box settings](https://gourl.io/images/instruction-config3.png)). And use the \"autosell\" feature (auto trade your cryptocoins to USD) on Poloniex/Bitstamp.\n* Using that functionality you don't need to worry if cryptocurrency prices go down or up. Within 1-2 hours after a cryptocoin payment has been received by you, your payment will be automatically converted to USD on Poloniex/Bitstamp and will be kept on your Poloniex/Bitstamp USD account.\n* Later you can withdraw your USD from Poloniex/Bitstamp to your own USA/UK/France/etc bank account\n\n\n**B. End User / Buyer Side**\n\n* All your users will see GoUrl [Payment Box](https://gourl.io/api-php.html#live) on your webpage, and some users will use their coin wallets and make payments to you\n* In around 5 seconds after cryptocoin payment is made, user will see confirmation on your website page that payment is received (i.e. very fast)\n* Your website will automatically immediately receive current user id with full payment information from our payment server\n* The user will still be on your webpage and see that successful payment result, your script can automatically process payment and give user confirmation (for example, upgrading user membership or giving download link on your products, etc). All in automatic mode - no manual actions are needed\n* For user that payment procedure on your website will be looking very similar visually and compare with normal credit cards for its speed\n* No paperwork, no chargebacks, no monthly fee, low transaction fee ([from 0%](https://gourl.io/#section4)). Please note that during the next 30 minutes (after transaction is verified) payment will be automatically forwarded to your wallet address\n\n\n\nInstallation - PHP Script\n----------------------------\n* [Free Register](https://gourl.io/view/registration/New_User_Registration.html) or [Login](https://gourl.io/info/memberarea/My_Account.html) on the website and [create new payment box](https://gourl.io/editrecord/coin_boxes/0)\n* [Download](https://coins.gourl.io/lib/cryptoapi_php.rar) Free PHP/MySQL Script and read [How It Works](https://gourl.io/#section8)\n* Edit file [cryptobox_config.php](https://github.com/cryptoapi/Payment-Gateway/blob/master/lib/cryptobox.config.php), add your db details and your private key ([screenshot](https://gourl.io/images/instruction-config1.png))\n* Run [SQL query](https://github.com/cryptoapi/Payment-Gateway#mysql-table) in your database to create new table crypto_payments\n* Place your public/private keys from new created payment box in any [example](https://github.com/cryptoapi/Payment-Gateway/tree/master/Examples)\n* You can use this [example](https://github.com/cryptoapi/Payment-Gateway/blob/master/Examples/pay-per-product.php) ([screenshot](https://gourl.io/images/instruction-config2.png)) and run it\n\nTHAT'S IT! CRYPTOCOIN PAYMENT BOX/CAPTCHA SHOULD NOW BE WORKING ON YOUR SITE.\n\nRead more - [https://gourl.io/api-php.html](https://gourl.io/api-php.html)\n\n\n\nInstallation - Wordpress Plugin\n----------------------------\n\nGo to [https://gourl.io/bitcoin-wordpress-plugin.html](https://gourl.io/bitcoin-wordpress-plugin.html)\n\n\n\nMySQL Table\n-----------------\n\nPlease also run MySQL query below which will create MySQL\ntable where all the cryptocoin payments made to you will \nbe stored.\nYou can have multiple crypto boxes on site, all of them\nrelates to your different crypto boxes and will be stored\nin that one table :\n\n\n\tCREATE TABLE `crypto_payments` (\n\t  `paymentID` int(11) unsigned NOT NULL AUTO_INCREMENT,\n\t  `boxID` int(11) unsigned NOT NULL DEFAULT '0',\n\t  `boxType` enum('paymentbox','captchabox') NOT NULL,\n\t  `orderID` varchar(50) NOT NULL DEFAULT '',\n\t  `userID` varchar(50) NOT NULL DEFAULT '',\n\t  `countryID` varchar(3) NOT NULL DEFAULT '',\n\t  `coinLabel` varchar(6) NOT NULL DEFAULT '',\n\t  `amount` double(20,8) NOT NULL DEFAULT '0.00000000',\n\t  `amountUSD` double(20,8) NOT NULL DEFAULT '0.00000000',\n\t  `unrecognised` tinyint(1) unsigned NOT NULL DEFAULT '0',\n\t  `addr` varchar(34) NOT NULL DEFAULT '',\n\t  `txID` char(64) NOT NULL DEFAULT '',\n\t  `txDate` datetime DEFAULT NULL,\n\t  `txConfirmed` tinyint(1) unsigned NOT NULL DEFAULT '0',\n\t  `txCheckDate` datetime DEFAULT NULL,\n\t  `processed` tinyint(1) unsigned NOT NULL DEFAULT '0',\n\t  `processedDate` datetime DEFAULT NULL,\n\t  `recordCreated` datetime DEFAULT NULL,\n\t  PRIMARY KEY (`paymentID`),\n\t  KEY `boxID` (`boxID`),\n\t  KEY `boxType` (`boxType`),\n\t  KEY `userID` (`userID`),\n\t  KEY `countryID` (`countryID`),\n\t  KEY `orderID` (`orderID`),\n\t  KEY `amount` (`amount`),\n\t  KEY `amountUSD` (`amountUSD`),\n\t  KEY `coinLabel` (`coinLabel`),\n\t  KEY `unrecognised` (`unrecognised`),\n\t  KEY `addr` (`addr`),\n\t  KEY `txID` (`txID`),\n\t  KEY `txDate` (`txDate`),\n\t  KEY `txConfirmed` (`txConfirmed`),\n\t  KEY `txCheckDate` (`txCheckDate`),\n\t  KEY `processed` (`processed`),\n\t  KEY `processedDate` (`processedDate`),\n\t  KEY `recordCreated` (`recordCreated`),\n\t  KEY `key1` (`boxID`,`orderID`),\n\t  KEY `key2` (`boxID`,`orderID`,`userID`),\n\t  UNIQUE KEY `key3` (`boxID`, `orderID`, `userID`, `txID`, `amount`, `addr`)\n\t) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n\n\n.\n\n\t\nPayment API List :\n---------------------\n\n* [Bitcoin Payment API](https://gourl.io/bitcoin-payment-gateway-api.html)\n* [Bitcoin Cash Payment API](https://gourl.io/bitcoincash-payment-gateway-api.html)\n* [Bitcoin SV Payment API](https://gourl.io/bitcoinsv-payment-gateway-api.html)\n* [Litecoin Payment API](https://gourl.io/litecoin-payment-gateway-api.html)\n* [Dash Payment API](https://gourl.io/dash-payment-gateway-api.html)\n* [Dogecoin Payment API](https://gourl.io/dogecoin-payment-gateway-api.html)\n* [Speedcoin Payment API](https://gourl.io/speedcoin-payment-gateway-api.html)\n* [Reddcoin Payment API](https://gourl.io/reddcoin-payment-gateway-api.html)\n* [Potcoin Payment API](https://gourl.io/potcoin-payment-gateway-api.html)\n* [Feathercoin Payment API](https://gourl.io/feathercoin-payment-gateway-api.html)\n* [Vertcoin Payment API](https://gourl.io/vertcoin-payment-gateway-api.html)\n* [UniversalCurrency Payment API](https://gourl.io/universalcurrency-payment-gateway-api.html)\n* [MonetaryUnit Payment API](https://gourl.io/monetaryunit-payment-gateway-api.html)\n* [Peercoin Payment API](https://gourl.io/peercoin-payment-gateway-api.html)\n\n\n.\n\n\nPHP Examples / Live Demo :\n-----------------------------\n\n* **White Label Product**  Bitcoin Payments - [your logo/jquery](https://gourl.io/lib/examples/example_customize_box.php)\n* **Pay-Per-Product**: Example1 - [multiple crypto](https://gourl.io/lib/examples/pay-per-product-multi.php), Example2 - [bitcoin](https://gourl.io/lib/examples/pay-per-product.php)\n* **Pay-Per-Download**: Example3 - [multiple crypto](https://gourl.io/lib/examples/pay-per-download-multi.php), Example4 - [bitcoin](https://gourl.io/lib/examples/pay-per-download.php)\n* **Pay-Per-Post**: Example5 - [multiple crypto](https://gourl.io/lib/examples/pay-per-post-multi.php), Example6 - [bitcoin](https://gourl.io/lib/examples/pay-per-post.php)\n* **Pay-Per-Registration**: Example7 - [multiple crypto](https://gourl.io/lib/examples/pay-per-registration-multi.php), Example8 - [bitcoin](https://gourl.io/lib/examples/pay-per-registration.php)\n* **Pay-Per-Page-Access**: Example19 - [multiple crypto](https://gourl.io/lib/examples/pay-per-page-multi.php), Example10 - [bitcoin](https://gourl.io/lib/examples/pay-per-page.php)\n* **Pay-Per-Membership**: Example11 - [multiple crypto](https://gourl.io/lib/examples/pay-per-membership-multi.php), Example12 - [bitcoin](https://gourl.io/lib/examples/pay-per-membership.php) \n               "
 },
 {
  "repo": "unchained-capital/caravan",
  "language": "JavaScript",
  "readme_contents": "# Caravan - Stateless Multisig Coordinator\n\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n[![Build Status](https://travis-ci.com/unchained-capital/caravan.svg?branch=master)](https://travis-ci.com/unchained-capital/caravan)\n[![dependencies Status](https://david-dm.org/unchained-capital/caravan/status.svg)](https://david-dm.org/unchained-capital/caravan)\n[![devDependencies Status](https://david-dm.org/unchained-capital/caravan/dev-status.svg)](https://david-dm.org/unchained-capital/caravan?type=dev)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n\nCaravan is making bitcoin multisig custody easier and safer through\ntransparency and standards.\n\nCaravan is a coordination software. It connects to a source of\nconsensus and your keys to build and interact with multisig bitcoin\naddresses.\n\nCaravan is also stateless. It does not itself store any data. You must\nsafekeep the addresses (and redeem scripts & BIP32 paths) you create.\n\n[Try Caravan now!](https://unchained-capital.github.io/caravan)\n\n## Installation\n\nCaravan is a stateless pure HTML & JavaScript web application.  It can\nbe run in any web browser from a local or remote installation.\n\n### Unchained Capital GitHub\n\nThe simplest way to use Caravan is to visit\n[https://unchained-capital.github.io/caravan](https://unchained-capital.github.io/caravan),\na copy of Caravan hosted on GitHub by\n[Unchained Capital](https://www.unchained-capital.com).\n\n### Your Own GitHub\n\nIf you would prefer to host your own copy of Caravan on GitHub, you\ncan do so by first forking the\n[Caravan repository](https://github.com/unchained-capital/caravan)\ninto your own GitHub organization.  You should see a copy of the\nCaravan web application at\n`https://YOUR_GITHUB_USERNAME.github.io/caravan`.\n\nIf not, go to the (newly forked) repository's \"Settings\" page and\nscroll down to the \"GitHub Pages\" section.  Ensure you see a message\nsaying \"Your site is published at ...\".\n\n### Host Locally\n\nYou can always clone the source code of Caravan to your local machine\nand run it from there.  You will require a recent `npm` installation.\n\n```bash\n$ git clone https://github.com/unchained-capital/caravan\n...\n$ cd caravan\n$ npm install\n...\n$ npm start\n...\n```\n\nNow visit `https://localhost:3000` to interact with your local copy of\nCaravan.\n\n### Host Remotely\n\nOnce you have downloaded the source code and used `npm` to install\ndependences (see section above), you can pre-build the React\napplication for a production deployment and then host the contents of\nthe resulting `build` directory via a webserver such as `nginx`.\n\n```bash\n$ npm run build\n...\n```\n\n### Docker\n\nA basic dockerfile which builds the app and serves it via nginx is included in the repository\n\nTo build the docker image:\n```bash\ndocker build . -t caravan:latest\n```\n\nTo run the built docker image:\n```bash\ndocker run -p 80:8000 caravan:latest\n```\n\nCaravan should then be accessible at http://localhost:8000/caravan\n\n## Usage\n\nIf you can access the [Caravan web\napplication](https://unchained-capital.github.io/caravan) in your\nbrowser, you are ready to start using Caravan.\n\nClick the *Create* or *Interact* links in the navbar to get started.\n\nSee our [YouTube\nplaylist](https://www.youtube.com/playlist?list=PLUM8mrUjWoPRsVGEZ1gTntqPd4xrQZoiH)\nfor some tutorial videos.\n\n### Keys\n\nCaravan can connect to several different hardware wallets and key\nmanagement software.\n\n* [Trezor One](https://shop.trezor.io/product/trezor-one-white) (installing the Trezor Bridge is required to interact with a Trezor device)\n\n* [Ledger Nano S](https://www.ledger.com/products/ledger-nano-s)\n\n* [Hermit](https://github.com/unchained-capital/hermit)\n\nCaravan also accepts public keys and signatures as text so any wallet\nwhich can export these data can be made to work with Caravan.\n\n### Consensus\n\nBy default, Caravan uses a free API provided by\n[blockstream.info](https://blockstream.info) whenever it needs\ninformation about the bitcoin blockchain or to broadcast transactions.\n\nYou can ask Caravan to use your own private [bitcoind full\nnode](https://bitcoin.org/en/full-node).\n\n#### Adding CORS Headers\n\nWhen asking Caravan to use a private bitcoind node you may run into\n[CORS issues](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS).\nThis is because [bitcoin-core](https://github.com/bitcoin/bitcoin/pull/12040)\ndoes not natively support CORS headers. Because of how `caravan` is designed,\nCORS headers are essential to protecting the security of your coins and you will\nneed to add the appropriate headers.\n\nTo correct this problem, you must add appropriate access control\nheaders to your node's HTTP responses.  When running Caravan on your\nlocal machine, for example, you may need to set\n`Access-Control-Allow-Origin: https://localhost:3000`.\n\nThis can be done using a webserver such as\n[nginx](https://www.nginx.com) or [Apache](https://httpd.apache.org),\na proxy tool such as [mitmproxy](https://mitmproxy.org), or even just\na script.\n\nA particularly simple way to proxy requests to a private bitcoind node\nis to make use of [`nginx`](https://nginx.org/). Instructions to install\nand run the program are on its [download page](https://nginx.org/en/download.html).\n\nExplicitly, install `nginx` with\n\n```bash\n# MacOS\nbrew install nginx\n\n# Debian Linux\nsudo apt install nginx\n```\n\nCopy the server conifiguration file, `bitcoind.proxy`, to the appropriate location with the following\ncommands. Note, these commands assume that you are in the base `caravan` directory. An example configuration\nfile is included with the `caravan` source code called `bitcoind.proxy` which will, by defualt, enable a mainnet\nproxy. The testnet proxy is included, but is commented out.\n\n```bash\n# MacOS\nmkdir -p /usr/local/etc/nginx/sites-available\ncp bitcoind.proxy /usr/local/etc/nginx/sites-available/\nln -s /usr/local/etc/nginx/sites-available/bitcoind.proxy /usr/local/etc/nginx/servers/bitcoind.proxy\n\n# Debain Linux\nsudo mkdir -p /etc/nginx/sites-available\nsudo cp bitcoind.proxy /etc/nginx/sites-available/\nsudo ln -s /etc/nginx/sites-available/bitcoind.proxy /etc/nginx/sites-enabled/bitcoind.proxy\n```\n\nDifferent linux distributions follow different conventions for the `/etc/nginx/` directory structure.\nAs an example, MacOS uses `etc/nginx/servers` and Debian distributions use `/etc/nginx/sites-enabled/`\nfor the website configuration files. You will need to check the `/etc/nginx/nginx.conf` file to see what\nthe convention is. This snipet is from a machine using Ubuntu 18.04 LTS. Note the two directories\nthat are included. Whereas on MacOS there is only one `include` directory, `include servers/*;`.\n\n```nginx\nhttp {\n  ...\n  ##\n  # Virtual Host Configs\n  ##\n\n  include /etc/nginx/conf.d/*.conf;\n  include /etc/nginx/sites-enabled/*;\n}\n```\n\n[Arch Linux](https://wiki.archlinux.org/index.php/nginx#Configuration) provides more details on how to configure\n`nginx` for that distribution. It may be as simple as adding `include /etc/nginx/sites-enabled/*;` in the `http` block\nof `/etc/nginx/nginx.conf` and then:\n\n```bash\nsudo mkdir -p /etc/nginx/sites-enabled\nsudo ln -s /etc/nginx/sites-available/bitcoind.proxy /etc/nginx/sites-enabled/bitcoind.proxy\n```\n\nCheck that everything is copied correctly, properly configured, and that there are no errors in the syntax:\n\n```bash\n$ nginx -t\nnginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful\n```\n\nStart `nginx`\n\n```bash\n# MacOS\nbrew services start nginx\n# or if nginx is already running\nbrew services reload nginx\n\n# Debain Linux\nsudo systemctl start nginx\n# or if nginx is already running\nsudo systemctl restart nginx\n```\n\nOn MacOS, starting the `nginx` daemon will prompt a popup window asking if you want `ngingx`\nto allow incoming network connections, which you will want to allow.\n\nTest the different ports where `my_uname` is the user specified in the `bitcoin.conf` line\n`rpcauth=my_uname:` (Don't use this username!):\n\n```bash\n# Test that bitcoin rpc is functioning correctly\ncurl --user my_uname --data-binary \\\n'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' \\\n-H 'content-type: text/plain;' http://127.0.0.1:8332\n# Test the nginx reverse proxy\ncurl --user my_uname --data-binary \\\n'{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' \\\n-H 'content-type: text/plain;' --resolve bitcoind.localhost:8080:127.0.0.1 http://bitcoind.localhost:8080\n```\n\nBoth tests should result in the same output with the current block height, e.g.\n\n```json\n{\"result\":668255,\"error\":null,\"id\":\"curltest\"}\n```\n\nIf you are running a bitcoind node on the same machine as Caravan,\non port 8332, and you run `nginx` with the default settings,\nyou should be able to point Caravan at 'http://bitcoind.localhost:8080'\nto communicate with your node. If you have bitcoind running on a different machine,\nyou will need to adjust the `upstream` block in `bitcoind.proxy` for the correct\nnetwork address:port. Don't forget to add the the correct `rpcallowip=LOCAL_MACHINE_IP`\nto the remote machine's `bitcoin.conf`.\n\nBecause the `nginx` configuration depends entirely on what is specified in\nthe `upstream` block it is STRONGLY reccommended to keep `bitcoind` reserved\nfor the mainnet and `testnet` for the testnet. In this way, `nginx` could be\nconfigured to simultaneously provide a reverse proxy to the mainnet via\n'http://bitcoind.localhost:8080' and to the testnet via 'http://testnet.localhost:8080'.\n\n##### mainnet `nginx` template\n\n```nginx\nupstream bitcoind {\n  server 127.0.0.1:8332;\n}\n\nserver {\n  listen 8080;\n  server_name bitcoind.localhost;\n\n  location / {\n    ...\n    proxy_pass http://bitcoind;\n    ...\n  }\n}\n```\n\n##### testnet `nginx` template\n\n```nginx\nupstream testnet {\n  server 127.0.0.1:18332;\n}\n\nserver {\n  listen 8080;\n  server_name testnet.localhost;\n\n  location / {\n    ...\n    proxy_pass http://testnet;\n    ...\n  }\n}\n```\n\n#### Adding CORS Headers (Deprecated)\n\nA particularly simple way to proxy requests to a private bitcoind node\nis to make use of the [`corsproxy`](https://www.npmjs.com/package/corsproxy)\nnpm module. Instructions to install and run the module are on its\n[home page](https://www.npmjs.com/package/corsproxy). `corsproxy` has not\nbeen updated in a number of years and will require an earlier version of `node`\nto function properly.\n\nExplicitly, install `corsproxy` with\n\n```bash\nnpm install -g corsproxy\n```\n\nand then launch corsproxy\n\n```bash\n$ corsproxy\n[log,info], data: CORS Proxy running at: http://localhost:1337\n...\n```\n\nIf you are running a bitcoind node on the same machine as Caravan,\non port 8332, and you run `corsproxy` with the default settings,\nyou should be able to point Caravan at 'http://localhost:1337/localhost:8332'\nto communicate with your node. A testnet node would be running on a\ndifferent port, for example: `http://localhost:1337/localhost:18332`, and you\nwould need to point Caravan to that URL instead.\n\nFinally, a testnet/regtest node running on a different machine but still on the same\nnetwork might be accessible to you via `http://localhost:1337/192.168.0.22:18332`, but\nyou need to make sure the ports are open and accessible. It should be clear at this\npoint that if corsproxy is running, paste your node's IP:port on the end of the\n`corsproxy` URL: `http://localhost:1337/`\n\n## Contributing\n\nPlease see the [`CONTRIBUTING.md`](./CONTRIBUTING.md) and the open [GitHub Issues](https://github.com/unchained-capital/caravan/issues)\n"
 },
 {
  "repo": "brichard19/BitCrack",
  "language": "C++",
  "readme_contents": "# BitCrack\n\nA tool for brute-forcing Bitcoin private keys. The main purpose of this project is to contribute to the effort of solving the [Bitcoin puzzle transaction](https://blockchain.info/tx/08389f34c98c606322740c0be6a7125d9860bb8d5cb182c02f98461e5fa6cd15): A transaction with 32 addresses that become increasingly difficult to crack.\n\n\n### Using BitCrack\n\n#### Usage\n\n\nUse `cuBitCrack.exe` for CUDA devices and `clBitCrack.exe` for OpenCL devices.\n\n### Note: **clBitCrack.exe is still EXPERIMENTAL**, as users have reported critial bugs when running on some AMD and Intel devices.\n\n**Note for Intel users:**\n\nThere is bug in Intel's OpenCL implementation which affects BitCrack. Details here: https://github.com/brichard19/BitCrack/issues/123\n\n\n```\nxxBitCrack.exe [OPTIONS] [TARGETS]\n\nWhere [TARGETS] are one or more Bitcoin address\n\nOptions:\n\n-i, --in FILE\n    Read addresses from FILE, one address per line. If FILE is \"-\" then stdin is read\n\n-o, --out FILE\n    Append private keys to FILE, one per line\n\n-d, --device N\n    Use device with ID equal to N\n\n-b, --blocks BLOCKS\n    The number of CUDA blocks\n\n-t, --threads THREADS\n    Threads per block\n\n-p, --points NUMBER\n    Each thread will process NUMBER keys at a time\n\n--keyspace KEYSPACE\n    Specify the range of keys to search, where KEYSPACE is in the format,\n\n\tSTART:END start at key START, end at key END\n\tSTART:+COUNT start at key START and end at key START + COUNT\n    :END start at key 1 and end at key END\n\t:+COUNT start at key 1 and end at key 1 + COUNT\n\n-c, --compressed\n    Search for compressed keys (default). Can be used with -u to also search uncompressed keys\n\n-u, --uncompressed\n    Search for uncompressed keys, can be used with -c to search compressed keys\n\n--compression MODE\n    Specify the compression mode, where MODE is 'compressed' or 'uncompressed' or 'both'\n\n--list-devices\n    List available devices\n\n--stride NUMBER\n    Increment by NUMBER\n\n--share M/N\n    Divide the keyspace into N equal sized shares, process the Mth share\n\n--continue FILE\n    Save/load progress from FILE\n```\n\n#### Examples\n\nThe simplest usage, the keyspace will begin at 0, and the CUDA parameters will be chosen automatically\n```\nxxBitCrack.exe 1FshYsUh3mqgsG29XpZ23eLjWV8Ur3VwH\n```\n\nMultiple keys can be searched at once with minimal impact to performance. Provide the keys on the command line, or in a file with one address per line\n```\nxxBitCrack.exe 1FshYsUh3mqgsG29XpZ23eLjWV8Ur3VwH 15JhYXn6Mx3oF4Y7PcTAv2wVVAuCFFQNiP 19EEC52krRUK1RkUAEZmQdjTyHT7Gp1TYT\n```\n\nTo start the search at a specific private key, use the `--keyspace` option:\n\n```\nxxBitCrack.exe --keyspace 766519C977831678F0000000000 1FshYsUh3mqgsG29XpZ23eLjWV8Ur3VwH\n```\n\nThe `--keyspace` option can also be used to search a specific range:\n\n```\nxxBitCrack.exe --keyspace 80000000:ffffffff 1FshYsUh3mqgsG29XpZ23eLjWV8Ur3VwH\n```\n\nTo periodically save progress, the `--continue` option can be used. This is useful for recovering\nafter an unexpected interruption:\n\n```\nxxBitCrack.exe --keyspace 80000000:ffffffff 1FshYsUh3mqgsG29XpZ23eLjWV8Ur3VwH\n...\nGeForce GT 640   224/1024MB | 1 target 10.33 MKey/s (1,244,659,712 total) [00:01:58]\n^C\nxxBitCrack.exe --keyspace 80000000:ffffffff 1FshYsUh3mqgsG29XpZ23eLjWV8Ur3VwH\n...\nGeForce GT 640   224/1024MB | 1 target 10.33 MKey/s (1,357,905,920 total) [00:02:12]\n```\n\n\nUse the `-b,` `-t` and `-p` options to specify the number of blocks, threads per block, and keys per thread.\n```\nxxBitCrack.exe -b 32 -t 256 -p 16 1FshYsUh3mqgsG29XpZ23eLjWV8Ur3VwH\n```\n\n### Choosing the right parameters for your device\n\nGPUs have many cores. Work for the cores is divided into blocks. Each block contains threads.\n\nThere are 3 parameters that affect performance: blocks, threads per block, and keys per thread.\n\n\n`blocks:` Should be a multiple of the number of compute units on the device. The default is 32.\n\n`threads:` The number of threads in a block. This must be a multiple of 32. The default is 256.\n\n`Keys per thread:` The number of keys each thread will process. The performance (keys per second)\nincreases asymptotically with this value. The default is256. Increasing this value will cause the\nkernel to run longer, but more keys will be processed.\n\n\n### Build dependencies\n\nVisual Studio 2019 (if on Windows)\n\nFor CUDA: CUDA Toolkit 10.1\n\nFor OpenCL: An OpenCL SDK (The CUDA toolkit contains an OpenCL SDK).\n\n\n### Building in Windows\n\nOpen the Visual Studio solution.\n\nBuild the `clKeyFinder` project for an OpenCL build.\n\nBuild the `cuKeyFinder` project for a CUDA build.\n\nNote: By default the NVIDIA OpenCL headers are used. You can set the header and library path for\nOpenCL in the `BitCrack.props` property sheet.\n\n### Building in Linux\n\nUsing `make`:\n\nBuild CUDA:\n```\nmake BUILD_CUDA=1\n```\n\nBuild OpenCL:\n```\nmake BUILD_OPENCL=1\n```\n\nOr build both:\n```\nmake BUILD_CUDA=1 BUILD_OPENCL=1\n```\n\n### Supporting this project\n\nIf you find this project useful and would like to support it, consider making a donation. Your support is greatly appreciated!\n\n**BTC**: `1LqJ9cHPKxPXDRia4tteTJdLXnisnfHsof`\n\n**LTC**: `LfwqkJY7YDYQWqgR26cg2T1F38YyojD67J`\n\n**ETH**: `0xd28082CD48E1B279425346E8f6C651C45A9023c5`\n\n### Contact\n\nSend any questions or comments to bitcrack.project@gmail.com\n"
 },
 {
  "repo": "notecoin/BitcoinDice",
  "language": null,
  "readme_contents": "BitcoinDice is a popular Bitcoin Dice game, BitcoinDice is free to use and distribute.<br>\r\n<br>\r\n== Pre-Requisites ==<br>\r\nLinux<br>\r\nApache2<br>\r\nPHP<br>\r\nMySQL<br>\r\nbitcoind<br>\r\n<br>\r\n== Installation ==<br>\r\n<br>\r\nbitcoind<br>\r\n<br>\r\n1) Install bitcoind<br>\r\n2) Edit your bitcoin.conf in ~/.bitcoin/bitcoin.conf (you may need to create this) to look like the following, You will need to change the username and pass.<br>\r\n<br>\r\nserver=1<br>\r\nrpcuser=bitcoinrpc<br>\r\nrpcpassword=dfbufbSUBUSbf7763YSFYbfybsiyb87<br>\r\nrpcport=8332<br>\r\n<br>\r\n3) run bitcoind -daemon<br>\r\n4) let it fully sync to the network before moving on to the next part (or the script will not work)<br>\r\n<br>\r\nBitcoinDice<br>\r\n<br>\r\n1) Put in a directory of your choice<br>\r\n2) Change to the inc/ directory and change the permissions to 777 (chmod 777 *)<br>\r\n3) Run the script from your prefered web browser and follow the installation instructions on screen<br>\r\n4) Once completed remove the install directory for security reasons<br>\r\n5) You now have access to http://your-server/dice/admin (or wherever you put the dice script)<br>\r\n6) Finally, Deposit your funds using the address on the wallet tab in the admin menu (Depositing your funds to another address will not work and will not show as available casino funds)<br>\r\n<br>\r\nif you have any problems you can contact me for installation help felinegambler@gmail.com<br>\r\n<br>\r\nGood Luck and have fun running your own casino!<br>\r\n"
 },
 {
  "repo": "vbuterin/pybitcointools",
  "language": null,
  "readme_contents": "I really don't have time to maintain this library further. If you want to fork it or use it despite lack of maintenance, feel free to clone locally and revert one commit.\n\nThis externally-maintained fork looks good though I did not personally write it so can't vouch for security: https://github.com/primal100/pybitcointools\n"
 },
 {
  "repo": "sr-gi/bitcoin_tools",
  "language": "Python",
  "readme_contents": "![bitcoin_tools](https://srgi.me/assets/images/bitcoin_tools_logo.png)\n\n[![Mentioned in Awesome](https://awesome.re/mentioned-badge.svg)](https://github.com/igorbarinov/awesome-bitcoin) <a href=\"https://blockstream.info/address/1srgi8sqPkCKq7gsVfhUZB7dvoi72UsqP\"><img width=110 src=\"https://srgi.me/assets/images/beer_badge.png\"></a> [![tippin.me](https://badgen.net/badge/%E2%9A%A1%EF%B8%8Ftippin.me/@sr_gi/F0918E)](https://tippin.me/@sr_gi)\n\nbitcoin_tools is a Python library created for teaching and researching purposes. It's main objective is twofold. First it \naims to ease the understanding of Bitcoin transaction creation, by using well-documented and easy to understand\npython code. Second, it aims to provide a tool able to create custom `transactions` / `scripts`. Either `scriptSig` and \n`scriptPubKey` can be built from human readable strings created using `Script` syntax. Finally, tools for accessing and \nanalysing interesting data such as the `utxo set` are also provided, along with several examples.\n\nbitcoin_tools allows you to:\n\n* Bitcoin keys creation and management.\n* Creation of Bitcoin transactions from scratch.\n* Customize any field of your transaction.\n* Transaction serialization / deserialization.\n* Creation of standard and custom scripts (`scriptSig` and `scriptPubKey`).\n* Transaction analysis from hex encoded transactions.\n\nAdditionally, bitcoin_tools contains ``STATUS`` an\n**ST**atistical **A**nalysis **T**ool for **U**txo **S**et under [`analysis/status`](bitcoin_tools/analysis/status)\n\n### Dependencies\n\nRefer to [DEPENCENCIES.md](DEPENDENCIES.md)\n\n### Installation\n\nRefer to [INSTALL.md](INSTALL.md)\n\n### Some trouble getting started with the repo?\n\nRefer to [FAQ.md](FAQ.md)\n\n### Still not working?\n\nFeel free to open an issue.\n\n### Examples\n\nDown below you can find some examples of how to use some of the library functions. More examples can be found in \n[`examples/`](examples/)\n\n#### Key management and Bitcoin address generation\n```python\nfrom bitcoin_tools.core.keys import generate_keys, store_keys\nfrom bitcoin_tools.wallet import generate_wif, generate_btc_addr\n\n# First of all the ECDSA keys are generated.\nsk, pk = generate_keys()\n# Then, the Bitcoin address is derived from the public key created above.\nbtc_addr = generate_btc_addr(pk)\n# Both the public and private key are stored in disk in pem format. The Bitcoin address is used as an identifier in the\n# name of the folder that contains both keys.\nstore_keys(sk.to_pem(), pk.to_pem(), btc_addr)\n# Finally, the private key is encoded as WIF and also stored in disk, ready to be imported in a wallet.\ngenerate_wif(btc_addr, sk)\n```\n\n#### Raw transaction building  \n```python\nfrom bitcoin_tools.core.keys import load_keys\nfrom bitcoin_tools.core.transaction import TX\n\n# Key loading\nbtc_addr = \"miWdbNn9zDLnKpcNuCLdfRiJx59c93bT8t\"\nsk, pk = load_keys(btc_addr)\n\n# Reference to the previous transaction output that will be used to redeem and spend the funds, consisting on an id and\n# an output index.\nprev_tx_id = \"7767a9eb2c8adda3ffce86c06689007a903b6f7e78dbc049ef0dbaf9eeebe075\"\nprev_out_index = 0\n\n# Amount to be spent, in Satoshis, and the fee to be deduced (should be calculated).\nvalue = 6163910\nfee = 230 * 240\n\n# Destination Bitcoin address where the value in bitcoins will be sent and locked until the owner redeems it.\ndestination_btc_addr = \"miWdbNn9zDLnKpcNuCLdfRiJx59c93bT8t\"\n\n# First, we  build our transaction from io (input/output) using the previous transaction references, the value, and the\n# destination.\ntx = TX.build_from_io(prev_tx_id, prev_out_index, value - fee, destination_btc_addr)\n# Finally, the transaction is signed using the private key associated with the Bitcoin address from each input.\n# Input 0 will be signed, since we have only created one.\ntx.sign(sk, 0)\n\n# Once created we can display the serialized transaction. Transaction is now ready to be broadcast.\nprint \"hex: \" + tx.serialize()\n\n# Finally, we can analyze each field of the transaction.\ntx.display()\n```\n#### Raw tx analysis\n\n```python\nfrom bitcoin_tools.core.transaction import TX\n\n# First a transaction object is created (through the deserialize constructor) by deserializing the hex transaction we\n# have selected.\nhex_tx = \"01000000013ca58d2f6fac36602d831ee0cf2bc80031c7472e80a322b57f614c5ce9142b71000000006b483045022100f0331d85cb7f7ec1bedc41f50c695d654489458e88aec0076fbad5d8aeda1673022009e8ca2dda1d6a16bfd7133b0008720145dacccb35c0d5c9fc567e52f26ca5f7012103a164209a7c23227fcd6a71c51efc5b6eb25407f4faf06890f57908425255e42bffffffff0241a20000000000001976a914e44839239ab36f5bc67b2079de00ecf587233ebe88ac74630000000000001976a914dc7016484646168d99e49f907c86c271299441c088ac00000000\"\ntx = TX.deserialize(hex_tx)\n\n# Then, the transaction can be displayed using the display method to analyze how it's been constructed.\ntx.display()\n``` \n\n#### Using STATUS to dump the UTXOs LevelDB\n```python\nfrom bitcoin_tools.analysis.status.data_dump import utxo_dump\nfrom bitcoin_tools.analysis.status.utils import parse_ldb\n\n# Set the version of the Bitcoin Core you are using (which defines the chainstate format)\n# and the IO files.\n\nf_utxos = \"decoded_utxos.txt\"\nf_parsed_utxos = \"parsed_utxos.txt\"\n\n# Set the coin we're working with\ncoin = 'bitcoin'\n\n# Parse all the data in the chainstate.\nparse_ldb(f_utxos)\n# Parses transactions and utxos from the dumped data.\nutxo_dump(f_utxos, f_parsed_utxos, coin)\n\n# Data is stored in f_utxos and f_parsed_utxos files respectively\n```\n\n### Support\n\nIf you find this repository useful, show us some love, give us a star!\n\nSmall Bitcoin donations to the following address are also welcome:\n\n[1srgi8sqPkCKq7gsVfhUZB7dvoi72UsqP](https://blockstream.info/address/1srgi8sqPkCKq7gsVfhUZB7dvoi72UsqP)\n\n### Disclaimer\n\nThis library allow you to modify any transaction field as you pleased. However, some modifications can make your \ntransactions non-standard, or even non-spendable. We totally discourage the  use of the library outside the testnet if \nyou are not sure about what you are doing, specially when dealing with non-standard scripts. A bad use of the library \ncan lead you to lose some of your bitcoins.\n\n\n\n\n"
 },
 {
  "repo": "Samourai-Wallet/samourai-wallet-android",
  "language": "Java",
  "readme_contents": "[![Build Status](https://travis-ci.org/Samourai-Wallet/samourai-wallet-android.svg?branch=develop)](https://travis-ci.org/Samourai-Wallet/samourai-wallet-android)\n\n# Samourai Wallet\n\n### Features:\n\n[Samourai Wallet features list](Samourai-Wallet-features.md)\n\n### Build:\n\nImport as Android Studio project. Should build \"as is\". PGP signed tagged releases correspond to builds that were issued via Google Play.\n\n### BIP44:\n\nSamourai implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki), extends [bitcoinj](https://bitcoinj.github.io/).\n\n### BIP47:\n\nSamourai implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki) by Justus Ranvier. Extends BIP44 implementation (above). Further modifications have been made to incorporate Segwit addresses into BIP47.\n\n[Generic source code for BIP47.](https://github.com/SamouraiDev/BIP47_RPC)\n\n[BIP47 test vectors](https://gist.github.com/SamouraiDev/6aad669604c5930864bd)\n\n### BIP49 (Segwit):\n\nSamourai P2SH-P2WPKH implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki) by Daniel Weigl and includes support for BIP49-specific XPUBs: [YPUB](https://github.com/Samourai-Wallet/sentinel-android/issues/16).\n\n### BIP69:\n\nSamourai implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki) by Kristov Atlas.\n\n### BIP84 (Segwit):\n\nSamourai implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki) by Pavol Rusnak.\n\n### BIP125 (Replace-by-fee, RBF):\n\nSamourai implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki) by David A. Harding and Peter Todd.\n\n### BIP141 (Segwit):\n\nSamourai spends to bech32 addresses P2WPKH based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki) by Eric Lombrozo, Johnson Lau and Pieter Wuille.\n\n### BIP173 (Segwit):\n\nSamourai implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki) by Pieter Wuille and Greg Maxwell.\n\n### BIP174 (Partially Signed Bitcoin Transaction Format, PSBT):\n\nSamourai signing via PSBT implementation based on [original BIP](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) by  Andrew Chow.\n\n### Spending:\n\nSamourai spends include the possibility of including custom fees as well as the use of batch spending (build up a list of batched outputs for grouped spend and fee savings).\n\n### Ricochet:\n\nSamourai implementation of multi-hop spend designed to outrun the baying pack of #KYCRunningDogs.\n\nRicochet using nLockTime (staggered) will spread out hops over different blocks and make sure that hops do not appear all at once in the mempool.\n\n### STONEWALL:\n\nSTONEWALL spend is designed to increase the number of combinations between inputs and outputs (transaction entropy). It replaces the previously used BIP126. The objective is to obtain a positive entropy score using [Boltzmann](https://github.com/Samourai-Wallet/boltzmann) evaluation of the transaction.\n\n### Stowaway:\n\nA Stowaway spend, also implemented as [PayJoin](https://joinmarket.me/blog/blog/payjoin/), is a collaborative-spend carried out with another user. UTXOs are joined and the spend amount is cloaked. It is based on an [idea](https://bitcointalk.org/index.php?topic=139581.0) by Gregory Maxwell. \n\n### Tor:\n\nIncludes Tor bundled in-app.\n\n### TestNet3:\n\nMainNet/TestNet selection is displayed when sideloading a new installation. To switch networks, make a backup of your current wallet, uninstall/reinstall (sideload) and select desired network.\n\n### OpenDime:\n\nPlug in your OpenDime using the appropriate OTG (On-The-Go) USB cable and Samourai can be used to view address and balance, validate the private key, and sweep balance to your wallet.\n\n### License:\n\n[Unlicense](https://github.com/Samourai-Wallet/samourai-wallet-android/blob/master/LICENSE)\n\n### Contributing:\n\nAll development goes in 'develop' branch - do not submit pull requests to 'master'.\n\n### Dev contact:\n\n[PGP](http://pgp.mit.edu/pks/lookup?op=get&search=0x72B5BACDFEDF39D7)\n\n### What we do:\n\n[Samourai HQ](https://samouraiwallet.com)\n\n[Sentinel](https://play.google.com/store/apps/details?id=com.samourai.sentinel&hl=en)\n\n[PayNym.is](https://paynym.is)\n\n[OXT](https://oxt.me)\n\n[Sovereign.ly](http://sovereign.ly)\n\n[Mule Tools](http://mule.tools)\n"
 },
 {
  "repo": "casascius/Bitcoin-Address-Utility",
  "language": "C#",
  "readme_contents": "This project has two dependencies:\r\n\r\n1. the BouncyCastle Crypto library.\r\n2. ThoughtWorks QRCode DLL\r\n\r\nGet BouncyCastle from http://www.bouncycastle.org/csharp/  (just the compiled assembly is fine)."
 },
 {
  "repo": "bitcoin-core/btcdeb",
  "language": "C++",
  "readme_contents": "# btcdeb\n\nBitcoin Script debugging utilities.\n\nThis is a set of tools used to debug or construct scripts for use in Bitcoin.\n\n[![Build Status](https://travis-ci.org/bitcoin-core/btcdeb.svg?branch=master)](https://travis-ci.org/bitcoin-core/btcdeb)\n\n## Preparation\n\nMac users need the macOS command line tools:\n\n```\nxcode-select --install\n```\n\nAnd [Homebrew](https://brew.sh/).\n\n## Dependencies\n\nbtcdeb depends on the following:\n\n- libtool\n- libssl\n- automake/autoconf\n- pkg-config\n\nUbuntu/debian users can do: `apt-get install libtool libssl-dev autoconf pkg-config` (with `sudo` prepended if necessary)\n\nMac users can do: `brew install libtool automake pkg-config`\n\n## Installation\n\nOn linux or mac, grab the source code and do:\n\n```Bash\n$ ./autogen.sh\n$ ./configure\n$ make\n$ sudo make install\n```\n\nOr use **docker**:\n\n```Bash\ndocker build -t btcdeb .\ndocker run -d -t --name btc-vm btc-vm btcdeb\n# and for run it in the shell\ndocker exec -it btc-vm /bin/sh\n```\n\nIf any of those give an error, please file an issue and I'll take a look. It could\nbe a dependency that I forgot about.\n\n## Emscripten\n\nYou can compile btcdeb tools into JavaScript using [emscripten](http://kripken.github.io/emscripten-site/).\n\nAfter installing the SDK, compile btcdeb tools with the following commands:\n\n```Bash\n$ make clean\n$ emconfigure ./configure\n$ emmake make\n$ for i in btcdeb btcc tap; do mv $i $i.bc && emcc -O2 $i.bc libbitcoin.a -o $i.js; done\n```\n\nand then instead of doing `./btcdeb` you do `node btcdeb.js` (or `mastify.js`, etc).\n\nThe last part is done because emscripten's `emcc` expects the input bytecode file to have the `.bc` extension, whereas the makefile generates files with no extension.\n\nNote: most things work, but the console in btcdeb does not. You can work around this by doing `echo -n -e \"step\\n\\n\\n\"` (with sufficient `\\n`s).\n\n## Script debugger\n\nThe `btcdeb` command can step through a Bitcoin Script and show stack content and operations on a per op level. See [doc/btcdeb.md](doc/btcdeb.md) for details on usage.\n\n## Script compiler\n\nThe `btcc` command can interpret a script in its human readable form and will\nreturn a corresponding Bitcoin Script.\n\n```Bash\n$ btcc OP_DUP OP_HASH160 897c81ac37ae36f7bc5b91356cfb0138bfacb3c1 OP_EQUALVERIFY OP_CHECKSIG\n76a914897c81ac37ae36f7bc5b91356cfb0138bfacb3c188ac\n```\n\nThe above is the script pub key for a transaction in Bitcoin in human readable format turned into its hexadecimal representation.\n"
 },
 {
  "repo": "imharrywu/fastcoin",
  "language": "C++",
  "readme_contents": "Fastcoin Core integration/staging tree\n=====================================\n\n>Here is a recent version of alt-coin, which tracks the core version of bitcoin. [bitgold](https://github.com/bitbaba/bitgold)\n\n>Or you can try this script [`travis.sh'](travis.sh)\n\n[![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n\nhttps://www.bitcoin.org\n\nWhat is Fastcoin?\n----------------\n\nBitcoin is an experimental new digital currency that enables instant payments to\nanyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate\nwith no central authority: managing transactions and issuing money are carried\nout collectively by the network. Bitcoin Core is the name of open source\nsoftware which enables the use of this currency.\n\nFor more information, as well as an immediately useable, binary version of\nthe Bitcoin Core software, see https://www.bitcoin.org/en/download.\n\nLicense\n-------\n\nBitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see http://opensource.org/licenses/MIT.\n\nDevelopment process\n-------------------\n\nDevelopers work in their own trees, then submit pull requests when they think\ntheir feature or bug fix is ready.\n\nIf it is a simple/trivial/non-controversial change, then one of the Bitcoin\ndevelopment team members simply pulls it.\n\nIf it is a *more complicated or potentially controversial* change, then the patch\nsubmitter will be asked to start a discussion (if they haven't already) on the\n[mailing list](http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development).\n\nThe patch will be accepted if there is broad consensus that it is a good thing.\nDevelopers should expect to rework and resubmit patches if the code doesn't\nmatch the project's coding conventions (see [doc/developer-notes.md](doc/developer-notes.md)) or are\ncontroversial.\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\nregularly to indicate new official, stable release versions of Bitcoin.\n\nTesting\n-------\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money.\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write unit tests for new code, and to\nsubmit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n\nEvery pull request is built for both Windows and Linux on a dedicated server,\nand unit and sanity tests are automatically run. The binaries produced may be\nused for manual QA testing \u2014 a link to them will appear in a comment on the\npull request posted by [BitcoinPullTester](https://github.com/BitcoinPullTester). See https://github.com/TheBlueMatt/test-scripts\nfor the build/test scripts.\n\n### Manual Quality Assurance (QA) Testing\n\nLarge changes should have a test plan, and should be tested by somebody other\nthan the developer who wrote the code.\nSee https://github.com/bitcoin/QA/ for how to create a test plan.\n\nTranslations\n------------\n\nChanges to translations as well as new translations can be submitted to\n[Bitcoin Core's Transifex page](https://www.transifex.com/projects/p/bitcoin/).\n\nTranslations are periodically pulled from Transifex and merged into the git repository. See the\n[translation process](doc/translation_process.md) for details on how this works.\n\n**Important**: We do not accept translation changes as GitHub pull requests because the next\npull from Transifex would automatically overwrite them again.\n\nTranslators should also subscribe to the [mailing list](https://groups.google.com/forum/#!forum/bitcoin-translators).\n"
 },
 {
  "repo": "BlueWallet/BlueWallet",
  "language": "JavaScript",
  "readme_contents": "# BlueWallet - A Bitcoin & Lightning Wallet\n\n[![GitHub tag](https://img.shields.io/badge/dynamic/json.svg?url=https://raw.githubusercontent.com/BlueWallet/BlueWallet/master/package.json&query=$.version&label=Version)](https://github.com/BlueWallet/BlueWallet)\n[![CircleCI](https://circleci.com/gh/BlueWallet/BlueWallet.svg?style=svg)](https://circleci.com/gh/BlueWallet/BlueWallet)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n![](https://img.shields.io/github/license/BlueWallet/BlueWallet.svg)\n\nThin Bitcoin Wallet.\nBuilt with React Native and Electrum.\n\n[![Appstore](https://bluewallet.io/uploads/app-store-badge-blue.svg)](https://itunes.apple.com/us/app/bluewallet-bitcoin-wallet/id1376878040?l=ru&ls=1&mt=8)\n[![Playstore](https://bluewallet.io/uploads/play-store-badge-blue.svg)](https://play.google.com/store/apps/details?id=io.bluewallet.bluewallet)\n\nWebsite: [bluewallet.io](https://bluewallet.io)\n\nCommunity: [telegram group](https://t.me/bluewallet)\n\n* Private keys never leave your device\n* Lightning Network supported\n* SegWit-first. Replace-By-Fee support\n* Encryption. Plausible deniability\n* And many more [features...](https://bluewallet.io/features)\n\n\n<img src=\"https://i.imgur.com/hHYJnMj.png\" width=\"100%\">\n\n\n## BUILD & RUN IT\n\nPlease refer to the engines field in package.json file for the minimum required versions of Node and npm. It is preferred that you use an even-numbered version of Node as these are LTS versions.\n\nTo view the version of Node and npm in your environment, run the following in your console:\n\n```\nnode --version && npm --version\n```\n\n* In your console:\n\n```\ngit clone https://github.com/BlueWallet/BlueWallet.git\ncd BlueWallet\nnpm install\n```\n\nPlease make sure that your console is running the most stable versions of npm and node (even-numbered versions).\n\n* To run on Android:\n\nYou will now need to either connect an Android device to your computer or run an emulated Android device using AVD Manager which comes shipped with Android Studio. To run an emulator using AVD Manager:\n\n1. Download and run Android Studio\n2. Click on \"Open an existing Android Studio Project\"\n3. Open `build.gradle` file under `BlueWallet/android/` folder\n4. Android Studio will take some time to set things up. Once everything is set up, go to `Tools` -> `AVD Manager`.\n    * \ud83d\udcdd This option [may take some time to appear in the menu](https://stackoverflow.com/questions/47173708/why-avd-manager-options-are-not-showing-in-android-studio) if you're opening the project in a freshly-installed version of Android Studio.\n5. Click on \"Create Virtual Device...\" and go through the steps to create a virtual device\n6. Launch your newly created virtual device by clicking the `Play` button under `Actions` column\n\nOnce you connected an Android device or launched an emulator, run this:\n\n```\nnpx react-native run-android\n```\n\nThe above command will build the app and install it. Once you launch the app it will take some time for all of the dependencies to load. Once everything loads up, you should have the built app running.\n\n* To run on iOS:\n\n```\nnpx pod-install\nnpm start\n```\n\nIn another terminal window within the BlueWallet folder:\n```\nnpx react-native run-ios\n```\n\n* To run on macOS using Mac Catalyst:\n\n```\nnpm run maccatalystpatches\n```\n\nOnce the patches are applied, open Xcode and select \"My Mac\" as destination.\n\n## TESTS\n\n```bash\nnpm run test\n```\n\n\n## LICENSE\n\nMIT\n\n## WANT TO CONTRIBUTE?\n\nGrab an issue from [the backlog](https://github.com/BlueWallet/BlueWallet/projects/1), try to start or submit a PR, any doubts we will try to guide you. Contributors have a private telegram group, request access by email bluewallet@bluewallet.io\n\n## Translations\n\nWe accept translations via [Transifex](https://www.transifex.com/bluewallet/bluewallet/)\n\nTo participate you need to:\n1. Sign up to Transifex\n2. Find BlueWallet project\n3. Send join request\n4. After we accept your request you will be able to start translating! That's it!\n\nPlease note the values in curly braces should not be translated. These are the names of the variables that will be inserted into the translated string. For example, the original string `\"{number} of {total}\"` in Russian will be `\"{number} \u0438\u0437 {total}\"`.\n\nTransifex automatically creates Pull Request when language reaches 100% translation. We also trigger this by hand before each release, so don't worry if you can't translate everything, every word counts.\n\n## Q&A\n\nBuilds automated and tested with BrowserStack\n\n<a href=\"https://www.browserstack.com/\"><img src=\"https://i.imgur.com/syscHCN.png\" width=\"160px\"></a>\n\nBugs reported via BugSnag\n\n<a href=\"https://www.bugsnag.com\"><img src=\"https://images.typeform.com/images/QKuaAssrFCq7/image/default\" width=\"160px\"></a>\n\n\n## RESPONSIBLE DISCLOSURE\n\nFound critical bugs/vulnerabilities? Please email them bluewallet@bluewallet.io\nThanks!\n"
 },
 {
  "repo": "dart-bitcoin/bitcoin_flutter",
  "language": "Dart",
  "readme_contents": "<a href=\"https://pub.dartlang.org/packages/bitcoin_flutter\"><img alt=\"pub version\" src=\"https://img.shields.io/pub/v/bitcoin_flutter.svg?style=flat-square\"></a>\n\n# bitcoin_flutter\n\nA dart Bitcoin library for Flutter.\n\nReleased under the terms of the [MIT LICENSE](LICENSE).\n\nInspired by [bitcoinjs](https://github.com/bitcoinjs/bitcoinjs-lib)\n\nOtherwise, pull requests are appreciated.\n\n## Installing\n\n[Flutter Packages](https://pub.dartlang.org/packages/bitcoin_flutter#-installing-tab-)\n\n## Examples\n\n```dart\nimport 'package:bitcoin_flutter/bitcoin_flutter.dart';\nimport 'package:bip39/bip39.dart' as bip39;\n\nmain() {\n  var seed = bip39.mnemonicToSeed(\"praise you muffin lion enable neck grocery crumble super myself license ghost\");\n  var hdWallet = new HDWallet.fromSeed(seed);\n  print(hdWallet.address);\n  // => 12eUJoaWBENQ3tNZE52ZQaHqr3v4tTX4os\n  print(hdWallet.pubKey);\n  // => 0360729fb3c4733e43bf91e5208b0d240f8d8de239cff3f2ebd616b94faa0007f4\n  print(hdWallet.privKey);\n  // => 01304181d699cd89db7de6337d597adf5f78dc1f0784c400e41a3bd829a5a226\n  print(hdWallet.wif);\n  // => KwG2BU1ERd3ndbFUrdpR7ymLZbsd7xZpPKxsgJzUf76A4q9CkBpY\n  \n  var wallet = Wallet.fromWIF(\"Kxr9tQED9H44gCmp6HAdmemAzU3n84H3dGkuWTKvE23JgHMW8gct\");\n  print(wallet.address);\n  // => 19AAjaTUbRjQCMuVczepkoPswiZRhjtg31\n  print(wallet.pubKey);\n  // => 03aea0dfd576151cb399347aa6732f8fdf027b9ea3ea2e65fb754803f776e0a509\n  print(wallet.privKey);\n  // => 3095cb26affefcaaa835ff968d60437c7c764da40cdd1a1b497406c7902a8ac9\n  print(wallet.wif);\n  // => Kxr9tQED9H44gCmp6HAdmemAzU3n84H3dGkuWTKvE23JgHMW8gct\n}\n```\n\nThe below examples are implemented as integration tests:\n- [Generate a random address](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/addresses_test.dart#L21)\n- [Validating address](https://github.com/anicdh/bitcoin-dart/blob/master/test/address_test.dart)\n- [Generate an address from a SHA256 hash](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/addresses_test.dart#L26)\n- [Import an address via WIF](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/addresses_test.dart#L32)\n- [Generate a Testnet address](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/addresses_test.dart#L37)\n- [Generate a Litecoin address](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/addresses_test.dart#L45)\n- [Generate a native Segwit address](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/addresses_test.dart#L53)\n- [Create a 1-to-1 Transaction](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/transactions_test.dart#L10)\n- [Create a 2-to-2 Transaction](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/transactions_test.dart#L29)\n- [Create an OP_RETURN Transaction](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/transactions_test.dart#L61)\n- [Create a Transaction with a SegWit P2WPKH input](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/transactions_test.dart#L45)\n- [Import a BIP32 testnet xpriv and export to WIF](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/bip32_test.dart#L9)\n- [Export a BIP32 xpriv, then import it](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/bip32_test.dart#L14)\n- [Export a BIP32 xpub](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/bip32_test.dart#L23)\n- [Create a BIP32, bitcoin, account 0, external address](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/bip32_test.dart#L30)\n- [Create a BIP44, bitcoin, account 0, external address](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/bip32_test.dart#L41)\n- [Use BIP39 to generate BIP32 addresses](https://github.com/anicdh/bitcoin-dart/blob/master/test/integration/bip32_test.dart#L56)\n\n\n### TODO\n- Generate a SegWit P2SH address\n- Generate a SegWit multisig address\n- Create a Transaction with a P2SH(multisig) input\n- Build a Transaction w/ psbt format\n- Add Tapscript / Taproot feature\n\n### Running the test suite\n\n``` bash\npub run test\n```\n\n## Complementing Libraries\n- [BIP39](https://github.com/anicdh/bip39) - Mnemonic generation for deterministic keys\n- [BIP32](https://github.com/anicdh/bip32) - BIP32\n- [Base58 Check](https://github.com/anicdh/bs58check-dart) - Base58 check encoding/decoding\n\n## LICENSE [MIT](LICENSE)\n"
 },
 {
  "repo": "jwhitehorn/jsMiner",
  "language": "JavaScript",
  "readme_contents": "jsMiner, Copyright 2011. Please see LICENSE for more details.\n\nThis is a Javascript based Bitcoin miner. The same software originally written for http://bitp.it/.\n\n\nIt utilizes HTML 5 web workers, where present, otherwise it defaults back to running in the UI thread utilizing setTimeout.\n"
 },
 {
  "repo": "barmstrong/bitcoin-android",
  "language": "Java",
  "readme_contents": "Bitcoin Android\n==============\n\n> NOTE: This app is no longer supported or under development.  Please visit [Coinbase.com](https://coinbase.com) for the latest (this is my full time project going forward).  The app below was an early experiment in bitcoin, and it had some limitations since it was operating a full bitcoin client on the mobile device (which used lots of storage, bandwidth, and CPU - took too long to sync with the blockchain).  My future mobile apps will make use of the [Coinbase API](https://coinbase.com/api/doc) so that the heavy lifting can be done in the cloud while the mobile device acts as a thin client.\n\n\nSend and receive bitcoins from your Android phone!\n\nNote that this app is still under development and may lose your coins!  Test it with small amounts.\n\nYou can [get it from the Android Market here](https://market.android.com/details?id=com.bitcoinandroid) and click \"Install\" to send it to your phone.\n\n<table>\n  <tr>\n    <td><img src=\"https://github.com/barmstrong/bitcoin-android/raw/master/screenshots/btc1.png\" width=\"200\" /></td>    \n    <td><img src=\"https://github.com/barmstrong/bitcoin-android/raw/master/screenshots/btc2.png\" width=\"200\" /></td>\n    <td><img src=\"https://github.com/barmstrong/bitcoin-android/raw/master/screenshots/btc3.png\" width=\"200\" /></td>\n    <td><img src=\"https://github.com/barmstrong/bitcoin-android/raw/master/screenshots/btc4.png\" width=\"200\" /></td>\n  </tr>\n</table>\n\n**Checkout a [YouTube Demo Video Here](http://www.youtube.com/watch?v=W6EucS5RS24)**\n\nFeatures\n--------\n\n* Send/Receive bitcoins entirely from your phone (no server component required)\n* Scan and generate QR codes to share address, amount, etc between devices\n* Recognizes the Bitcoin [URI format](https://en.bitcoin.it/wiki/URI_Scheme)\n* Creates transactions in the absence of internet (will retry when you reconnect)\n* Email invoices from your phone to request money\n* Wallet file backed up in the cloud (synced to your Google account) in case you lose your phone.\n* A free app, 100% open source\n\nInstallation\n-------------\n\nYou can [download and install the app](https://market.android.com/details?id=com.bitcoinandroid) from the Android Market.\n\nFor best results, install the app while connected to WiFi (it will download some data the first time you launch it).\n\nNext, get a few coins in your wallet by starting the app and tapping \"Request Money\".  From here you can send a request to yourself by email.  The request will contain your wallet's receive address which you can paste into your desktop client or the [bitcoin faucet](https://freebitcoins.appspot.com/) to add funds to your wallet.\n\nUsage\n-----\n\nCheck out the wiki page on [using bitcoin android](https://github.com/barmstrong/bitcoin-android/wiki/Using-Your-Bitcoin-Wallet).\n\nTechnical Details\n-----------------\n\nCheck out the wiki page on [technical details](https://github.com/barmstrong/bitcoin-android/wiki/Technical-Details).\n\nContributing\n------------\n\nFeel free to fork and send [pull requests](http://help.github.com/fork-a-repo/).  Contributions welcome.\n\nDonations\n---------\n\nTo support ongoing development of bitcoin android try [scanning this QR code](http://qrcode.kaywa.com/img.php?s=6&d=bitcoin%3A1Gp1himAQ4jmmQJ5zZwQxKmv7yg4Drm5M4%3Fmessage%3DThank%2520you%2520for%2520supporting%2520bitcoin%2520android%21) from your phone or sending donations to 1Gp1himAQ4jmmQJ5zZwQxKmv7yg4Drm5M4\n\nTODO\n----\n\n* optionally require a pin code to send money for additional security?\n* ability to generate more than one receive address\n* make backup to the cloud optional for those who want the privacy\n* move to a \"thin client\" implementation instead of storing the entire blockchain (this will become necessary as the blockchain grows over time)\n* make an easy link to the Bitcoin Faucet for people to get a few coins on the device when they first try it\n* clicking a [bitcoin link](https://en.bitcoin.it/wiki/URI_Scheme) in the mobile browser should open the send money screen (with fields filled in) using Android intents\n\nCredits\n-------\n\nBitcoin Android is based on the [bitcoinj](http://code.google.com/p/bitcoinj/) library by Mike Hearn at Google.  He deserves some very special thanks!\n\nIt also makes use of the [zxing](http://code.google.com/p/zxing/) library for processing QR codes.  The icon was created by [visualpharm.com](http://www.visualpharm.com/).\n\nLicense\n-------\n\nBitcoin Android is open source software released under the Apache V2 license.\n"
 },
 {
  "repo": "fort-nix/nix-bitcoin",
  "language": "Nix",
  "readme_contents": "<p align=\"center\">\n  <img\n    width=\"320\"\n    src=\"docs/img/nix-bitcoin-logo.png\"\n    alt=\"nix-bitcoin logo\">\n</p>\n<br/>\n<p align=\"center\">\n    <a href=\"https://cirrus-ci.com/github/fort-nix/nix-bitcoin\" target=\"_blank\">\n        <img src=\"https://api.cirrus-ci.com/github/fort-nix/nix-bitcoin.svg?branch=master\" alt=\"CirrusCI status\">\n    </a>\n    <a href=\"https://github.com/fort-nix/nix-bitcoin/releases/latest\" target=\"_blank\">\n        <img src=\"https://img.shields.io/github/v/release/fort-nix/nix-bitcoin\" alt=\"GitHub tag (latest SemVer)\">\n    </a>\n    <a href=\"https://github.com/fort-nix/nix-bitcoin/commits/master\" target=\"_blank\">\n        <img src=\"https://img.shields.io/github/commit-activity/y/fort-nix/nix-bitcoin\" alt=\"GitHub commit activity\">\n    </a>\n    <a href=\"https://github.com/fort-nix/nix-bitcoin/graphs/contributors\" target=\"_blank\">\n        <img src=\"https://img.shields.io/github/contributors-anon/fort-nix/nix-bitcoin\" alt=\"GitHub contributors\">\n    </a>\n    <a href=\"https://github.com/fort-nix/nix-bitcoin/releases\" target=\"_blank\">\n        <img src=\"https://img.shields.io/github/downloads/fort-nix/nix-bitcoin/total\" alt=\"GitHub downloads\">\n    </a>\n</p>\n<br/>\n\nnix-bitcoin is a collection of Nix packages and NixOS modules for easily installing **full-featured Bitcoin nodes** with an emphasis on **security**.\n\nOverview\n---\nnix-bitcoin can be used for personal or merchant wallets, public infrastructure or\nfor Bitcoin application backends. In all cases, the aim is to provide security and\nprivacy by default. However, while nix-bitcoin is used in production today, it is\nstill considered experimental.\n\nnix-bitcoin nodes can be deployed on dedicated hardware, virtual machines or containers.\nThe Nix packages and NixOS modules can be used independently and combined freely.\n\nnix-bitcoin is built on top of Nix and [NixOS](https://nixos.org/) which provide powerful abstractions to keep it highly customizable and\nmaintainable. Testament to this are nix-bitcoin's robust security features and its potent test framework.  However,\nrunning nix-bitcoin does not require any previous experience with the Nix ecosystem.\n\nGet started\n---\n- See the [examples](examples/README.md) for an overview of all features.\n- To setup a new node from scratch, see the [installation instructions](docs/install.md).\n- To add nix-bitcoin to an existing NixOS configuration, see [importable-configuration.nix](examples/importable-configuration.nix)\n  and the [Flake example](examples/flakes/flake.nix).\n\nDocs\n---\nHint: To show a table of contents, click the button (![Github TOC button](docs/img/github-table-of-contents.svg)) in the\ntop left corner of the documents.\n\n<!-- TODO-EXTERNAL: -->\n<!-- Change query to `nix-bitcoin` when upstream search has been fixed -->\n* [NixOS options search](https://search.nixos.org/flakes?channel=unstable&sort=relevance&type=options&query=bitcoin)\n* [Hardware requirements](docs/hardware.md)\n* [Installation](docs/install.md)\n* [Configuration and maintenance](docs/configuration.md)\n* [Using services](docs/services.md)\n* [FAQ](docs/faq.md)\n\nFeatures\n---\nA [configuration preset](modules/presets/secure-node.nix) for setting up a secure node\n* All applications use Tor for outbound connections and support accepting inbound connections via onion services.\n\nNixOS modules ([src](modules/modules.nix))\n* Application services\n  * [bitcoind](https://github.com/bitcoin/bitcoin)\n  * [clightning](https://github.com/ElementsProject/lightning) with support for announcing an onion service\n    and [database replication](docs/services.md#setup-clightning-database-replication).\\\n    Available plugins:\n    * [clboss](https://github.com/ZmnSCPxj/clboss): automated C-Lightning Node Manager\n    * [currencyrate](https://github.com/lightningd/plugins/tree/master/currencyrate): currency converter\n    * [helpme](https://github.com/lightningd/plugins/tree/master/helpme): walks you through setting up a fresh c-lightning node\n    * [monitor](https://github.com/lightningd/plugins/tree/master/monitor): helps you analyze the health of your peers and channels\n    * [prometheus](https://github.com/lightningd/plugins/tree/master/prometheus): lightning node exporter for the prometheus timeseries server\n    * [rebalance](https://github.com/lightningd/plugins/tree/master/rebalance): keeps your channels balanced\n    * [summary](https://github.com/lightningd/plugins/tree/master/summary): print a nice summary of the node status\n    * [zmq](https://github.com/lightningd/plugins/tree/master/zmq): publishes notifications via ZeroMQ to configured endpoints\n  * [clightning-rest](https://github.com/Ride-The-Lightning/c-lightning-REST): REST server for clightning\n  * [lnd](https://github.com/lightningnetwork/lnd) with support for announcing an onion service and [static channel backups](https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md)\n    * [Lightning Loop](https://github.com/lightninglabs/loop)\n    * [Lightning Pool](https://github.com/lightninglabs/pool)\n    * [charge-lnd](https://github.com/accumulator/charge-lnd): policy-based channel fee manager\n  * [lndconnect](https://github.com/LN-Zap/lndconnect): connect your wallet to lnd or clightning via a REST onion service\n  * [Ride The Lightning](https://github.com/Ride-The-Lightning/RTL): web interface for `lnd` and `clightning`\n  * [spark-wallet](https://github.com/shesek/spark-wallet)\n  * [electrs](https://github.com/romanz/electrs): Electrum server\n  * [fulcrum](https://github.com/cculianu/Fulcrum): Electrum server (see [the module](modules/fulcrum.nix) for a comparison with electrs)\n  * [btcpayserver](https://github.com/btcpayserver/btcpayserver)\n  * [liquid](https://github.com/elementsproject/elements): federated sidechain\n  * [JoinMarket](https://github.com/joinmarket-org/joinmarket-clientserver)\n    * [JoinMarket Orderbook Watcher](https://github.com/JoinMarket-Org/joinmarket-clientserver/blob/master/docs/orderbook.md)\n  * [bitcoin-core-hwi](https://github.com/bitcoin-core/HWI)\n* Helper\n  * [netns-isolation](modules/netns-isolation.nix): isolates applications on the network-level via network namespaces\n  * [nodeinfo](modules/nodeinfo.nix): script which prints info about the node's services\n  * [backups](modules/backups.nix): duplicity backups of all your node's important files\n  * [operator](modules/operator.nix): configures a non-root user who has access to client tools (e.g. `bitcoin-cli`, `lightning-cli`)\n\n### Extension modules\nExtension modules are maintained in separate repositories and have their own review\nand release process.\n\n* [Mempool](https://github.com/fort-nix/nix-bitcoin-mempool): Bitcoin visualizer, explorer and API service\n\nSecurity\n---\nSee [SECURITY.md](SECURITY.md) for the security policy and how to report a vulnerability.\n\nnix-bitcoin aims to achieve a high degree of security by building on the following principles:\n\n* **Simplicity:** Only services enabled in `configuration.nix` and their dependencies are installed, support for [doas](https://github.com/Duncaen/OpenDoas) ([sudo alternative](https://lobste.rs/s/efsvqu/heap_based_buffer_overflow_sudo_cve_2021#c_c6fcfa)), code is continuously reviewed and refined.\n* **Integrity:** The Nix package manager guarantees that all dependencies are exactly specified, packages can be built from source to reduce reliance on binary caches, nix-bitcoin merge commits are signed, all commits are approved by multiple nix-bitcoin developers, upstream packages are cryptographically verified where possible, we use this software ourselves.\n* **Principle of Least Privilege:** Services operate with least privileges; they each have their own user and are restricted further with [systemd features](pkgs/lib.nix), [RPC whitelisting](modules/bitcoind-rpc-public-whitelist.nix) and [netns-isolation](modules/netns-isolation.nix). There's a non-root user *operator* to interact with the various services.\n* **Defense-in-depth:** nix-bitcoin supports a [hardened kernel](https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/hardened.nix), services are confined through discretionary access control, Linux namespaces, [dbus firewall](modules/security.nix) and seccomp-bpf with continuous improvements.\n\nNote that if the machine you're deploying *from* is insecure, there is nothing nix-bitcoin can do to protect itself.\n\nSecurity fund\n---\nThe nix-bitcoin security fund is a 2 of 3 bitcoin multisig address open for donations, used to reward\nsecurity researchers who discover vulnerabilities in nix-bitcoin or its upstream dependencies.\\\nSee [Security Fund](./SECURITY.md#nix-bitcoin-security-fund) for details.\n\nDeveloping\n---\nSee [dev/README](./dev/README.md).\n\nTroubleshooting\n---\nIf you are having problems with nix-bitcoin check the [FAQ](docs/faq.md) or submit an issue.\\\nThere's also a Matrix room at [#general:nixbitcoin.org](https://matrix.to/#/#general:nixbitcoin.org)\nand a `#nix-bitcoin` IRC channel on [libera](https://libera.chat).\\\nWe are always happy to help.\n"
 },
 {
  "repo": "progranism/Bitcoin-JavaScript-Miner",
  "language": "JavaScript",
  "readme_contents": "Bitcoin JavaScript Miner\n========================\n\n**Current Status**: Pre-Alpha\n\n\nWhat is it?\n-----------\n\nThis is a Bitcoin Miner implemented in JavaScript. It is intended for use\nin a [Bitcoin Mining Pool](https://en.bitcoin.it/wiki/Pooled_mining), but\nits main purpose is to act as a learning tool. Feel free to browse the commented source-code\nand learn more about how Bitcoins are mined.\n\n[Learn more about Bitcoin](http://www.bitcoin.org/ \"Bitcoin\")\n\n\nHow do I use it?\n----------------\n\nDownload the full source code and upload it to any webserver. You can then\naccess the index.html file and begin mining!\n\n\nDoes It Really Mine Bitcoins?\n-----------------------------\n\nNot currently, no. The code is incomplete, and does not communicate with a real\nmining pool. I intend to add that functionality, if possible, but it is not complete\nyet.\n\nWhen it *is* complete, it won't be very good at mining! It operates much slower\nthan even a standard CPU miner, and so it is unlikely to generate much income.\n\n\n\nCurrent Development Status\n--------------------------\n\nJsMiner is currently just an educational tool, and has not been tested on a live\nmining pool; nor has it been tested for 100% correct operation.\n\nAs time allows, I will strive to complete the code so that it works with an\nactual mining pool.\n\n\n\nFile Desctriptions\n------------------\n\nThis is a list of the files and what they do:\n\n* **index.html** - The webpage for JsMiner. Provides an interface to start the mining process and view mining statistics.\n* **miner.js** - This is where the Bitcoin Mining is done. It is invoked as a Web Worker (JavaScript thread).\n* **sha256.js** - SHA-256 functions implemented in JavaScript.\n* **work-manager.js** - Code to getwork, submitwork, and manage the Miner threads.\n\n\n\nThank You\n---------\n\nIf you like this project, feel free contribute code, comments, and even Bitcoin donations.\n\n*Donation Address*: 16TUsJ6ToAxp1a9RmTCGnox99MocGSYLaD\n\n"
 },
 {
  "repo": "adrijano/Bitcoin-wallet-cracker",
  "language": "Python",
  "readme_contents": "![Imgur](bc.gif)\r\n\r\n**Programmed in Python | PySimpleGUI**\r\n\r\n\r\n[![forthebadge made-with-python](http://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)\r\n\r\n[![Open Source Love svg1](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://github.com/adrijano/Bitcoin-wallet-cracker/)\r\n\r\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/adrijano/Bitcoin-wallet-cracker/graphs/commit-activity)\r\n\r\n\r\n# Bitcoin wallet cracker\r\n```\r\nAutomated Bitcoin wallet generator. With mnemonic and passphrases bruteforces wallet addresses.\r\n\r\n```\r\n# If you like it give it a star\r\n\r\n[![GitHub stars](https://img.shields.io/github/stars/adrijano/Bitcoin-wallet-cracker.svg?style=social&label=Star&maxAge=0)](https://github.com/adrijano/Bitcoin-wallet-cracker/)\r\n\r\n![Adrijan's github stats](https://github-readme-stats.vercel.app/api?username=adrijano&show_icons=true)\r\n\r\n\r\n\r\n\r\n# Usage:\r\n### Python3+\r\n\r\n```\r\ngit clone https://github.com/adrijano/Bitcoin-wallet-cracker.git\r\n\r\ncd Bitcoin-wallet-cracker && pip install -r requirements.txt\r\n\r\npython bc.py\r\n\r\n```\r\n### Windows\r\n```\r\ncd dist\r\nstart bc.exe\r\n```\r\n# Proof of Concept\r\n```\r\nAlthough this project can be used maliciously, it is simply an \r\nexploration into the Bitcoin protocol and advanced encryption and \r\nhashing techniques using Python.\r\n```\r\n\r\n\r\n\r\n**Address with balance is saved in txt file**\r\n```\r\naddress: 17wd8bTwMPYfbo6YwmTFU4xH4hDkd13ATZ\r\nprivate key: 0651863bf5d902262b17c4621ec340544ff016752543d99a92d7d22872d8a455\r\nWIF private key: 5Hs4yg5HYcAmS97UPgmj54V6Lvmv1yKf4yGWs4qcwkWjB5FFnaz\r\npublic key: 040577b1aa3256fed819174b1e6557d4b269f42e383df393b1e8a4c6b9d117994\r\nbc476304738fb948cec05a5d17d0fe6f996e7ec0b4a8e2853e41d6657f3f41e33\r\n\r\n\r\n\r\naddress: 125Rs7DdFpNdZgxtPvsQXiM3MDsCEt6F49\r\nprivate key: 177c1fdf54c4cb646e3425b7756f5c517c740bdc997b59c968e0a92a0b425f54\r\nWIF private key: 5HzdUFvvYhiKw97xnZtv5eYWuHKQZ1GMWVChuzkxwuQvrzacPg5\r\npublic key: 04040e4311b932c26f2172e112d1e37bca43428ea6951e3269513ecff6dda67dd\r\n8b39666ef34e1dfd82cfdc689d6099905ed9f291f4b4bdf921e81d1b657eee1e6\r\n```\r\n\r\n\r\n\r\n[![ForTheBadge built-with-love](http://ForTheBadge.com/images/badges/built-with-love.svg)](https://github.com/adrijano/Bitcoin-wallet-cracker/)\r\n\r\n\r\n\r\n# Disclaimer\r\n\r\n\r\n**The code within this repository comes with no guarantee, the use of this code is your responsibility. I take NO responsibility and/or liability for how you choose to use any of the source code available here. By using any of the files available in this repository, you understand that you are AGREEING TO USE AT YOUR OWN RISK. Once again, ALL files available here are for EDUCATION and/or RESEARCH purposes ONLY.**\r\n\r\n\r\n"
 },
 {
  "repo": "MaxLaumeister/bitlisten",
  "language": "JavaScript",
  "readme_contents": "## BitListen - Bitcoin Transaction Visualizer ##\n\nCurrent version hosted at [**BitListen.com**](http://bitlisten.com/). Project formerly known as \"Listen to Bitcoin\" (ListenToBitcoin.com has been sold.)\n\nRealtime Bitcoin transaction visualizer written in HTML/Javascript. See and hear new transactions and blocks as they propagate through the Bitcoin Network.\n\n### Building ###\n\nThe project is built and ready-to-go. If you change any of the javascript, you will need to re-build the `bitlisten.min.js` file using Grunt. If you haven't used Grunt before, here is a short tutorial:\n\n1. [Install Node.js](https://nodejs.org/download/).\n\n2. Install grunt-cli using `sudo npm install -g grunt-cli`.\n\n2. Cd into the project directory and run `npm install` to install the proper Grunt version and dependencies for this project.\n\n3. Run `grunt` to build BitListen. Alternatively, run `grunt watch` to build BitListen, host it at http://localhost:8000, and watch for and rebuild changes in the source files.\n\nThe compiled/minified script will be output to `bitlisten.min.js`.\n\n### APIs and Libraries ###\n\nBitListen uses these libraries:\n\n* [Howler.js](http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library) by James Simpson\n* [Reconnecting-Websocket](https://github.com/joewalnes/reconnecting-websocket) by Joe Walnes\n\nBitListen uses these APIs:\n\n* [Blockchain.info](https://blockchain.info/) WebSocket API (For Transactions)\n* [Bitstamp.net](https://www.bitstamp.net/) WebSocket API (For Price Ticker)\n\n### License ###\n\nIf you distribute this project in part or in full, please attribute with a link to [the GitHub page](https://github.com/MaxLaumeister/bitlisten). This software is available under the MIT License, details in the included `LICENSE.md` file.\n"
 },
 {
  "repo": "startup-class/bitstarter-leaderboard",
  "language": "JavaScript",
  "readme_contents": "# Overview\n\nThis is a simple template app for a Bitcoin-based crowdfunding site that\nadds even more server-side and client-side dynamic behavior over our\n[earlier template](https://github.com/startup-class/bitstarter-ssjs-db). It\nuses three of the four technologies in the so-called\n[MEAN stack](http://mean.io): [Express](http://expressjs.com) (E),\n[Angular](http://angularjs.com) (A), and [Node](http://nodejs.com) (N), and\nreplaces [MongoDB](http://mongodb.com) / [Mongoose](http://mongoosejs.com)\n(M) with [PostgreSQL](http://postgresql.org) /\n[Sequelize](http://sequelizejs.com). The app illustrates several of the\nfollowing conceptual topics:\n\n- Implementing multiple routes\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L89),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L111))\n\n- Factoring out constants/settings into separate files\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/constants.js),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L43))\n\n- Factoring out secure server-side configuration variables into `.env` files \n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/.env.dummy), \n     [2](https://devcenter.heroku.com/articles/config-vars))\n\n- Using `async.series` to force a database update, followed by a launch of the\n    webserver\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L97))\n\n- Using `async.mapLimit` and `async.eachLimit` to limit the number of simultaneous queries to a remote API and to a database respectively\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/coinbase.js#L60), \n     [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/order.js#L73))\n\n- Using asynchronous code to set up a recurring background process (a \"daemon\")\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L110))\n\n- Visualizing ORM instances in the browser\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L55),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/orderpage.ejs#L24))\n\n- Client-side templating with [AngularJS](http://angularjs.org)\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/homepage.ejs#L70),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L17),\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L61))\n\n- Server-side templating with [Embedded JS templates](http://embeddedjs.com/)\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L42),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/homepage.ejs),\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L55),\n    [4](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/orderpage.ejs))\n\n- Making a request to a remote API both on the server and in client-side code\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/order.js#L138),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/coinbase.js#L42),\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/coinbase.js#L54),\n    [4](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L18))\n\n- Setting up a simple API\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L61),\n     [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L16))\n\n- Reusing code by putting object manipulation code into instance/class methods\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L83),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L101),\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L112))\n\n- Setting up a basic AngularJS controller\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/homepage.ejs#L70),\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L17))\n\nLet's install the app and then take a tour of the functionality.\n\n# Installation\nTo get the app up and running, execute the following commands on your EC2\ninstance:\n\n```sh\ncurl https://raw.github.com/startup-class/setup/master/setup.sh | bash\nexit # and then log in again\ngit clone https://github.com/startup-class/bitstarter-leaderboard.git\ncd bitstarter-leaderboard\n./setup-ssjs.sh\n```\n\n## Running Locally on an EC2 Instance\nOnce you have done this you will need to :\n \n1. Copy the [.env.dummy](.env.dummy) file into `.env` and include your API\nkey from http://coinbase.com/account/integrations so that it looks like the\nsnippet below. Note that `COINBASE_API_KEY` is a secure API key that should\nnever be checked into a git repository; that's why we exclude it in the\n[.gitignore](.gitignore).\n\n```bash\n$ cp .env.dummy .env\n$ emacs -nw .env  # Add key from coinbase.com/account/integrations\n$ cat .env\nCOINBASE_API_KEY=cb27e2ef0a8872f7923612d4d57937e70476ab8041455b00b35d1196cf80f50d\nPORT=8080\n```\n\n2. Edit the [constants.js](.constants.js) file to include the\npreorder button from http://coinbase.com/merchant_tools. This is a non-secure\ncode that is meant to be embedded in a public-facing webpage, so it's ok if\nyou check this into git.\n\n```js\n  COINBASE_PREORDER_DATA_CODE: \"13b56883764b54e6ab56fef3bcc7229c\",\n```\n\n3. Now you can run the server locally and preview at a URL like\nhttp://ec2-54-213-131-228.us-west-2.compute.amazonaws.com:8080 as follows:\n\n```sh\nforeman start\n```\n\nYou can determine the hostname of your EC2 instance conveniently with this\ncommand:\n\n```sh\ncurl -s http://169.254.169.254/latest/meta-data/public-hostname\n# ec2-54-213-192-71.us-west-2.compute.amazonaws.com\n```\n\nTry placing some orders and then going to the \"/orders\" URL at the top to\nsee them recorded. Also refresh the page to see the thermometer update. Note\nthat you will get an error if you didn't do the `.env` step above.\n\n## Running Remotely\nOnce the app works via `foreman start` on your EC2 machine, you can deploy to Heroku and push\nthe configuration variables defined in `.env` as follows:\n\n```sh\ngit push heroku master\nheroku config:push\n```\nThen you can go to a URL like http://safe-dawn-4440.herokuapp.com and submit\norders to test it out. Note again that you will get an \"invalid api key\"\nerror if you didn't do the `.env` step above.\n\n# Concepts\n\n## File Structure\nLet's begin by taking a quick look at the files in the app. First, the major\ndifferences from\n[github.com/startup-class/bitstarter-ssjs-db](http://github.com/startup-class/bitstarter-ssjs-db)\nare as follows:\n\n-   `index.html` is now replaced by the more sophisticated `views/homepage.ejs` template\n-   `.pgpass` has a newline added to it, and a corresponding\n-   CSS and JS have been pulled out of index.html and into `public/css` and `public/js`\n-   A good deal of content has been added to the static files directory to\n    reduce the number of HTTP requests to external servers.\n\nNow let's go file by file:\n\n| Path                                                                     | Description                                                                                   |\n|-------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------|\n| [.env.dummy](.env.dummy)                                                 | Used as template for .env. Has COINBASE\\_API\\_KEY from coinbase.com/account/integrations      |\n| [.pgpass](.pgpass)                                                       | Used by pgsetup.sh to instantiate the db                                                      |\n| [constants.js](constants.js)                                             | Several constants, including COINBASE\\_PREORDER\\_DATA\\_CODE from coinbase.com/merchant\\_tools |\n| [models/coinbase.js](models/coinbase.js)                                 | Define a set of functions that downloads and parses remote Order data from Coinbase           |\n| [models/index.js](models/index.js)                                       | Initialize the connection between Sequelize and the PostgreSQL db.                            |\n| [models/order.js](models/order.js)                                       | Define an Order class that works with data from the \"Order\" table in the PostgreSQL db        |\n| [package.json](package.json)                                             | Specify dependencies for the app                                                              |\n| [pgsetup.sh](pgsetup.sh)                                                 | Invoked by setup-ssjs.sh to create the Postgres DB.                                           |\n| [Procfile](Procfile)                                                      | Heroku file that determines which processes are run upon deployment                           |\n| [public/css/bitstarter-styles.css](public/css/bitstarter-styles.css)     | CSS styles for views/homepage.ejs                                                             |\n| [public/fonts/opensans-300.woff](public/fonts/opensans-300.woff)         | Google Font file                                                                              |\n| [public/fonts/ubuntu-300.woff](public/fonts/ubuntu-300.woff)             | Google Font file                                                                              |\n| [public/fonts/ubuntu-700.woff](public/fonts/ubuntu-700.woff)             | Google Font file                                                                              |\n| [public/img/480x300.gif](public/img/480x300.gif)                         | Placeholder image                                                                             |\n| [public/img/favicon.ico](public/img/favicon.ico)                         | Favorite icon ('favicon') for bookmarks/favorites                                             |\n| [public/js/angular.min.js](public/js/angular.min.js)                     | Angular JS file (see angularjs.org). Used for thermometer on frontpage.                       |\n| [public/js/coinbase-post-payment.js](public/js/coinbase-post-payment.js) | Stub code to use once Coinbase fixes the coinbase\\_payment\\_complete event.                   |\n| [public/js/controllers.js](public/js/controllers.js)                     | Angular JS controllers. Contains controller for the thermometer in homepage.ejs.              |\n| [public/js/google-analytics.js](public/js/google-analytics.js)           | One of the two Google Analytics scripts. For ga.js.                                           |\n| [README.md](README.md)                                                   | Documentation                                                                                 |\n| [routes.js](routes.js)                                                   | Define the routes for the app: functions executed when specific URLs are requested.           |\n| [setup-ssjs.sh](setup-ssjs.sh)                                           | Set up an EC2 instance. Invokes pgsetup.sh                                                    |\n| [views/homepage.ejs](views/homepage.ejs)                                 | Template for the index (served up for example.com/)                                           |\n| [views/orderpage.ejs](views/orderpage.ejs)                               | Template for the order page (served up for example.com/orders)                                |\n| [web.js](web.js)                                                         | Initialize express app, syncs db, and start HTTP server                                       |\n\n\n\n# Server-Side\n\n## Express ('E' in MEAN)\n\nWe use [Express](http://expressjs.org) to set up our web server. Skim the\nExpress [documentation](http://expressjs.org) and then take a look at\n[web.js](web.js)\nand\n[routes.js](routes.js)\nto see how we set up the app and the valid routes. We've also factored out\nmany static assets into subdirectories into [/public](public/).\n\nRecall again that static assets are files that do not change. When users\nrequest `example.com/img/480x300.gif` they will get the same file every time\n(a static response). By contrast, a web page with content that changes based\non client- or server-side parameters is a dynamic web page; for example,\nwhen a user requests `example.com/orders` they will see something that\ndepends on the state of the database and thus will vary over time.\n\nNote that in [routes.js](routes.js), we try to separate the code that\nhandles requests and responses from the code that actually manipulates\ninstances of the [Order](models/order.js) class. This illustrates a general\nprinciple: as much as possible, you should ask objects to manipulate\nthemselves with instance methods and/or class methods rather than try to\nwork with an object's guts externally; see\n[models/order.js](models/order.js) for details of doing this. We'll talk\nmore about how this is done in the\n[ORM section](dborm-postgresql-and-sequelize-replaces-m-in-mean) below, but\nfor now note that most request handlers have the form of asking `global.db`\nfor some data and then packing that data into an HTTP response of some kind.\n\nIn sum, Express is used here to organize the functions that are executed on\nthe server to generate an HTTP response from an HTTP request - that is, to\nstructure our webapp.\n\n## Server-Side Templating\n\nFor illustrative purposes, we do two kinds of templating in this app:\nserver-side templating of [views/homepage.ejs](views/homepage.ejs) and [views/orderpage.ejs](views/orderpage.ejs), and\nclient-side templating in the thermometer on the homepage via Angular JS\n(also in [views/homepage.ejs](views/homepage.ejs#L70).\n\nLet's talk about server-side templating first. The specific templating\nengine here is set up in [web.js](web.js), where we tell Express that `.ejs`\n([Embedded Javascript](http://embeddedjs.com)) files are our templates of choice via the line\n[app.set('view engine', 'ejs')](web.js#L82).\n\nConsider [indexfn](routes.js#L41) in routes.js. This uses\n[response.render](http://expressjs.com/api.html#res.render) to take the file\n`views/homepage.ejs` and populate it with a JSON data structure. Specifically,\nthe [response.render invocation](routes.js#L42) looks for variables in\n`views/homepage.ejs` (like\n[<%= coinbase_preorder_data_code %>](views/homepage.ejs#L115) ) and replaces\nthem with the corresponding field of the JSON data structure as defined in\n[constants.js](constants.js#L33). It then wraps this in an HTTP response and\nreturns it to the client.\n\nA slightly more complex example is in [orderfn](routes.js#L53), also in\n`routes.js`.  Here we use the `orders_json` JSON data structure to populate\nthe `views/orderpage.ejs` file via `response.render`, similar to what we did\nin `indexfn`. The main difference is that we put this logic\nin a callback and send it into\n[global.db.Order.allToJSON](models/order.js#L28), executing it right after\nthe `orders` variable is built up via ORM and database operations.\n\nThese two examples illustrate the basic idea of server-side\ntemplating. Rather than returning a fully static file like\n`public/img/480x300.gif`, we separate out the static and dynamic\nportions. We put the parts that don't change (the static parts) into a\ntemplate like `views/orderpage.ejs` and then populate this template\ndynamically with the remainder, returning the response to the client. All of\nthis is done on the server and the computation is invisible to the client;\nthey can't view the `orders` variable directly, for example, by looking at\n[Network Requests](http://net.tutsplus.com/tutorials/chrome-dev-tools-networking-and-the-console/)\nin the Chrome Developer Tools. They just see one HTTP response in response\nto their HTTP request.\n\n## DB/ORM: PostgreSQL and Sequelize (Replaces 'M' in MEAN)\n\nIn this app we have a simple PostgreSQL relational database underlying the\napp that keeps a local mirror of the remote order data on Coinbase's\nservers. We create the db by running [setup-ssjs.sh](setup-ssjs.sh), which\nin turn invokes [pgsetup.sh](pgsetup.sh). We interface with this database\nvia the Sequelize Object-Relational Mapper (ORM), which provides a\nJavascript API to a relational database. The following figure provides an\noverview; take a look at it and then read the subsequent documentation:\n\n<div style=\"text-align:center;\">\n  <img width=\"100%\"\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig1.png\">\n</div>\n\nWhile this kind of setup is canonical, it's worth asking a few questions\nabout why a relational database and object-relational mapper combination is\nso common in web applications today.\n\n- *Why use a DB?* First, you might ask why we don't simply keep the order data\nin a simple `.json` file and then reload it when the app boots up. This is\nthe so-called 'flatfile' approach. We could certainly do this, but as our\napp scales and we get more and more data this approach has issues. For one\nthing, we would find it painful to modify the `.json` file simultaneously if\nwe had multiple web-servers writing to the same dataset. For another, a\nnaive `.json` file saved on disk will be very slow to search. As a third\npoint, we may wish to extract information from this `.json` file in a\ndifferent manner from the way in which we saved it. Each of these things -\nparallelized reads/writes, rapid searching, and easy reporting via the\nStructured Query Language (SQL) - is facilitated by converting our data from\nflatfiles and keeping it in a relational database like PostgreSQL.\n\n- *Why use an ORM with the DB?* Second, given that we are using a relational\ndatabase, you might then ask why we don't simply interface directly with the\nrelational database via a low-level library like `node-postgres`, which\nallows us to run SQL statements directly against the database. Why take on\nthe overhead of an Object-Relational Mapper like Sequelize? The answer is\nthat the so-called 'Active Record Paradigm' is a good match for many\nwebapps. In a nutshell, the idea is that it is often very useful to conceive\nof tables in a relational database as mapping directly to classes, while\nrows of these tables contain the data for instances. In this framework the\nentire database can be thought of as an elaborate\nserialization/deserialization apparatus for Javascript objects. You\nrehydrate individual instances of JS classes from disk during the life of a\nprogram, and then dehydrate them and put them in cold storage (the\nrelational database) when no longer needed in memory. That said, it's\nimportant to keep in mind that an ORM is a convenience and not a panacea:\njust as with flatfiles it is true that sometimes the Active Record paradigm\nbreaks down and you need to directly interface with the database via SQL\nstatements, for performance reasons or because you're doing some sort of\nreport or dashboard that accesses the data via columns even though you saved\nit across rows.\n\n- *Why use a relational DB rather than a NoSQL DB?* As a third point, you\nmight note that this combination of Sequelize and PostgreSQL replaces the\nMongoose/MongoDB combination which is the 'M' in the MEAN stack. Why don't\nwe just use the so-called [NoSQL](http://en.wikipedia.org/wiki/NoSQL)\nMongoose/MongoDB combo? Well, Mongoose/MongoDB is certainly one way to go if\nyou really want a completely full-stack JS app. However, PostgreSQL has\nexcellent support for JS and JSON nowadays, and is more mature than\nMongoDB. Moreover, the advantages of a so-called schemaless or NoSQL\napproach are greatest at the beginning of an app when the\n[schema](http://en.wikipedia.org/wiki/Database_schema) is changing rapidly,\nbut eventually it actually becomes useful to have a schema to catch errors\nand prevent invalid operations. You will often find yourself reinventing a\nschema in code if you go down the MongoDB path, albeit without the extent of\nlow-level schema support provided by a relational DB like PostgreSQL.\n\nOnce we've decided on an ORM/DB combination, in general we want to keep most\ncode related to manipulating data from the database in the corresponding\nclass or instance methods (in our case in `models/order.js`). As a rough\nrule of thumb, class methods operate on every instance in the class\n(e.g. counts and totals), while instance methods access data associated with\nparticular instances. So as an example you'd use a class method (like\n`Order.totals`) to sum up the total amount of Bitcoin sent over all orders,\nwhile you'd use an instance method (like a hypothetical\n`myorder.amountInUSD` method) to determine the equivalent USD amount for a\ngiven order in BTC. The latter method call needs the amount data on a\nspecific `Order` instance, so it should be an instance method (though you\nmight request and cache the exchange rate itself via a class method).\n\nWe put these class and instance method definitions in `order.js`, within the\nthe `sequelize.define` invocation (see [here](http://sequelizejs.com/documentation#models-expansion-of-models)). The main tricky part here is\nthe value of `this`. Within a class method it refers to the entire class (in\nthis case `Order`) while within an instance method it refers to a particular\ninstance (e.g. `myorder`). Sometimes you need to save this variable and pass\nit in to a callback; we do this in `addFromJSON` to make the `Order` class\naccessible within a callback that runs on each individual instance. \n\nFinally, here are some examples of working with the ORM in the node REPL.\n\n```js\n    // Execute from within the top level directory after pgsetup:\n    > require('./models')\n    > global.db.Order.numOrders()\n    Executing: SELECT count(*) as \"count\" FROM \"Orders\";\n    There are 25 Orders\n    \n    > var foo = [];\n    > global.db.Order.findAll().success(function(_orders) { global['foo'].push(_orders);});\n    > var orders = foo[0];\n    > orders[0].repr()\n    { coinbase_id: '84XZQO6L',\n      amount: 0.0001,\n      time: '2013-08-10T10:31:33-07:00',\n      id: 131,\n      createdAt: Fri Aug 10 2013 19:57:29 GMT+0000 (UTC),\n      updatedAt: Fri Aug 10 2013 19:57:29 GMT+0000 (UTC) }\n```\n\n# Client-Side\n\n## Client-Side Templating\n\nWe previously discussed server-side templating and how we combine a static\ntemplate (from `order.ejs` or `homepage.ejs`) with dynamic JSON data to create\na dynamic HTTP response that varies with the state of the database. If you\nrecall, our `homepage.ejs` was partially templated on the server-side in the\n`indexfn` within `routes.js` by replacement of the portions surrounded by\nspecial brackets, like the value of `name` below.\n\n```html\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n    </button>\n    <a class=\"brand\" href=\"#\"><%= name %></a>\n    <div class=\"nav-collapse collapse\">\n      <ul class=\"nav\">\n        <li class=\"active\"><a href=\"#\">Home</a></li>\n        <li><a href=\"#about\">About</a></li>\n```\n\nHowever, you might have noticed an alternative bracket syntax coexisting\nwithin the `homepage.ejs` file, as shown surrounding `num_orders` below:\n\n```html\n    <div class=\"span5 actions\" ng-controller=\"OrdersCtrl\">\n      <div class=\"row-fluid\">\n      <div class=\"span8 offset2\">\n        <div class=\"row-fluid statistics\">\n          <div ng-show=\"!error\">\n            <div class=\"span4\">\n              <!-- linediv-l and linediv-r give dividing lines that look\n              different in horizontal and vertical layouts, illustrating\n              media queries. -->\n              <div class=\"linediv-l\">\n              <h3>{{num_orders}}</h3> <p>backers</p>\n              </div>\n            </div>\n```\n\nThis is because in `homepage.ejs` we are also using a second kind of\ntemplating: client-side templating. It is similar in concept to server-side\ntemplating, except the population of the static template with the JSON data\noccurs on the client side. Among other things, this means the client has\naccess to a JSON API that is returning some data. \n\nIn this app, the place that we're doing some client-side templating is in\nthe thermometer element. The data that comes from `/api/orders` is being\nused to update the thermometer. If you submit an order in a separate window,\nand wait for the Coinbase data to be refreshed (via the `setInterval` daemon\nin `web.js`) or manually refresh it yourself (by requesting\n`/refresh_orders`), the thermometer will then update upon a homepage\nrefresh. You can think of this client-side templating implementation as\nsimply populating the template variables in `homepage.ejs` with data on the\nclient-side rather than on the server.\n\n## Angular: Two-Way Data Binding ('A' in MEAN)\n\nBut things are a little more complicated than that. We're actually using a\nclient-side framework called [AngularJS](http://docs.angularjs.org/guide/concepts) which offers something much more\nsophisticated than simple templating. It actually does full-on two-way\ndatabinding; see here for the [concept](http://docs.angularjs.org/guide/dev_guide.templates.databinding) and here for a worked [example](http://docs.angularjs.org/guide/forms). The\nbasic difference between one-way templating and two-way databinding is that\nin one-way templating the data is just used to populate variables in a\ntemplate (e.g. `homepage.ejs`). In two-way databinding, however, actions on\nelements of a templated page (like clicking a button or typing into a form\nfield) can in turn change the underlying data. Indeed, you can set it up\nsuch that the same data is editable from several different places within a\npage. Again, see here for the [concept](http://docs.angularjs.org/guide/dev_guide.templates.databinding) and here for a worked [example](http://docs.angularjs.org/guide/forms). We\naren't using all the features of two-way databinding in our thermometer, but\nit's worth understanding how Angular works in a simple use case.\n\nTo trace through the logic of how we're using Angular in our simple app,\nlet's start with the four Angular directives that we're using in\n`homepage.ejs`: `ng-app`, `ng-show`, `ng-style`, and `ng-controller`. First,\nwe put `ng-app` at the top of the file and include `angular.min.js`. Once\nthe Javascript from `angular.min.js` is parsed and run by the browser, it\nwill look through the DOM, find the `ng-app` declaration, and treat\neverything underneath that node as subject to control/updating by\nAngular. For simplicity, in this case we put `ng-app` at the very top node,\nin the `<html>` tag.\n\n```html\n    <!DOCTYPE html>\n    <html lang=\"en\" ng-app>\n      <head>\n        <meta charset=\"utf-8\">\n        <title><%= title %></title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <script src=\"https://d396qusza40orc.cloudfront.net/startup/code/jquery.js\"></script>\n        <script src=\"https://d396qusza40orc.cloudfront.net/startup/code/bootstrap.js\"></script>\n        <script src=\"js/angular.min.js\" ></script>\n        <script src=\"js/controllers.js\"></script>\n    ...\n```\n\nThen, towards the middle of the file, we use three directives: `ng-show`,\n`ng-style`, and `ng-controller`. Of these, `ng-controller` is the most\nimportant. It sets up a relationship between this div and the code in\n`public/js/controllers.js`, which defines the `OrdersCtrl` function. If you\nlook at [public/js/controllers.js](public/js/controllers.js), it initiates an HTTP request to\n`/api/orders`, and uses the results to set up variables like `num_orders`\nand `total_funded`. It then uses these variables to populate the template\nexpressions like `{{num_orders}}`.\n\nWe use the `ng-show` directive to set up conditional logic on the basis of\nwhether or not the `OrdersCtrl` function call returned an error or not. If\nit did not (`!error`) then we display the thermometer stats. If an error was\nreturned, we display an error message. Finally `ng-style` is used to apply a\nCSS style to an element dynamically based on one of the variables set up by\n`OrdersCtrl`, namely `percentage_funded`.\n\n```html\n  <!-- We define a new 'actions' div to contain statistics, order, and share buttons.-->\n  <div class=\"span5 actions\" ng-controller=\"OrdersCtrl\">\n    <div class=\"row-fluid\">\n    <div class=\"span8 offset2\">\n      <div class=\"row-fluid statistics\">\n        <div ng-show=\"!error\">\n          <div class=\"span4\">\n            <!-- linediv-l and linediv-r give dividing lines that look\n            different in horizontal and vertical layouts, illustrating\n            media queries. -->\n            <div class=\"linediv-l\">\n            <h3>{{num_orders}}</h3> <p>backers</p>\n            </div>\n          </div>\n          <div class=\"span4\">\n            <div class=\"linediv-c\">\n              <h3>{{total_funded}}</h3> <p>of {{target}} <span class=\"currency\">{{unit_symbol}}</span></p>\n            </div>\n          </div>\n          <div class=\"span4\">\n            <div class=\"linediv-r\">\n            <h3>{{days_left}}</h3> <p>days left</p>\n            </div>\n          </div>\n        </div>\n        <div ng-show=\"error\">\n          <h3>{{error}}</h3>\n        </div>\n      </div>\n    </div>\n    <div class=\"row-fluid\" ng-show=\"!error\">\n    <div class=\"span10 offset1\">\n      <!-- Bootstrap progress bar -->\n      <!-- http://twitter.github.io/bootstrap/components.html#progress -->\n      <div class=\"thermometer progress active\">\n        <div class=\"bar bar-success\" ng-style=\"{'width': percentage_funded+'%'}\"></div>\n        <div class=\"bar bar-warning\" ng-style=\"{'width': (100-percentage_funded)+'%'}\"></div>\n      </div>\n    </div>\n    </div>\n    <div class=\"row-fluid\">\n      <div class=\"span6 offset3 order\">\n        <a class=\"coinbase-button\" \n           data-button-style=\"custom_large\" \n           data-button-text=\"Preorder with Bitcoin\" \n           data-custom=\"Finished order\"\n           data-code=\"<%= coinbase_preorder_data_code %>\" \n           href=\"https://coinbase.com/checkouts/<%= coinbase_preorder_data_code %>\">Preorder with Bitcoin</a>\n      </div>\n    </div>\n    <div class=\"row-fluid\">\n    <div class=\"span9 offset3 social\">\n      <!-- AddThis Button BEGIN -->\n      <div class=\"addthis_toolbox addthis_default_style\">\n         <a class=\"addthis_button_tweet\" tw:via=\"<%= twitter_username %>\" tw:text=\"<%= twitter_tweet %>\"></a>\n      </div>\n      <script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js#pubid=xa-5214a5fe5dbdc2b4\"></script>\n      <!-- AddThis Button END -->\n    </div>\n    </div>\n  </div>\n  </div>\n</div>\n```\n\nTo trace through the logic of how the thermometer data is populated, see the\n`/api/orders` route in the next section.\n\n# Figures\n\nThe following figures illustrate how the server-side and client-side\ncomponents of the app work together by tracing the path of the four routes\nimplemented in our app: `/`, `/api/order`, `/refresh_orders`, and\n`/orders/`.\n\nWarning: these figures are large. You can also download PDF versions here:\n[1](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig1.pdf), [2](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig2.pdf), [3](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig3.pdf),\n[4](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig4.pdf), [5](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig5.pdf). \n\n\n## The `/` route\n\nFirst, let's take a look at how an HTTP request to `example.com/` is handled\nby our app. This about as simple as it gets in terms of generating a dynamic\nHTTP response from an HTTP request; there's no database interaction and a\nsimple template is populated with some constant JSON data and returned to\nthe client.\n\n<div style=\"text-align:center;\">\n  <img width=\"100%\"\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig2.png\">\n</div>\n\n## The `/orders` route\n\nNow let's look at a more complicated route, an HTTP request to\n`/orders`. This request now involves hitting the database via the ORM and\nusing that data to populate the `orderpage.ejs` template. This is perhaps\nthe most common way to generate a dynamic response.\n\n<div style=\"text-align:center;\">\n  <img width=\"100%\"\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig3.png\">\n</div>\n\n## The `/refresh_orders` route\n\nNow let's increase the level of complexity a little more, and show how to\nimplement a route that doesn't directly return an HTTP response, but that\nredirects to the `/orders` route after performing a database operation.\n\n<div style=\"text-align:center;\">\n  <img width=\"100%\"\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig4.png\">\n</div>\n\n## The `/api/orders` route\n\nFinally, let's take a look at a fairly sophisticated route. This route is\nnever meant to be called directly by the end user; it's actually used by the\nclient-side code in the thermometer on the front page to refresh itself from\nthe latest set of orders in the database.\n\n<div style=\"text-align:center;\">\n  <img width=\"100%\"\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig5.png\">\n</div>\n\n"
 },
 {
  "repo": "udibr/bitcoinApp",
  "language": "Objective-C",
  "readme_contents": "This is an experimental software; you can lose bitcoins as a result.\nBy using this software you agree that the authors or any other copyright holders of this software are not responsibility for any loss of bitcoins or any other damage.\nBy using this software you agree to its license. Use it at your own risk.\nIt is suggested to keep the minimal amount possible of bitcoins in the App at any given time and backup your wallet to a safe place.\n\nThis is an App demonstrating an implementation of BitCoin for iOS devices (iPhone, iPad, iPodTouch)\n\nbitcoin is a peer-to-peer currency. To learn more go to http://bitcoin.org\n\nTo build your own App read https://github.com/udibr/bitcoin/blob/master/build-iOS.txt\n\nSee whatsnew.html for version info\n"
 },
 {
  "repo": "lithander/Minimal-Bitcoin-Miner",
  "language": "C#",
  "readme_contents": "Minimal-Bitcoin-Miner\n=====================\n\nA very simple CPU based Bitcoin Miner in C#. Uses the GETWORK protocol to connect to pool. A great reference implementation if you are trying to understand how Bitcoin mining works.\n\n<b>Edit 2017: Not actually fit for mining - the GETWORK protocol isn't supported anymore by most pools</b>\n"
 },
 {
  "repo": "btcz/bitcoinz",
  "language": "C++",
  "readme_contents": "# BitcoinZ 2.0.8\n**Keep running wallet to strengthen the BitcoinZ network. Backup your wallet in many locations & keep your coins wallet offline.**\n\n### Ports:\n- RPC port: 1979\n- P2P port: 1989\n\nInstall\n-----------------\n### Linux\n\n### [Quick guide for beginners](https://github.com/btcz/bitcoinz/wiki/Quick-guide-for-beginners)\n\nInstall required dependencies:\n```{r, engine='bash'}\nsudo apt-get install \\\n      build-essential pkg-config libc6-dev m4 g++-multilib \\\n      autoconf libtool ncurses-dev unzip git python \\\n      zlib1g-dev wget bsdmainutils automake\n```\n\nExecute the build command:\n```{r, engine='bash'}\n# Clone Bitcoinz Repository\ngit clone https://github.com/btcz/bitcoinz\n# Build\ncd bitcoinz/\n./zcutil/build.sh -j$(nproc)\n# fetch key\n./zcutil/fetch-params.sh\n```\n\nUsage:\n```{r, engine='bash'}\n# Run\n./src/bitcoinzd\n# Test getting information about the network\ncd src/\n./bitcoinz-cli getmininginfo\n# Test creating new transparent address\n./bitcoinz-cli getnewaddress\n# Test creating new private address\n./bitcoinz-cli z_getnewaddress\n# Test checking transparent balance\n./bitcoinz-cli getbalance\n# Test checking total balance\n./bitcoinz-cli z_gettotalbalance\n# Check all available wallet commands\n./bitcoinz-cli help\n# Get more info about a single wallet command\n./bitcoinz-cli help \"The-command-you-want-to-learn-more-about\"\n./bitcoinz-cli help \"getbalance\"\n```\n\n### Windows\nThe BitcoinZ Windows Command Line Wallet can only be built from ubuntu for now.\n\nInstall required dependencies:\n```\napt-get update \\\n&& apt-get install -y \\\n    curl build-essential pkg-config libc6-dev m4 g++-multilib autoconf \\\n    libtool ncurses-dev unzip git python zlib1g-dev wget bsdmainutils \\\n    automake p7zip-full pwgen mingw-w64 cmake\n```\n\nExecute the build command:\n```\n./zcutil/build-win.sh -j$(nproc)\n```\n\n### Docker\n\nBuild\n```\n$ docker build -t btcz/bitcoinz .\n```\n\nCreate a data directory on your local drive and create a bitcoinz.conf config file\n```\n$ mkdir -p /ops/volumes/bitcoinz/data\n$ touch /ops/volumes/bitcoinz/data/bitcoinz.conf\n$ chown -R 999:999 /ops/volumes/bitcoinz/data\n```\n\nCreate bitcoinz.conf config file and run the application\n```\n$ docker run -d --name bitcoinz-node \\\n  -v bitcoinz.conf:/bitcoinz/data/bitcoinz.conf \\\n  -p 1989:1989 -p 127.0.0.1:1979:1979 \\\n  btcz/bitcoinz\n```\n\nVerify bitcoinz-node is running\n```\n$ docker ps\nCONTAINER ID        IMAGE                  COMMAND                     CREATED             STATUS              PORTS                                              NAMES\n31868a91456d        btcz/bitcoinz          \"bitcoinzd --datadir=...\"   2 hours ago         Up 2 hours          127.0.0.1:1979->1979/tcp, 0.0.0.0:1989->1989/tcp   bitcoinz-node\n```\n\nFollow the logs\n```\ndocker logs -f bitcoinz-node\n```\n\nThe cli command is a wrapper to bitcoinz-cli that works with an already running Docker container\n```\ndocker exec -it bitcoinz-node cli help\n```\n\n## Using a Dockerfile\nIf you'd like to have a production btc/bitcoinz image with a pre-baked configuration\nfile, use of a Dockerfile is recommended:\n\n```\nFROM btcz/bitcoinz\nCOPY bitcoinz.conf /bitcoinz/data/bitcoinz.conf\n```\n\nThen, build with `docker build -t my-bitcoinz .` and run.\n\nSecurity Warnings\n-----------------\n\n**BitcoinZ is experimental and a work-in-progress.** Use at your own risk.\n"
 },
 {
  "repo": "stavros0/bitcoin-price-prediction",
  "language": "Python",
  "readme_contents": "# Bitcoin price prediction\n\nAn implementation of the 'Bayesian regression for latent source model' method for predicting price variation of [Bitcoin](https://bitcoin.org). You can read more about the method at https://arxiv.org/pdf/1410.1231.pdf.\n\n## Requirements\n\n* [Python](https://www.python.org/) 3.5\n* [MongoDB](http://www.mongodb.org/) 3.2\n* [bigfloat prerequisites](http://bigfloat.readthedocs.org/en/latest/#prerequisites)\n\n## Installation\n\nMake sure you have installed all the requirements and [created an isolated Python environment](https://virtualenv.pypa.io/en/stable/) for this project (optional). Then follow the installation instructions:\n\n```sh\n    $ git clone https://github.com/stavros0/bitcoin-price-prediction.git\n    $ cd bitcoin-price-prediction\n    $ pip install -e .\n```\n\n## Usage\n\n- Use the `okcoin.py` script to gather market data from the [OKCoin Spot Price API](https://www.okcoin.com/about/rest_api.do) at the interval of every ten seconds. Bear in mind that you need **at least** 721 data points so that [`m = len(prices) - n > 0`](https://github.com/stavros0/bitcoin-price-prediction/blob/master/bitcoin_price_prediction/bayesian_regression.py#L28).\n\n```sh\n$ python okcoin.py\n```\n\n- See [bitcoin-price-prediction/examples](https://github.com/stavros0/bitcoin-price-prediction/tree/master/examples) for how to use the [`bayesian_regression.py`](https://github.com/stavros0/bitcoin-price-prediction/blob/master/bitcoin_price_prediction/bayesian_regression.py) module. [`millionare.py`](https://github.com/stavros0/bitcoin-price-prediction/blob/master/examples/millionaire.py) is intended for tinkering and experimenting only and therefore won't display anything on the screen. That is, you should tinker with my script or write your own script instead. In any case, you have to speak Python.\n\n\n## License\n\nThis project is licensed under the terms of the MIT license. See [LICENSE](https://github.com/stavros0/bitcoin-price-prediction/blob/master/LICENSE) for more information.\n"
 },
 {
  "repo": "GaloyMoney/galoy",
  "language": "TypeScript",
  "readme_contents": "# Galoy\n\n### TLDR\n\nGaloy is an opinionated bitcoin banking platform.\n\n### Responsible disclosure \n\nFound critical bugs/vulnerabilities?\nPlease email them security@galoy.io Thanks!\n\n### Get Started\n\nWant to try it out and contribute? Checkout the [dev documentation](./DEV.md) to deploy locally with a docker compose script.\n\nIf you have questions, you can [join our Workspace](https://chat.galoy.io)\n\nFor an overview of all relevant repository checkout [awesome-galoy](https://github.com/GaloyMoney/awesome-galoy).\n### Galoy-Backend features\n\n- GraphqlAPI:\n  - Public API following industry best practices\n  - For [end clients](./src/graphql/main/schema.graphql). [Documentation](https://galoymoney.github.io/galoy/)\n  - For [admin activities](./src/graphql/admin/schema.graphql)\n- Authentication:\n  - Code is sent via twillio to end users phone number which can be exchanged for jwt auth token\n  - OAuth integration (in progress)\n  - Account scoped API keys (in progress)\n- Internal ledger:\n  - Records all account activity via double entry accounting\n  - Support for integrating fiat currencies (in progress)\n  - CSV based export of all accounting data\n- Contact list for frequent transaction partners\n- Price\n  - Sub-second [price data](https://github.com/GaloyMoney/price) polled from largest exchanges to record USD value at settlement\n  - Historical price data can be queried for display for different time frames\n- Send / Receive BTC payments\n  - External settlement via OnChain or lightning\n  - Automatic internal settlement when payer & payee are on the same galoy instance\n  - Fees can be applied for sending / receiving for all settlement methods\n  - Support for tipping via [dedicated web-frontend](https://github.com/GaloyMoney/galoy-pay)\n  - Include memo to payment\n- Lightning Network\n  - Support for clearnet and TOR\n  - Support for invoices with and without specified amount\n  - Route probing to pre-display an accurate fee and mitigate attacks based on expensive routing\n  - Channel data backup to dropbox and google cloud storage\n- Custodial storage of all user assets\n  - Limited funds stored in hot-wallet (keys kept on servers)\n  - Threshold based rebalancing to cold-storage (keys stored on offline hardware devices)\n- Security:\n  - [Velocity check](https://www.linkedin.com/pulse/velocity-checks-fraud-prevention-scott-stone/) based on user verification level\n  - Spam protection for sharing memos\n  - Configurable 2fa for payments (in progress)\n  - DDos prevention \n    - via rate limiting infront of critical APIs\n    - via geetest CAPTCHA\n- Resilience\n  - Databases (mongodb and redis) are run by default in high availability/resilience mode. If one pod/node goes down, there is an automatic failover on another pod/node.\n- Production ready\n  - Supports horizontal scaling and highly available deployments via k8s\n  - Client side load balancing across multiple LND nodes\n  - Out-of-the-box dashboards for KPIs deployed to grafana showing metrics exported via prometheus\n  - Quick response times thanks to pagination of large data sets\n  - Returning error codes for full translation capability of the frontend\n  - Instrumentation enabled for real-time insights into production runtime ([opentelemetry](https://opentelemetry.io) / [honeycomb](https://www.honeycomb.io))\n- User on-boarding (optional)\n  - Gamification via user quiz that pays out sats\n  - Map of in-network merchants\n- Notifications\n  - Mobile clients can receive notifications of balance changes in real-time\n  - Daily notification of balance for active end users\n\n### Tech Stack\n\n- GCP, Kubernetes, Terraform, Helm, Concourse, Docker\n- Opentelemetry, Prometheus\n- Bitcoind, LND, Specter, RideTheLightning, Loop, Lndmon, Pool\n- PostgreSQL, MongoDB, Redis\n- NodeJS\n- Typescript\n- GraphQL\n- React + React Native\n"
 },
 {
  "repo": "coinbase/rosetta-bitcoin",
  "language": "Go",
  "readme_contents": "<p align=\"center\">\n  <a href=\"https://www.rosetta-api.org\">\n    <img width=\"90%\" alt=\"Rosetta\" src=\"https://www.rosetta-api.org/img/rosetta_header.png\">\n  </a>\n</p>\n<h3 align=\"center\">\n   Rosetta Bitcoin\n</h3>\n<p align=\"center\">\n  <a href=\"https://circleci.com/gh/coinbase/rosetta-bitcoin/tree/master\"><img src=\"https://circleci.com/gh/coinbase/rosetta-bitcoin/tree/master.svg?style=shield\" /></a>\n  <a href=\"https://coveralls.io/github/coinbase/rosetta-bitcoin\"><img src=\"https://coveralls.io/repos/github/coinbase/rosetta-bitcoin/badge.svg\" /></a>\n  <a href=\"https://goreportcard.com/report/github.com/coinbase/rosetta-bitcoin\"><img src=\"https://goreportcard.com/badge/github.com/coinbase/rosetta-bitcoin\" /></a>\n  <a href=\"https://github.com/coinbase/rosetta-bitcoin/blob/master/LICENSE.txt\"><img src=\"https://img.shields.io/github/license/coinbase/rosetta-bitcoin.svg\" /></a>\n  <a href=\"https://pkg.go.dev/github.com/coinbase/rosetta-bitcoin?tab=overview\"><img src=\"https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&logoColor=white&style=shield\" /></a>\n</p>\n\n<p align=\"center\"><b>\nROSETTA-BITCOIN IS CONSIDERED <a href=\"https://en.wikipedia.org/wiki/Software_release_life_cycle#Alpha\">ALPHA SOFTWARE</a>.\nUSE AT YOUR OWN RISK.</b><p>\n<p align=\"center\">This project is available open source under the terms of the [Apache 2.0 License](https://opensource.org/licenses/Apache-2.0).</p>\n\n## Overview\n\nThe `rosetta-bitcoin` repository provides a reference implementation of the Rosetta API for Bitcoin in Golang. This repository was created for developers of Bitcoin-like (a.k.a., UTXO) blockchains, who may find it easier to fork this reference implementation than write one from scratch.\n\n[Rosetta](https://www.rosetta-api.org/docs/welcome.html) is an open-source specification and set of tools that makes integrating with blockchains simpler, faster, and more reliable. The Rosetta API is specified in the [OpenAPI 3.0 format](https://www.openapis.org).\n\nRequests and responses can be crafted with auto-generated code using [Swagger Codegen](https://swagger.io/tools/swagger-codegen) or [OpenAPI Generator](https://openapi-generator.tech), are human-readable (easy to debug and understand), and can be used in servers and browsers.\n\n## Features\n\n* Rosetta API implementation (both Data API and Construction API)\n* UTXO cache for all accounts (accessible using the Rosetta `/account/balance` API)\n* Stateless, offline, curve-based transaction construction from any SegWit-Bech32 Address\n* Automatically prune bitcoind while indexing blocks\n* Reduce sync time with concurrent block indexing\n* Use [Zstandard compression](https://github.com/facebook/zstd) to reduce the size of data stored on disk without needing to write a manual byte-level encoding\n\n## System Requirements\n\nThe `rosetta-bitcoin` implementation has been tested on an [AWS c5.2xlarge instance](https://aws.amazon.com/ec2/instance-types/c5). This instance type has 8 vCPU and 16 GB of RAM.\n\n## Getting Started\n\n1. Adjust your [network settings](#network-settings) to the recommended connections.\n2. Install and run Docker as directed in the [Deployment](#deployment) section below.\n3. Run the [`Testnet:Online`](#testnetonline) command.\n\n### Network Settings\n\nTo increase the load that `rosetta-bitcoin` can handle, we recommend tunning your OS settings to allow for more connections. On a linux-based OS, you can run these commands ([source](http://www.tweaked.io/guide/kernel)):\n\n```text\nsysctl -w net.ipv4.tcp_tw_reuse=1\nsysctl -w net.core.rmem_max=16777216\nsysctl -w net.core.wmem_max=16777216\nsysctl -w net.ipv4.tcp_max_syn_backlog=10000\nsysctl -w net.core.somaxconn=10000\nsysctl -p (when done)\n```\n_We have not tested `rosetta-bitcoin` with `net.ipv4.tcp_tw_recycle` and do not recommend enabling it._\n\nYou should also modify your open file settings to `100000`. This can be done on a linux-based OS with the command: `ulimit -n 100000`.\n\n### Memory-Mapped Files\n\n`rosetta-bitcoin` uses [memory-mapped files](https://en.wikipedia.org/wiki/Memory-mapped_file) to persist data in the `indexer`. As a result, you **must** run `rosetta-bitcoin` on a 64-bit architecture (the virtual address space easily exceeds 100s of GBs).\n\nIf you receive a kernel OOM, you may need to increase the allocated size of swap space on your OS. There is a great tutorial for how to do this on Linux [here](https://linuxize.com/post/create-a-linux-swap-file/).\n\n## Development\n\nWhile working on improvements to this repository, we recommend that you use these commands to check your code:\n\n* `make deps` to install dependencies\n* `make test` to run tests\n* `make lint` to lint the source code\n* `make salus` to check for security concerns\n* `make build-local` to build a Docker image from the local context\n* `make coverage-local` to generate a coverage report\n\n### Deployment\n\nAs specified in the [Rosetta API Principles](https://www.rosetta-api.org/docs/automated_deployment.html), all Rosetta implementations must be deployable via Docker and support running via either an [`online` or `offline` mode](https://www.rosetta-api.org/docs/node_deployment.html#multiple-modes).\n\n**YOU MUST [INSTALL DOCKER](https://www.docker.com/get-started) FOR THESE INSTRUCTIONS TO WORK.**\n\n#### Image Installation\n\nRunning these commands will create a Docker image called `rosetta-bitcoin:latest`.\n\n##### Installing from GitHub\n\nTo download the pre-built Docker image from the latest release, run:\n\n```text\ncurl -sSfL https://raw.githubusercontent.com/coinbase/rosetta-bitcoin/master/install.sh | sh -s\n```\n_Do not try to install rosetta-bitcoin using GitHub Packages!_\n\n##### Installing from Source\n\nAfter cloning this repository, run:\n\n```text\nmake build-local\n```\n\n#### Run Docker\n\nRunning these commands will start a Docker container in [detached mode](https://docs.docker.com/engine/reference/run/#detached--d) with a data directory at `<working directory>/bitcoin-data` and the Rosetta API accessible at port `8080`.\n\n##### Required Arguments\n\n**`MODE`** - Determines whether Rosetta can make outbound connections.\n- **Type:** `String`\n- **Options:** `ONLINE`, `OFFLINE`\n- **Default:** None\n\n**`NETWORK`** - The Ethereum network to launch or communicate with.\n- **Type:** `String`\n- **Options:** `MAINNET`, `ROPSTEN`, `RINKEBY`, `GOERLI` or `TESTNET`\n- **Default:** `ROPSTEN`, but only for backwards compatibility if you use `TESTNET`\n\n**`PORT`** - The port to use for Rosetta.\n- **Type:** `Integer`\n- **Options:** `8080`, any compatible port number.\n- **Default:** None\n\n##### Command Examples\n\nYou can run these commands from the command line. If you cloned the repository, you can use the `make` commands shown after the examples.\n\n###### **Mainnet:Online**\n\nUncloned repo:\n```text\ndocker run -d --rm --ulimit \"nofile=100000:100000\" -v \"$(pwd)/bitcoin-data:/data\" -e \"MODE=ONLINE\" -e \"NETWORK=MAINNET\" -e \"PORT=8080\" -p 8080:8080 -p 8333:8333 rosetta-bitcoin:latest\n```\nCloned repo:\n```text\nmake run-mainnet-online\n```\n\n###### **Mainnet:Offline**\n\nUncloned repo:\n```text\ndocker run -d --rm -e \"MODE=OFFLINE\" -e \"NETWORK=MAINNET\" -e \"PORT=8081\" -p 8081:8081 rosetta-bitcoin:latest\n```\nCloned repo:\n```text\nmake run-mainnet-offline\n```\n\n###### **Testnet:Online**\n\nUncloned repo:\n```text\ndocker run -d --rm --ulimit \"nofile=100000:100000\" -v \"$(pwd)/bitcoin-data:/data\" -e \"MODE=ONLINE\" -e \"NETWORK=TESTNET\" -e \"PORT=8080\" -p 8080:8080 -p 18333:18333 rosetta-bitcoin:latest\n```\n\nCloned repo: \n```text\nmake run-testnet-online\n```\n\n###### **Testnet:Offline**\n\nUncloned repo:\n```text\ndocker run -d --rm -e \"MODE=OFFLINE\" -e \"NETWORK=TESTNET\" -e \"PORT=8081\" -p 8081:8081 rosetta-bitcoin:latest\n```\n\nCloned repo: \n```text\nmake run-testnet-offline\n```\n\n## Architecture\n\n`rosetta-bitcoin` uses the `syncer`, `storage`, `parser`, and `server` package from [`rosetta-sdk-go`](https://github.com/coinbase/rosetta-sdk-go) instead of a new Bitcoin-specific implementation of packages of similar functionality. Below you can find an overview of how everything fits together:\n\n<p align=\"center\">\n  <a href=\"https://www.rosetta-api.org\">\n    <img width=\"90%\" alt=\"Architecture\" src=\"https://www.rosetta-api.org/img/rosetta_bitcoin_architecture.jpg\">\n  </a>\n</p>\n\n### Concurrent Block Syncing\n\nTo speed up indexing, `rosetta-bitcoin` uses concurrent block processing with a \"wait free\" design (using [the channels function](https://golangdocs.com/channels-in-golang) instead of [the sleep function](https://pkg.go.dev/time#Sleep) to signal which threads are unblocked). This allows `rosetta-bitcoin` to fetch multiple inputs from disk while it waits for inputs that appeared in recently processed blocks to save to disk.\n\n<p align=\"center\">\n  <a href=\"https://www.rosetta-api.org\">\n    <img width=\"90%\" alt=\"Concurrent Block Syncing\" src=\"https://www.rosetta-api.org/img/rosetta_bitcoin_concurrent_block_synching.jpg\">\n  </a>\n</p>\n\n## Test the Implementation with the rosetta-cli Tool\n\nTo validate `rosetta-bitcoin`, [install `rosetta-cli`](https://github.com/coinbase/rosetta-cli#install) and run one of these commands:\n\n* `rosetta-cli check:data --configuration-file rosetta-cli-conf/testnet/config.json` - This command validates that the Data API information in the `testnet` network is correct. It also ensures that the implementation does not miss any balance-changing operations.\n* `rosetta-cli check:construction --configuration-file rosetta-cli-conf/testnet/config.json` - This command validates the blockchain\u2019s construction, signing, and broadcasting.\n* `rosetta-cli check:data --configuration-file rosetta-cli-conf/mainnet/config.json` - This command validates that the Data API information in the `mainnet` network is correct. It also ensures that the implementation does not miss any balance-changing operations.\n\nRead the [How to Test your Rosetta Implementation](https://www.rosetta-api.org/docs/rosetta_test.html) documentation for additional details.\n\n## Contributing\n\nYou may contribute to the `rosetta-bitcoin` project in various ways:\n\n* [Asking Questions](CONTRIBUTING.md/#asking-questions)\n* [Providing Feedback](CONTRIBUTING.md/#providing-feedback)\n* [Reporting Issues](CONTRIBUTING.md/#reporting-issues)\n\nRead our [Contributing](CONTRIBUTING.MD) documentation for more information.\n\nWhen you've finished an implementation for a blockchain, share your work in the [ecosystem category of the community site](https://community.rosetta-api.org/c/ecosystem). Platforms looking for implementations for certain blockchains will be monitoring this section of the website for high-quality implementations they can use for integration. Make sure that your implementation meets the [expectations](https://www.rosetta-api.org/docs/node_deployment.html) of any implementation.\n\nYou can also find community implementations for a variety of blockchains in the [rosetta-ecosystem](https://github.com/coinbase/rosetta-ecosystem) repository.\n\n## Documentation\n\nYou can find the Rosetta API documentation at [rosetta-api.org](https://www.rosetta-api.org/docs/welcome.html). \n\nCheck out the [Getting Started](https://www.rosetta-api.org/docs/getting_started.html) section to start diving into Rosetta. \n\nOur documentation is divided into the following sections:\n\n* [Product Overview](https://www.rosetta-api.org/docs/welcome.html)\n* [Getting Started](https://www.rosetta-api.org/docs/getting_started.html)\n* [Rosetta API Spec](https://www.rosetta-api.org/docs/Reference.html)\n* [Testing](https://www.rosetta-api.org/docs/rosetta_cli.html)\n* [Best Practices](https://www.rosetta-api.org/docs/node_deployment.html)\n* [Repositories](https://www.rosetta-api.org/docs/rosetta_specifications.html)\n\n## Related Projects\n\n* [rosetta-sdk-go](https://github.com/coinbase/rosetta-sdk-go) \u2014 The `rosetta-sdk-go` SDK provides a collection of packages used for interaction with the Rosetta API specification. \n* [rosetta-specifications](https://github.com/coinbase/rosetta-specifications) \u2014 Much of the SDK code is generated from this repository.\n* [rosetta-cli](https://github.com/coinbase/rosetta-ecosystem) \u2014 Use the `rosetta-cli` tool to test your Rosetta API implementation. The tool also provides the ability to look up block contents and account balances.\n\n### Sample Implementations\n\nYou can find community implementations for a variety of blockchains in the [rosetta-ecosystem](https://github.com/coinbase/rosetta-ecosystem) repository, and in the [ecosystem category](https://community.rosetta-api.org/c/ecosystem) of our community site. \n\n## License\nThis project is available open source under the terms of the [Apache 2.0 License](https://opensource.org/licenses/Apache-2.0).\n\n\u00a9 2022 Coinbase"
 },
 {
  "repo": "piotrnar/gocoin",
  "language": "Go",
  "readme_contents": "# About Gocoin\r\n\r\n**Gocoin** is a full **Bitcoin** solution written in Go language (golang).\r\n\r\nThe software architecture is focused on maximum performance of the node\r\nand cold storage security of the wallet.\r\n\r\nThe **wallet** is designed to be used offline.\r\nIt is deterministic and password seeded.\r\nAs long as you remember the password, you do not need any backups ever.\r\nWallet can be used without the client, but with the provided **balio** tool instead.\r\n\r\nThe **client** (p2p node) is an application independent from the **wallet**.\r\nIt keeps the entire UTXO set in RAM, providing an instant access to all its records\r\nand - in consequece - an extraordinary blochchain processing performance.\r\n\r\nSystem memory and time Gocoin client 1.10.1 needs to sync the blockchain up to\r\nthe given block number, with comparision to Bitcoin Core 23.0:\r\n\r\n![SyncChart](website/quick_sync_gocoin_vs_core.png)\r\n*The above data was collected using [Hetzner](https://hetzner.com) dedicated server\r\nwith 3.6GHz Intel i7-7700 CPU, 2x512MB SSD and 1Gbit internet connection, \r\nrunning Debian 11 (bullseye).\r\nClients using their default configuration, except for the second (blue) Bitcoin Core\r\nthat is set to use **dbcache=16384**.<br/>\r\nFor other performance charts see [gocoin.pl](https://gocoin.pl/gocoin_performance.html) website.*\r\n\r\n# Requirements\r\n\r\n## Hardware\r\n\r\n**client**:\r\n\r\n* 64-bit architecture OS and Go compiler.\r\n* File system supporting files larger than 4GB.\r\n* At least 16GB of system RAM.\r\n\r\n\r\n**wallet**:\r\n\r\n* Any platform that you can make your Go (cross)compiler to build for (Raspberry Pi works).\r\n* For security reasons make sure to use encrypted swap file (if there is a swap file).\r\n* If you decide to store your password in a file, have the disk encrypted (in case it gets stolen).\r\n\r\n\r\n## Operating System\r\nHaving hardware requirements met, any target OS supported by your Go compiler will do.\r\nCurrently that can be at least one of the following:\r\n\r\n* Windows\r\n* Linux\r\n* macOS\r\n* Free BSD\r\n\r\n## Build environment\r\nIn order to build Gocoin yourself, you will need the following tools installed in your system:\r\n\r\n* **Go** (recent version) - http://golang.org/doc/install\r\n* **Git** - http://git-scm.com/downloads\r\n\r\nIf the tools mentioned above are all properly installed, you should be able to execute `go` and `git`\r\nfrom your OS's command prompt without a need to specify full path to the executables.\r\n\r\n# Getting sources\r\n\r\nDownload the source code from github to a local folder of your choice, e.g. by executing:\r\n\r\n\tgit clone https://github.com/piotrnar/gocoin.git\r\n\r\n\r\n# Building\r\n\r\n## Client node\r\nGo to the `client/` folder and execute `go build` there.\r\n\r\n\r\n## Wallet\r\nGo to the `wallet/` folder and execute `go build` there.\r\n\r\n\r\n## Tools\r\nGo to the `tools/` folder and execute:\r\n\r\n\tgo build btcversig.go\r\n\r\nRepeat the `go build` for each source file of the tool you want to build.\r\n\r\n# Binaries\r\n\r\nWindows or Linux (amd64) binaries can be downloaded from\r\n\r\n * https://sourceforge.net/projects/gocoin/files/?source=directory\r\n\r\nPlease note that the binaries are usually not up to date.\r\nI strongly encourage everyone to build the binaries himself.\r\n\r\n# Development\r\nAlthough it is an open source project, I am sorry to inform you that **I will not merge in any pull requests**.\r\nThe reason is that I want to stay an explicit author of this software, to keep a full control over its\r\nlicensing. If you are missing some functionality, just describe me your needs and I will see what I can do\r\nfor you. But if you want your specific code in, please fork and develop your own repo.\r\n\r\n# Support\r\nThe official web page of the project is served at <a href=\"http://gocoin.pl\">gocoin.pl</a>\r\nwhere you can find extended documentation, including **User Manual**.\r\n\r\nPlease do not log github issues when you only have questions concerning this software.\r\nInstead see [Contact](http://gocoin.pl/gocoin_links.html) page at [gocoin.pl](http://gocoin.pl) website\r\nfor possible ways of contacting me.\r\n\r\nIf you want to support this project, I ask you to run your own Gocoin node, prefably with TCP port 8333\r\nopen for the outside world. Do not hestiate to report any issues you find.\r\n"
 },
 {
  "repo": "rust-bitcoin/rust-bitcoincore-rpc",
  "language": "Rust",
  "readme_contents": "[![Status](https://travis-ci.org/rust-bitcoin/rust-bitcoincore-rpc.png?branch=master)](https://travis-ci.org/rust-bitcoin/rust-bitcoincore-rpc)\n\n# Rust RPC client for Bitcoin Core JSON-RPC \n\nThis is a Rust RPC client library for calling the Bitcoin Core JSON-RPC API. It provides a layer of abstraction over \n[rust-jsonrpc](https://github.com/apoelstra/rust-jsonrpc) and makes it easier to talk to the Bitcoin JSON-RPC interface \n\nThis git package compiles into two crates.\n1. [bitcoincore-rpc](https://crates.io/crates/bitcoincore-rpc) - contains an implementation of an rpc client that exposes \nthe Bitcoin Core JSON-RPC APIs as rust functions.\n\n2. [bitcoincore-rpc-json](https://crates.io/crates/bitcoincore-rpc-json) -  contains rust data structures that represent \nthe json responses from the Bitcoin Core JSON-RPC APIs. bitcoincore-rpc depends on this.\n\n# Usage\nGiven below is an example of how to connect to the Bitcoin Core JSON-RPC for a Bitcoin Core node running on `localhost`\nand print out the hash of the latest block.\n\nIt assumes that the node has password authentication setup, the RPC interface is enabled at port `8332` and the node\nis set up to accept RPC connections. \n\n```rust\nextern crate bitcoincore_rpc;\n\nuse bitcoincore_rpc::{Auth, Client, RpcApi};\n\nfn main() {\n\n    let rpc = Client::new(\"http://localhost:8332\",\n                          Auth::UserPass(\"<FILL RPC USERNAME>\".to_string(),\n                                         \"<FILL RPC PASSWORD>\".to_string())).unwrap();\n    let best_block_hash = rpc.get_best_block_hash().unwrap();\n    println!(\"best block hash: {}\", best_block_hash);\n}\n```\n\nSee `client/examples/` for more usage examples. \n\n# Supported Bitcoin Core Versions\nThe following versions are officially supported and automatically tested:\n* 0.18.0\n* 0.18.1\n* 0.19.0.1\n* 0.19.1\n* 0.20.0\n* 0.20.1\n* 0.21.0\n\n# Minimum Supported Rust Version (MSRV)\nThis library should always compile with any combination of features on **Rust 1.41.1**.\n"
 },
 {
  "repo": "dennisreimann/bitcoindevlist.com",
  "language": "CSS",
  "readme_contents": "# Bitcoin Donation Portal\n\n## Support bitcoin developers so they can focus on building our future\n\n[The website](https://bitcoindevlist.com/) lists people working on Bitcoin and related projects.\nThe goal is to increase the visibility of contributors to the space that are accepting donations.\nIf you are currently working on a bitcoin related open source project, submit a PR to get yourself added.\n\nWe do not want to be gatekeepers for additions.\nAs a baseline we have decided on a policy that requires at least one ACK for new entries.\n\n## Adding yourself to the lists\n\nIf you are currently working on a bitcoin related open source project, submit a PR to [get yourself added](https://github.com/dennisreimann/bitcoindevlist.com/edit/master/donatees).\nJust append your block of data to the bottom, the list is shuffled on page load.\nYou can use Markdown in the `description` property.\n\nWe also support [BOLT12](https://bolt12.org/) (`bolt12_single` and `bolt12_recurring`, [example](./donatees/sjors-provoost.json)) and [Lightning Address](https://lightningaddress.com/) (`lnaddr`, [example](./donatees/fitti.json))\n\n### Addition template / available options\n\n```json\n{\n  \"name\": \"Your name\",\n  \"github\": \"GitHub username\",\n  \"twitter\": \"Twitter username without @\",\n  \"mastodon\": \"Mastodon URL\",\n  \"donate\": \"Donation URL\",\n  \"avatar\": \"Avatar URL\",\n  \"description\": \"A short bio which can include links via Markdown\",\n  \"lightning\": true,\n  \"bolt12_single\": \"BOLT12 for a single offer\",\n  \"bolt12_recurring\": \"BOLT12 for a recurring offer\",\n  \"lnaddr\": \"Lightning address\",\n  \"tags\": [\n    \"Bitcoin\",\n    \"Lightning\"\n  ]\n}\n```\n\n## Local build\n\n[Node.js](https://nodejs.org/en/) is a prerequisite, the dependencies are managed via npm.\nOnce you have cloned this repo, you can setup the packages:\n\n```bash\nnpm install\n```\n\nCreate a build and rebuild on file change:\n\n```bash\nnpm start\n```\n\nThis will bring up the dev server and pattern library on [localhost:3000](http://localhost:3000).\n"
 },
 {
  "repo": "Multibit-Legacy/multibit-hd",
  "language": "Java",
  "readme_contents": "# Multibit is Deprecated - Do Not Use\n\nWednesday, July 26, 2017\n\nDear Bitcoin Community,\n\nIt is time for us to let Multibit go. \n\nKeepKey acquired Multibit a little over 1 year ago. At the time, the engineers who originally built and supported Multibit had announced that they would no longer be working on it or providing support. Multibit played an important role in the Bitcoin infrastructure. We felt that it was important for Multibit to continue and hoped that with our existing support and development teams, we would be able to keep Multibit alive.\n\nThe reality is that Multibit is in need of a lot of work. It has stubborn bugs that have caused us and Multibit users much grief. Additionally, Bitcoin has gone through a fundamental change in regards to the way fees work. The addition of SegWit in the coming weeks will mean the Multibit software has fallen still further behind.\n\nUnfortunately, KeepKey simply does not have the resources to support the current issues, nor to rebuild Multibit to ensure ideal user experience. By focusing our attention on the KeepKey device, we will continue building and improving the best hardware wallet available.\n\nThus, KeepKey will discontinue support and maintenance of Multibit, effective immediately.\n\nWe recommend that all Multibit users discontinue using it and you move your keys to other wallet software of your choosing. \n\n## Next Steps for Multibit Users \nVideos that demonstrate how to move your wallet to Electrum are available on YouTube.\n\n- Multibit HD: https://youtu.be/E-KcY6KUVnY\n- Multibit Classic: https://youtu.be/LaijbTcxsv8\n\nPlease note that the version of Electrum available for download today (version 2.8.3) doesn\u2019t fully support the importing Multibit HD wallet words. The version shown in the Multibit HD video is the soon-to-be-released next version.\n\nMultibit was a fantastic piece of software in its time, and we want to thank the Multibit developers for such an important contribution to Bitcoin\u2019s history.\n\nSincerely,\n\nKen Heutmaker\n\nCTO, KeepKey \n\n------\n\nBuild status: [![Build Status](https://travis-ci.org/keepkey/multibit-hd.png?branch=develop)](https://travis-ci.org/keepkey/multibit-hd)\n\nProject status: Pre-release. Expect minor bugs and UI adjustments. Suitable for small scale production.\n\n### MultiBit HD (MBHD)\n\nA desktop Hierarchical Deterministic Wallet (HDW) for Bitcoin using the Simplified Payment Verification (SPV) mode to provide very fast block chain synchronization.\n\nThe target audience is \"international mainstream\" which compels the user interface to remain as simple and consistent as possible while still retaining advanced capabilities\nunder the covers.\n\nSupport for external hardware wallets (such as the Trezor) is [available through the MultiBit Hardware project](https://github.com/keepkey/mbhd-hardware).\n\n### Main website\n\nPre-packaged installers are available from the [MultiBit website](https://beta.multibit.org).\n\n### Technologies\n\n* Java 7 and Swing\n* [Bitcoinj](https://github.com/bitcoinj/bitcoinj) - Providing various Bitcoin protocol utilities (GitHub is the reference)\n* [hid4java](https://github.com/gary-rowe/hid4java) - Java library providing USB Human Interface Device (HID) native interface\n* [MultiBit Hardware](https://github.com/keepkey/multibit-hardware) - Java library providing Trezor support\n* [Google Protocol Buffers](https://code.google.com/p/protobuf/) (protobuf) - For use with serialization and hardware communications\n* [Font Awesome](http://fortawesome.github.io/Font-Awesome/) - for iconography\n* [Install4j](https://www.ej-technologies.com/download/install4j/files) - for a smooth installation and update process\n\n### Getting started\n\nMultiBit HD is a standard Maven build from a GitHub repository and currently relies on some builds of libraries which aren't available in Maven Central.\n\nBelow are some basic instructions for developers - there is [more information in the MultiBit HD wiki](https://github.com/keepkey/multibit-hd/wiki).\n\n#### Verify you have Git\n\n```\n$ git --version\n```\n\n[Install git](https://help.github.com/articles/set-up-git/) if necessary.\n\nThen, if this is your first time working with MultiBit HD source code, clone the source code repository (over HTTPS) using:\n\n```\n$ git clone https://github.com/keepkey/multibit-hd.git\n```\nA sub-directory called `multibit-hd` will be created which is your project root directory.\n\nTo update a previous clone of MultiBit HD use a pull instead:\n\n```\n$ cd <project root>\n$ git pull\n```\n\n#### Verify you have Maven 3+\n\nMost IDEs (such as [Intellij Community Edition](http://www.jetbrains.com/idea/download/)) come with support for Maven built in, but if not then you may need\n to [install it manually](http://maven.apache.org/download.cgi).\n\nIDEs such as Eclipse may require the [m2eclipse plugin](http://www.sonatype.org/m2eclipse) to be configured.\n\nTo quickly check that you have Maven 3+ installed check on the command line:\n```\n$ mvn --version\n```\nMaven uses a file called `pom.xml` present in the MultiBit HD source code project directory to provide all the build information.\n\n#### We currently use a forked version of Bitcoinj\n\nThe [MultiBit Staging repository](https://github.com/keepkey/mbhd-maven) contains a fork of the bitcoinj library\nand its supporting Orchid JAR for Tor that is aligned with the MultiBit HD `develop` branch. This should be used for\ndevelopment builds and is suitable for production. As we make changes to our fork we update the staging repository. \n\nOur release cycle is different to that of bitcoinj and our version reflects as accurately as we can the state of play\nwhen the bitcoinj fork code was frozen. For example `bitcoinj-0.13-SNAPSHOT-alice-0.0.9` should be interpreted as\n\"a snapshot of upstream bitcoinj 0.13 that has additional code (alice) that is released under version 0.0.9\".\n\nDeeper analysis of the actual git upstream can be seen through the tagging of the `master` branch.\n\nWherever possible, and time permitting, we will introduce our forked changes as a pull request into the upstream bitcoinj\nso that other projects can benefit but we must use a fork to ensure rapid updates are possible during development.\n\nAnyone wishing to handle this part of the process is very welcome to offer up their assistance!\n\n#### Start the application (from an IDE)\n\nTo run the application within an IDE, simply execute `MultiBitHD.main()` in the `mbhd-swing` module. No command line parameters are needed, although a Bitcoin URI is accepted.\n\n#### Start the application (from the command line)\n\nTo run the application from the command line, first build from the project root directory (pulling in all sources from upstream):\n```\n$ cd <project root>\n$ mvn clean dependency:sources install\n```\nthen start the application using the shaded JAR:\n```\n$ java -jar mbhd-swing/target/multibit-hd.jar\n```\nNo command line parameters are needed, although BIP 21 and BIP 72 Bitcoin URIs are accepted. In the example below a BIP 21 Bitcoin URI\nis presented, the quotes are required to avoid URL decoding:\n```\n$ java -jar mbhd-swing/target/multibit-hd.jar \"bitcoin:1AhN6rPdrMuKBGFDKR1k9A8SCLYaNgXhty?amount=0.01&label=Please%20donate%20to%20multibit.org\"\n```\n#### Multiple instances\n\nMultiBit HD will avoid multiple instances by using port 8330 as a method of detecting another running instance. If port 8330 cannot be bound MultiBit HD will assume that\nanother instance is running and hand over any Bitcoin URI arguments present when it started. It will then perform a hard shutdown terminating its own JVM. The other instance will\nreact to receiving a Bitcoin URI message on port 8330 by displaying an alert bar requesting the user to act upon the Bitcoin URI payment request.\n\n### Frequently asked questions (FAQ)\n\nHere are some common questions that developers ask when they first encounter MBHD.\n\n### How can I contribute ?\n\nSimply add yourself as a watcher to the repository and keep and eye on issues that interest you.\n\nIn general issues are labelled with a yellow `awaiting review` or a blue `in progress` to indicate where our attention is focused. We would appreciate you updating and running up\nthe code and verifying that an `awaiting review` does what it is supposed to. If you could then post a comment similar to `Works for me on Linux` then that would help us to close\noff the issue faster, or engage further with it to get bugs fixed.\n\nOf course, if you want to contribute coding effort or deeper code review and commentary that would be most appreciated as well. We want MultiBit HD to be as solid as we can make it.\n\nAs always, donations to the MultiBit address are welcome: [1AhN6rPdrMuKBGFDKR1k9A8SCLYaNgXhty](bitcoin:1AhN6rPdrMuKBGFDKR1k9A8SCLYaNgXhty?amount=0.01&label=Please%20donate%20to%20multibit.org).\n\n#### Where's the Trezor support ?\n\nWe've begun the process of integrating the Trezor device through the [MultiBit Hardware](https://github.com/keepkey/multibit-hardware) project. If you are a hardware\nwallet developer, or are just interested to learn how the Trezor device works under the covers please watch this project.\n\nFrom now you should be able to attach your Trezor device and see an alert message providing information and a button to switch your current wallet over to one that tracks your\nTrezor device. All private keys remain on the Trezor device and associated contacts, payments and so on are keep encrypted in your wallet.\n\n#### Why not Java 8 ?\n\nAt the time MBHD was being written (Q4 2013 - Q2 2014) Java 8 was not in production release and the sheer size of the packaged download was coming in at 150Mb (18x MultiBit\nClassic and 3x the standard Java 7 packaged footprints). That footprint alone would be sufficient to dramatically increase the cost of serving the application and deter people\nfrom downloading in countries where bandwidth is less available.\n\nWe will revisit this once we have suitable Install4j JREs available. We expect this to occur shortly after [Release 0.1](https://github.com/keepkey/multibit-hd/milestones).\n\n#### Why not JavaFX ?\n\nJavaFX was only available as version 2.2 on Java 7 and the move to Java 8 was not going to happen. There were many significant features missing in JavaFX 2.2 which would only be\nfixed in Java 8:\n\n* no right to left languages (Hebrew, Farsi, Arabic, etc)\n* no integration with native platform for Bitcoin URI protocol handling (no BIP 21 or 72 support)\n* no reporting uncaught exceptions (no error reporting)\n\nThus this technology was not suitable for the very wide range of people using MultiBit in all corners of the globe.\n\n#### Why Swing ?\n\nThere is a vast amount of support for Swing. The code is near bullet-proof for most use cases and it fully supports internationalization which is a key requirement for MultiBit HD.\nAlso, many of the supporting libraries for Swing\npre-date 2009 making it much harder for [dependency chain attacks](http://gary-rowe.com/agilestack/2013/07/03/preventing-dependency-chain-attacks-in-maven/) to take place.\n\nWith some effort Swing can be made to look quite modern.\n\nSwing also allows us to smoothly integrate with the native platform which puts it ahead of JavaFX until at least Q3 2015.\n\n#### Why not SwingX ?\n\nSwingX is a large support library that introduces a lot of additional functionality to Swing applications. Much of this additional functionality is not required by MultiBit or\ncan be relatively easily worked around. Consequently including it would increase the available attack surface.\n\n#### Why the Nimbus look and feel ?\n\nIn Java 7 the Nimbus look and feel became integrated with the JDK. It provides a modern 2D rendered UI that is the same across all platforms. It is highly customisable through\nsimple themes and provides consistent painting behaviour across platforms. For example to paint a button red in Swing using the Mac-only Aqua theme requires complex custom\nButtonUI code.\n\nUsing Nimbus ensures that we don't have this or similar problems.\n\n[Technical details on the default colours](http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html#primary)\n\n#### I want an installer not this IDE\n\nInstallers lag the latest changes by a few weeks. You can find them on the [MultiBit HD website](https://www.multibit.org/releases/multibit-hd).\n\nAs new changes are released they will update automatically over HTTPS from 0.0.4 (Private Beta 4) onwards.\n\n#### Is there a developer wiki ?\n\nYes. [The wiki pages](https://github.com/keepkey/multibit-hd/wiki/_pages) provide comprehensive instructions for developers that cover a variety of environments.\n\n#### What is your development roadmap ?\n\nWe are currently working to the following timetable:\n\n1. Hardware wallet (Trezor) support (see [version 0.0.5 issues](https://github.com/keepkey/multibit-hd/milestones/Beta%205%20Trezor))\n1. BIP70-73 payment protocol support (see [version 0.1.0 issues](https://github.com/keepkey/multibit-hd/milestones/Release%200.1%20Payment%20Protocol))\n1. Hierarchical deterministic multi-signature (HDM) support (still planning)\n\n## Developer tools\n\nThis section covers tools to assist developers when developing MBHD code.\n\n### Executing the automated requirements tests\n\nWe use [Swing FEST](http://docs.codehaus.org/display/FEST/Swing+Module) to perform automated requirements testing of the user interface. It gives super fast overview of the\napplication and runs like a standard unit test. `MultiBitHDFestTest` provides the entry point.\n\nThis provides an ever-improving set of regression tests to ensure that new code does not break the existing work.\n\nThe code is arranged as a single test case with multiple individual tests that are independent of each other. Each create their own temporary application directory and may or\nmay not require an initial randomly created empty wallet.\n\nDevelopers are strongly encouraged to create a FEST test for any UI work they are about to undertake and use it to actually test the work in progress. It is far faster to run\nFEST than to manually run up the application and do it manually.\n\nFEST is not intended to run as part of a Maven build since not all build environments support a display.\n\n### Upgrading Font Awesome\n\nUse the `FontAwesomeTools` to create the necessary enum entries for `AwesomeIcon` as required.\n\n### Changing resource bundles\n\nUse the `ResourceBundleTools` to find similar entries and to arrange keys in the same order across all bundles.\n\n### Updating the internal help files\n\nTo do an internal help refresh:\n\n1. Ensure you have cloned the [MultiBit website](https://github.com/keepkey/multibit-website) into a sibling directory to MultiBit HD\n1. Switch to the appropriate site branch (e.g. `master` for ongoing releases) and update\n1. Use Ant to execute the `update-internal-help.xml` script to copy the relevant files into the correct locations\n1. Within Intellij, navigate to `assets/images/en/screenshots/mbhd-01`, select all image files and copy to clipboard\n1. Paste image names into `HelpScreenView` where directed (remove existing)\n1. Update any FEST tests that rely on particular text being in place\n1. Run without a network connection to verify that the internal help appears correctly\n1. Check internal and external links work correctly\n1. Check IDE Changes to ensure no new files have been missed\n\n#### Updating the internationalisation files\n\nTo do an i18n refresh:\n\n1. [Download the i18n zip](http://translate.multibit.org/project/multibit-hd) using the Download button\n2. Unzip this to a directory `multibit-hd`\n3. Copy `multibit-hd` to: `mbhd-swing/src/main/resources/languages-from-crowdin`\n4. Run a terminal and cd to `mbhd-swing/src/main/resources/languages-from-crowdin`\n5. Run the script `./move-files.sh`\n\nThis moves and renames all the files into the languages directory.\nIf there are any files or new languages it lists them at the end so that you can see there is something missing from the `move-files` script.\n"
 },
 {
  "repo": "jhoenicke/mempool",
  "language": "JavaScript",
  "readme_contents": "# Bitcoin Mempool Statistics\n\nThis is the code to create the mempool statistics for bitcoin that are online\nat https://mempool.jhoenicke.de/\n\n## Installation: Part 1 - Logging\n\nYou need to be running a bitcoin full node.  It can be a pruned node or an\narchival node.  I assume you have already set it up.  You also need to\nsupport RPC to this node.  Add rpcuser/rpcpassword to bitcoin.conf to enable\nthis.\n\nI recommend to create a new user `mempool`.   Checkout this repository into\nhis home directory:\n\n    sudo -H -u mempool bash\n    cd $HOME\n    git clone https://github.com/jhoenicke/mempool\n\nEdit `mempool.sh` to adapt paths as necessary, especially the path to \nbitcoin-cli.  Add a bitcoin.conf with rpcuser/rpcpassword settings to \n`/home/mempool/.bitcoin`, to be able to use bitcoin-cli.  You can test your\nsetup by running\n\n    bitcoin-cli getmempoolinfo\n\nInstall `mysql` and create a database. Then you can test your\nconfiguration by running mempool.sh.  If you don't want to use mysql,\ncomment out the four lines starting with `open(SQL` at the end of\n`mempool-sql.pl`.  In that case zooming and auto-update in the\nwebinterface won't work.\n\n    sudo apt install mysql_server\n    mysql_secure_installation\n    mysql -u root -p <<EOF\n    create database btc_mempool;\n    create user 'mempool'@'localhost' identified by '<secret password>';\n    create user 'www'@'localhost' identified by '<redacted>';\n    grant all privileges on btc_mempool.* TO 'mempool'@'localhost';\n    grant select on btc_mempool.* TO 'www'@'localhost';\n    EOF\n    cat > ~/.my.cnf <<EOF\n    [client]\n    user=mempool\n    password=<secret password>\n    EOF\n    cd mempool\n    perl mempool-create.pl | mysql btc_mempool\n    ./mempool.sh\n\nYou are almost ready now.  Check that everything works.  There should be a\nfile `mempool.log` containing one line of statistics.  There should be\nnewly created files in `/dev/shm/mempool-btc` that contain the dynamic data the\nwebserver should serve.  If everything looks fine add the following crontab \nentry (using `crontab -e`):\n\n    * * * * * /home/mempool/mempool/mempool.sh \n\n## Installation: Part 2 - Web service\n\nInstall a web server of your choice.  For refreshing/zooming you need\nphp and php-mysql.  Then link/copy the web subdirectory to the web\nroot.  Finally link to the dynamic js files in `/dev/shm/mempool-btc`.\n\n    cd $HOME/mempool/web/queue\n    sudo ln -s $HOME/mempool/web/* /var/www/html\n    ln -s /dev/shm/mempool-btc/*.js $HOME/mempool/web/queue/\n\nYou then need to open `$HOME/mempool/web/queue/mempool.js` in your favorite\neditor and change the config array to include your web server configuration.\n"
 },
 {
  "repo": "bitcoinx-project/bitcoinx",
  "language": "C++",
  "readme_contents": "BitcoinX Core integration/staging tree\n=====================================\n\n[![Build Status](https://travis-ci.org/bitcoinx-project/bitcoinx.svg?branch=master)](https://travis-ci.org/bitcoinx-project/bitcoinx)\n\nhttps://bcx.org\n\nWhat is BitcoinX?\n----------------\n\nBitcoinX is an experimental digital currency that enables instant payments to\nanyone, anywhere in the world. BitcoinX uses peer-to-peer technology to operate\nwith no central authority: managing transactions and issuing money are carried\nout collectively by the network. BitcoinX Core is the name of open source\nsoftware which enables the use of this currency.\n\nFor more information, as well as an immediately useable, binary version of\nthe BitcoinX Core software, see [https://bcx.org](https://bcx.org).\n\nLicense\n-------\n\nBitcoinX Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n\nDevelopment Process\n-------------------\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable. [Tags](https://github.com/bitcoinx-project/bitcoinx/tags) are created\nregularly to indicate new official, stable release versions of BitcoinX Core.\n\nThe contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n\nTesting\n-------\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money.\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\nsubmit new unit tests for old code. Unit tests can be compiled and run\n(assuming they weren't disabled in configure) with: `make check`. Further details on running\nand extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n\nThere are also [regression and integration tests](/test), written\nin Python, that are run automatically on the build server.\nThese tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n\nThe Travis CI system makes sure that every pull request is built for Windows, Linux, and OS X, and that unit/sanity tests are run automatically.\n\n### Manual Quality Assurance (QA) Testing\n\nChanges should be tested by somebody other than the developer who wrote the\ncode. This is especially important for large or high-risk changes. It is useful\nto add a test plan to the pull request description if testing the changes is\nnot straightforward.\n"
 },
 {
  "repo": "Jeiwan/blockchain_go",
  "language": "Go",
  "readme_contents": "# Blockchain in Go\n\nA blockchain implementation in Go, as described in these articles:\n\n1. [Basic Prototype](https://jeiwan.net/posts/building-blockchain-in-go-part-1/)\n2. [Proof-of-Work](https://jeiwan.net/posts/building-blockchain-in-go-part-2/)\n3. [Persistence and CLI](https://jeiwan.net/posts/building-blockchain-in-go-part-3/)\n4. [Transactions 1](https://jeiwan.net/posts/building-blockchain-in-go-part-4/)\n5. [Addresses](https://jeiwan.net/posts/building-blockchain-in-go-part-5/)\n6. [Transactions 2](https://jeiwan.net/posts/building-blockchain-in-go-part-6/)\n7. [Network](https://jeiwan.net/posts/building-blockchain-in-go-part-7/)\n"
 },
 {
  "repo": "shirriff/bitcoin-code",
  "language": "Python",
  "readme_contents": "Example Python files for \r\nBitcoins the hard way: Using the raw Bitcoin protocol\r\nhttp://www.righto.com/2014/02/bitcoins-hard-way-using-raw-bitcoin.html\r\n\r\nThese files are for illustration of how the Bitcoin protocol works\r\nand should not be used for real purposes.\r\n"
 },
 {
  "repo": "bitcoin-dot-org/developer.bitcoin.org",
  "language": "Python",
  "readme_contents": "# Welcome to developer.bitcoin.org's codebase\n\nLive site: [developer.bitcoin.org](https://developer.bitcoin.org)\n\nReport problems or help improve the site by opening a [new\nissue](https://github.com/bitcoin-dot-org/developer.bitcoin.org/issues) or [pull\nrequest](https://github.com/bitcoin-dot-org/developer.bitcoin.org/compare).\n\n## How to contribute\n\nThis repo hosts the sources for the Bitcoin developer documentation. One of the\neasiest ways to get started contributing is by rereading the site and looking for\ninconsistencies in terminology, style, etc., and also in any illustrations.\n\nPrior to contributing, please review the [style\nguide](https://github.com/bitcoin-dot-org/developer.bitcoin.org/tree/master/docs/style-guide.md).\n\nMuch of the content displayed on the is converted from Markdown to\n[reStructuredText (RST)](http://docutils.sourceforge.net/rst.html) and rendered\nwith [Sphinx](http://www.sphinx-doc.org).\n\n### Render the documentation locally\n\nTo render the documentation locally you first need to install Sphinx and the\nrequired theme modules, e.g. by running\n\n    pip install -r requirements.txt\n\nThis should be done from the root of this repo. Then you can execute Sphinx by calling\n\n    make html\n\nThis will generate HTML from the RST sources in the directory `_build/html`.\nIt's all static HTML so you can just open the index.html file in your browser\nlocally to view the rendered documentation.\n\n### Generation of RPC docs\n\nThe documentation of the RPC commands is automatically generated from the help\nof a bitcoin client with a [helper\ntool](https://github.com/bitcoin-dot-org/developer.bitcoin.org/tree/master/helpers/rpc).\nThis is the content in the [reference/rpc](reference/rpc) directory. Changes in\nthese files need to be done through the helper tool or at least backported to\nthe helper tool after doing them in this repo.\n\n## Code of Conduct\n\nParticipation in this project is subject to a [Code of\nConduct](https://github.com/bitcoin-dot-org/developer.bitcoin.org/blob/master/CODE_OF_CONDUCT.md).\n"
 },
 {
  "repo": "moneybutton/bsv",
  "language": "JavaScript",
  "readme_contents": "# bsv\n\nbsv is a javascript library for Bitcoin SV (BSV) intended to satisfy certain\ngoals:\n\n1. Support ease-of-use by being internally consistent. It should not be\n   necessary to read the source code of a class or function to know how to use it.\n   Once you know how to use part of the library, the other parts should feel\n   natural.\n\n2. Have 100% test coverage, or nearly so, so that the library is known to be\n   reliable. This should include running standard test vectors from the reference\n   implementation.\n\n3. Library objects have an interface suitable for use with a command-line\n   interface or other libraries and tools, in particular having toString,\n   fromString, toJSON, fromJSON, toBuffer, fromBuffer, toHex, fromHex methods.\n\n4. All standard features of the blockchain are implemented (or will be) and\n   saved in lib/. All BIPs are correctly implemented and, where appropriate, saved\n   as bip-xx.js in lib/ (since that is their standard name). In order to allow\n   rapid development, Yours Bitcoin includes non-standard and experimental\n   features. Any non-standard features (such as colored coins or stealth\n   addresses) are labeled as such in index.js as well as in comments.\n\n5. Expose everything, including dependencies. This makes it possible to develop\n   apps that require fine-grained control over the basics, such as big numbers and\n   points. However, it also means that you can hurt yourself if you misuse these\n   primitives.\n\n6. Use standard javascript conventions wherever possible so that other\n   developers find the code easy to understand.\n\n7. Minimize the use of dependencies so that all code can be easily audited.\n\n8. All instance methods modify the state of the object and return the object,\n   unless there is a good reason to do something different. To access the result\n   of an instance method, you must access the object property(s) that it modifies.\n\n9. Support web workers to unblock web wallet UIs when performing cryptography.\n\n## Environment Variables\n\n* `BSV_JS_BASE_URL` - Default \"/\".\n* `BSV_JS_BUNDLE_FILE` - Default \"bsv.js\"\n* `BSV_JS_WORKER_FILE` - Default \"bsv-worker.js\"\n* `NETWORK` - Default \"mainnet\"\n\nYou can change the network to run the CLI in testnet mode:\n\n```\nNETWORK=testnet ./bin/bsv.js\n```\n"
 },
 {
  "repo": "richardkiss/pycoin",
  "language": "Python",
  "readme_contents": "[![GitHub Actions Status](https://github.com/richardkiss/pycoin/actions/workflows/test.yml/badge.svg)](https://github.com/richardkiss/pycoin/actions/workflows/test.yml)\n[![codecov.io](https://codecov.io/github/richardkiss/pycoin/coverage.svg?branch=master)](https://codecov.io/github/richardkiss/pycoin)\n\n\npycoin -- Python Cryptocoin Utilities\n=====================================\n\nThe pycoin library implements many utilities useful when dealing with bitcoin and some bitcoin-like\nalt-coins. It has been tested with Python 2.7, 3.6 and 3.7.\n\nSee also [pycoinnet](http://github.com/richardkiss/pycoinnet/) for a library that speaks the bitcoin protocol.\n\nDocumentation at [readthedocs](http://pycoin.readthedocs.io/en/latest/)\n\nDiscussion at [zulipchat](https://pycoin.zulipchat.com/)\n\n\nNetworks\n--------\n\nAs of 0.9, pycoin supports many coins to various degrees via the \"network\" class. Since specifications\nvary based on the network (for example, bitcoin mainnet addresses start with a \"1\", but testnet\naddresses start with an \"m\" or \"n\"), all API descends from a network object. Everything related to a\nparticular network is scoped under this class.\n\nBitcoin has the highest level of support, including keys, transactions, validation of signed transactions, and\nsigning unsigned transactions, including partial signing of multisig transactions. These are in level of\nincreasing complexity, so features for other coins will likely be supported in that order.\n\nThere are two main ways to get a network:\n\n```\nfrom pycoin.symbols.btc import network\n```\n\nOR\n\n```\nfrom pycoin.networks.registry import network_for_netcode\nnetwork = network_for_netcode(\"BTC\")\n```\n\n\nKeys\n----\n\nYou can create a private key and get the corresponding address.\n\n```\nfrom pycoin.symbols.btc import network\n\nkey = network.keys.private(secret_exponent=1)  # this is a terrible key because it's very guessable\nprint(key.wif())\nprint(key.sec())\nprint(key.address())\nprint(key.address(is_compressed=False))\n\nsame_key = network.parse.private(key.wif())\nprint(same_key.address())\n```\n\n\nBIP32\n-----\n\nYou can create a BIP32 key.\n\n```\nkey = network.keys.bip32_seed(b\"foo\")  # this is a terrible key because it's very guessable\nprint(key.hwif(as_private=1))\nprint(key.hwif())\nprint(key.wif())\nprint(key.sec())\nprint(key.address())\n```\n\nYou can parse a BIP32 key.\n\n```\nkey = network.parse.bip32(\"xprv9s21ZrQH143K31AgNK5pyVvW23gHnkBq2wh5aEk6g1s496M\"\n      \"8ZMjxncCKZKgb5jZoY5eSJMJ2Vbyvi2hbmQnCuHBujZ2WXGTux1X2k9Krdtq\")\nprint(key.hwif(as_private=1))\nprint(key.hwif())\nprint(key.wif())\nprint(key.sec())\nprint(key.address())\n```\n\nWARNING: be extremely careful giving out public wallet keys. If someone has access to a private wallet key P, of\ncourse they have access to all descendent wallet keys of P. But if they also have access to a public wallet key K\nwhere P is a subkey of K, you can actually work your way up the tree to determine the private key that corresponds\nto the public wallet key K (unless private derivation was used at some point between the two keys)! Be sure you\nunderstand this warning before giving out public wallet keys!\n\nMuch of this API is exposed in the `ku` command-line utility. See also [COMMAND-LINE-TOOLS.md](./COMMAND-LINE-TOOLS.md).\n\nSee [BIP32.txt](./BIP32.txt) for more information.\n\n\nTransactions\n------------\n\nThe command-line utility `tx` is a Swiss Army knife of transaction utilities. See also [COMMAND-LINE-TOOLS.md](./COMMAND-LINE-TOOLS.md).\n\n\nServices\n--------\n\nWhen signing or verifying signatures on a transaction, the source transactions are generally needed. If you set two\nenvironment variables in your `.profile` like this:\n\n    PYCOIN_CACHE_DIR=~/.pycoin_cache\n    PYCOIN_BTC_PROVIDERS=\"blockchain.info blockexplorer.com chain.so\"\n    export PYCOIN_CACHE_DIR PYCOIN_BTC_PROVIDERS\n    export PYCOIN_XTN_PROVIDERS=\"blockchain.info\"  # For Bitcoin testnet\n\nand then `tx` will automatically fetch transactions from the web sites listed and cache the results in\n`PYCOIN_CACHE_DIR` when they are needed.\n\n(The old syntax with `PYCOIN_SERVICE_PROVIDERS` is deprecated.)\n\nThe module pycoin.services includes two functions `spendables_for_address`, `get_tx_db` that look at the\nenvironment variables set to determine which web sites to use to fetch the underlying information. The sites are\npolled in the order they are listed in the environment variable.\n\n\nBlocks\n------\n\nThe command-line utility `block` will dump a block in a human-readable format. For further information, look at\n`pycoin.block`, which includes the object `Block` which will parse and stream the binary format of a block.\n\n\nECDSA Signing and Verification\n------------------------------\n\nThe module `pycoin.ecdsa` deals with ECDSA keys directly. Important structures include:\n\n- the `secret_exponent` (a large integer that represents a private key)\n- the `public_pair` (a pair of large integers x and y that represent a public key)\n\nThere are a handful of functions: you can do things like create a signature, verify a signature, generate the public\npair from the secret exponent, and flush out the public pair from just the x value (there are two possible values\nfor y of opposite even/odd parity, so you include a flag indicating which value for y you want).\n\nThe `pycoin.ecdsa.native` module looks for both OpenSSL and libsecp256k1 (with hints from\n`PYCOIN_LIBCRYPTO_PATH` and `PYCOIN_LIBSECP256K1_PATH`) and calls out to these libraries if\nthey are present to accelerate ecdsa operations. Set `PYCOIN_NATIVE` to `openssl`,\n`secp256k1` or `none` to tweak this.\n\nExample:\n\n```\n$ PYCOIN_NATIVE=openssl\n$ export PYCOIN_NATIVE\n```\n\n\nDonate\n------\n\nWant to donate? Feel free. Send to 1KissZi1jr5eD7Rb9fepRHiS4ur2hc9PwS.\nI'm also available for bitcoin consulting... him@richardkiss.com.\n\n\n[BIP0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n"
 },
 {
  "repo": "ayeowch/bitnodes",
  "language": "Python",
  "readme_contents": "![Bitnodes](https://bitnodes.io/static/img/bitnodes-github.png \"Bitnodes\")\n\nBitnodes estimates the relative size of the Bitcoin peer-to-peer network by finding all of its reachable nodes. The current methodology involves sending [getaddr](https://en.bitcoin.it/wiki/Protocol_specification#getaddr) messages recursively to find all the reachable nodes in the network, starting from a set of seed nodes. Bitnodes uses Bitcoin protocol version 70001 (i.e. >= /Satoshi:0.8.x/), so nodes running an older protocol version will be skipped.\n\nSee [Provisioning Bitcoin Network Crawler](https://github.com/ayeowch/bitnodes/wiki/Provisioning-Bitcoin-Network-Crawler) for steps on setting up a machine to run Bitnodes. The [Redis Data](https://github.com/ayeowch/bitnodes/wiki/Redis-Data) contains the list of keys and their associated values that are written by the scripts in this project. If you wish to access the data, e.g. network snapshots, collected using this project, see [API](https://bitnodes.io/api/).\n\n### Links\n\n* [Home](https://bitnodes.io/)\n\n* [API](https://bitnodes.io/api/)\n\n* [Network Snapshot](https://bitnodes.io/nodes/)\n\n* [Charts](https://bitnodes.io/dashboard/)\n\n* [Live Map](https://bitnodes.io/nodes/live-map/)\n\n* [Network Map](https://bitnodes.io/nodes/network-map/)\n\n* [Leaderboard](https://bitnodes.io/nodes/leaderboard/)\n\n* [Client Status](https://bitnodes.io/dashboard/bitcoind/)\n\n* [Combined Estimation](https://bitnodes.io/nodes/all/)\n\n* [Check Your Node](https://bitnodes.io/#join-the-network)\n\n* [What is a Bitcoin node?](https://bitnodes.io/what-is-a-bitcoin-node/)\n\n* [Addresses List](https://bitnodes.io/nodes/addresses-list/)\n\n### CI\n\n[![CircleCI](https://circleci.com/gh/ayeowch/bitnodes.svg?style=svg)](https://circleci.com/gh/ayeowch/bitnodes)\n\n### Setup\n\n```\n# Install pyenv dependencies\nsudo apt update && sudo apt install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\n\n# Install pyenv\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\ncd ~/.pyenv && src/configure && make -C src\n\n# Append to ~/.bashrc\nexport PYENV_ROOT=$HOME/.pyenv\nexport PATH=$PYENV_ROOT/bin:$PATH\nif command -v pyenv 1>/dev/null 2>&1; then\n    eval \"$(pyenv init -)\"\nfi\n\n# Setup project\nsource ~/.bashrc\npyenv install 3.9.14\ncd && git clone https://github.com/ayeowch/bitnodes.git && cd bitnodes\n~/.pyenv/versions/3.9.14/bin/python -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\npytest\n```\n"
 },
 {
  "repo": "bitcoinops/bitcoinops.github.io",
  "language": "Markdown",
  "readme_contents": "# bitcoinops.github.io\nThe Bitcoin Operations Technology Group (Optech) works to bring the best\nopen source technologies and techniques to Bitcoin-using businesses in\norder to lower costs and improve customer experiences.\n\nAn initial focus for the group is working with its member organizations to\nreduce transaction sizes and minimize the effect of subsequent transaction fee\nincreases.\n\nLong-term goals include providing documentation and training materials, a\nweekly newsletter, original research, and facilitating improved relations\nbetween businesses and the open source community.\n\nOptech does not exist to make a profit, and all materials and documentation\nproduced are placed in the public domain. We are supported by our generous\nfounding sponsors and contributions from member companies.\n\nIf you're an engineer or manager at a Bitcoin company or an open source contributor and you'd like to be a part of this, please\ncontact us at [info@bitcoinops.org](mailto:info@bitcoinops.org).\n\n## Building The Site Locally\n\nTo build the site, you need to go through a one-time installation\nprocedure that takes 15 to 30 minutes.  After that you can build the\nsite an unlimited number of times with no extra work.\n\n##### Install The Dependencies\n\n**Install RVM**\n\nInstall RVM using either the [easy instructions](https://rvm.io/) or the\n[more secure instructions](https://rvm.io/rvm/security).\n\nRead the instructions printed to your console during setup to enable the\n`rvm` command in your shell.  After installation, you need to run the\nfollowing command:\n\n    source ~/.rvm/scripts/rvm\n\n**Install Ruby**\n\nTo install Ruby 2.6.4, simply run this command:\n\n    rvm install 2.6.4\n\nSometimes this will find a pre-compiled Ruby package for your Linux\ndistribution, but sometimes it will need to compile Ruby from scratch\n(which takes about 15 minutes).\n\nAfter Ruby 2.6.4 is installed, make it your default Ruby:\n\n    rvm alias create default ruby-2.6.4\n\nAnd tell your system to use it:\n\n    rvm use default\n\n(Note: you can use a different default Ruby, but if you ever change\nyour default Ruby, you must re-run the `gem install bundle` command\ndescribed below before you can build the site. If you ever receive a\n\"eval: bundle: not found\" error, you failed to re-run `gem install\nbundle`.)\n\n**Install Bundle**\n\nWhen you used RVM to install Ruby, it also installed the `gem` program.\nUse that program to install bundle:\n\n    gem install bundle\n\n**Install the Ruby dependencies**\n\nChange directory to the top-level of your local repository (replace\n`bitcoinops.github.io` with the full path to your local repository clone):\n\n    cd bitcoinops.github.io\n\nAnd install the necessary dependencies using Bundle:\n\n    bundle install\n\nSome of the dependencies can take a long time to install on some systems, so be\npatient.\n\nOnce Bundle completes successfully, you can preview or build the site.\n\n##### Preview The Site\n\nTo preview the website in your local browser, make sure you're in the\n`bitcoinops.github.io` directory and run the following command:\n\n    make preview\n\nThis will build the site and then print a message like this:\n\n    Server address: http://0.0.0.0:4000\n    Server running... press ctrl-c to stop.\n\nVisit the indicated URL in your browser to view the site.\n\n##### Build The Site\n\nTo build the site exactly like we do for the deployment server, make\nsure you're in the `bitcoinops.github.io` directory and run:\n\n    make\n\nThe resulting HTML for the entire site will be placed in the `_site`\ndirectory and various tests will be run.\n\n## Contributing\n\nIf you would like to contribute to the Bitcoin Optech project, please review the\n[contributing guidelines](CONTRIBUTING.md).\n"
 },
 {
  "repo": "cjb/GitTorrent",
  "language": "JavaScript",
  "readme_contents": "# [GitTorrent](http://gittorrent.org)\n\n### The Decentralization of GitHub\n\n**GitTorrent** is a peer-to-peer network of Git repositories being shared over BitTorrent. You can read more about the project at [this blog post](http://blog.printf.net/articles/2015/05/29/announcing-gittorrent-a-decentralized-github/).\n\nTo get started:\n```\nsudo npm install --global gittorrent\n```\n(You can avoid `sudo` if you place the gittorrent binaries in your `$PATH`.)\n\nAfter that, you can clone a repo with:\n```\ngit clone gittorrent://github.com/someuser/somerepo\n```\nOr serve your own repos with:\n```\ntouch somerepo/.git/git-daemon-export-ok\ngittorrentd\n```\n\nNote that GitTorrent is not affiliated with the [git project](http://git-scm.com/).\n\n# Design\n\nThe design of GitTorrent has five components:  \n\n1. A \"git transport helper\" that knows how to download and unpack git objects, and can be used by Git itself to perform a fetch/clone/push.  \n1. A distributed hash table that advertises which git commits a node is willing to serve.  \n1. A BitTorrent protocol extension that negotiates sending a packfile with needed objects to a peer  \n1. A key/value store on the distributed hash table, used as a \"user profile\" describing a user's repositories and their latest git hashes.  \n1. A method for registering friendly usernames on Bitcoin's blockchain, so that a written username can be used to find a user instead of an ugly hex string.\n\n## 1. Git Transport Helper\n\nWhen Git is asked to perform a network operation with a URL that starts with e.g. `someprotocol://`, it calls `git-remote-someprotocol` and passes the URL as an argument.  The remote helper binary is responsible for telling Git what capabilities it has, receiving commands from Git, and downloading objects into the `.git/` directory.\n\nIn GitTorrent's case, we could be asked for three styles of URL:\n* `gittorrent://some.git.hosting.site/somerepo` -- we connect over `git://` to find out what the latest commit is, then perform the download using that commit's sha1.  This is kind of like a [CDN](CDN) for a git server; the actual download of objects happens via peers, but the lookup of which objects to download happens in the normal Git way.\n* `gittorrent://<hex sha1>/reponame` -- the sha1 corresponds to a gittorrent user's \"mutable key\" (hash of their public key) on our DHT -- we look up the key, receive JSON describing the user's repositories, and then perform the download using that commit's sha1.  This doesn't use any resources outside of GitTorrent's network.\n* `gittorrent://<username>` -- the username is converted into a mutable key sha1 as above.  The mapping from usernames to sha1s happens on Bitcoin's blockchain in an OP_RETURN transaction.\n\n## 2. Distributed hash table\n\nThe bootstrap server for this DHT runs at `core.gittorrent.org:6881`.  It is a bittorrent mainline DHT.  Git SHA1s are announced by nodes who can create packfiles for them.  The clients on this DHT support dht-store (BEP 44) and use it to store mutable keys.\n\n## 3. Protocol extension\n\nOnce a client has connected to another node, it sends a request for the SHA1 it's looking for as bencoded JSON:\n```\n{gittorrent: ask: \"sha1\"}\n```\nThe node providing the packfile returns:\n```\n{gittorrent: sendTorrent: \"infoHash\"}\n```\n\n## 4. Key/value store\nBEP 44 adds support for *mutable* and *immutable* keys.  Immutable keys are addressed by the hash of their content, but mutable keys are addressed by the hash of a crypto keypair's public key.  The owner of that keypair publishes signed updates to their public key's hash, with a sequence number to ensure the latest value is always propagated by peers.  The hash of the public key here is a GitTorrent user ID, and the value associated with that key is a JSON object describing the user's repositories in a User Profile.\n\n### User Profile JSON format\n* name (string)\n* email (string)\n* repositories (array)\n  * name (string)\n  * refs (array)\n    * name (string)\n    * sha1 (string)\n\n### Mutable key file JSON format\n* pub (string)\n* priv (string)\n\n## Bitcoin username registration\n\n*This feature is not going to work on the live Bitcoin network until the OP_RETURN length is increased from 40 to 80 bytes, which will happen in Bitcoin Core v0.11, currently scheduled for release on July 1 2015.  Until then, we'll use the Bitcoin testnet, but username registrations will be discarded when the move to the live network happens.*\n\nOur DHT can't resolve arguments over which mutable key owns a given username -- we need something capable of distributed consensus (like a blockchain) for that.\n\nThe idea of using OP_RETURN comes from telehash's blockname project, but while blockname registers domain names on the blockchain, we're registering username<->key mappings instead.  The format is:\n```\n@service!username!key\n```\ne.g.\n```\n@gittorrent!cjb!81e24205d4bac8496d3e13282c90ead5045f09ea\n```\n\nNote that OP_RETURN transactions are limited to 80 bytes, which limits usernames in this scheme to 27 bytes.\n\nAs a convenience, this repository will include a database of registered usernames that is updated regularly.  This doesn't make GitTorrent any more centralized -- you can run the same scripts yourself on a downloaded blockchain to make sure that this repository does not lie.  This is just to save everyone from downloading tens of gigabytes of blockchain to process.\n\nBy the way, storing full Bitcoin history is not necessary.  We just need to scan every transaction once, and can discard each transaction after we've scanned it once and determined whether it contained a valid username registration that we record.  We just need to scan through all unprocessed blockchain transactions once, and record where we got up to so that we don't have to look at them again after that.\n\n## Contributing\n\nPlease send pull requests!  Even changes to the design of GitTorrent are welcome and encouraged; nothing is set in stone.\n\n#### JavaScript Standard Style\n\nGitTorrent uses [JavaScript Standard Style](https://github.com/feross/standard).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n#### Enable debug logs\n\nIn **node**, enable debug logs by setting the `DEBUG` environment variable to the name of the\nmodule you want to debug (e.g. `bittorrent-protocol`, or `*` to print **all logs**).\n\n### License\n\nMIT. Copyright (c) [Chris Ball](http://printf.net).\n"
 },
 {
  "repo": "dan-v/bruteforce-bitcoin-brainwallet",
  "language": "Python",
  "readme_contents": "bruteforce-bitcoin-brainwallet\n==============================\n\n<b>This project is no longer maintained.</b>\n\nA python script that performs a bruteforce dictionary attack on brainwallets. It takes a dictionary input file and converts each line into a bitcoin address. A lookup of this address is done either using a local [Abe](https://github.com/jtobey/bitcoin-abe)\n instance, blockchain.info, or insight.bitpay.com to see if any bitcoins have ever been received by this address. If so, it will do one more check\n to see the current balance for the bitcoin address.\n\n#Requirements\n* Dictionary file in UTF-8 format (***other formats NOT SUPPORTED***)\n* Python 2.7 (***3.x NOT SUPPORTED***), requests, coinkit\n<pre>\npip install -r requirements.txt\n</pre>\n\n#Usage\n```\nusage: bbb.py [-h] -t TYPE -d DICT_FILE -o OUTPUT_FILE [-s SERVER] [-p PORT]\n              [-c CHAIN] [-k] [--version]\n\nA script to perform bruteforce dictionary attacks on brainwallets.\n\noptional arguments:\n  -h, --help      show this help message and exit\n  -t TYPE         Blockchain lookup type (abe|blockchaininfo|insight|blockexplorercom)\n  -d DICT_FILE    Dictionary file (e.g. dictionary.txt)\n  -o OUTPUT_FILE  Output file (e.g. output.txt)\n  -s SERVER       Abe server address (e.g. localhost)\n  -p PORT         Abe port (e.g. 2751)\n  -c CHAIN        Abe chain string (e.g. Bitcoin)\n  -k              treat each word as a hex or wif encoded private key, not as\n                  brain wallet\n  --version       show program's version number and exit\n```\n\n#Abe example\n```\npython bbb.py -t abe -d dictionary.txt -o found.txt -s 127.0.0.1 -p 2751 -c Bitcoin\n2014-04-03 21:24:37,552 INFO   line 59   Opening session for abe\n2014-04-03 21:24:37,552 INFO   line 17   Opening new session to http://127.0.0.1:2751\n2014-04-03 21:24:37,563 INFO   line 171  Starting new HTTP connection (1): 127.0.0.1\n2014-04-03 21:24:37,749 INFO   line 63   Opening dictionary file dictionary.txt for reading\n2014-04-03 21:24:37,749 INFO   line 72   Opening output file found.txt for writing\n2014-04-03 21:24:37,750 INFO   line 75   dictionary word, received bitcoins, wallet address, private address, current balance\n2014-04-03 21:24:38,490 INFO   line 101  a,0.01000000,1HUBHMij46Hae75JPdWjeZ5Q7KaL7EFRSD,ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb,0.00000000\n```\n\n#Insight example\n```\npython bbb.py -t insight -d dictionary.txt -o found.txt\n2014-09-11 20:34:17,863 INFO   line 62   Opening session for insight\n2014-09-11 20:34:17,863 INFO   line 20   Opening new session to https://insight.bitpay.com\n2014-09-11 20:34:17,876 INFO   line 696  Starting new HTTPS connection (1): insight.bitpay.com\n2014-09-11 20:34:18,419 INFO   line 67   Opening dictionary file dictionary.txt and validating encoding is utf-8\n2014-09-11 20:34:18,419 INFO   line 78   Opening dictionary file dictionary.txt for reading\n2014-09-11 20:34:18,419 INFO   line 81   Opening file with encoding utf-8\n2014-09-11 20:34:18,419 INFO   line 90   Opening output file found4.txt for writing\n2014-09-11 20:34:18,419 INFO   line 93   dictionary word, received bitcoins, wallet address, private address, current balance\n2014-09-11 20:34:22,654 INFO   line 153  Found used brainwallet: a,0.01000000,1HUBHMij46Hae75JPdWjeZ5Q7KaL7EFRSD,ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb,0.00000000\n\n```\n\n#Private key dictionary example\n    This is also known as secret exponent, mixed hex and wif format.\n```\npython bbb.py -d keys.txt -t insight -o found.txt -k\n2014-09-16 12:13:55,301 INFO   line 64   Opening session for insight\n2014-09-16 12:13:55,301 INFO   line 20   Opening new session to https://insight.bitpay.com\n2014-09-16 12:13:55,338 INFO   line 696  Starting new HTTPS connection (1): insight.bitpay.com\n2014-09-16 12:14:09,152 INFO   line 69   Opening dictionary file keys.txt and validating encoding is utf-8\n2014-09-16 12:14:09,153 INFO   line 80   Opening dictionary file keys.txt for reading\n2014-09-16 12:14:09,154 INFO   line 83   Opening file with encoding utf-8\n2014-09-16 12:14:09,155 INFO   line 92   Opening output file found.txt for writing\n2014-09-16 12:14:09,155 INFO   line 95   dictionary word, received bitcoins, wallet address, private address, current balance\n2014-09-16 12:14:23,951 INFO   line 155  Found used wallet: 6d88fd5f906a89858aca2a963d82d6e36cdf409871a88f6e79749ba21f021421,0.00005460,18XHQxYKXeXdiJzi5Z5XTojzeY3xHAoLCA,6d88fd5f906a89858aca2a963d82d6e36cdf409871a88f6e79749ba21f021421,0.00000000\n```\n\n#Blockchain.info example\n    Note: there is a 10 second wait between API calls to respect blockchain.info limits.\n```\npython bbb.py -t blockchaininfo -d dictionary.txt -o found.txt\n2014-04-03 21:38:48,893 INFO   line 100  Note there is a 10 second wait between each API call to respect posted limits\n2014-04-03 21:38:48,893 INFO   line 59   Opening session for blockchaininfo\n2014-04-03 21:38:48,893 INFO   line 18   Opening new session to http://blockchain.info\n2014-04-03 21:38:48,903 INFO   line 171  Starting new HTTP connection (1): blockchain.info\n2014-04-03 21:38:49,672 INFO   line 63   Opening dictionary file dictionary.txt for reading\n2014-04-03 21:38:49,673 INFO   line 72   Opening output file found.txt for writing\n2014-04-03 21:38:49,673 INFO   line 75   dictionary word, received bitcoins, wallet address, private address, current balance\n2014-04-03 21:40:02,313 INFO   line 101  a,0.01000000,1HUBHMij46Hae75JPdWjeZ5Q7KaL7EFRSD,ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb,0.00000000\n```\n\n```\n"
 },
 {
  "repo": "arthurgervais/Bitcoin-Simulator",
  "language": "C++",
  "readme_contents": "# Bitcoin-Simulator, capable of simulating any re-parametrization of Bitcoin\nBitcoin Simulator is built on ns3, the popular discrete-event simulator. We also made use of rapidjson to facilitate the communication process among the nodes. The purpose of this project is to study how consensus parameteres, network characteristics and protocol modifications affect the scalability, security and efficiency of Proof of Work powered blockchains.\n\nOur goal is to make the simulator as realistic as possible. So, we collected real network statistics and incorporated them in the simulator. Specifically, we crawled popular explorers, like blockchain.info to estimate the block generation and block size distribution, and used the bitcoin crawler to find out the average number of nodes in the network and their geographic distribution. Futhermore, we used the data provided by coinscope regarding the connectivity of nodes.\n\nWe provide you with a detailed [installation guide](http://arthurgervais.github.io/Bitcoin-Simulator/Installation.html), containing a [video tutorial](http://arthurgervais.github.io/Bitcoin-Simulator/Installation.html), to help you get started. You can also check our [experimental results](http://arthurgervais.github.io/Bitcoin-Simulator/results.html) and our code. Feel free to contact us or any questions you may have.\n\n# Crafted through Research\n\nThe Bitcoin-Simulator was developed as part of the following publication in CCS'16: \n\n[On the Security and Performance of Proof of Work Blockchains](https://eprint.iacr.org/2016/555.pdf)\n\n```latex\n@inproceedings{gervais2016security,\n  title={On the Security and Performance of Proof of Work Blockchains},\n  author={Gervais, Arthur and Karame, Ghassan and W\u00fcst, Karl and Glykantzis, Vasileios and Ritzdorf, Hubert and Capkun, Srdjan},\n  booktitle={Proceedings of the 23nd ACM SIGSAC Conference on Computer and Communication Security (CCS)},\n  year={2016},\n  organization={ACM}\n}\n```\n"
 },
 {
  "repo": "lucasjones/cpuminer-multi",
  "language": "C",
  "readme_contents": "CPUMiner-Multi\n==============\n\n[![Build Status](https://travis-ci.org/lucasjones/cpuminer-multi.svg?branch=master)](https://travis-ci.org/lucasjones/cpuminer-multi)\n\nThis is a multi-threaded CPU miner,\nfork of [pooler](//github.com/pooler)'s cpuminer (see AUTHORS for list of contributors).\n\n#### Table of contents\n\n* [Algorithms](#algorithms)\n* [Dependencies](#dependencies)\n* [Download](#download)\n* [Build](#build)\n* [Usage instructions](#usage-instructions)\n* [Donations](#donations)\n* [Credits](#credits)\n* [License](#license)\n\nAlgorithms\n==========\n#### Currently supported\n * \u2713 __scrypt__ (Litecoin, Dogecoin, Feathercoin, etc..)\n * \u2713 __scrypt:N__ (Vertcoin [VTC])\n * \u2713 __sha256d__ (Bitcoin, Freicoin, Peercoin/PPCoin, Terracoin, etc..)\n * \u2713 __x11__ (Darkcoin [DRK], Hirocoin, Limecoin)\n * \u2713 __x13__ (Sherlockcoin, [ACE], [B2B], [GRC], [XHC], etc..)\n * \u2713 __x14__ (X14, Webcoin [WEB])\n * \u2713 __x15__ (RadianceCoin [RCE])\n * \u2713 __cryptonight__ (Bytecoin [BCN], Monero)\n * \u2713 __fresh__ (FreshCoin)\n\n#### Implemented, but untested\n * ? keccak (Maxcoin  HelixCoin, CryptoMeth, Galleon, 365coin, Slothcoin, BitcointalkCoin)\n * ? hefty1 (Heavycoin)\n * ? quark (Quarkcoin)\n * ? skein (Skeincoin, Myriadcoin)\n * ? shavite3 (INKcoin)\n * ? blake (Blakecoin)\n\n#### Planned support for\n * *scrypt-jane* (YaCoin, CopperBars, Pennies, Tickets, etc..)\n * *qubit* (Qubitcoin, Myriadcoin)\n * *groestl* (Groestlcoin)\n\nDependencies\n============\n* libcurl\t\t\thttp://curl.haxx.se/libcurl/\n* jansson\t\t\thttp://www.digip.org/jansson/ (jansson is included in-tree)\n* openssl           https://www.openssl.org/\n\nDownload\n========\n* Binary releases: https://github.com/LucasJones/cpuminer-multi/releases\n* Git tree:   https://github.com/LucasJones/cpuminer-multi\n  * Clone with `git clone https://github.com/LucasJones/cpuminer-multi`\n\nBuild\n=====\n\n#### Basic *nix build instructions:\n * ./autogen.sh\t# only needed if building from git repo\n * ./nomacro.pl\t# only needed if building on Mac OS X or with Clang\n * ./configure CFLAGS=\"*-march=native*\"\n   * # Use -march=native if building for a single machine\n * make\n\n#### Notes for AIX users:\n * To build a 64-bit binary, export OBJECT_MODE=64\n * GNU-style long options are not supported, but are accessible via configuration file\n\n#### Basic Windows build instructions, using MinGW:\n * Install MinGW and the MSYS Developer Tool Kit (http://www.mingw.org/)\n   * Make sure you have mstcpip.h in MinGW\\include\n * If using MinGW-w64, install pthreads-w64\n * Install libcurl devel (http://curl.haxx.se/download.html)\n   * Make sure you have libcurl.m4 in MinGW\\share\\aclocal\n   * Make sure you have curl-config in MinGW\\bin\n * Install openssl devel (https://www.openssl.org/related/binaries.html)\n * In the MSYS shell, run:\n   * ./autogen.sh\t# only needed if building from git repo\n   * LIBCURL=\"-lcurldll\" ./configure CFLAGS=\"*-march=native*\"\n     * # Use -march=native if building for a single machine\n   * make\n\n#### Architecture-specific notes:\n * ARM:\n   * No runtime CPU detection. The miner can take advantage of some instructions specific to ARMv5E and later processors, but the decision whether to use them is made at compile time, based on compiler-defined macros.\n   * To use NEON instructions, add \"-mfpu=neon\" to CFLAGS.\n * x86:\n   * The miner checks for SSE2 instructions support at runtime, and uses them if they are available.\n * x86-64:\t\n   * The miner can take advantage of AVX, AVX2 and XOP instructions, but only if both the CPU and the operating system support them.\n     * Linux supports AVX starting from kernel version 2.6.30.\n     * FreeBSD supports AVX starting with 9.1-RELEASE.\n     * Mac OS X added AVX support in the 10.6.8 update.\n     * Windows supports AVX starting from Windows 7 SP1 and Windows Server 2008 R2 SP1.\n   * The configure script outputs a warning if the assembler doesn't support some instruction sets. In that case, the miner can still be built, but unavailable optimizations are left off.\n\nUsage instructions\n==================\nRun \"minerd --help\" to see options.\n\n### Connecting through a proxy\n\nUse the --proxy option.\n\nTo use a SOCKS proxy, add a socks4:// or socks5:// prefix to the proxy host  \nProtocols socks4a and socks5h, allowing remote name resolving, are also available since libcurl 7.18.0.\n\nIf no protocol is specified, the proxy is assumed to be a HTTP proxy.  \nWhen the --proxy option is not used, the program honors the http_proxy and all_proxy environment variables.\n\nDonations\n=========\nDonations for the work done in this fork are accepted at\n* MRO: `472haywQKoxFzf7asaQ4XKBc2foAY4ezk8HiN63ifW4iAbJiLnfmJfhHSR9XmVKw2WYPnszJV9MEHj9Z5WMK9VCNHaGLDmJ`\n* BTC: `139QWoktddChHsZMWZFxmBva4FM96X2dhE`\n\nCredits\n=======\nCPUMiner-multi was forked from pooler's CPUMiner, and has been developed by Lucas Jones.\n* [tpruvot](https://github.com/tpruvot) added some features and recent SHA3 based algorythmns\n* [Wolf9466](https://github.com/wolf9466) helped with Intel AES-NI support for CryptoNight\n\nLicense\n=======\nGPLv2.  See COPYING for details.\n"
 },
 {
  "repo": "jb55/node-bitcoin",
  "language": "JavaScript",
  "readme_contents": "# node-bitcoin\n[![travis][travis-image]][travis-url]\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n[![js-standard-style][standard-image]][standard-url]\n\n[travis-image]: https://travis-ci.org/freewil/node-bitcoin.svg?branch=master\n[travis-url]: https://travis-ci.org/freewil/node-bitcoin\n\n[npm-image]: https://img.shields.io/npm/v/bitcoin.svg?style=flat\n[npm-url]: https://npmjs.org/package/bitcoin\n\n[downloads-image]: https://img.shields.io/npm/dm/bitcoin.svg?style=flat\n[downloads-url]: https://npmjs.org/package/bitcoin\n\n[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat\n[standard-url]: http://standardjs.com\n\nnode-bitcoin is a simple wrapper for the Bitcoin client's JSON-RPC API.\n\nThe API is equivalent to the API document [here](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list).\nThe methods are exposed as lower camelcase methods on the `bitcoin.Client`\nobject, or you may call the API directly using the `cmd` method.\n\n## Install\n\n`npm install bitcoin`\n\n## Examples\n\n### Create client\n```js\n// all config options are optional\nvar client = new bitcoin.Client({\n  host: 'localhost',\n  port: 8332,\n  user: 'username',\n  pass: 'password',\n  wallet: 'walletname',\n  timeout: 30000\n});\n```\n\n### Get balance across all accounts with minimum confirmations of 6\n\n```js\nclient.getBalance('*', 6, function(err, balance, resHeaders) {\n  if (err) return console.log(err);\n  console.log('Balance:', balance);\n});\n```\n### Getting the balance directly using `cmd`\n\n```js\nclient.cmd('getbalance', '*', 6, function(err, balance, resHeaders){\n  if (err) return console.log(err);\n  console.log('Balance:', balance);\n});\n```\n\n### Batch multiple RPC calls into single HTTP request\n\n```js\nvar batch = [];\nfor (var i = 0; i < 10; ++i) {\n  batch.push({\n    method: 'getnewaddress',\n    params: ['myaccount']\n  });\n}\nclient.cmd(batch, function(err, address, resHeaders) {\n  if (err) return console.log(err);\n  console.log('Address:', address);\n});\n```\n\n## SSL\nSee [Enabling SSL on original client](https://en.bitcoin.it/wiki/Enabling_SSL_on_original_client_daemon).\n\nIf you're using this to connect to bitcoind across a network it is highly\nrecommended to enable `ssl`, otherwise an attacker may intercept your RPC credentials\nresulting in theft of your bitcoins.\n\nWhen enabling `ssl` by setting the configuration option to `true`, the `sslStrict`\noption (verifies the server certificate) will also be enabled by default. It is\nhighly recommended to specify the `sslCa` as well, even if your bitcoind has\na certificate signed by an actual CA, to ensure you are connecting\nto your own bitcoind.\n\n```js\nvar client = new bitcoin.Client({\n  host: 'localhost',\n  port: 8332,\n  user: 'username',\n  pass: 'password',\n  ssl: true,\n  sslStrict: true,\n  sslCa: fs.readFileSync(__dirname + '/myca.cert')\n});\n```\n"
 },
 {
  "repo": "Bit-Wasp/BitWasp",
  "language": "PHP",
  "readme_contents": "BitWasp\n===\n\n```\nFacebook page: https://facebook.com/BitWasp\n```\n\nBitWasp is an open source PHP project which allows anyone to set up a secure bitcoin marketplace independent of other centralized services.\n\nIt features multi-signature transactions, meaning no live wallet to steal. Users can also recover their funds from the site if it goes offline.\n\nBitWasp is not production ready\n===\n\n"
 },
 {
  "repo": "Destiner/blocksmith",
  "language": "Python",
  "readme_contents": "# blocksmith\r\nThe goal of this library is to generate private keys and create Bitcoin and Ethereum wallet addresses from them.\r\n\r\n```\r\npip install blocksmith\r\n```\r\n\r\n## Usage\r\n\r\n### Generate a private key\r\n```python\r\nimport blocksmith\r\n\r\nkg = blocksmith.KeyGenerator()\r\nkg.seed_input('Truly random string. I rolled a dice and got 4.')\r\nkey = kg.generate_key()\r\nprint(key)\r\n# 7077da4a47f6c85a21fe6c6cf1285c0fa06915871744ab1e5a5b741027884d00\r\n\r\n```\r\n\r\n### Create Bitcoin wallet from a private key\r\n```python\r\nimport blocksmith\r\n\r\nkey = '7077da4a47f6c85a21fe6c6cf1285c0fa06915871744ab1e5a5b741027884d00'\r\n\r\naddress = blocksmith.BitcoinWallet.generate_address(key)\r\nprint(address)\r\n# 1JUP2bjfVexDif2m5fgyjHFrV9FE494REN\r\n\r\n```\r\n\r\n### Create Ethereum wallet from a private key\r\n```python\r\nimport blocksmith\r\n\r\nkey = '7077da4a47f6c85a21fe6c6cf1285c0fa06915871744ab1e5a5b741027884d00'\r\n\r\naddress = blocksmith.EthereumWallet.generate_address(key)\r\nprint(address)\r\n# 0x1269645a46a3e86c1a3c3de8447092d90f6f04ed\r\n\r\nchecksum_address = blocksmith.EthereumWallet.checksum_address(address)\r\nprint(checksum_address)\r\n# 0x1269645a46A3e86c1a3C3De8447092D90f6F04ED\r\n\r\n```\r\n"
 },
 {
  "repo": "cpacia/BitcoinCash-Wallet",
  "language": "Go",
  "readme_contents": "# Bitcoin Cash Wallet\n\n<img src=\"https://bitcoin.tax/blog/content/images/2017/08/bitcoincash.png\">\n\nThis is a fork of https://github.com/OpenBazaar/spvwallet modfied for Bitcoin Cash. It includes a fully functional GUI wallet and CLI.\n\nIt uses stock btcd plus a few cash specific modifications found in the [bchutil](https://github.com/cpacia/bchutil) package.\n\nTo compile and run:\n```bash\ngo get github.com/cpacia/BitcoinCash-Wallet\nmake install\nbitcoincash\n```\nOr download a pre-compiled version from [releases](https://github.com/cpacia/BitcoinCash-Wallet/releases).\n"
 },
 {
  "repo": "Polve/bitcoin-rpc-client",
  "language": "Java",
  "readme_contents": "bitcoin-rpc-client\n==================\n\nThis is a lightweight java bitcoind JSON-RPC client binding. It does not require any external dependencies.\n\nMaven\n=====\nThe package is published in the wf.bitcoin group and you can add it to you pom.xml adding a section like this:\n\n```\n<dependency>\n    <groupId>wf.bitcoin</groupId>\n    <artifactId>bitcoin-rpc-client</artifactId>\n    <version>1.1.0</version>\n</dependency>\n```\n\n\nConfiguration\n=====\nIn order to know what RPC API to use, the library will look in the bitcoind configuration file (`<user home>/.bitcoin/bitcoin.conf`) and read the relevant configs:\n- rpcconnect\n- rpcport\n\nHere is a sample bitcoin.conf that will setup bitcoind to run in regtest mode and in a way compatible with this library:\n\n```\n# Maintain full transaction index, used in lookups by the getrawtransaction call\ntxindex=1\n\n# Run bitcoind in regtest mode\nregtest=1\n\n# Accept command line and JSON-RPC commands\nserver=1\n\n# Tells bitcoind that the RPC API settings on the following lines apply to the regtest RPC API\n[regtest]\n\n# RPC API settings\nrpcconnect=localhost\nrpcport=9997\n```\n\nNote that the configuration does not contain any API credentials. The authentication is done via a temporary token stored in a cookie file by bitcoind (see [details](https://bitcoin.org/en/release/v0.12.0#rpc-random-cookie-rpc-authentication)). The approach of using rpcuser and rpcpassword is still supported, even though bitcoind considers it legacy."
 },
 {
  "repo": "jamesob/tinychain",
  "language": "Python",
  "readme_contents": "# \u26fc  tinychain\n\n*Putting the rough in \"[rough consensus](https://tools.ietf.org/html/rfc7282#section-1)\"*\n\n\nTinychain is a pocket-sized implementation of Bitcoin. Its goal is to\nbe a compact, understandable, working incarnation of \n[the Nakamoto consensus algorithm](https://bitcoin.org/bitcoin.pdf) at the\nexpense of advanced functionality, speed, and any real usefulness.\n\nI wrote it primarily to understand Bitcoin better, but hopefully it can serve as\na jumping-off point for programmers who are interested in (but don't have\nintimate familiarity with) Bitcoin or cryptocurrency. At the very least, it can\nbe a pi\u00f1ata for protocol developers who actually know what they're doing.\n\n```\n $ cloc --quiet tinychain.py\n\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                           1            341            174            679\n-------------------------------------------------------------------------------\n```\n\n## Quick start\n\n- [Install Docker & docker-compose](https://www.docker.com/community-edition#/download)\n- Clone this repo: `git clone git@github.com:jamesob/tinychain.git`\n- Make sure you're in a Python3.6 environment: `virtualenv --python=python3.6 venv && . venv/bin/activate`\n- Grab Python dependencies locally: `pip install -r requirements.txt`\n- Run `docker-compose up`. This will spawn two tinychain nodes.\n- In another window, run `./bin/sync_wallets`. This brings the wallet data\n  from the Docker containers onto your host.\n    ```\n    $ ./bin/sync_wallets\n\n    Synced node1's wallet:\n    [2017-08-05 12:59:34,423][tinychain:1075] INFO your address is 1898KEjkziq9uRCzaVUUoBwzhURt4nrbP8\n     0.0 \u26fc\n\n    Synced node2's wallet:\n    [2017-08-05 12:59:35,876][tinychain:1075] INFO your address is 15YxFVo4EuqvDJH8ey2bY352MVRVpH1yFD\n    0.0 \u26fc\n    ```\n- Try running `./client.py balance -w wallet1.dat`; try it with the other\n  wallet file.\n    ```\n    $ ./client.py balance -w wallet2.dat\n\n    [2017-08-05 13:00:37,317][tinychain:1075] INFO your address is 15YxFVo4EuqvDJH8ey2bY352MVRVpH1yFD\n    0.0 \u26fc\n    ```\n- Once you see a few blocks go by, try sending some money between the wallets\n    ```\n    $ ./client.py send -w wallet2.dat 1898KEjkziq9uRCzaVUUoBwzhURt4nrbP8 1337\n    \n    [2017-08-05 13:08:08,251][tinychain:1077] INFO your address is 1Q2fBbg8XnnPiv1UHe44f2x9vf54YKXh7C\n    [2017-08-05 13:08:08,361][client:105] INFO built txn Transaction(...)\n    [2017-08-05 13:08:08,362][client:106] INFO broadcasting txn 2aa89204456207384851a4bbf8bde155eca7fcf30b833495d5b0541f84931919\n    ```\n- Check on the status of the transaction\n    ```\n     $ ./client.py status e8f63eeeca32f9df28a3a62a366f63e8595cf70efb94710d43626ff4c0918a8a\n\n     [2017-08-05 13:09:21,489][tinychain:1077] INFO your address is 1898KEjkziq9uRCzaVUUoBwzhURt4nrbP8\n     Mined in 0000000726752f82af3d0f271fd61337035256051a9a1e5881e82d93d8e42d66 at height 5\n    ```\n\n\n## What is Bitcoin?\n\nIn brief terms that map to this code...\n\nBitcoin is a way of generating pseudo-anonymous, decentralized trust at the cost\nof electricity. The most commonly known (but not sole) application of this is as\na currency or store of value. If that sounds abstruse, general, and mindblowing,\nthat's because it is.\n\nIn Bitcoin, value is recorded using a `Transaction`, which assigns some\nnumber of coins to an identity (via `TxOut`s) given some cryptographically\nunlocked `TxIn`s.  TxIns must always refer to previously created but unspent\nTxOuts.\n\nA Transaction is written into history by being included in a `Block`. Each Block\ncontains a data structure called a [Merkle\nTree](https://en.wikipedia.org/wiki/Merkle_tree) which generates a fingerprint\nunique to the set of Transactions being included. The root of that Merkle tree\nis included in the block \"header\" and hashed (`Block.id`) to permanently seal\nthe existence and inclusion of each Transaction in the block.\n\nBlocks are linked together in a chain (`active_chain`) by referring to the\nprevious Block header hash. In order to add a Block to the chain, the contents\nof its header must hash to a number under some difficulty target, which is set\nbased upon how quickly recent blocks have been discovered\n(`get_next_work_required()`). This attempts to\nnormalize the time between block discovery.\n\nWhen a block is discovered, it creates a subsidy for the discoverer in the form\nof newly minted coins. The discoverer also collects fees from transactions\nincluded in the block, which are the value of inputs minus outputs. The block\nreward subsidy decreases logarithmically over time. Eventually the subsidy \ngoes to zero and miners are incentivized to continue mining purely by a fee\nmarket.\n\nNodes in the network are in a never-ending competition to mine and propagate the\nnext block, and in doing so facilitate the recording of transaction history.\nTransactions are submitted to nodes and broadcast across the network, stored\ntemporarily in `mempool` where they are queued for block inclusion.\n\nFor more comprehensive descriptions of Bitcoin, see\n\n- [Bitcoin: A Peer-to-Peer Electronic Cash System](https://bitcoin.org/bitcoin.pdf) \n  by Satoshi Nakamoto\n- [Mastering Bitcoin](https://github.com/bitcoinbook/bitcoinbook/) by Andreas\n  Antonopoulos\n- [The Bitcoin Developer Guide](https://bitcoin.org/en/developer-guide)\n \n\n  \n## Notable differences from Bitcoin\n \n- Byte-level representation and endianness are very important when serializing a\n  data structure to be hashed in Bitcoin and are not reproduced\n  faithfully here. In fact, serialization of any kind here is very dumbed down\n  and based entirely on raw strings or JSON.\n\n- Transaction types are limited to pay-to-public-key-hash (P2PKH), which\n  facilitate the bare minimum of \"sending money.\" More exotic\n  [transaction\n  types](https://bitcoin.org/en/developer-guide#standard-transactions) which \n  allow m-of-n key signatures and\n  [Script](https://en.bitcoin.it/wiki/Script)-based unlocking are not\n  implemented.\n\n- [Initial Block Download](https://bitcoin.org/en/developer-guide#initial-block-download) \n  is at best a simplified version of the old \"blocks-first\" scheme. It eschews \n  `getdata` and instead returns block payloads directly in `inv`.\n\n- The longest, valid chain is determined simply by chain length (number of\n  blocks) vs. [chainwork](https://bitcoin.stackexchange.com/questions/26869/what-is-chainwork).\n\n- Peer \"discovery\" is done through environment variable hardcoding. In\n  bitcoin core, this is done [with DNS seeds](https://en.bitcoin.it/wiki/Transaction_replacement).\n\n- [Replace by fee](https://en.bitcoin.it/wiki/Transaction_replacement) is absent.\n\n- Memory usage is egregious. Networking is a hack.\n\n- Satoshis are instead called Belushis because, well...\n\n<img align=\"right\" width=110 src=\"http://static.rogerebert.com/uploads/blog_post/primary_image/interviews/why-john-belushi-died/primary_EB19840307PEOPLE70926001AR.jpg\">\n\n \n\n## Q&A\n\n### How does RPC work?\n\nWe use JSON for over-the-wire serialization. It's slow and unrealistic but\nhuman-readable and easy. We deserialize right into the `.*Msg` classes, \neach of which dictates how a particular RPC message is handled via \n`.handle()`.\n\n### Why doesn't the client track coins we've spent but haven't confirmed yet?\n\nYeah I know, the client sucks. I'll take a PR.\n\n### How can I add another RPC command to reveal more data from a node?\n\nJust add a `NamedTuple` subclass with a `handle()` method defined; it registers\nautomatically. Mimic any existing `*Msg` class.\n\n \n### Why aren't my changes changing anything?\n\nRemember to rebuild the Docker container image when you make changes\n```\ndocker-compose build && docker-compose up\n```\n\n### How do I run automated tests?\n\n```\npip install -r requirements.test.txt\npy.test --cov test_tinychain.py\n```\n\n\n### Is this yet another cryptocurrency created solely to Get Rich Quick\u2122?\n\nA resounding Yes! (if you're dealing in the very illiquid currency of \neducation)\n\nOtherwise nah. This thing has 0 real-world value.\n\n\n### What's with the logo?\n\nIt's a shitty unicode Merkle tree. Give a guy a break here, this is freeware!\n\n### Where can I get more of you ranting?\n\n[@jamesob](https://twitter.com/jamesob)\n"
 },
 {
  "repo": "terryjiao/BitcoinWallet",
  "language": "Java",
  "readme_contents": "# Ethereum Wallet\n\nGenerating ETH key pairs and address from mnemonic.\n\n\n----------\n\n\n### 1. From entropy to mnemonic\n\n#### 1. Generating 128 digits random entropy\n```java\nUUID uuid = UUID.randomUUID();\nString[] digits = uuid.toString().split(\"\\\\-\");\nStringBuilder randomDigits = new StringBuilder();\nfor (String digit : digits) {\n    randomDigits.append(digit);\n}\n```\n\n#### 2. Doing SHA256 to entropy for checksum, append first 4 bits to the end of entropy\n```java\n//generate sha-256 from entropy\nString encodeStr = \"\";\nbyte[] hash = Sha256.sha256(hexStringToByteArray(entropy));\nencodeStr = String.valueOf(Hex.encodeHex(hash));\nSystem.out.println(encodeStr);\nchar firstSHA = encodeStr.charAt(0);\nString new_entropy = entropy + firstSHA;\nString bin_entropy = \"\";\nfor (int i = 0; i < new_entropy.length(); i++) {\n    bin_entropy += dict[Integer.parseInt(new_entropy.substring(i, i + 1), 16)];\n}\n```\n#### 3. Segment 132 bits entropy into 11 bits long parts\n```java\nString[] segments = new String[12];\nfor (int i = 0; i <= 11; i++) {\n    segments[i] = bin_entropy.substring(i * 11, (i + 1) * 11);\n}\n```\n#### 4. Generating mnemonic from dictionary\n```java\nmnemonic += wordlist[Integer.valueOf(segments[0], 2)];\nfor (int j = 1; j < segments.length; j++) {\n    mnemonic += \" \" + (wordlist[Integer.valueOf(segments[j], 2)]);\n}\n```\n![enter image description here](https://upload-images.jianshu.io/upload_images/10931084-93b10c15c7277420.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n\n----------\n\n\n### 2. From mnemonic to seed\n\nUsing PBKDF2 function to get 512 bits seed from mnemonic.\nIn this part we need a salt string to generate the seed we needed. Normally the value of salt is \"mnemonic\" for universality\n\n```java\nString seed;\nString salt = \"mnemonic\";\nseed = getSeed(mnemonic, salt);\n```\n![enter image description here](https://upload-images.jianshu.io/upload_images/10931084-eb8d30c6fc836a5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n\n----------\n\n\n###3. From seed to master private key\n\nDivide 512 bits seed into two equal parts, the first 256 bits is master private key and the last 256 bits is chain code. We could use BIP32 library to do the jobs by APIs this library provided.\n\n```java\nExtendedPrivateKey rootKey = ExtendedPrivateKey.fromSeed(hexStringToByteArray(seed), Bitcoin.MAIN_NET);\n```\n![enter image description here](https://upload-images.jianshu.io/upload_images/10931084-177ace609e88a5a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n----------\n###4. From master private key to child private key\nFirstly, generate address index to get 0th private key generated from master private key and chain code.\n```java\nAddressIndex ethAddressIndex = BIP44.m().purpose44().coinType(60).account(0).external().address(0);\n```\n44.60.0.0.0 is eth address index.\n\nAnd then get key pair and address that we need.\n```java\nExtendedPrivateKey childPrivateKey = rootKey.derive(ethAddressIndex, AddressIndex.DERIVATION);\nbyte[] privateKeyBytes = childPrivateKey.getKey(); \nECKeyPair keyPair = ECKeyPair.create(privateKeyBytes);\nList<String> returnList = EthAddress(childPrivateKey, keyPair);\n```\n\n![enter image description here](https://upload-images.jianshu.io/upload_images/10931084-dfd91a5ee94953e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n"
 },
 {
  "repo": "blockchain/thunder",
  "language": "Java",
  "readme_contents": "# thundernetwork\n\n[![Build Status](https://travis-ci.org/blockchain/thunder.svg?branch=master)](https://travis-ci.org/blockchain/thunder)\n![Wallet Screenshot](docs/screenshot.png)\nWallet / Node implementation of the [lightning.network](http://lightning.network/) P2P protocol. The lightning.network enables Off-Chain Bitcoin Payment Channels using smart contracts.\n\nThis is software in alpha status, don't even think about using it in production with real bitcoin. Current release is meant for testing, review, and building real world experience with the general technology. \n\nTo learn more, visit www.blockchain.com/thunder \n\n## Feature List\n- [X] Encryption\n- [X] Authentication\n- [X] Channel Opening Process\n- [X] Payment Debate\n- [X] Relaying Payment\n- [X] Settling Payment\n- [X] Peer Seeding\n- [X] Providing new Peers with Topology\n- [X] Basic Gossip Protocol\n- [X] Interface for Connecting into Wallet Software\n- [X] Basic Blockchain Watching Capability\n- [X] Closing a Channel\n- [ ] Hardening against various DDoS attacks\n- [ ] Backing Database Implementation (currently only in memory)\n- [ ] Restoring state after restart - cheking old TX for cheating\n- [ ] Claiming funds after counterparty cheated\n\n\n## Building\n\n### Prerequisites\n\nYou need\n```\nJDK 1.8+\nMaven\n```\nto build both the node and the wallet software.\n\n### Installation\n\nInstall Java 8 JDK (Unix machines: and OpenJFX) before proceeding.\n\nExecuting\n```\n./build.sh\n```\nwill run the tests and create the executables.\n\n### Running\n\nNode software and Wallet software are completely independent projects. Nodes are generally passive participants of the network that only relay payments, whereas the Wallet software is only used to make and receive payments.\n\n#### Node\n\nRunning\n```\njava -jar thunder-node.jar\n```\n\nwill start up an autonomous node that will connect to the thunder.network and build channels with other random nodes. On first startup it will ask the user for some basic configuration. Afterwards it will write this configuration to disk for the next start. To be an active part of the network, please configure your firewall to allow incoming connections on port 2204. You can change the default port in the config file.\n\n#### Wallet\n\nRunning\n```\njava -jar thunder-wallet.jar\n```\nwill start up the wallet. It will ask for known nodes and get a topology of the network. The user can then chose a node to form a channel with and make and receive payments.\n\n\n## Architecture\n\nthunder.network uses netty as the underlying networking library. There are several layers for encryption, establishing a channel and making payments.\n\nAdditional features will generally live inside their own layer, decoupled from the other layers.\n\n### Outlook\n\nthunder.network uses a commitment-transaction design that needs both [CSV](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki) and [Segregated Witness](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki) to be completed. Otherwise the payments are not enforceable on the blockchain and are bad promises at best.\n\n\n### Dual-TX Approach\n\nthunder.network implements a commit-transaction design where each payment pays to a 2-of-2 multisig + R || TIMEOUT first. Both parties then create an additional revocable transaction paying to the correct receiver. While this adds additional complexity and makes on-chain resolution more expensive, it allows for decoupling the revocation delay from the refund timespan, which otherwise would not be possible.\n\nIn the diagram below, A is receiving a payment from B. If he wants to accept the payment, he has to produce R within 5 days, otherwise the payment is not enforceable. Regardless of that, B can always claim even that payment for another 30d if A cheated and broadcasted a revoked transaction.\n\n![Dual TX Commitment Design](docs/dual-tx-diagram.png)\n\n### Routing\n\nCurrently we are using a completely source-oriented onion-encrypted routing algorithm. This means that the receiver gives his public key and the sender creates the complete route to the receiver (_source-oriented_). To make this reliable, each `ChannelPubkeyObject` and other topology data has to be broadcast and gossiped through the network. This can be problematic in case of bad network conditions, where the `ChannelPubkeyObject` of a new node might now propagate to the sender. In this case the sender is not able to find a route and therefore the payment fails.\n\nIt is therefore an open TODO to allow for Rendezvous-Point routing (_RP_). In _RP_-Routing the sender will send the public key of a nearby node and the encrypted route from this node to himself. This will make addresses much longer (as they now contain an encrypted route), but will greatly improve privacy (the sender does not know the final receiver) and reliability of path finding (nodes have a much higher probability to be in the senders topology than the receiver's wallet).\n\nFurthermore all routes are onion-encrypted, meaning that for each node in the route we will add one layer encrypting all subsequent layers. When decrypting, each node is only able to read the next node it should pass the payment to. Doing so makes disincentivizing wrong behaviour more difficult later on, but makes active analysis of payments less feasible.\n\n### Anchor\n\nPayment channels are using a 2-of-2 multisig transaction as an anchor. They do so by handing back and forth an unsigned transaction, such that they both can add in- and outputs to fund the channel. They then create the first channel transaction without any included payments that also serves as a refund. Only after exchanging and checking the signatures for the channel transaction they exchange the signatures for the actual anchor and broadcast it to the network.\n\nFor this to work out, Segregated Witness is mandatory, as it is impossible to create the channel transaction without knowing the signatures of the parent transaction with plain transactions. Furthermore the risk of malleability means that one party can hold the other parties funds hostage.\n\n### Optimizations\n\nAs this is still a prototype, various optimizations are left open for now, as they would hinder active development. For example, JSON was chosen to serialize messages, as Gson allows for very prototype-friendly development, even though it increases message size 3-5 fold.\n\n\n## Contributing\n\nThere is always something to do!\nFeel free to look through the open Issues or look for TODOS in the code. They are well maintained and usually still open.\nIf you want to create a PR, it would be great if you could respect the code style convention of this project. It's easiest if you just use intelliJ and import the [code style settings](CodeStyle.jar) and follow [this tutorial](http://stackoverflow.com/a/5581992) to setup automatic reformatting on save.\n\n## Resources\n\n- [1] LN-Implementation by Rusty Russel, https://github.com/ElementsProject/lightning\n"
 },
 {
  "repo": "nbobtc/bitcoind-php",
  "language": "PHP",
  "readme_contents": "nbobtc/bitcoind-php [![Travis branch](https://img.shields.io/travis/nbobtc/bitcoind-php/2.x.svg)](https://travis-ci.org/nbobtc/bitcoind-php) [![Packagist](https://img.shields.io/packagist/v/nbobtc/bitcoind-php.svg)](https://packagist.org/packages/nbobtc/bitcoind-php) [![Packagist Pre Release](https://img.shields.io/packagist/vpre/nbobtc/bitcoind-php.svg)](https://packagist.org/packages/nbobtc/bitcoind-php)\n===================\n\n[![Code Climate](https://img.shields.io/codeclimate/github/nbobtc/bitcoind-php.svg)](https://codeclimate.com/github/nbobtc/bitcoind-php) [![Code Climate](https://img.shields.io/codeclimate/coverage/github/nbobtc/bitcoind-php.svg)](https://codeclimate.com/github/nbobtc/bitcoind-php) [![SensioLabs Insight](https://img.shields.io/sensiolabs/i/c7af9182-f53b-4164-820d-46e7499252f3.svg)](https://insight.sensiolabs.com/projects/c7af9182-f53b-4164-820d-46e7499252f3)\n\nThis project is used to interact with a headless bitcoin program called\nbitcoind. It also contains various utility classes for working with Bitcoin as a\nPHP Developer.\n\n## Installation\n\nYou can install this library by using [Composer]. You can also view more info\nabout this on [Packagist].\n\n```bash\ncomposer require nbobtc/bitcoind-php\n```\n\n## Usage\n\nTo use the project you need to just create a new instance of the class.\n\n```php\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$command = new \\Nbobtc\\Command\\Command('getinfo');\n$client  = new \\Nbobtc\\Http\\Client('https://username:password@localhost:18332');\n\n/** @var \\Nbobtc\\Http\\Message\\Response */\n$response = $client->sendCommand($command);\n\n/** @var string */\n$contents = $response->getBody()->getContents();\necho $contents;\n\n\n```\n\nYou are able to get the [Request] and [Response] objects back from\nthe client with the correct getters: `getRequest()` and `getResponse()`.\n\nYou can also parse the response however you wish to do so since the result is\nreturned to you as a string. See below for some ideas!\n\n## Commands\n\nCommands are created in such a way that this will support any future updates the\n[Bitcoin API] by providing you with an easy class that sets all the required\ninformation.\n\nYou are able to pass into the object the `method` and the `parameters` that are\nrequired. Here are a few examples:\n\n```php\n// No Parameters\n$command = new Command('getinfo');\n\n// One Parameter\n$command = new Command('getblock', '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f');\n\n// Multiple Parameters\n$command = new Command('sendfrom', array('fromaccount', 'tobitcoinaddress', 'amount'));\n```\n\nThe second argument MUST be in the same order as on the [Bitcoin API] wiki page.\nThere is no need to assign the values any keys.\n\n### Parameters\n\nParameters are the second argument when creating a new Command. This argument\ncan either be a string OR an array. For example, both of these are valid.\n\n```php\n$command = new Command('getblock', array('000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f'));\n$command = new Command('getblock', '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f');\n```\n\nMost commands in the [Bitcoin API] take one parameter. If it takes MORE than\none, you must pass the parameters in as an array in the ORDER you find them on\nthat page.\n\n### Extending Commands\n\nIf, for any reason, you need to extend a command, it MUST implement\n[CommandInterface]. You can find documentation within the interface on how to\nimplement this.\n\n## Drivers\n\nDrivers are used by the ClientInterface for connecting to a bitcoind service and\nsending Requests. The return a Response. If you need to implement a new driver\ntake a look at the [DriverInterface].\n\n### cURL Driver\n\nThis is used by default and allows you a lot of options for customizing it to\nyour needs.\n\nYou can set various [cURL Options] by passing them into the function\n`addCurlOption($option, $value)`.\n\nHere's an example of how to configure and use the driver.\n\n```php\n$driver = new \\Nbobtc\\Http\\Driver\\CurlDriver();\n$driver\n    ->addCurlOption(CURLOPT_VERBOSE, true)\n    ->addCurlOption(CURLOPT_STDERR, '/var/logs/curl.err');\n\n$client = new \\Nbobtc\\Http\\Client('https://username:password@localhost:18332');\n$client->withDriver($driver);\n```\n\nFeel free to take a look at the `CurlDriver` source code.\n\n## Cookbook\n\n### How to enable a Keep-Alive ie Persistent Connection\n\nThis example shows how you are able to set the client up to [Persistent\nConnection].\n\n```php\n$client = new \\Nbobtc\\Http\\Client('https://username:password@localhost:18332');\n$client->getRequest()->withHeader('Connection', 'Keep-Alive');\n```\n\n### How to set a CA Cert\n\nThis library provides some wonderful flexibility that will allow you to\nconfigure the client to use your own CA Cert.\n\n```php\n$driver = new \\Nbobtc\\Http\\Driver\\CurlDriver();\n$driver->addCurlOption(CURLOPT_CAINFO, '/path/to/cert');\n\n$client = new \\Nbobtc\\Http\\Client('https://username:password@localhost:18332');\n$client->withDriver($driver);\n```\n\n### How to Convert Output to an Array\n\nSome like the arrays\n\n```php\n$response = $client->sendCommand($command);\n$output   = json_decode($response->getBody()->getContents(), true);\n```\n\n### How to Convert Output to a stdClass object\n\nSome like the objects\n\n```php\n$response = $client->sendCommand($command);\n$output   = json_decode($response->getBody()->getContents());\n```\n\n## Testing\n\nAll testing is done using PHPUnit. You should be able to run `phpunit` in the\nroot directory of this project (the directory where phpunit.xml.dist is located)\nand the tests will run.\n\nIf submitting a pull request or working on this library, please make sure that\nthe tests will pass.\n\n## Change log\n\nSee [CHANGELOG.md].\n\nContains information on releases such as what was added, changed, etc. It's good\nto look at to see what has changed from release to release.\n\n## Contributing\n\nSee [CONTRIBUTING.md].\n\nVarious ways on contributing to this project.\n\n## Branching\n\n### master\n\nThis is the latest and greatest, it should not be used an is considered\ndevelopment for testing new features and functionality. This should NOT be used\nin a production environment.\n\n### 2.x\n\nCurrent production branch. All 2.x tags come off of this branch.\n\n### 1.x\n\nDeprecated, only used for bug fixes and for historical records.\n\n## License (MIT) [![Packagist](https://img.shields.io/packagist/l/nbobtc/bitcoind-php.svg)](https://github.com/nbobtc/bitcoind-php/blob/2.x/LICENSE)\n\nCopyright (C) 2012-2018 Joshua Estes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[Composer]: https://getcomposer.org/\n[Packagist]: https://packagist.org/packages/nbobtc/bitcoind-php\n[CHANGELOG.md]: https://github.com/nbobtc/bitcoind-php/blob/2.x/CHANGELOG.md\n[CONTRIBUTING.md]: https://github.com/nbobtc/bitcoind-php/blob/2.x/CONTRIBUTING.md\n[Bitcoin API]: https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list\n[Persistent Connection]: http://en.wikipedia.org/wiki/HTTP_persistent_connection\n[cURL Options]: http://php.net/manual/en/function.curl-setopt.php\n[Releases]: https://github.com/nbobtc/bitcoind-php/releases\n[CommandInterface]: https://github.com/nbobtc/bitcoind-php/blob/2.x/src/Command/CommandInterface.php\n[Request]: https://github.com/nbobtc/bitcoind-php/blob/2.x/src/Http/Message/Request.php\n[Response]: https://github.com/nbobtc/bitcoind-php/blob/2.x/src/Http/Message/Response.php\n[DriverInterface]: https://github.com/nbobtc/bitcoind-php/blob/2.x/src/Http/Driver/DriverInterface.php\n"
 },
 {
  "repo": "ucfyao/bitcoin-arbitrage",
  "language": "Python",
  "readme_contents": "# bitcoin-arbitrage - opportunity detector andgit commit -m \"first commit\"  automated trading\n\nIt gets order books from supported exchanges and calculate arbitrage\nopportunities between each markets. It takes market depth into account.\n\nCurrently supported exchanges to get data:\n - Bitstamp (USD)\n - Paymium (EUR)\n - BTC-e (USD, EUR)\n - Bitfinex (USD)\n - Kraken (USD, EUR)\n - OkCoin (CNY)\n - CampBX (USD)\n - Gemini (USD)\n - BTCC (CNY)\n - Coinbase Exchange (USD)\n - Haobtc (CNY)\n - Huobi (CNY)\n\nCurrently supported exchanges to automate trade:\n - Bitstamp (USD)\n - Haobtc (CNY)\n - OkCoin (CNY)\n - Huobi (CNY)\n\nDonation are always welcome: \n - Jack: **1BPdnAmQopSnieSZV6Yf11wJHFAuzUrNKM** \n\n\n# WARNING\n\n**Real trading bots are included. Don't put your API keys in config.py\n  if you don't know what you are doing.**\n\n# Installation And Configuration\n\n    $ cp arbitrage/config.py-example arbitrage/config.py\n\nThen edit config.py file to setup your preferences: watched markets\nand observers\n\nYou need Python3 to run this program. To install on Debian, Ubuntu, or\nvariants of them, use:\n\n    $ sudo apt-get install python3 python3-pip python-nose\n    $ pip3 install requests zmq\n\nYou need market broker service, please read its README to install then run it. \n  \n    https://github.com/ucfyao/bitcoin-broker \n\nTo connect the broker server you will need to install thriftpy:\n\n    $ pip3 install cython thriftpy\n\nTo use the observer XMPPMessager you will need to install sleekxmpp:\n\n    $ pip3 install sleekxmpp\n\n# Run\n\nTo run the opportunity watcher:\n\n    $ python3 arbitrage/arbitrage.py watch -v\n\nTo check your balance on an exchange (also a good way to check your accounts configuration):\n\n    $ python3 arbitrage/arbitrage.py -m HaobtcCNY get-balance\n    $ python3 arbitrage/arbitrage.py -m HaobtcCNY,BitstampUSD get-balance\n    $ python3 arbitrage/arbitrage.py -m HaobtcCNY,OkCoinCNY,HuobiCNY get-balance\n\nRun tests\n\n    $ nosetests arbitrage/\n\n# Alternative usage\n\nList supported public markets:\n\n      $ python3 arbitrage/arbitrage.py list-public-markets\n\nHelp\n      \n      $ python3 arbitrage/arbitrage.py -h\n\n# Example\n\narbitrage in haobtc, huobi or okcoin\n\n    $ python3 arbitrage/arbitrage.py -oTraderBot -mHaobtcCNY,HuobiCNY\n    $ python3 arbitrage/arbitrage.py -oTraderBot -mHaobtcCNY,OKCoinCNY\n\nbalance statatistic \n\n    $ python3 arbitrage/arbitrage.py -oBalanceDumper -mHaobtcCNY\n    \n# TODO\n\n * Tests\n * Write documentation\n * Add other exchanges:\n   * icbit\n   * BitFinex\n * Update order books with a WebSocket client for supported exchanges\n * Better history handling for observer \"HistoryDumper\" (Redis ?)\n * Move EUR / USD from a market to an other:\n   * Coupons\n   * Negative Operations\n * use Ethercoin or other cryptocurrencies for triangular arbitrage\n\n# LICENSE\n\n\nMIT\n\nCopyright (c) 2017 Jack Yao <yaozihao@yaozihao.cn>\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "MarkFChavez/bitcoin-price-index",
  "language": "JavaScript",
  "readme_contents": "This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Formatting Code Automatically](#formatting-code-automatically)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Code Splitting](#code-splitting)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images, Fonts, and Files](#adding-images-fonts-and-files)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n  - [\"Invalid Host Header\" Errors After Configuring Proxy](#invalid-host-header-errors-after-configuring-proxy)\n  - [Configuring the Proxy Manually](#configuring-the-proxy-manually)\n  - [Configuring a WebSocket Proxy](#configuring-a-websocket-proxy)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n  - [Getting Started with Storybook](#getting-started-with-storybook)\n  - [Getting Started with Styleguidist](#getting-started-with-styleguidist)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n  - [Opting Out of Caching](#opting-out-of-caching)\n  - [Offline-First Considerations](#offline-first-considerations)\n  - [Progressive Web App Metadata](#progressive-web-app-metadata)\n- [Analyzing the Bundle Size](#analyzing-the-bundle-size)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn\u2019t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` exits too early](#npm-run-build-exits-too-early)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n  - [`npm run build` fails to minify](#npm-run-build-fails-to-minify)\n  - [Moment.js locales are missing](#momentjs-locales-are-missing)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you\u2019ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you\u2019re currently on (check `package.json` in this folder if you\u2019re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it\u2019s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, otherwise Webpack won\u2019t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Dynamic import()](https://github.com/tc39/proposal-dynamic-import) (stage 3 proposal)\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (part of stage 3 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend using experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.<br>\n>It also only works with npm 3 or higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first. Then, add a file called `.eslintrc` to the project root:\n\n```js\n{\n  \"extends\": \"react-app\"\n}\n```\n\nNow your editor should report the linting warnings.\n\nNote that even if you edit your `.eslintrc` file further, these changes will **only affect the editor integration**. They won\u2019t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes.\n\nIf you want to enforce a coding style for your project, consider using [Prettier](https://github.com/jlongster/prettier) instead of ESLint style rules.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) and [WebStorm](https://www.jetbrains.com/webstorm/).**\n\nVisual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don\u2019t have to switch between tools.\n\n### Visual Studio Code\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app\u2019s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code\u2014all from your editor.\n\nHaving problems with VS Code Debugging? Please see their [troubleshooting guide](https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md#troubleshooting).\n\n### WebStorm\n\nYou would need to have [WebStorm](https://www.jetbrains.com/webstorm/) and [JetBrains IDE Support](https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji) Chrome extension installed.\n\nIn the WebStorm menu `Run` select `Edit Configurations...`. Then click `+` and select `JavaScript Debug`. Paste `http://localhost:3000` into the URL field and save the configuration.\n\n>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).\n\nStart your app by running `npm start`, then press `^D` on macOS or `F9` on Windows and Linux or click the green debug icon to start debugging in WebStorm.\n\nThe same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine. \n\n## Formatting Code Automatically\n\nPrettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the [Prettier's GitHub page](https://github.com/prettier/prettier) for more information, and look at this [page to see it in action](https://prettier.github.io/prettier/).\n\nTo format our code whenever we make a commit in git, we need to install the following dependencies:\n\n```sh\nnpm install --save husky lint-staged prettier\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add husky lint-staged prettier\n```\n\n* `husky` makes it easy to use githooks as if they are npm scripts.\n* `lint-staged` allows us to run scripts on staged files in git. See this [blog post about lint-staged to learn more about it](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8).\n* `prettier` is the JavaScript formatter we will run before commits.\n\nNow we can make sure every file is formatted correctly by adding a few lines to the `package.json` in the project root.\n\nAdd the following line to `scripts` section:\n\n```diff\n  \"scripts\": {\n+   \"precommit\": \"lint-staged\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\nNext we add a 'lint-staged' field to the `package.json`, for example:\n\n```diff\n  \"dependencies\": {\n    // ...\n  },\n+ \"lint-staged\": {\n+   \"src/**/*.{js,jsx,json,css}\": [\n+     \"prettier --single-quote --write\",\n+     \"git add\"\n+   ]\n+ },\n  \"scripts\": {\n```\n\nNow, whenever you make a commit, Prettier will format the changed files automatically. You can also run `./node_modules/.bin/prettier --single-quote --write \"src/**/*.{js,jsx}\"` to format your entire project for the first time.\n\nNext you might want to integrate Prettier in your favorite editor. Read the section on [Editor Integration](https://github.com/prettier/prettier#editor-integration) on the Prettier GitHub page.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from \u201cReact App\u201d to anything else.\n\nNote that normally you wouldn\u2019t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```sh\nnpm install --save react-router\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add react-router\n```\n\nThis works for any library, not just `react-router`.\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don\u2019t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That\u2019s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Code Splitting\n\nInstead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand.\n\nThis project setup supports code splitting via [dynamic `import()`](http://2ality.com/2017/01/import-operator.html#loading-code-on-demand). Its [proposal](https://github.com/tc39/proposal-dynamic-import) is in stage 3. The `import()` function-like form takes the module name as an argument and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which always resolves to the namespace object of the module.\n\nHere is an example:\n\n### `moduleA.js`\n\n```js\nconst moduleA = 'Hello';\n\nexport { moduleA };\n```\n### `App.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  handleClick = () => {\n    import('./moduleA')\n      .then(({ moduleA }) => {\n        // Use moduleA\n      })\n      .catch(err => {\n        // Handle failure\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Load</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nThis will make `moduleA.js` and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button.\n\nYou can also use it with `async` / `await` syntax if you prefer it.\n\n### With React Router\n\nIf you are using React Router check out [this tutorial](http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html) on how to use code splitting with it. You can find the companion GitHub repository [here](https://github.com/AnomalyInnovations/serverless-stack-demo-client/tree/code-splitting-in-create-react-app).\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.js.org/) for handling all assets. Webpack offers a custom way of \u201cextending\u201d the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don\u2019t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don\u2019t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let\u2019s install the command-line interface for Sass:\n\n```sh\nnpm install --save node-sass-chokidar\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add node-sass-chokidar\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor\u2019s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nTo enable importing files without using relative paths, you can add the  `--include-path` option to the command in `package.json`.\n\n```\n\"build-css\": \"node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/\",\n\"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive\",\n```\n\nThis will allow you to do imports like\n\n```scss\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```sh\nnpm install --save npm-run-all\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass-chokidar src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build-js\": \"react-scripts build\",\n+    \"build\": \"npm-run-all build-css build-js\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files.\n\n**Why `node-sass-chokidar`?**\n\n`node-sass` has been reported as having the following issues:\n\n- `node-sass --watch` has been reported to have *performance issues* in certain conditions when used in a virtual machine or with docker.\n\n- Infinite styles compiling [#1939](https://github.com/facebookincubator/create-react-app/issues/1939)\n\n- `node-sass` has been reported as having issues with detecting new files in a directory [#1891](https://github.com/sass/node-sass/issues/1891)\n\n `node-sass-chokidar` is used here as it addresses these issues.\n\n## Adding Images, Fonts, and Files\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` a file right in a JavaScript module**. This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the `src` attribute of an image or the `href` of a link to a PDF.\n\nTo reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a [data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to [#1153](https://github.com/facebookincubator/create-react-app/issues/1153).\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don\u2019t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-fonts-and-files).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don\u2019t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you\u2019ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in \u201cAdding Images and Fonts\u201d above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won\u2019t include content hashes so you\u2019ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-fonts-and-files) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don\u2019t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```sh\nnpm install --save react-bootstrap bootstrap@3\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add react-bootstrap bootstrap@3\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save flow-bin` (or `yarn add flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow init` (or `yarn flow init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can\u2019t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let\u2019s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It\u2019s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\n`.env` files **should be** checked into source control (with the exclusion of `.env*.local`).\n\n#### What other `.env` files can be used?\n\n>Note: this feature is **available with `react-scripts@1.0.0` and higher**.\n\n* `.env`: Default.\n* `.env.local`: Local overrides. **This file is loaded for all environments except test.**\n* `.env.development`, `.env.test`, `.env.production`: Environment-specific settings.\n* `.env.development.local`, `.env.test.local`, `.env.production.local`: Local overrides of environment-specific settings.\n\nFiles on the left have more priority than files on the right:\n\n* `npm start`: `.env.development.local`, `.env.development`, `.env.local`, `.env`\n* `npm run build`: `.env.production.local`, `.env.production`, `.env.local`, `.env`\n* `npm test`: `.env.test.local`, `.env.test`, `.env` (note `.env.local` is missing)\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn\u2019t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won\u2019t be able to write a codemod because we don\u2019t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it\u2019s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will **only** attempt to send requests without `text/html` in its `Accept` header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don\u2019t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* [Configure the proxy yourself](#configuring-the-proxy-manually)\n* Enable CORS on your server ([here\u2019s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n### \"Invalid Host Header\" Errors After Configuring Proxy\n\nWhen you enable the `proxy` option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in [this article](https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a) and [this issue](https://github.com/webpack/webpack-dev-server/issues/887).\n\nThis shouldn\u2019t affect you when developing on `localhost`, but if you develop remotely like [described here](https://github.com/facebookincubator/create-react-app/issues/2271), you will see this error in the browser after enabling the `proxy` option:\n\n>Invalid Host header\n\nTo work around it, you can specify your public development host in a file called `.env.development` in the root of your project:\n\n```\nHOST=mypublicdevhost.com\n```\n\nIf you restart the development server now and load the app from the specified host, it should work.\n\nIf you are still having issues or if you\u2019re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to `.env.development.local`. **Note that this is dangerous and exposes your machine to remote code execution from malicious websites:**\n\n```\n# NOTE: THIS IS DANGEROUS!\n# It exposes your machine to attacks from the websites you visit.\nDANGEROUSLY_DISABLE_HOST_CHECK=true\n```\n\nWe don\u2019t recommend this approach.\n\n### Configuring the Proxy Manually\n\n>Note: this feature is available with `react-scripts@1.0.0` and higher.\n\nIf the `proxy` option is **not** flexible enough for you, you can specify an object in the following form (in `package.json`).<br>\nYou may also specify any configuration value [`http-proxy-middleware`](https://github.com/chimurai/http-proxy-middleware#options) or [`http-proxy`](https://github.com/nodejitsu/node-http-proxy#options) supports.\n```js\n{\n  // ...\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\nAll requests matching this path will be proxies, no exceptions. This includes requests for `text/html`, which the standard `proxy` option does not proxy.\n\nIf you need to specify multiple proxies, you may do so by specifying additional entries.\nMatches are regular expressions, so that you can use a regexp to match multiple paths.\n```js\n{\n  // ...\n  \"proxy\": {\n    // Matches any request starting with /api\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n      // ...\n    },\n    // Matches any request starting with /foo\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n      // ...\n    },\n    // Matches /bar/abc.html but not /bar/sub/def.html\n    \"/bar/[^/]*[.]html\": {\n      \"target\": \"<url_3>\",\n      // ...\n    },\n    // Matches /baz/abc.html and /baz/sub/def.html\n    \"/baz/.*/.*[.]html\": {\n      \"target\": \"<url_4>\"\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n### Configuring a WebSocket Proxy\n\nWhen setting up a WebSocket proxy, there are a some extra considerations to be aware of.\n\nIf you\u2019re using a WebSocket engine like [Socket.io](https://socket.io/), you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don't expect Socket.io to work with [the websocket.org echo test](http://websocket.org/echo.html).\n\nThere\u2019s some good documentation available for [setting up a Socket.io server](https://socket.io/docs/).\n\nStandard WebSockets **will** work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like [ws](https://github.com/websockets/ws) for the server, with [native WebSockets in the browser](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).\n\nEither way, you can proxy WebSocket requests manually in `package.json`:\n\n```js\n{\n  // ...\n  \"proxy\": {\n    \"/socket\": {\n      // Your compatible WebSocket server\n      \"target\": \"ws://<socket_url>\",\n      // Tell http-proxy-middleware that this is a WebSocket proxy.\n      // Also allows you to proxy WebSocket requests without an additional HTTP request\n      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn\u2019t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you\u2019re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) or [react-snap](https://github.com/stereobooster/react-snap) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or \u201chydrated\u201d, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload\u2014regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the \u201cWatch Usage\u201d note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don\u2019t often commit the code that doesn\u2019t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](https://facebook.github.io/jest/docs/en/expect.html#content).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](https://facebook.github.io/jest/docs/en/expect.html#tohavebeencalled) to create \u201cspies\u201d or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a \u201csmoke test\u201d verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven\u2019t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn\u2019t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you\u2019d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). To install it, run:\n\n```sh\nnpm install --save enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\nAs of Enzyme 3, you will need to install Enzyme along with an Adapter corresponding to the version of React you are using. (The examples above use the adapter for React 16.)\n\nThe adapter will also need to be configured in your [global setup file](#initializing-test-environment):\n\n#### `src/setupTests.js`\n```js\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```\n\nNow you can write a smoke test with it:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn\u2019t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don\u2019t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/en/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo enable this, install `jest-enzyme`:\n\n```sh\nnpm install --save jest-enzyme\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add jest-enzyme\n```\n\nImport it in [`src/setupTests.js`](#initializing-test-environment) to make its matchers available in every test:\n\n```js\nimport 'jest-enzyme';\n```\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we\u2019ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you\u2019d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n#### Configuration\n\nThe default Jest coverage configuration can be overriden by adding any of the following supported keys to a Jest config in your package.json.\n\nSupported overrides:\n - [`collectCoverageFrom`](https://facebook.github.io/jest/docs/en/configuration.html#collectcoveragefrom-array)\n - [`coverageReporters`](https://facebook.github.io/jest/docs/en/configuration.html#coveragereporters-array-string)\n - [`coverageThreshold`](https://facebook.github.io/jest/docs/en/configuration.html#coveragethreshold-object)\n - [`snapshotSerializers`](https://facebook.github.io/jest/docs/en/configuration.html#snapshotserializers-array-string)\n\nExample package.json:\n\n```json\n{\n  \"name\": \"your-package\",\n  \"jest\": {\n    \"collectCoverageFrom\" : [\n      \"src/**/*.{js,jsx}\",\n      \"!<rootDir>/node_modules/\",\n      \"!<rootDir>/path/to/dir/\"\n    ],\n    \"coverageThreshold\": {\n      \"global\": {\n        \"branches\": 90,\n        \"functions\": 90,\n        \"lines\": 90,\n        \"statements\": 90\n      }\n    },\n    \"coverageReporters\": [\"text\"],\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n#### CircleCI\n\nFollow [this article](https://medium.com/@knowbody/circleci-and-zeits-now-sh-c9b7eebcd3c1) to set up CircleCI with a Create React App project.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\"\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster:\n\n```diff\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n-   \"test\": \"react-scripts test --env=jsdom\"\n+   \"test\": \"react-scripts test\"\n```\n\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* In a regular state, with a text label.\n* In the disabled mode.\n* In a loading state.\n\nUsually, it\u2019s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn\u2019t include any tools for this by default, but you can easily add [Storybook for React](https://storybook.js.org) ([source](https://github.com/storybooks/storybook)) or [React Styleguidist](https://react-styleguidist.js.org/) ([source](https://github.com/styleguidist/react-styleguidist)) to your project. **These are third-party tools that let you develop components and see all their states in isolation from your app**.\n\n![Storybook for React Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n### Getting Started with Storybook\n\nStorybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g @storybook/cli\n```\n\nThen, run the following command inside your app\u2019s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/storybooks/storybook)\n* [Documentation](https://storybook.js.org/basics/introduction/)\n* [Snapshot Testing UI](https://github.com/storybooks/storybook/tree/master/addons/storyshots) with Storybook + addon/storyshot\n\n### Getting Started with Styleguidist\n\nStyleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground.\n\nFirst, install Styleguidist:\n\n```sh\nnpm install --save react-styleguidist\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add react-styleguidist\n```\n\nThen, add these scripts to your `package.json`:\n\n```diff\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\nThen, run the following command inside your app\u2019s directory:\n\n```sh\nnpm run styleguide\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Styleguidist:\n\n* [GitHub Repo](https://github.com/styleguidist/react-styleguidist)\n* [Documentation](https://react-styleguidist.js.org/docs/getting-started.html)\n\n## Making a Progressive Web App\n\nBy default, the production build is a fully functional, offline-first\n[Progressive Web App](https://developers.google.com/web/progressive-web-apps/).\n\nProgressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:\n\n * All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.\n * Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.\n * On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web **push notifications**. This eliminates the need for the app store.\n\nThe [`sw-precache-webpack-plugin`](https://github.com/goldhand/sw-precache-webpack-plugin)\nis integrated into production configuration,\nand it will take care of generating a service worker file that will automatically\nprecache all of your local assets and keep them up to date as you deploy updates.\nThe service worker will use a [cache-first strategy](https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network)\nfor handling all requests for local assets, including the initial HTML, ensuring\nthat your web app is reliably fast, even on a slow or unreliable network.\n\n### Opting Out of Caching\n\nIf you would prefer not to enable service workers prior to your initial\nproduction deployment, then remove the call to `registerServiceWorker()`\nfrom [`src/index.js`](src/index.js).\n\nIf you had previously enabled service workers in your production deployment and\nhave decided that you would like to disable them for all your existing users,\nyou can swap out the call to `registerServiceWorker()` in\n[`src/index.js`](src/index.js) first by modifying the service worker import:\n```javascript\nimport { unregister } from './registerServiceWorker';\n```\nand then call `unregister()` instead.\nAfter the user visits a page that has `unregister()`,\nthe service worker will be uninstalled. Note that depending on how `/service-worker.js` is served,\nit may take up to 24 hours for the cache to be invalidated.\n\n### Offline-First Considerations\n\n1. Service workers [require HTTPS](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers#you_need_https),\nalthough to facilitate local testing, that policy\n[does not apply to `localhost`](http://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http/34161385#34161385).\nIf your production web server does not support HTTPS, then the service worker\nregistration will fail, but the rest of your web app will remain functional.\n\n1. Service workers are [not currently supported](https://jakearchibald.github.io/isserviceworkerready/)\nin all web browsers. Service worker registration [won't be attempted](src/registerServiceWorker.js)\non browsers that lack support.\n\n1. The service worker is only enabled in the [production environment](#deployment),\ne.g. the output of `npm run build`. It's recommended that you do not enable an\noffline-first service worker in a development environment, as it can lead to\nfrustration when previously cached assets are used and do not include the latest\nchanges you've made locally.\n\n1. If you *need* to test your offline-first service worker locally, build\nthe application (using `npm run build`) and run a simple http server from your\nbuild directory. After running the build script, `create-react-app` will give\ninstructions for one way to test your production build locally and the [deployment instructions](#deployment) have\ninstructions for using other methods. *Be sure to always use an\nincognito window to avoid complications with your browser cache.*\n\n1. If possible, configure your production environment to serve the generated\n`service-worker.js` [with HTTP caching disabled](http://stackoverflow.com/questions/38843970/service-worker-javascript-update-frequency-every-24-hours).\nIf that's not possible\u2014[GitHub Pages](#github-pages), for instance, does not\nallow you to change the default 10 minute HTTP cache lifetime\u2014then be aware\nthat if you visit your production site, and then revisit again before\n`service-worker.js` has expired from your HTTP cache, you'll continue to get\nthe previously cached assets from the service worker. If you have an immediate\nneed to view your updated production deployment, performing a shift-refresh\nwill temporarily disable the service worker and retrieve all assets from the\nnetwork.\n\n1. Users aren't always familiar with offline-first web apps. It can be useful to\n[let the user know](https://developers.google.com/web/fundamentals/instant-and-offline/offline-ux#inform_the_user_when_the_app_is_ready_for_offline_consumption)\nwhen the service worker has finished populating your caches (showing a \"This web\napp works offline!\" message) and also let them know when the service worker has\nfetched the latest updates that will be available the next time they load the\npage (showing a \"New content is available; please refresh.\" message). Showing\nthis messages is currently left as an exercise to the developer, but as a\nstarting point, you can make use of the logic included in [`src/registerServiceWorker.js`](src/registerServiceWorker.js), which\ndemonstrates which service worker lifecycle events to listen for to detect each\nscenario, and which as a default, just logs appropriate messages to the\nJavaScript console.\n\n1. By default, the generated service worker file will not intercept or cache any\ncross-origin traffic, like HTTP [API requests](#integrating-with-an-api-backend),\nimages, or embeds loaded from a different domain. If you would like to use a\nruntime caching strategy for those requests, you can [`eject`](#npm-run-eject)\nand then configure the\n[`runtimeCaching`](https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject)\noption in the `SWPrecacheWebpackPlugin` section of\n[`webpack.config.prod.js`](../config/webpack.config.prod.js).\n\n### Progressive Web App Metadata\n\nThe default configuration includes a web app manifest located at\n[`public/manifest.json`](public/manifest.json), that you can customize with\ndetails specific to your web application.\n\nWhen a user adds a web app to their homescreen using Chrome or Firefox on\nAndroid, the metadata in [`manifest.json`](public/manifest.json) determines what\nicons, names, and branding colors to use when the web app is displayed.\n[The Web App Manifest guide](https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/)\nprovides more context about what each field means, and how your customizations\nwill affect your users' experience.\n\n## Analyzing the Bundle Size\n\n[Source map explorer](https://www.npmjs.com/package/source-map-explorer) analyzes\nJavaScript bundles using the source maps. This helps you understand where code\nbloat is coming from.\n\nTo add Source map explorer to a Create React App project, follow these steps:\n\n```sh\nnpm install --save source-map-explorer\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add source-map-explorer\n```\n\nThen in `package.json`, add the following line to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\nThen to analyze the bundle run the production build then run the analyze\nscript.\n\n```\nnpm run build\nnpm run analyze\n```\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)\u2019s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don\u2019t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere\u2019s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn\u2019t important either. Since Create React App is completely platform-agnostic, there\u2019s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static(path.join(__dirname, 'build')));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, 'build', 'index.html'));\n });\n```\n\nIf you\u2019re using [Apache HTTP Server](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`. \n\nIf you\u2019re using [Apache Tomcat](http://tomcat.apache.org/), you need to follow [this Stack Overflow answer](https://stackoverflow.com/a/41249464/4878474).\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\nOn a production build, and in a browser that supports [service workers](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers),\nthe service worker will automatically handle all navigation requests, like for\n`/todos/42`, by serving the cached copy of your `index.html`. This\nservice worker navigation routing can be configured or disabled by\n[`eject`ing](#npm-run-eject) and then modifying the\n[`navigateFallback`](https://github.com/GoogleChrome/sw-precache#navigatefallback-string)\nand [`navigateFallbackWhitelist`](https://github.com/GoogleChrome/sw-precache#navigatefallbackwhitelist-arrayregexp)\noptions of the `SWPreachePlugin` [configuration](../config/webpack.config.prod.js).\n\nWhen users install your app to the homescreen of their device the default configuration will make a shortcut to `/index.html`. This may not work for client-side routers which expect the app to be served from `/`. Edit the web app manifest at [`public/manifest.json`](public/manifest.json) and change `start_url` to match the required URL scheme, for example:\n\n```js\n  \"start_url\": \".\",\n```\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n**Note**: If you are using `react-router@^4`, you can root `<Link>`s using the `basename` prop on any `<Router>`.<br>\nMore information [here](https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string).<br>\n<br>\nFor example:\n```js\n<BrowserRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### [Azure](https://azure.microsoft.com/)\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to Microsoft Azure.\n\n### [Firebase](https://firebase.google.com/)\n\nInstall the Firebase CLI if you haven\u2019t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project\u2019s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    \u2714  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    \u2714  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    \u2714  Firebase initialization complete!\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    \u2714  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%\u2714  hosting: build folder uploaded successfully\n    \u2714  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    \u2714  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### [GitHub Pages](https://pages.github.com/)\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field:\n\n```js\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save gh-pages\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```diff\n  \"scripts\": {\n+   \"predeploy\": \"npm run build\",\n+   \"deploy\": \"gh-pages -d build\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project\u2019s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn\u2019t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://reacttraining.com/react-router/web/api/Router) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you\u2019ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### [Heroku](https://www.heroku.com/)\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that\u2019s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### [Netlify](https://www.netlify.com/)\n\n**To do a manual deploy to Netlify\u2019s CDN:**\n\n```sh\nnpm install netlify-cli\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Click `Build your site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### [Now](https://zeit.co/now)\n\nNow offers a zero-configuration single-command deployment. You can use `now` to deploy your app for free.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Build your app by running `npm run build`.\n\n3. Move into the build directory by running `cd build`.\n\n4. Run `now --name your-project-name` from within the build directory. You will see a **now.sh** URL in your output like this:\n\n    ```\n    > Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n\n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/unlimited-static)\n\n### [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/)\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services S3 and CloudFront.\n\n### [Surge](https://surge.sh/)\n\nInstall the Surge CLI if you haven\u2019t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account.\n\nWhen asked about the project path, make sure to specify the `build` folder, for example:\n\n```sh\n       project path: /path/to/project/build\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to `npm start` will also be passed to this script, and the url where your app is served will be the last argument. Your script's file name must have the `.js` extension.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\nREACT_EDITOR | :white_check_mark: | :x: | When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can [send a pull request to detect your editor of choice](https://github.com/facebookincubator/create-react-app/issues/2636). Setting this environment variable overrides the automatic detection. If you do it, make sure your systems [PATH](https://en.wikipedia.org/wiki/PATH_(variable)) environment variable points to your editor\u2019s bin folder.\nCHOKIDAR_USEPOLLING | :white_check_mark: | :x: | When set to `true`, the watcher runs in polling mode, as necessary inside a VM. Use this option if `npm start` isn't detecting changes.\nGENERATE_SOURCEMAP | :x: | :white_check_mark: | When set to `false`, source maps are not generated for a production build. This solves OOM issues on some smaller machines.\n\n## Troubleshooting\n\n### `npm start` doesn\u2019t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn\u2019t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn\u2019t see a file called `index.js` and you\u2019re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a \u201csafe write\u201d feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [\u201cAdjusting Your Text Editor\u201d](https://webpack.js.org/guides/development/#adjusting-your-text-editor).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn\u2019t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn\u2019t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` exits too early\n\nIt is reported that `npm run build` can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message:\n\n>  The build failed because the process exited too early. This probably means the system ran out of memory or someone called `kill -9` on the process.\n\nIf you are completely sure that you didn't terminate the process, consider [adding some swap space](https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04) to the machine you\u2019re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n### Moment.js locales are missing\n\nIf you use a [Moment.js](https://momentjs.com/), you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of [all the locales provided by Moment.js](https://momentjs.com/#multiple-locale-support).\n\nTo add a specific Moment.js locale to your bundle, you need to import it explicitly.<br>\nFor example:\n\n```js\nimport moment from 'moment';\nimport 'moment/locale/fr';\n```\n\nIf import multiple locales this way, you can later switch between them by calling `moment.locale()` with the locale name:\n\n```js\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport 'moment/locale/es';\n\n// ...\n\nmoment.locale('fr');\n```\n\nThis will only work for locales that have been explicitly imported before.\n\n### `npm run build` fails to minify\n\nSome third-party packages don't compile their code to ES5 before publishing to npm. This often causes problems in the ecosystem because neither browsers (except for most modern versions) nor some tools currently support all ES6 features. We recommend to publish code on npm as ES5 at least for a few more years.\n\n<br>\nTo resolve this:\n\n1. Open an issue on the dependency's issue tracker and ask that the package be published pre-compiled.\n  * Note: Create React App can consume both CommonJS and ES modules. For Node.js compatibility, it is recommended that the main entry point is CommonJS. However, they can optionally provide an ES module entry point with the `module` field in `package.json`. Note that **even if a library provides an ES Modules version, it should still precompile other ES6 features to ES5 if it intends to support older browsers**.\n\n2. Fork the package and publish a corrected version yourself. \n\n3. If the dependency is small enough, copy it to your `src/` folder and treat it as application code.\n\nIn the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds.\n\n## Something Missing?\n\nIf you have ideas for more \u201cHow To\u201d recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n"
 },
 {
  "repo": "yeasy/blockchain_guide",
  "language": "Go",
  "readme_contents": "# \u533a\u5757\u94fe\u6280\u672f\u6307\u5357\nv1.6.1\n\n\u533a\u5757\u94fe\u662f\u91d1\u878d\u79d1\u6280\uff08Fintech\uff09\u9886\u57df\u7684\u4e00\u9879\u57fa\u7840\u6027\u7684\u521b\u65b0\u3002\n\n\u4f5c\u4e3a\u65b0\u4e00\u4ee3\u5206\u5e03\u5f0f\u8bb0\u8d26\uff08Distributed Ledger Technology\uff0cDLT\uff09\u7cfb\u7edf\u7684\u6838\u5fc3\u6280\u672f\uff0c\u533a\u5757\u94fe\u88ab\u8ba4\u4e3a\u5728\u91d1\u878d\u3001\u7269\u8054\u7f51\u3001\u5546\u4e1a\u8d38\u6613\u3001\u5f81\u4fe1\u3001\u8d44\u4ea7\u7ba1\u7406\u7b49\u4f17\u591a\u9886\u57df\u90fd\u62e5\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u524d\u666f\u3002\n\n\u76ee\u524d\uff0c\u533a\u5757\u94fe\u6280\u672f\u5c1a\u5904\u4e8e\u5feb\u901f\u53d1\u5c55\u7684\u9636\u6bb5\uff0c\u6d89\u53ca\u5206\u5e03\u5f0f\u7cfb\u7edf\u3001\u5bc6\u7801\u5b66\u3001\u535a\u5f08\u8bba\u3001\u7f51\u7edc\u534f\u8bae\u7b49\u8bf8\u591a\u5b66\u79d1\u77e5\u8bc6\uff0c\u4e3a\u5b66\u4e60\u548c\u5b9e\u8df5\u90fd\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u6311\u6218\u3002\n\n\u672c\u4e66\u5e0c\u671b\u80fd\u5ba2\u89c2\u63a2\u7d22\u533a\u5757\u94fe\u6982\u5ff5\u7684\u6765\u9f99\u53bb\u8109\uff0c\u5256\u6790\u5173\u952e\u6280\u672f\u548c\u539f\u7406\uff0c\u540c\u65f6\u4ee5\u5168\u7403\u6700\u5927\u7684\u5f00\u6e90\u5206\u5e03\u5f0f\u8d26\u672c\u9879\u76ee\u2014\u2014\u8d85\u7ea7\u8d26\u672c\u4e3a\u4f8b\u8bb2\u89e3\u5177\u4f53\u5e94\u7528\u3002\u5728\u5f00\u53d1\u8d85\u7ea7\u8d26\u672c\u9879\u76ee\uff0c\u4ee5\u53ca\u4e3a\u4f01\u4e1a\u8bbe\u8ba1\u65b9\u6848\u8fc7\u7a0b\u4e2d\uff0c\u7b14\u8005\u79ef\u7d2f\u4e86\u4e00\u4e9b\u5b9e\u8df5\u7ecf\u9a8c\uff0c\u4e5f\u901a\u8fc7\u672c\u4e66\u5206\u4eab\u51fa\u6765\uff0c\u5e0c\u671b\u80fd\u6709\u52a9\u4e8e\u5206\u5e03\u5f0f\u8d26\u672c\u79d1\u6280\u7684\u53d1\u5c55\u548c\u5e94\u7528\u3002\n\n## \u9605\u8bfb\u4f7f\u7528\n\u672c\u4e66\u9002\u7528\u4e8e\u5bf9\u533a\u5757\u94fe\u6280\u672f\u611f\u5174\u8da3\uff0c\u4e14\u5177\u5907\u4e00\u5b9a\u91d1\u878d\u79d1\u6280\u57fa\u7840\u7684\u8bfb\u8005\uff1b\u65e0\u6280\u672f\u80cc\u666f\u7684\u8bfb\u8005\u4e5f\u53ef\u4ee5\u4ece\u4e2d\u4e86\u89e3\u5230\u533a\u5757\u94fe\u6280\u672f\u7684\u73b0\u72b6\u3002\n\n* [GitBook \u5728\u7ebf\u9605\u8bfb](https://yeasy.gitbook.io/blockchain_guide/)\uff1b\n* [GitHub \u5728\u7ebf\u9605\u8bfb](https://github.com/yeasy/blockchain_guide/blob/master/SUMMARY.md)\n\n## \u8fdb\u9636\u5b66\u4e60\n![\u533a\u5757\u94fe\u539f\u7406\u3001\u8bbe\u8ba1\u4e0e\u5e94\u7528 \u7b2c\u4e8c\u7248](_images/blockchain_book2.png)\n\n\u300a[\u533a\u5757\u94fe\u539f\u7406\u3001\u8bbe\u8ba1\u4e0e\u5e94\u7528 \u7b2c 2 \u7248](https://item.jd.com/12159265.html)\u300b \u56f4\u7ed5\u8d85\u7ea7\u8d26\u672c Fabric 2.x \u6700\u65b0\u7248\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u533a\u5757\u94fe\u548c\u5206\u5e03\u5f0f\u8d26\u672c\u9886\u57df\u7684\u6838\u5fc3\u6280\u672f\uff0c\u4ee5\u53ca\u4f01\u4e1a\u5206\u5e03\u5f0f\u8d26\u672c\u65b9\u6848\u7684\u8bbe\u8ba1\u3001\u67b6\u6784\u548c\u5e94\u7528\uff0c\u6b22\u8fce\u5927\u5bb6\u9605\u8bfb\u5e76\u53cd\u9988\u5efa\u8bae\u3002\u672c\u4e66\u5df2\u88ab\u8bd1\u4e3a\u591a\u56fd\u8bed\u8a00\u53d1\u884c\uff0c\u6709\u610f\u6b22\u8fce\u4e0e\u4f5c\u8005\u8054\u7cfb\u3002\n\n* [China-Pub](http://product.china-pub.com/8071482)\n* [\u4eac\u4e1c\u56fe\u4e66](https://item.jd.com/12935394.html)\n* [\u5f53\u5f53\u56fe\u4e66](http://product.dangdang.com/28996031.html)\n\n\u5982\u679c\u53d1\u73b0\u758f\u6f0f\uff0c\u6b22\u8fce\u63d0\u4ea4\u5230 [\u52d8\u8bef\u8868](https://github.com/yeasy/blockchain_guide/wiki/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8E%9F%E7%90%86%E3%80%81%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B2%E7%89%88%E5%8B%98%E8%AF%AF%E8%A1%A8)\u3002\n\n## \u53c2\u4e0e\u8d21\u732e\n\u6b22\u8fce [\u53c2\u4e0e\u7ef4\u62a4\u9879\u76ee](contribute.md)\u3002\n\n* [\u4fee\u8ba2\u8bb0\u5f55](revision.md)\n* [\u8d21\u732e\u8005\u540d\u5355](https://github.com/yeasy/blockchain_guide/graphs/contributors)\n\n## \u652f\u6301\u9f13\u52b1\n\n\u6b22\u8fce\u9f13\u52b1\u4e00\u676f coffee~\n\n![coffee](_images/coffee.jpeg)\n\n## \u5728\u7ebf\u4ea4\u6d41\n\n\u6b22\u8fce\u5927\u5bb6\u52a0\u5165\u533a\u5757\u94fe\u6280\u672f\u8ba8\u8bba\u7fa4\uff1a\n\n* QQ \u7fa4  IV\uff1a364824846\uff08\u53ef\u52a0\uff09\n* QQ \u7fa4 III\uff1a414919574\uff08\u5df2\u6ee1\uff09\n* QQ \u7fa4  II\uff1a523889325\uff08\u5df2\u6ee1\uff09\n* QQ \u7fa4   I\uff1a335626996\uff08\u5df2\u6ee1\uff09\n"
 },
 {
  "repo": "nopara73/ZeroLink",
  "language": null,
  "readme_contents": "# ATTENTION\n\nZeroLink is obsolated in favor of WabiSabi: https://github.com/zkSNACKs/WabiSabi\n\n# ZeroLink: The Bitcoin Fungibility Framework\n\n![](http://i.imgur.com/ODjt3wf.png)\n\n## Authors\n\nnopara73,  \n[Wasabi Wallet](https://github.com/zkSNACKs/WalletWasabi),  \nadam.ficsor73@gmail.com\n\nTDevD,  \n[Samourai Wallet](https://github.com/Samourai-Wallet),  \n[PGP](http://pgp.mit.edu/pks/lookup?op=get&search=0x72B5BACDFEDF39D7)\n\n### Acknowledgements\n\nSpecial thanks for Adam Gibson and Chris Belcher from [JoinMarket](https://github.com/JoinMarket-Org/joinmarket), Ethan Heilman from [TumbleBit](https://eprint.iacr.org/2016/575.pdf), Dan Gershony from [Breeze Wallet](https://github.com/stratisproject/Breeze/) and Kristov Atlas from [Open Bitcoin Privacy Project](http://openbitcoinprivacyproject.org/) for tolerating my constant bugging and bothering to acquire their invaluable reviews, suggestions and feedback.\n\n## Abstract\n\nAlthough [fungibility](https://en.wikipedia.org/wiki/Fungibility) is an essential property of good money, [Bitcoin](https://bitcoin.org/bitcoin.pdf) has its limitations in this area. Numerous fungibility improvements have been proposed; however none of them have addressed the privacy issues in full. ZeroLink is first to offer protections against all the different ways a user's privacy can be breached. Thus the scope of ZeroLink is not limited to a single transaction, but it extends to transaction chains and it addresses various network layer deanonymizations, however its scope is limited to Bitcoin's first layer. Even if an off-chain anonymity solution gets widely adopted, ultimately the entrance and exit transactions will always be settled on-chain. Therefore there will always be need for on-chain privacy.  \n  \nIdeal fungibility requires every Bitcoin transaction to be indistinguishable from each other, but it is an unrealistic goal. ZeroLink's objective is to break all links between separate sets of coins. ZeroLink presents a wallet privacy framework coupled with Chaumian CoinJoin, which was first [hinted by hashcoin in 2011](https://bitcointalk.org/index.php?topic=12751.msg315793#msg315793) and [described in more detail by killerstorm in 2013](https://bitcointalk.org/index.php?topic=150681.0). A mixing round runs within seconds, its anonymity set can go beyond a single CoinJoin transaction's if needed, and its DoS resilience presumes a transaction fee environment above $1 Bitcoin.  \n  \nHopefully, ZeroLink will enable the usage of Bitcoin in a fully anonymous way for the first time.  \n\n## Table Of Contents\n\nI. [Introduction](#i-introduction)  \nII. [Chaumian CoinJoin](#ii-chaumian-coinjoin)  \n&nbsp;&nbsp;&nbsp;A. [Simplified Protocol](#a-simplified-protocol)  \n&nbsp;&nbsp;&nbsp;B. [Achieving Liquidity](#b-achieving-liquidity)  \n&nbsp;&nbsp;&nbsp;C. [Optimizing Performance](#c-optimizing-performance)  \n&nbsp;&nbsp;&nbsp;D. [DoS Attack](#d-dos-attack)  \n&nbsp;&nbsp;&nbsp;E. [Sybil Attack](#e-sybil-attack)  \n&nbsp;&nbsp;&nbsp;F. [General schema](#f-general-schema)  \nIII. [Wallet Privacy Framework](#iii-wallet-privacy-framework)  \n&nbsp;&nbsp;&nbsp;A. [Pre-Mix Wallet](#a-pre-mix-wallet)  \n&nbsp;&nbsp;&nbsp;B. [Post-Mix Wallet](#b-post-mix-wallet)  \nIV. [Implementation](#iv-implementation)  \n\n## I. Introduction\n\n### Overview\n\n![](http://i.imgur.com/ZtLn8cA.png)\n\nZeroLink defines a pre-mix and a post-mix wallet and a mixing technique.  \nPre-mix wallet functionality can be added to any Bitcoin wallet without much overhead. Post-mix wallets on the other hand have strong privacy requirements, regarding coin selection, private transaction and balance retrieval, transaction input and output indexing and broadcasting. The requirements and recommendations for pre and post-mix wallets together define the Wallet Privacy Framework.  \nCoins from pre-mix wallets to post-mix wallets are moved by mixing. Most on-chain mixing techniques, like [CoinShuffle](http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf),  [CoinShuffle++](https://crypsys.mmci.uni-saarland.de/projects/FastDC/draft-paper.pdf) or [TumbleBit's Classic Tumbler mode](https://eprint.iacr.org/2016/575.pdf) can be used. However ZeroLink defines its own mixing technique: Chaumian CoinJoin.\n\n### CoinJoin\n[![Wikipedia: CoinJoin](https://upload.wikimedia.org/wikipedia/en/thumb/f/f0/CoinJoinExample.svg/640px-CoinJoinExample.svg.png)](https://en.wikipedia.org/wiki/CoinJoin)\n\n[CoinJoin](https://bitcointalk.org/index.php?topic=279249.0) was first detailed in 2013 by Gregory Maxwell on BitcoinTalk. When multiple participants add inputs and outputs to a common transaction, it obfuscates the transaction graph.  \nA stronger variant is, if the non-change outputs have the same value, no one can tell which input intended to fund which of these non-change outputs.  \n\nCoinJoin based privacy techniques are the most Blockchain space efficient, therefore they are the cheapest on-chain solutions.  \nThe limiting factor of CoinJoin's anonymity set is the [maximum standard transaction size](https://bitcoin.stackexchange.com/a/35882/26859), in which case it goes approximately [from 350 to 470](https://bitcoin.stackexchange.com/questions/57073/what-is-the-maximum-anonimity-set-of-a-coinjoin-transaction/57091). Although it can be surpassed, as Maxwell notes:  \n> If you can build transactions with m participants per transaction you can create a sequence of m*3 transactions which form a three-stage [switching network](https://en.wikipedia.org/wiki/Clos_network) that permits any of m^2 final outputs to have come from any of m^2 original inputs (e.g. using three stages of 32 transactions with 32 inputs each 1024 users can be joined with a total of 96 transactions).  This allows the anonymity set to be any size, limited only by participation.\n\nFor practical reasons, ZeroLink does not attempt to incorporate such switching network into its design, instead it lets the implementor to scale up if the need ever arises.\n\n### Chaumian CoinJoin\n\nChaumian CoinJoin was briefly described by Maxwell:  \n> Using chaum blind signatures: The users connect and provide inputs (and change addresses) and a cryptographically-blinded version of the address they want their private coins to go to; the server signs the tokens and returns them. The users anonymously reconnect, unblind their output addresses, and return them to the server. The server can see that all the outputs were signed by it and so all the outputs had to come from valid participants. Later people reconnect and sign.  \n\nSimplified workflow:  \n1. User provides its **input** and a **blinded output** to the Tumbler.  \n2. Tumbler signs the **blinded output** and gives it back to the User.\n3. User unblinds the **signed blinded output** and provides the server the **signed output** through a different anonymity network identity.  \n4. The Tumbler constructs the **CoinJoin transaction** and gives out to the Users for signing.\n\nEvery mix via Chaumian CoinJoin comes with a guarantee that Tumbler can neither violate anonymity, nor steal bitcoins. Furthermore Chaumian CoinJoin is by no means complex. Its simplicity allows it to be one of the most, if not the most performant on-chain mixing technique. A mixing round can be measured in seconds or minutes.  \n\n### Distributed CoinJoin\n\nIt is possible to distribute this scheme. Tim Ruffing's [CoinShuffle](http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf) and [CoinShuffle++](https://crypsys.mmci.uni-saarland.de/projects/FastDC/draft-paper.pdf) are novel attempts to do so. However distributed systems are hard to get right and their maintenance is problematic: they require various tradeoffs, they are more complex, they open the door for various attacks, updating or upgrading them are difficult. The implementation of Chaumian CoinJoin is straightforward, thus existing wallets can easily implement it. The Tumbler is untrusted, consequently it does not have the risk of coin stealing, nor the risk of privacy breaching, and so distributing this system might not be fully justified from a practical point of view.  \nAs Maxwell noted:  \n>  I don't know if there is, or ever would be, a reason to bother with a fully distributed version with full privacy, but it's certainly possible.  \n\nOf course distributed systems are more resilient, therefore distribution should certainly be an interest of future research.  \n\n### P2P anonymous communication protocols\n\nAs Maxwell noted:  \n> Any transaction privacy system that hopes to hide user's addresses should start with some kind of anonymity network. This is no different. Fortunately networks like [Tor](https://www.torproject.org/), [I2P](https://geti2p.net/), [Bitmessage](https://bitmessage.org/), and [Freenet](https://freenetproject.org/) all already exist and could all be used for this. (Freenet would result in rather slow transactions, however)  \n\nAnother advantage of [CoinShuffle++](https://crypsys.mmci.uni-saarland.de/projects/FastDC/draft-paper.pdf) is that it does not require such anonymity network as an external dependency, rather it implements its own P2P mixing protocol. DiceMix:  \n>  We conceptualize these P2P anonymous communication protocols as P2P mixing, and present a novel P2P mixing protocol, DiceMix, that needs only four communication rounds in the best case, and 4 + 2f rounds in the worst case with f malicious peers.  \n\nZeroLink requires such P2P anonymous protocols at mixing and at transaction broadcasting. [Tor](https://www.torproject.org/) is the most widely deployed such protocol. A ZeroLink compliant application should not use a Tor proxy to the clearnet, instead it should stay inside the Tor network and constrain its communication with [hidden services](https://www.torproject.org/docs/hidden-services.html.en). This constraint is needed to dodge various [attacks](https://en.wikipedia.org/wiki/Tor_(anonymity_network)#Weaknesses).  \n\nElimination of the Tor dependency should be an interest of future research.  \n \n### Privacy Is Teamwork\n\nThe theoretical anonymity set of a mixing technique is misleading. If one user of the mix gets deanonymized, the real anonymity set of the rest of the users drops. For instance, if one user participates in the mix through a full node and the rest through a web wallet, the anonymity set of the full node user against the web wallet company is zero. Therefore it is not acceptable that a set of users are using a mixing technique in a flawed way.\n\n### Transactions And Transaction Chains\n\n![](http://i.imgur.com/8DYjaqq.png)\n\nAny Bitcoin mixing technique must use a common denomination, otherwise simple amount analysis can re-establish the links, as Kristov Atlas did in his [CoinJoin Sudoku](http://www.coinjoinsudoku.com) analysis of Blockchain.info's [SharedCoin](https://github.com/sharedcoin/Sharedcoin). Since the service has been discontinued.\nThis notion leads to mixing in multiple rounds. For example if a user wants to mix eight bitcoins and the mixing denomination is one bitcoin, then it must use eight mixing rounds.  \nAdditionally when a Bitcoin wallet does not find enough value on an unspent transaction output (utxo), then it joins together that utxo with another utxo the wallet contains.  \nIf the post-mix wallet would function as a normal Bitcoin wallet too, the observer would notice post-mix transactions. Those are joining together mixed outputs. Since pre-mix wallets naturally divide and join utxos in order to fund a mixing round with the correct amount, similarly to CoinJoin Sudoku, a simple amount analysis on transactions chains, instead of transactions could re-establish links between pre-mix and post-mix wallets.  \n\n![](http://i.imgur.com/AqnwKMr.png)\n\nMoreover if Gregory Maxwell's [Confidential Transactions](https://elementsproject.org/elements/confidential-transactions/) are introduced to Bitcoin in the future, it could potentially solve the \"common denomination issue\". Such technique is Tim Ruffing's [ValueShuffle](https://eprint.iacr.org/2017/238.pdf), which is CoinShuffle with Confidential Transactions.\n\n### Theoretical And Real Anonymity Set\n\nTheoretical anonymity set refers to the anonymity set that is achieved by a bitcoin mixing technique within one round and does not weigh in external factors, like flawed wallet architecture or network analysis.  \nReal anonymity set is when these external factors are weighted in and transaction chains are analyzed.  \n\n### Alternative On-Chain Mixing\n\nThe Classic Tumbler mode of Ethan Heilman's [TumbleBit](https://eprint.iacr.org/2016/575.pdf) and Gregory Maxwell's [CoinSwap](https://bitcointalk.org/index.php?topic=321228.0) are not CoinJoin based, on-chain privacy techniques. They are both multiple times more expensive and slower than Chaumian CoinJoin. For example Nicolas Dorier's [NTumbleBit](https://github.com/NTumbleBit/NTumbleBit): TumbleBit Classic Tumbler implementation requires four transactions, therefore approximately four times transaction fees, CoinJoin requires only one. While NTumbleBit's Classic Tumbler requires hours to complete a round, CoinJoin minutes.  \nTim Ruffing's CoinShuffle, CoinShuffle++, ValueShuffle and Chris Belcher's and Adam Gibson's [JoinMarket](https://github.com/JoinMarket-Org/joinmarket) are CoinJoin based techniques. Ruffing's techniques were previously discussed, thus there is need not go in depth here.  \nJoinMarket introduced a novel maker-taker concept, where market makers are waiting until a taker wants to execute a CoinJoin transaction and asks market-makers to provide liquidity for his CoinJoin for a small fee. A single JoinMarket style CoinJoin of course gets expensive quickly as the anonymity set grows and it achieves plausible deniability rather than unlinkability, because how the makers use their coins after the mix will noticeably differ from the takers' behaviour. In addition JoinMarket provides more complex techniques, like `patientsendpayment.py` and `tumbler.py`. Gibson's detailed analysis of `tumbler.py` can be found in his GitHub: [Analysis of tumbler privacy](https://github.com/AdamISZ/JMPrivacyAnalysis/blob/master/tumbler_privacy.md).  \n\nMoreover when [Schnorr signatures](https://www.elementsproject.org/elements/schnorr-signatures/) are introduced to Bitcoin in the future, CoinJoin based techniques will get even more Blockchain space efficient.  \nMore detailed comparisons can be found in the article: [TumbleBit vs CoinJoin](https://medium.com/@nopara73/tumblebit-vs-coinjoin-15e5a7d58e3).  \n\nFurthermore it is possible to plug CoinShuffle, CoinShuffle++ or TumbleBit's Classic Tumbler mode into ZeroLink, instead of Chaumian CoinJoin.  \n\n### RFC2119\n\nThe key words \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\" and \"MAY\" in this document are to be interpreted as described in [RFC2119](https://tools.ietf.org/html/rfc2119).\n\n## II. Chaumian CoinJoin\n\n### A. Simplified Protocol\n\nAlice and Bob are the same user, however the Tumbler does not know this.  \n\n![Chaumian CoinJoin](http://i.imgur.com/eVUVM6i.png)\n\n#### 1. Input Registration Phase\n\nMany Alices register their: \n - confirmed utxos as the inputs of the CoinJoin,\n - proofs - those are messages signed with the corresponding private keys,\n - their desired change outputs,\n - and blinded outputs to the Tumbler.\n\nTumbler checks if inputs have enough coins, are unspent, confirmed, were not registered twice and that the provided proofs are valid, then signs the blinded output.  \nAlices unblind their signed and blinded outputs.\n\n#### 2. Output Registration Phase\n\nBobs register their signed outputs to the Tumbler.\n\n#### 3. Signing Phase\n\nTumbler builds the unsigned CoinJoin transaction and gives it to Alices for signing.  \nWhen all the Alices signed arrive, the Tumbler combines the signatures and propagates the CoinJoin on the network.\n\n### B. Achieving Liquidity\n\nWhen a round does not have enough liquidity, that would often result in low, even zero anonymity set rounds.  \nThe solution is when Tumbler has reached a desired anonymity set at Input Registration phase, another Connection Confirmation phase follows. This phase is intended to sort out disconnected Alices.  \nIn order to identify Alices: at Input Registration phase the Tumbler must assign unique identifiers to them. Using these unique identifiers Alices can confirm their connection at Connection Confirmation phase.  \nIf some Alices did not confirm their registration within the Connection Confirmation phase timeout, then the desired anonymity set is not reached, in consequence the round falls back to Input Registration phase.  \n\nHow should the desired minimum anonymity set be chosen? Manually or utilizing a dynamic algorithm:  \nChoose the minimum anonymity set to three and the maximum to 300. If the previous non-fallback Input Registration phase took more than three minutes then decrement this round's desired anonymity set relative to the previous desired anonymity set, otherwise increment it.  \nMore sophisticated algorithms may be applied, too.\n\n#### No need for multiple mixing rounds\n\nIf the denomination is one bitcoin and the user wants to mix eight bitcoins it must participate in eight mixing rounds. By allowing the user to register eight outputs within one round, this issue can be bypassed, resulting eight times cheaper and faster mixing. The drawbacks are weaker anonymity set, less liquidity, more complex implementation and longer mixing rounds. This improvement should be considered to be implemented when a Tumbler has achieved massive liquidity. In depth discussion and specification can be found under the issue: [Bypass the need for multiple mixing rounds](https://github.com/nopara73/ZeroLink/issues/21).\n\n### C. Optimizing Performance\n\nWhen to change between phases?  \nPhases can be triggered by Bitcoin blocks, for instance every time a block arrives the next phase is triggered. In order to eliminate the inconsistencies of the Bitcoin network it is a better idea to trigger a new phase at every even block.  \nNonetheless, it results in unnecessarily long mixing rounds.  \nAnother way is to stick phases into timeframes. Assuming a performant Tumbler and optimal utilization of the anonymity network by the clients, one minute is enough to complete every phase. While it is a more performant way to complete a tumbling round, it is still not optimal.  \nOptimal performance is achieved when the Tumbler triggers the changes between phases, because it is the only actor that is aware of when a phase completes. The issue is: a Tumbler can execute various timing attacks, that results in user deanonymization. To make sure the Tumbler is honest about its phases, all clients must setup another, monitoring identity: Satoshi, who monitors the phases, so the Tumbler does not know who to lie to.  \nIn addition every phase must time out after one minute. Timeout happens when malicious or disconnected Alice is detected.\n\n#### How long does a round take?  \n\nThe first phase: Input Registration, using the recommended dynamic anonymity set algorithm at low liquidity could take hours or days. At medium liquidity it will average three minutes, at high liquidity it will run within a few seconds.  \n\nIf actors disconnect during Input Registration, Connection Confirmation will time out after one minute, otherwise this phase should execute quickly.  \n\nFor the remaining phases, assuming no malicious actors and optimal anonymity network utilization, the bottle neck is the size of the transaction being downloaded by the clients, which at high liquidity would be approximately 100k byte. Even in this case the round should execute within a couple of seconds.  \n\nAssuming sophisticated malicious actors at Output Registration, the round aborts within two minutes, because the phase's timeout is one minute and these Alices could potentially delay their connection confirmation up to 0:59 seconds after the start of Connection Confirmation.  \n\nAssuming worst case sophisticated malicious actors at Signing, the round aborts within three minutes, because the timeout of signing phase is one minute and they could potentially delay their connection confirmation and output registration up to 0:59 seconds after the start of Connection Confirmation and Output Registration phases.\n\n#### Speeding Up Mixing\n\nAll Chaumian CoinJoin inputs MUST be Segregated Witness inputs. This prevents the transaction from being malleated, and as a result, the Tumbler can accept unconfirmed Chaumian CoinJoin change outputs from the user in the next round.\n\n### D. DoS Attack\n\nThere are various ways malicious users can abort a round and there are various ways to defend against it:\n\n1. Banning IP addresses,  \n2. Complete with subset,  \n3. Closed source DoS protection,  \n4. Utilization of fidelity bond,  \n5. Banning the registration of provided utxos and related utxos of malicious Alice.\n\n\nDue to the nature of anonymity networks, which tend to reuse IP addresses, banning IP addresses SHOULD NOT be utilized.  \nThe \"complete-with-subset\" model MAY be implemented, however it is not clear if its benefits justify its complexity. A Tumbler MAY close source its DoS protection algorithm, thus forcing attackers into reverse engineering.  \n[Utilization of fidelity bonds](https://github.com/nopara73/ZeroLink/issues/6#issuecomment-321662470) SHOULD NOT be utilized. It ruins user experience and results in longer rounds.  \nThis document recommends a DoS defense based on the utxo registration banning technique, which makes it economically infeasible to execute DoS attacks. In addition the Tumbler operator MUST evolve the protections if the need arises.  \nThis protection requires the Tumbler to identify the malicious Alice's utxos it registered as inputs for the CoinJoin. The identification of malicious utxos is explained by examining all possible variations of DoS attacks.\n\n**DoS 1: What if an Alice spends her input prematurely?**  \nIf it happens at Input Registration phase the Tumbler SHOULD ban the malicious Alice.  \nIf it happens at later phases the round falls back to input registration phase, and all the so far provided CoinJoin outputs SHOULD be banned by the Tumbler.  \nClients MUST not ever register with the same CoinJoin output twice, even if the round fails, otherwise the Tumbler could work with that information.  \n**DoS 2: What if an Alice refuses to sign?**  \nThe same strategy applied as in DoS 1.  \n**DoS 3: What if a Bob does not provide output?**  \nThe same strategy is applied as in DoS 1 and DoS 2. The only difference is that Alices who do not wish to be banned reveal their registered outputs in a new Blame Phase.\n\nA ban SHOULD time out after one month.  \n\nTo find the optimal severity of utxo banning the attacker's Initial Bitcoin Requirements and Attack Costs are helpful metrics. These metrics are calculated in this document by assuming one bitcoin Tumbler denomination, $1 network transaction fees and that the attacker is willing to keep up the attack for one day.  \nThe most sophisticated attacker can delay the execution of a round by a maximum of up to three minutes. Therefore there can be a minimum of `24h*(60m/3m)=`480 rounds per day an attacker must to disrupt.  \nFor simplicity this document assumes a malicious Alice only registered one utxo. If there are any other utxos Alice registered with, the same ban applies to them.  \n\n#### Severity 0: No utxo banning\n\n![](http://i.imgur.com/dVMnVLO.png)\n\nAt level zero severity the attacker can re-register and disrupt a round as many times as it wants.\n\nAttack|Initial Bitcoin Requirements|Attack Costs\n------|----------------------------|---------------\nI.    |1btc                        |$0\n\n#### Severity 1: Banning the malicious utxo\n\n![](http://i.imgur.com/SBqVPwb.png)\n\nIn this case the most effective attack if the attacker holds 480btc. Assuming the attacker doesn't have 480btc predivided perfectly into 1btc outputs, the attacker must first predivide them and attack with those utxos. Predividing such amount is 1 transaction with 480 outputs. A transaction output is [approximately 20%](https://bitcoin.stackexchange.com/q/1195/26859) of a transaction, therefore the cost of this attack is `480out*0.2=`$96.  \n\nThe second attack can be executed with less Initial Bitcoin Requirements. The attacker can first disrupt a round, then make a transaction, so the output of that transaction is not banned, then register that output to the next round. Of course Bitcoin transactions are not instant and a Tumbler only accepts confirmed outputs, thus assuming every Bitcoin transaction confirms within ten minutes, the attacker must have around four bitcoins to begin with. By not factoring in the predivision, the attacker must make `480-4=`476 transactions to disrupt the tumbling for a day. That costs $476.\n\nAttack|Initial Bitcoin Requirements|Attack Costs\n------|----------------------------|---------------\nI.    |480btc                      |$96\nII.   |4btc                        |$476\n\n#### Severity 2: Banning the malicious utxo and all its sibling utxos\n\n![](http://i.imgur.com/AqmaimX.png)\n\nThe first attack, where the attacker holds 480btc does not work anymore. Because of the predivision, all the utxos would be banned:\n\n![](http://i.imgur.com/Uz8uw80.png)\n\nTherefore, what the attacker would have to do is to predivide its coins in a different way. It cannot create one big transaction, instead it creates 480 transactions, thus its attack cost is $480.  \n\nThe second attack results in exactly 480 transactions, too.  \n\nAttack|Initial Bitcoin Requirements|Attack Costs\n------|----------------------------|---------------\nI.    |480btc                      |$480\nII.   |4btc                        |$480\n\n#### Severity 3,4,5,6...\n\nTo impose additional costs to the second type of attack, the Tumbler can ban the outputs of the transaction that spends the malicious output.\n\n![](http://i.imgur.com/BURPSWP.png)\n\nIn this case the attacker has to do one extra transaction to be able to use its coins for attacking again. After the predivision the attacker can disrupt four rounds, spends its banned malicious outputs, each one twice. Note, spending an unconfirmed output is valid. That results in `2*4=`8 transactions. It disrupts four more rounds, then spends eight more transactions and so on... The final transaction count will be `(480-4)*2=`952.\n\nAttack|Initial Bitcoin Requirements|Attack Costs\n------|----------------------------|---------------\nI.    |480btc                      |$480\nII.   |4btc                        |$952\n\nThe higher the severity is, the higher the Attack Costs are.\n\n![](http://i.imgur.com/YFuYI8d.png)\n\nThe issue is increasing severity might result in banning honest actors out of the mix: if honest actors get their coins from malicious ones, therefore severity should be kept at level two and only to be increased if needed.  \n\n#### Imposing additional Attack Costs to attackers with huge Initial Bitcoin Reserves\n\nMoving the other direction on the transaction chain, towards the parents of the malicious utxo and banning them and their children from participating in further mixes, imposes additional costs to attackers with huge Initial Bitcoin Reserves. Such strategies should be used only if needed because it assumes the parent utxos and their children are controlled by the attacker. This assumption increases the possibility of banning honest actors.\n\n#### Lowering denomination\n\nBy calculating the metrics the Tumbler denomination of one bitcoin was assumed. Lowering this does not affect the Attack Costs, it only affects the Initial Bitcoin Requirements. \n\n#### Dependence on high Bitcoin transaction fees\n\nAttack Cost calculation assumed $1 Bitcoin transaction fees. The proposed DoS defense in a zero fee environment is not sufficient.\n\n#### Can this system be bypassed with Bitcoin exchanges/mixers or similar services?\n\nThe Attack Costs cannot be bypassed. Using such services would only impose additional costs on the attacker and introduce third party risk.\n\n**DoS 4: What if Bob provides a signed output in the wrong round?**   \n\nAnother DoS attack [was identified](https://github.com/nopara73/ZeroLink/issues/51) by Antoine Walter. If Bob refuses to provide an output in the round it acquired its signature, then the corresponding Alice gets banned in Signing phase, because she will not provide signature to the CoinJoin.  \nHowever Bob's output will never be unblinded, therefore at OutputRegistration phase the Tumbler does not know if the output had been signed in the current round or in previous round.  \nIn order to disrupt the round Alice can keep acquiring signatures (at the expense of having her utxos banned) and providing outputs to incorrect rounds.  \nFor privacy reasons the Tumbler MUST refuse the same blinded signature to be registered twice in the Input Registration phase and the Tumbler MUST refuse the same active output to be registered twice in the Output Registration phase. This already makes it uneconomical to keep this attack up for too long, but ZeroLink introduces an extension to the Chaumian CoinJoin protocol to completely defend against this attack:  \n\n1. At Connection Confirmation phase, for Alice's connection confirmation request, the Tumbler answers with a hash of all inputs, called `roundHash`.  \n2. At Output Registration phase this `roundHash` must be provided to the Tumbler by Bob.  \n3. At Signing phase, when Alice acquires the CoinJoin, she must check if the `roundHash` is indeed the hash of all inputs.  \n\nThe question arises, why not use a random round identifier, instead of `roundHash`? It is because the Tumbler could trick Alices into providing them different round identifiers and with that information deanonymizing the round.  \n\n### E. Sybil Attack\n\n![](http://i.imgur.com/oQyrzqc.png)\n\nIt is possible to deanonymize a user if every participant of the mix is the attacker, except the user. Similarly to [Xim: Sybil-Resistant Mixing for Bitcoin](https://people.cs.umass.edu/~gbiss/mixing.pdf), the cost of this attack grows as the anonymity set grows. However, unlike in Xim, this attack is only feasible if the Tumbler is the attacker. If the attacker is not the Tumbler, it would have to figure out exactly in which rounds the targeted user participates and it must make sure nobody else gets to participate in that mix.  \nFurthermore executing a covert Sybil attack as a Tumbler is not evident, it depends on the protocol implementation. Overt Sybil attack as a Tumbler is always possible, however in that case the Tumbler is accountable.  \n\nTo execute this attack: when the Tumbler notices an input is registered that it wants to deanonymize, it must refuse all the following input registrations and all the Connection Confirmations that have already been registered and are not from the target. Refusing input registration can happen for many reasons, therefore it can be done in a covert way, however refusing Connection Confirmation cannot. It can only happen if the input has been spent, therefore malicious Tumbler can be noticed. Clients whose Connection Confirmation are refused and they did not prematurely spent their inputs SHOULD NOT use the Tumbler anymore.  \nThe cost of the Sybil attack at $1 transaction fees is `1.2 * number of sybils * $1`. If the number of sybils is 100 and the denomination is one bitcoin, the Tumbler must first predivide 100btc into 100 one btc outputs, which is about `$1*(100*0.2)`= $20, wait until the transaction confirms, then it must pay the CoinJoin fees, which is about $100, so the cost of this attack is $120 per round.  \nThis pattern can be noticed by the post-mix wallet. In this case the post mix wallet MAY require re-mixing the coins.  \n\nThere are various other ways to address Tumbler Sybil attacks in expense of the complexity of pre-mix wallet implementations. Defending Sybil attacks should be an interest of future research.\n\n\n### F. General schema\n\nAlice and Bob are the same user, however the Tumbler does not know this.  \n\n![](https://i.imgur.com/xGhaSmS.jpg)\n\n\n## III. Wallet Privacy Framework\n\n### A. Pre-Mix Wallet\n\nA pre-mix wallet can be any Bitcoin wallet, without much privacy requirements.  \nPre-mix wallets MUST either get bitcoin addresses of the post-mix wallet directly, for instance through a local RPC API or through the sharing of the post-mix wallet's [extended public key](https://bitcoin.org/en/glossary/extended-key). In the latter case, pre-mix wallets MUST NOT share the extended public key or any of its derived keys of the post-mix wallets with any third party.  \nPre-mix wallets MUST be mixing from Segregated Witness outputs. This lowers the size of the transaction, thus enabling lower transaction fees overall, allows for a higher theoretical anonymity set and enables faster mixing by not needing to wait for confirmation when the input is an output of a Chaumian CoinJoin transaction, because the transaction will not be malleated.   \n\nPre-mix and post-mix wallets MAY be separate wallet accounts within the same wallet. From an end user perspective the following GUI workflow illustrates how such wallets might work:  \n\n![HiddenWalletTumbleBit1](http://i.imgur.com/xT0Ezvm.png)  \n![HiddenWalletTumbleBit2](http://i.imgur.com/rdOGZKG.png)\n\n#### Retrieving Transaction Information  \n\nA pre-mix wallet can use a privacy breaching way to retrieve transaction and balance information, for instance it can query its address balances through a web API. In this case the web API knows about all the addresses the user possesses. However a pre-mix wallet MUST NOT use a privacy breaching way to acquire information about the children of the extended public key, otherwise it would expose the post-mix wallet to a third party. An additional problem is that the pre-mix wallet cannot ever register the same addresses twice to a Tumbler. Therefore the pre-mix wallet must always register the next unused extended public key child, that was not registered before.  \n\nA user to use the same extended public key in multiple pre-mix wallets is unlikely to happen, as well should be discouraged. If this is a given, a pre-mix wallet can keep records which derived keys it already registered before and never acquire their balances. This approach brings additional issues at wallet recovery.  \n\nAnother way to solve this is to have a server that tells the pre-mix wallet all the addresses that have ever been used in CoinJoin transactions. In this case the pre-mix wallet does not expose which addresses it is interested in, because it gets all the addresses that any pre-mix wallet can be interested in. Additionally a pre-mix wallet MUST keep records of which derived keys it already registered before.  \nThis approach is reliable, it can handle proper wallet recovery and the case if multiple pre-mix wallets use the same extended public keys. Some information leak is still possible, however it is unlikely.  \nInformation leak happens if:  \n- a malicious attacker disrupted a round that the user is participated in\n- AND the user either decides to recover its wallet OR is using the same extended public keys in another pre-mix wallet right after the disrupted round  \n- AND the Tumbler does not reject the already registered, but unused address  \n- AND the Tumbler is malicious.\n\nIf all the above conditions are true, the Tumbler may be able to deanonymize the user.\n\nThe Tumbler MAY be the third party who serves the addresses. In this case the Tumbler could serve the already registered, but unused addresses, too.\n\n### B. Post-Mix Wallet\n\nThe privacy requirements of the post-mix wallet are stronger, than that of the pre-mix wallet.  \nA post-mix wallet MUST NOT breach its users privacy and it SHOULD work in the same way as every other post-mix wallet. For example, if only one wallet software is used as a post-mix wallet and it supports [Replace-by-Fee](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki), Blockchain analysis cannot come to valuable conclusions. However if different wallet software is used as post-mix wallets and one of them does not support it, blockchain analysis can identify which wallet software is used as a post-mix wallet.  \nThe first implementation of post-mix wallet will set precedents. In the future, when multiple implementations are created, it is important that these implementations are indistinguishable from the first implementation.  \n\n**Basic Post-Mix Wallet Requirement** refers to the requirement that the wallet software must fulfil in order to avoid after-mix deanonymization, assuming the wallet software is the only wallet software that is used as a post-mix wallet of a specific mix.  \n**Post-Mix Wallet Uniformity Requirement** refers to the requirement that the wallet software must fulfil in order to avoid after-mix deanonymization, assuming the wallet software is NOT the only wallet software that is used as a post-mix wallet of a specific mix.  \n\nRedesigning the post-mix-wallet based on the [Clusterfuck Wallet idea](https://github.com/nopara73/ZeroLink/issues/42) and considering possible JoinMarket additions should be an interest of future research.\n\n#### Coin Selection\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n|Post-mix wallet MUST prevent joining inputs together.||\n\n![](http://i.imgur.com/BbSM9N4.png)\n\nIf the post-mix wallet would function as a normal Bitcoin wallet, the observer would notice post-mix transactions, those are joining together mixed outputs. In this case the real anonymity set of all the users who participated in the same mixes would suffer.  \nAdding coin control feature to the post-mix wallet account in the same way Bitcoin Core does encourages more conscious post-mix wallet management. Nevertheless, users would eventually still join inputs together.  \n![Coin Control Feature](http://i.imgur.com/i67J7JS.png)  \nIt is better to prevent input joining in post-mix wallets altogether. This, of course naturally restricts the usability of the wallet. This prevents the users from making bigger denomination payments at first, then they are constrained to spend a maximum of their biggest change amount. This is expected to be violated in many ways, such as a user could keep sending out its freshly mixed coins to another wallet and join their inputs together there. This restriction however is necessary in order to narrow the gap between the theoretical and real anonymity set of all users of the mixer.  \n\nTo enhance usability of a post-mix wallet\n- the wallet MAY implement coin control feature, \n- the wallet MAY offer the user to donate smaller change outputs, instead of getting them back. This could even finance the development of such wallet,  \n- the wallet MAY also implement a visualized transaction history, instead of a traditional wallet history.\n\n---\n![](https://i.imgur.com/xvizcmu.png)\n---\n![](https://i.imgur.com/WMv4vQU.png)\n---\n\n##### Dead Change Attack\n\n![](http://i.imgur.com/3LtkqNA.png)\n\nWhile the recommended strict coin selection properly separates mixed coins from each other, it does not protect against the [dead change attack](https://www.dash.org/forum/threads/dead-change-an-anonymity-issue.3019/). Change outputs will be used for different purposes, therefore it is possible to connect those payments together. Fortunately it does not affect the anonymity set of other users who participated in the mix, but it does affect individual privacy.  \nTo encourage more cautious user behavior post-mix wallet MAY implement a transaction labeling system, so users can decide manually what purchases it does not care about if they are connected together by third party observers.  \n\n##### Additional Anonymity Set\n\nA post-mix wallet MAY offer to make a user's first purchase to be a regular CoinJoin transaction, without the usage of fixed denomination so additional anonymity set can be achieved. In this CoinJoin every input transaction is the same denomination, therefore an observer will not be able to tell who wanted to pay who, it can only figure out which change belongs to which active output.  \n\n![](https://i.imgur.com/1IotuiI.png)\n\n#### Change ScriptPubKeys\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n||Post-mix wallet SHOULD always generate P2WPKH ScriptPubKeys as the change output of a built transaction.|\n\n#### Active ScriptPubKeys\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n||Post-mix wallet SHOULD be able to build transactions to P2PKH, P2WPKH, P2SH and P2WSH active outputs.|  \n\nIf all post-mix wallet software would only be able to send to P2PKH active outputs, except one post-mix wallet software, that supports P2WPKH active outputs, too, then Blockchain analysis can identify the outlier post-mix wallet software.  \n\n#### Transaction Output Indexing\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n||Post-mix wallet SHOULD index its built transaction outputs randomly.|\n\nA post-mix wallet, due to its design, will only have one input and a maximum of two outputs at all times. Uniform indexing of outputs is necessary in order for multiple post-mix wallet implementations to look the same. A post-mix wallet SHOULD use random indexing of outputs.\n\nRandom indexing is not exclusively beneficial for post-mix wallet uniformity, conversely it has another privacy benefit. When a wallet software always generates the change output on the second index, observers always know which output is the change.\n\nIt must be mentioned [BIP69](https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki), Lexicographical Indexing of Outputs was created for the same purpose, however random indexing is slightly more private. If a blockchain observer wants to know if a transaction is in a wallet, using this BIP leaves a track, because it uses a deterministic algorithm, while random indexing leaves no tracks.\n\n#### Fee Rate Estimation\t\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n|-|Post-mix wallet SHOULD utilize fee rate sanity check through the same web API that is used by all other post-mix wallet software.|\n\nOne way blockchain analysis attempts to figure out which wallet a transaction was constructed with, is by examining the fee patterns. Therefore post-mix wallet implementations SHOULD use unified fee estimations.  \n\nBitcoin Core `estimatesmartfee` may differ node by node, based on how much information is available to the node. Usually if a Bitcoin wallet is not built on top of Bitcoin Core's RPC API, it either implements its own fee estimation algorithm or uses a public API.  \n\nPost-mix wallet SHOULD utilize fee rate sanity check through the same web API that is used by all other post-mix wallet software.  \nThe first implementation of the post mix wallet will set precedent. This sanity check should range from Bitcoin Core's RPC's `estimatesmartfee 1 CONSERVATIVE` to `estimatesmartfee 1008 ECONOMICAL`.  \nPost-mix wallet SHOULD be able to produce any integer satoshi/byte fee rate that falls between the sanity check. It can be done, for instance salting results with randomization or from the UI with a slider, where the steps are integer numbers.  \n![](https://i.imgur.com/JDF48aM.png)\n  \nIn order to avoid the identification of the transaction by timing attack, executed by the web api, post-mix wallets SHOULD retrieve sanity check from the common web API randomly from every three to ten minutes.  \n\n#### Fee Calculation\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n|-|Post-mix wallet SHOULD calculate the final fee virtual size. Post-mix wallet SHOULD make sure the final fee falls into sanity check.|  \n\nVirtual size is defined in [Segregated Witness Wallet Development Guide](https://bitcoincore.org/en/segwit_wallet_dev/).  \nIf any post-mix wallet produces a fee that does not fall into the sanity check, with ten minutes fault tolerance, Blockchain analysis companies can reverse engineer the source code of all post-mix wallet software, figure out which wallet software can produce such results and the post-mix wallet software can be tied to the transaction.  \n\n#### Replace-by-Fee\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n||Post-mix wallet SHOULD prevent its users from utilizing RBF.|\n\nReplace-by-Fee, [RBF](https://bitcoin.org/en/glossary/rbf) is an often used feature. On the one hand its usage is beneficial, on the other hand the way RBF is used by a wallet software helps blockchain analysis to identify the wallet software in use.  \nCreation of a common algorithmic utilization of RBF should be an interest of future research. Bram Cohen's [article](https://medium.com/@bramcohen/how-wallets-can-handle-transaction-fees-ff5d020d14fb) might be a good starting point.\n\n#### Spending Unconfirmed Transactions\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n||Post-mix wallet SHOULD let its users spend unconfirmed outputs.|\n\nIt is possible to spend the output of a transaction that did not confirm yet. Post-mix wallet SHOULD let its users to spend unconfirmed transactions.  \nIf a post-mix wallet software does not let its users to spend unconfirmed outputs, and Blockchain analysis finds a post-mix transaction that spends an unconfirmed output, it knows that output cannot come from that the post-mix wallet software.  \nSince spending unconfirmed outputs can be dangerous, post-mix wallets MAY discourage the user to do so, for instance with a warning.  \n\n#### Retrieving Transaction Information\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n|Post-mix wallet MUST retrieve transaction information in a private way.||\n\nRetrieving private transaction information from the Blockchain is the [most challenging](https://hackernoon.com/bitcoin-privacy-landscape-in-2017-zero-to-hero-guidelines-and-research-a10d30f1e034) part of implementing a wallet that aims to not breach its users' privacy. Querying the balances of a central server shares private information with that central server. Bloom filtering SPV wallets are [not sufficiently private](https://groups.google.com/forum/#!msg/bitcoinj/Ys13qkTwcNg/9qxnhwnkeoIJ) either.  \n\nThere are four types of wallet architectures, ZeroLink classifies a private:    \n1. **Full Nodes:** Since they download all the transactions the network has nobody can tell who is interested in what transactions.  \n2. **Full Block Downloading SPV Wallets:** Such wallets download all transactions the network has from the creation of the wallet, consequently they do not need to wait weeks for [Initial Block Downloading](https://bitcoin.org/en/glossary/initial-block-download) and they do not store hundreds of gigabytes of Blockchain data. They throw away what they do not need. There are three implementations of such wallet, all in the testing phase: [Jonas Schnelli's PR to Bitcoin Core](https://github.com/bitcoin/bitcoin/pull/9483), \u00c1d\u00e1m Fics\u00f3r's [HiddenWallet](https://github.com/nopara73/HiddenWallet) and Stratis' [BreezeWallet](https://github.com/stratisproject/Breeze).\n3. **[Transaction Filtered Full Block Downloading Wallet](https://medium.com/@nopara73/full-node-level-privacy-even-for-mobile-wallets-transaction-filtered-full-block-downloading-wallet-16ef1847c21):** Which only exists as an idea to date.  \n4. **ZeroLink Specific Transaction Retrieval:** There is an easier and more user friendly way to achieve it: The post-mix wallet MAY accept deposits to be directly made to its addresses, without mixing. Since the input joining is disallowed there is no reason not to enable that. However if the post-mix wallet disables it, it can simply query all the Chaumian CoinJoin transactions and all its ZeroLink compliant children, since it is not interested in any other transaction. This would result in drastically better user experience, because it does not need to wait hours for Blockchain syncing.  \n  \nFurthermore, because every time a CoinJoin transaction fails a new post-mix wallet output is registered, post-mix wallets SHOULD be monitored in huge depth. While it is unlikely that an attacker tries to disrupt every round, because of the reasons detailed above, nevertheless a post-mix wallet is recommended to monitor 1000 clean addresses after the last used one. In this case a post-mix wallet would still show the right balance if the pre-mix wallet participates in disrupted rounds continuously for two days.  \nAlternatively, if the Tumbler serves already registered, but unused addresses, the post-mix wallet can use this to avoid monitoring huge depths.  \n\n#### Transaction Broadcasting\n|Basic Post-Mix Wallet Requirement|Post-Mix Wallet Uniformity Requirement|\n|---------------------------------|--------------------------------------|\n|Post-mix wallet MUST broadcast transactions in a private way.|Post-mix wallet SHOULD broadcast transactions over Tor through the same web API that is used by all other post-mix wallet software.|\n\nAs [Dandelion: Privacy-Preserving Transaction Propagation](https://github.com/gfanti/bips/blob/master/bip-dandelion.mediawiki) BIP candidate explains:\n> Bitcoin transaction propagation does not hide the source of a transaction very well, especially against a \u201csupernode\u201d eavesdropper that forms a large number of outgoing connections to reachable nodes on the network. From the point of view of a supernode, the peer that relays the transaction *first* is the most likely to be the true source, or at least a close neighbor of the source. Various application-level behaviors of Bitcoin Core enable eavesdroppers to infer the peer-to-peer connection topology, which can further help identify the source.\n\nDandelion's explanation only applies to full nodes. Most wallet software is not constantly relaying transactions, for instance when the wallet software only connects to other nodes on the network to broadcast its transactions.  \n\nZeroLink classifies broadcasting transactions over an anonymity network to the Bitcoin network as private.  \nThus in order to fulfil Basic Post-Mix Wallet Requirement post-mix wallet MUST broadcast transactions in a private way.  \nPost-mix wallet SHOULD change anonymity network identity between every transaction broadcast.  \nIn order to fulfil the Post-Mix Wallet Uniformity Requirement, post-mix wallet SHOULD broadcast transactions over Tor through the same web API that is used by all other post-mix wallet software. \nPost-mix wallet SHOULD broadcast every transaction on different Tor circuits.  \n\nPrivate transaction broadcasting, especially Dandelion, should be an interest of future research.\n\n#### Moving Money Between Post And Pre-Mix Wallets\n\nThe user MAY send transactions from pre-mix to post-mix wallet directly, because joining inputs are not allowed in post-mix wallets, therefore the coins will be separated.  \nThe user SHOULD NOT send transactions from post-mix to pre-mix wallet directly, because pre-mix wallets join inputs together. If an observer notices any connection between pre-mix coins and post-mix coins, it may re-establish a link in the CoinJoin transaction.\n\n# IV. Implementation\n\nIn August 1, 2018, [Wasabi Wallet](https://wasabiwallet.io/) was successfully deployed into production.\n"
 },
 {
  "repo": "johannbarbie/BitcoindClient4J",
  "language": "Java",
  "readme_contents": "# Bitcoind Json Rpc Client for Java\n[![Build Status](http://staging.37coins.com:4080/buildStatus/icon?job=build_BitcoindClient4j)](http://staging.37coins.com:4080/job/build_BitcoindClient4j/)\n\nThis is a Java library to call the Json Rpc API of the reference implementation Bitcoind. The goal is to support all methods listed in the `./bitcoind help`-command. The implementation started from version 0.8.3 of Bitcoind and will not support previous versions. For further details about the implemented API visit [the bitcoin.org wiki](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list). Currently tested version is 0.9.0.\n\n## Build\n\nHaving [OpenJDK 7](http://openjdk.java.net/install/) and [Maven 3](http://maven.apache.org/download.cgi) installed, execute:\n```bash\n  mvn clean install\n```\n\n## Usage\n\nMaven will need to know where to search for this artifact. Add this to your `pom.xml`:\n```xml\n    <repository>\n      <id>BitcoindClient4j</id>\n      <name>GitHub BitcoindClient4j Repository</name>\n      <url>https://s3.amazonaws.com/37mvnrepo/release</url>\n    </repository>\n```\nThen add the dependency itself:\n```xml\n    <dependency>\n      <groupId>com.37coins</groupId>\n      <artifactId>BitcoindClient4J</artifactId>\n      <version>0.2.2</version>\n    </dependency>\n```\nHaving dependencies resolved, you can code away. First initialize the Factory with network parameters:\n```java\n  BitcoindClientFactory clientFactory = \n      new BitcoindClientFactory(\n          new URL(\"http://localhost:8332/\"), \n          \"user\", \n          \"password\");\n```\nThen get a client instance:\n```java\n  BitcoindInterface client = clientFactory.getClient();\n```\nNow you can make calls to your node:\n```java\n  Info info = client.getinfo();\n```\n\nIf you had the API start your bitcoind, you might be interested in stopping it again:\n```java\n  client.stop();\n```\n\n### Blockchain Events\n\nThe library also captures notifications from Bitcoind using the startup configuration. Launch your deamon with those parameters:\n```bash\n  ./bitcoind  -blocknotify=\"echo '%s' | nc 127.0.0.1 4001\" \n              -walletnotify=\"echo '%s' | nc 127.0.0.1 4002\" \n              -alertnotify=\"echo '%s' | nc 127.0.0.1 4003\" \n              -daemon\n```\nOr, if you have your bitcoind locally, have the API start up the daemon. Call the factory with a path instead of network parameters:\n```java\n  BitcoindClientFactory clientFactory = \n      new BitcoindClientFactory(\n          \"/home/user/.bitcoin/\",\n          Arrays.asList(\"./bitcoind\"));\n```\n\nYou can register observers to capture events about blocks, addresses in you wallet, and alerts:\n```java\n  new BlockListener(client).addObserver(new Observer() {\n    @Override\n    public void update(Observable o, Object arg) {\n      Block block = (Block)arg;\n    }\n  });\n```\n\nMake sure to close sockets later:\n```java\n  blockListener.stop();\n```\n\n## Donations\n\nBitcoin donations can be sent to:\n```\n  152jsQJyQwxRywuHVVGLFEHkZqJ4QzuFS3\n```\nThanks!\n\n## License\n\nGPL3, see LICENSE.txt"
 },
 {
  "repo": "dvf/blockchain",
  "language": "C#",
  "readme_contents": "# Are you looking for the source code for my book?\n\nPlease find it here: https://github.com/dvf/blockchain-book\n\nThe book is available on Amazon: https://www.amazon.com/Learn-Blockchain-Building-Understanding-Cryptocurrencies/dp/1484251709\n\n# Learn Blockchains by Building\u00a0One\n\n[![Build Status](https://travis-ci.org/dvf/blockchain.svg?branch=master)](https://travis-ci.org/dvf/blockchain)\n\nThis is the source code for my post on [Building a Blockchain](https://medium.com/p/117428612f46). \n\n## Installation\n\n1. Make sure [Python 3.6+](https://www.python.org/downloads/) is installed. \n2. Install [pipenv](https://github.com/kennethreitz/pipenv). \n\n```\n$ pip install pipenv \n```\n3. Install requirements  \n```\n$ pipenv install \n``` \n\n4. Run the server:\n    * `$ pipenv run python blockchain.py` \n    * `$ pipenv run python blockchain.py -p 5001`\n    * `$ pipenv run python blockchain.py --port 5002`\n    \n## Docker\n\nAnother option for running this blockchain program is to use Docker.  Follow the instructions below to create a local Docker container:\n\n1. Clone this repository\n2. Build the docker container\n\n```\n$ docker build -t blockchain .\n```\n\n3. Run the container\n\n```\n$ docker run --rm -p 80:5000 blockchain\n```\n\n4. To add more instances, vary the public port number before the colon:\n\n```\n$ docker run --rm -p 81:5000 blockchain\n$ docker run --rm -p 82:5000 blockchain\n$ docker run --rm -p 83:5000 blockchain\n```\n\n## Installation (C# Implementation)\n\n1. Install a free copy of Visual Studio IDE (Community Edition):\nhttps://www.visualstudio.com/vs/\n\n2. Once installed, open the solution file (BlockChain.sln) using the File > Open > Project/Solution menu options within Visual Studio.\n\n3. From within the \"Solution Explorer\", right click the BlockChain.Console project and select the \"Set As Startup Project\" option.\n\n4. Click the \"Start\" button, or hit F5 to run. The program executes in a console window, and is controlled via HTTP with the same commands as the Python version.\n\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n"
 },
 {
  "repo": "in3rsha/bitcoin-utxo-dump",
  "language": "Go",
  "readme_contents": "# Bitcoin UTXO Dump\n\n**Warning:** This tool may corrupt your chainstate database. If it does, you will need to run `bitcoind -reindex-chainstate` the next time you run bitcoin, and this usually takes around a day to complete. It's not a terrible problem, but it can be annoying. I'm not entirely sure why it happens, so if you can figure out how to fix it, that would be cool.\n\nYou can get around this issue by first copying the chainstate database to an alternate location and then run `bitcoin-utxo-dump` pointing to this alternate location. Here's a example:\n\n```bash\n# 0. stop bitcoin daemon\nbitcoin-cli stop\n\n# 1. copy the chaninstate data to an alternative location\nrsync --delete -av ~/.bitcoin/chainstate/ ~/bitcoin-chainstate-clone/\n\n# 2. now run the bitcoin-utxo-dump pointing to this alternate location\nbitcoin-utxo-dump -db ~/bitcoin-chainstate-clone/\n```\n\n-----\n\n![](assets/bitcoin-utxo-dump.gif)\n\nGet a **list of every unspent bitcoin** in the blockchain.\n\nThe program iterates over each entry in Bitcoin Core's `chainstate` [LevelDB](http://leveldb.org/) database. It decompresses and decodes the data, and produces a human-readable text dump of all the [UTXO](http://learnmeabitcoin.com/glossary/utxo)s (unspent transaction outputs).\n\n### Example CSV Results:\n\n```\ncount,txid,vout,amount,type,address\n1,033e83e3204b0cc28724e147f6fd140529b2537249f9c61c9de9972750030000,0,65279,p2pkh,1KaPHfvVWNZADup3Yc26SfVdkTDvvHySVX\n2,e1c9467a885a156e56a29d9c854e65674d581ad75611b02290454b4862060000,1,9466355,p2pkh,1LpCmEejWLNfZigApMPwUY9nZTS8NTJCNS\n3,a1f28c43f1f3d4821d0db42707737ea90616613099234f905dfc6ae2b4060000,1,339500,p2pkh,1FuphZ7xVPGrxthQT1S8X7nNQNByYxAT3V\n4,818f5b9e3ede69da765d4c24684e813057c9b1f059e098661369b0a2ee060000,0,300000,p2pkh,18Y9yhjU9g2jjJmvaUy7TmUNZH9iPzQ4dd\n5,d2f5e439152d076593a145581f8d76ea2e48ed155285b9a245cd42dd06070000,0,100000,p2pkh,1EKHTvovYWHfUJ6i9vsoidyTPQauCPH1qC\n6,ea0c69fbd2389556b01771948ffc0507cf303bdc5a1b91b31acf9ecf6a070000,1,27668,p2pkh,1fkEhLpPKdmKtaxKdp4yDp1c87dF7GDub\n7,05eafead65250a24b1592f8a006cbeab16a7b17ed2616507c5e0bd67bd070000,1,32000,p2pkh,15KmfJcGNfL29vpsSJ37uPzTQfr8Qe17Gq\n8,2c0c985d384160d8c50c438bc67e639fe6047a7f2bac00a1238ca6a6d3070000,0,41936,p2pkh,17up1oPxBMTfZdehzy4v81KzLRHGDNX8ff\n9,8261170b7ae26be70bd9e8f0e4bf19ce3571bb6464cdf9e478c471d372080000,1,4528208,p2pkh,1P6Ae7unrSjtx9J5SjWuwAdZBoWcbcjzBZ\n...\n```\n\n## Install\n\nFirst of all, you need to have a full copy of the blockchain. You also need to install LevelDB:\n\n```\nsudo apt install bitcoind\nsudo apt install libleveldb-dev\n```\n\nAfter that, if you have [Go](https://golang.org/) installed you can do:\n\n```\ngo install github.com/in3rsha/bitcoin-utxo-dump@latest\n```\n\nThis will create a binary called `bitcoin-utxo-dump`, which you can call from the command line:\n\n```\n$ bitcoin-utxo-dump\n```\n\nThis will start dumping all of the UTXO database to a file called `utxodump.csv`.\n\n**NOTE:** This program reads the chainstate LevelDB database created by `bitcoind`, so you will need to download and sync `bitcoind` for this script to work. In other words, this script reads your own local copy of the blockchain.\n\n**NOTE:** LevelDB wasn't designed to be accessed by multiple programs at the same time, so make sure `bitcoind` isn't running before you start (`bitcoin-cli stop` should do it).\n\n\n## Usage\n\nThe basic command is:\n\n```\n$ bitcoin-utxo-dump\n```\n\nYou can view the results in the terminal with the `-v` (verbose) flag (but this will make the script run about **3 times slower**):\n\n```\n$ bitcoin-utxo-dump -v\n```\n\nThe results will be written to the file in the current directory called `utxodump.csv`. You can choose your own filename with the `-o` option:\n\n```\n$ bitcoin-utxo-dump -o ~/Desktop/utxodump.txt\n```\n\nIf you know that the `chainstate` LevelDB folder is in a different location to the default (e.g. you want to get a UTXO dump of the _Testnet_ blockchain), use the `-db` option:\n\n```\n$ bitcoin-utxo-dump -db ~/.bitcoin/testnet3/chainstate/\n```\n\nBy default this script does not convert the public keys inside P2PK locking scripts to addresses (because technically they do not have an address). However, sometimes it may be useful to get addresses for them anyway for use with other APIs, so the following option allows you to return the \"address\" for UTXOs with P2PK locking scripts:\n\n```\n$ bitcoin-utxo-dump -p2pkaddresses\n```\n\nYou can select what data the script outputs from the chainstate database with the `-f` (fields) option. This is useful if you know what data you need and want to _reduce the size of the results file_.\n\n```\n$ bitcoin-utxo-dump -f count,txid,vout,address\n$ bitcoin-utxo-dump -f count,txid,vout,height,coinbase,amount,script,type,address # all possible fields\n```\n\n* **count** - The count of the number of UTXOs in the database.\n* **txid** - [Transaction ID](http://learnmeabitcoin.com/glossary/txid) for the output.\n* **vout** - The index number of the transaction output (which output in the transaction is it?).\n* **height** - The height of the block the transaction was mined in.\n* **coinbase** - Whether the output is from a coinbase transaction (i.e. claiming a block reward).\n* **amount** - The value of the output in _satoshis_.\n* **script** - Details about the locking script placed on the output. For a P2PKH this is the hash160 of the compressed public key. For a P2PK script this a compressed public key (sometimes with a [prefix](https://github.com/in3rsha/bitcoin-chainstate-parser#3-third-varint) to indicate that the original script contained an uncompressed public key). For a P2SH script this is the hash160 of the script. For everything else it's the complete scriptpubkey.\n* **type** - The type of locking script (e.g. P2PK, P2PKH, P2SH, P2MS, P2WPKH, P2WSH, or non-standard)\n* **address** - The address the output is locked to (this is generally just the locking script in a shorter format with user-friendly characters).\n\n\nAll other options can be found with `-h`:\n\n```\n$ bitcoin-utxo-dump -h\n```\n\n## FAQ\n\n### How long does this script take to run?\n\nIt takes me about **20 minutes** to get all the UTXOs.\n\nThis obviously this depends on how big the UTXO database is and how fast your computer is. For me, the UTXO database had 52 million entries, and I'm using a Thinkpad X220 (with a SSD).\n\nEither way, I'd probably make a cup of tea after it starts running.\n\n### How big is the file?\n\nThe file should be around **7GB** (roughly **2.5 times the size** of the LevelDB database: `du -h ~/.bitcoin/chainstate/`).\n\nAgain, this depends on how many entries are in the UTXO database, but it also depends what _fields_ you choose to have in the results:\n\n```\n$ bitcoin-utxo-dump -f address # small file\n$ bitcoin-utxo-dump -f count,txid,vout,amount,type,address # bigger file\n$ bitcoin-utxo-dump -f count,txid,vout,height,coinbase,amount,nsize,script,type,address # biggest file\n```\n\n### What versions of bitcoin does this tool work with?\n\nThis tool works for Bitcoin Core [0.15.1](https://bitcoincore.org/en/releases/0.15.1/) and above. You can check your version with `bitcoind --version`.\n\nOlder versions of bitcoind have a different chainstate LevelDB structure. The structure was updated in 0.15.1 to make reading from the database more memory-efficient. Here's an interesting talk by [Chris Jeffrey](https://youtu.be/0WCaoGiAOHE?t=8936) that explains how you could crash Bitcoin Core with the old chainstate database structure.\n\nNonetheless, if you really want to parse an _old-style_ chainstate database, try one of the _similar tools_ at the bottom of this page.\n\n### How does this program work?\n\nThis program just iterates through all the entries in the LevelDB database at `~/.bitcoin/chainstate`.\n\nHowever, the data inside `~/.bitcoin/chainstate` has been _obfuscated_ (to prevent triggering anti-virus software) and _compressed_ (to reduce the size on disk), so it's far from being human-readable. This script just deobfuscates each entry and decodes/decompresses the data to get human-readable data for each UTXO in the database.\n\n![](assets/bitcoin-utxo-dump.png)\n\n### Can I parse the chainstate LevelDB myself?\n\nSure. Most programming languages seem to have libraries for reading a LevelDB database.\n\n* [Go](https://github.com/syndtr/goleveldb)\n* [Ruby](https://github.com/wmorgan/leveldb-ruby)\n* [Python](https://github.com/wbolster/plyvel)\n\nThe trickier part is decoding the data for each UTXO in the database:\n\n```\n       type                          txid (little-endian)                      index (varint)\n           \\                               |                                  /\n           <><--------------------------------------------------------------><>\n    key:   430000155b9869d56c66d9e86e3c01de38e3892a42b99949fe109ac034fff6583900\n\n    value: 71a9e87d62de25953e189f706bcf59263f15de1bf6c893bda9b045 <- obfuscated\n           b12dcefd8f872536b12dcefd8f872536b12dcefd8f872536b12dce <- extended obfuscateKey\n           c0842680ed5900a38f35518de4487c108e3810e6794fb68b189d8b <- deobfuscated (XOR)\n           <----><----><><-------------------------------------->\n            /      |    \\                   |\n       varint   varint   varint          script <- P2PKH/P2SH hash160, P2PK public key, or complete script\n          |        |     nSize\n          |        |\n          |     amount (compressesed)\n          |\n          |\n   100000100001010100110\n   <------------------> \\\n          height         coinbase\n```\n\n## Thanks\n\n * This script was inspired by the [bitcoin_tools](https://github.com/sr-gi/bitcoin_tools) repo made by [Sergi Delgado Segura](https://github.com/sr-gi). I wanted to see if I could get a faster dump of the UTXO database by writing the program in Go, in addition to getting the **addresses** for each of the UTXOs. The decoding and decompressing code in his repo helped me to write this tool.\n\n### Similar Tools\n\n * [github.com/sr-gi/bitcoin_tools](https://github.com/sr-gi/bitcoin_tools)\n * [github.com/in3rsha/bitcoin-chainstate-parser](https://github.com/in3rsha/bitcoin-chainstate-parser)\n * [github.com/mycroft/chainstate](https://github.com/mycroft/chainstate)\n * [laanwj (unfinished)](https://github.com/bitcoin/bitcoin/pull/7759)\n\n### Links\n\n * <https://github.com/syndtr/goleveldb>\n * <https://github.com/bitcoin/bitcoin/blob/master/src/compressor.cpp>\n * <https://bitcoin.stackexchange.com/questions/51387/how-does-bitcoin-read-from-write-to-leveldb/52167#52167>\n * <https://bitcoin.stackexchange.com/questions/52257/chainstate-leveldb-corruption-after-reading-from-the-database>\n * <https://bitcoin.stackexchange.com/questions/85710/does-the-chainstate-leveldb-only-contain-addresses-for-p2pkh-and-p2sh>\n * <https://github.com/bitcoin/bitcoin/issues/14584>\n"
 },
 {
  "repo": "Hatch-Crypto/bitcoin-whitepaper-exercises",
  "language": "JavaScript",
  "readme_contents": "# Bitcoin Whitepaper Exercises\n\nIn these exercises, you will learn about blockchains from the perspective of the [original Bitcoin Whitepaper](https://bitcoin.org/en/bitcoin-paper).\n\n* [Hashing](hashing/README.md)\n* [Transactions](transactions/README.md)\n* [Wallet](wallet/README.md)\n* [Proof of Work](pow/README.md)\n* [Incentives](incentives/README.md)\n"
 },
 {
  "repo": "bithyve/bitcointribe",
  "language": "TypeScript",
  "readme_contents": "## Setting up Bitcoin Tribe\n\n### Prerequisites:\n\n- [Node](https://nodejs.org/en/) v10 and above\n- [Yarn](https://yarnpkg.com/lang/en/)\n- [CocoaPods](https://cocoapods.org/)\n- [Xcode](https://developer.apple.com/xcode/)\n- [Android Studio](https://developer.android.com/studio)\n\nMake sure you have `rn-nodeify` as a global dependency. If you don't, run `npm install -g rn-nodeify`.\n\n```sh\ngit clone https://github.com/bithyve/bitcointribe.git\ncd bitcointribe\nyarn install\n```\n\n### Running Setup Script\n\n#### MacOS or Linux\n\nOn MacOS and Linux there is no need to run `setup.sh` it will run autmatically after `yarn install` completes.\n\n#### Windows\n\nOn Windows, if  `setup.bat` does not run on its own after `yarn install` then it can be executed manually. it doesn't really matter if its run twice.\n\nOpen `setup.bat` in a text editor and enter your user account name where prompted. If you changed the location of the android sdk during installation, enter the path to the sdk instead of the one already present.\nThen, from the command prompt, run:\n\n```sh\nsetup.bat\n```\n\n### Configuring Environment Variables\n\n**Mainnet configuration**\n\nMake sure you there are no `.env` files in the project root directory except `.env.example`\n\nThe project will use live configuration by default when no `.env` file is available.\n\n**Testnet configuration**\n\nCopy the contents on `.env.example` to a new `.env` file.\n\n```sh\ncp .env.example .env\n```\n\n\n## Building and Running Bitcoin Tribe\n\n### Running on simulator\n\n**IOS**\n\n```\nyarn ios\n```\n\nAlternately XCode can also be used to build and run in a simulator\n\n**Android**\n\n```\nyarn android or yarn androidDevelopmentDebug\n```\n\nAlternately Android Studio can also be used to build and run in a simulator\n\n### Running on device\n\n**IOS**\n\nOpen `HEXA.xcworkspace` from `<Hexa Project Root>/iOS` in XCode and use the `product > build for > running` menu option to build and run Hexa Wallet on iPhone. This will work with a correct and updated XCode setup and only on trusted devices. Further support for running on iPhone is available on react native and xcode development sites and community forums.\n\n**Android**\n\nEnsure device is connected and recognised. Ensure no  Android emulators are running.\n\n```\nyarn android or yarn androidDevelopmentDebug\n```\n\nAlternately Android Studio can also be used to build and run on Android device.\nThis will work when Android development environment is setup correctly. Further support is available from react native and Android Studio guides. Please refer https://reactnative.dev/docs/running-on-device for further support.\n\n## Common Issues\n\n1. Build fails with one or more errors\n   Makes sure `yarn install` was done after switching to a new branch.\n   If that doesn't help please use `yarn deep-clean` this will remove node modules, flush node cache, fluch metro cache, reinstall node dependencies and re install pods. \n2. Always make sure metro is running in a new terminal window. If its not it can be started by running `yarn start`in a new termimal from project root.\n3. Notifications dont work in ios simulator and this will show up as an error in the console. Notifications will work when running in a iOS device.\n4. If Apple id or google id is not setup in the simulator then cloud backup will not work and cloud errors will be seen in the console.\n5. Scanner will not work in a simulator so a device will be required to test and debug scanner related features.\n\n## Verify Authenticity of Android APK\n\nPlease download and keep all these files in the same location: `Android APK file, SHA256SUM.asc, HEXA_DETACHED_SIGN.sign`. Make a copy of `Android APK file` and rename it as `Android APK clone`.\n\nGet the public PGP key for `hexa@bithyve.com` (Hexa Team's PGP key) using\n\n```\ngpg --recv-key \"389F 4CAD A078 5AC0 E28A 0C18 1BEB DE26 1DC3 CF62\"\n```\n\nor\n\n```\ngpg --keyserver hkps://keys.openpgp.org --recv-key \"389F 4CAD A078 5AC0 E28A 0C18 1BEB DE26 1DC3 CF62\"\n```\n\n**Verify APK certificate**\n\nRename `Android APK clone.apk` to `Android APK clone.zip` and extract the following file: `/META-INF/HEXAWALL.RSA`. Verify the certificate using `keytool`:\n\n```\nkeytool -printcert -file HEXAWALLET.RSA\nCertificate fingerprints:\n\t ...\n\t MD5:  5E:92:30:9B:88:F4:A1:17:08:D1:DB:C3:2A:BF:4D:5A\n\t SHA1: 38:55:07:26:F4:C6:C4:3E:A2:87:CF:16:11:7C:E6:A5:66:E1:CB:C1\n\t SHA256: 77:82:54:70:5D:C4:DA:83:2C:F8:39:96:49:69:FE:AF:63:BD:79:EF:00:0A:34:43:86:0C:7C:AD:A2:55:1C:95\n\t Signature algorithm name: SHA256withRSA\n\t Version: 3\n```\n\n**Verify APK checksum**\n\nVerify the checksum against the APK using:\n\n```\nshasum -a 256 --check SHA256SUM.asc\n```\n\nOutput should contain the name of the APK file followed by **OK** as shown below:\n\n```\nHexa_Wallet_Android_v1.1.1.apk: OK\n```\n\n**Verify that the signed checksum is from hexa@bithyve.com**\n\n```\ngpg --verify SHA256SUM.asc\n```\n\nOutput should show Hexa's PGP key **389F 4CAD A078 5AC0 E28A 0C18 1BEB DE26 1DC3 CF62**:\n\n```\nusing RSA key 389F4CADA0785AC0E28A0C181BEBDE261DC3CF62\nissuer \"hexa@bithyve.com\"\nGood signature from \"Hexa Team (Hexa Bitcoin Wallet) <hexa@bithyve.com>\"\n```\n\n**Alternate method for verifying PGP signature**\n\nVerify the detached signature against the APK file:\n\n```\ngpg --verify HEXA_DETACHED_SIGN.sign Hexa_Wallet_Android_v1.1.1.apk\n```\n\nOutput should show Hexa's PGP key **389F 4CAD A078 5AC0 E28A 0C18 1BEB DE26 1DC3 CF62**:\n\n```\nusing RSA key 389F4CADA0785AC0E28A0C181BEBDE261DC3CF62\nissuer \"hexa@bithyve.com\"\nGood signature from \"Hexa Team (Hexa Bitcoin Wallet) <hexa@bithyve.com>\"\n```\n\n## Contributing\n\nPlease feel free to open pull requests, issues with bugfixes, and suggestions.\n\n## License\n\n[LICENSE](LICENSE)\n"
 },
 {
  "repo": "bitcoinjs/bitcoinjs-message",
  "language": "JavaScript",
  "readme_contents": "# bitcoinjs-message\n[![NPM Package](https://img.shields.io/npm/v/bitcoinjs-message.svg?style=flat-square)](https://www.npmjs.org/package/bitcoinjs-message)\n[![Build Status](https://img.shields.io/travis/bitcoinjs/bitcoinjs-message.svg?branch=master&style=flat-square)](https://travis-ci.org/bitcoinjs/bitcoinjs-message)\n[![Dependency status](https://img.shields.io/david/bitcoinjs/bitcoinjs-message.svg?style=flat-square)](https://david-dm.org/bitcoinjs/bitcoinjs-message#info=dependencies)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n## Examples (Note about Electrum support at the bottom)\n\n``` javascript\nvar bitcoin = require('bitcoinjs-lib') // v4.x.x\nvar bitcoinMessage = require('bitcoinjs-message')\n```\n\n> sign(message, privateKey, compressed[, network.messagePrefix, sigOptions])\n> - If you pass the sigOptions arg instead of messagePrefix it will dynamically replace.\n> - sigOptions contains two attributes\n>   - `segwitType` should be one of `'p2sh(p2wpkh)'` or `'p2wpkh'`\n>   - `extraEntropy` will be used to create non-deterministic signatures using the RFC6979 extra entropy parameter. R value reuse is not an issue.\n\nSign a Bitcoin message\n``` javascript\nvar keyPair = bitcoin.ECPair.fromWIF('L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1')\nvar privateKey = keyPair.privateKey\nvar message = 'This is an example of a signed message.'\n\nvar signature = bitcoinMessage.sign(message, privateKey, keyPair.compressed)\nconsole.log(signature.toString('base64'))\n// => 'H9L5yLFjti0QTHhPyFrZCT1V/MMnBtXKmoiKDZ78NDBjERki6ZTQZdSMCtkgoNmp17By9ItJr8o7ChX0XxY91nk='\n```\n\nTo produce non-deterministic signatures you can pass an extra option to sign()\n``` javascript\nvar { randomBytes } = require('crypto')\nvar keyPair = bitcoin.ECPair.fromWIF('L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1')\nvar privateKey = keyPair.privateKey\nvar message = 'This is an example of a signed message.'\n\nvar signature = bitcoinMessage.sign(message, privateKey, keyPair.compressed, { extraEntropy: randomBytes(32) })\nconsole.log(signature.toString('base64'))\n// => different (but valid) signature each time\n```\n\nSign a Bitcoin message (with segwit addresses)\n``` javascript\n// P2SH(P2WPKH) address 'p2sh(p2wpkh)'\nvar signature = bitcoinMessage.sign(message, privateKey, keyPair.compressed, { segwitType: 'p2sh(p2wpkh)' })\nconsole.log(signature.toString('base64'))\n// => 'I9L5yLFjti0QTHhPyFrZCT1V/MMnBtXKmoiKDZ78NDBjERki6ZTQZdSMCtkgoNmp17By9ItJr8o7ChX0XxY91nk='\n\n// P2WPKH address 'p2wpkh'\nvar signature = bitcoinMessage.sign(message, privateKey, keyPair.compressed, { segwitType: 'p2wpkh' })\nconsole.log(signature.toString('base64'))\n// => 'J9L5yLFjti0QTHhPyFrZCT1V/MMnBtXKmoiKDZ78NDBjERki6ZTQZdSMCtkgoNmp17By9ItJr8o7ChX0XxY91nk='\n```\n\nSign a Bitcoin message using a Signer interface.\n``` javascript\nvar keyPair = bitcoin.ECPair.fromWIF('L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1')\nvar privateKey = keyPair.privateKey\nvar message = 'This is an example of a signed message.'\n\nvar secp256k1 = require('secp256k1')\n// Notice we are using the privateKey var from the outer scope inside the sign function.\nvar signer = { sign: (hash, extraData) => secp256k1.sign(hash, privateKey, { data: extraData }) }\n\nvar signature = bitcoinMessage.sign(message, signer, keyPair.compressed)\nconsole.log(signature.toString('base64'))\n// => 'H9L5yLFjti0QTHhPyFrZCT1V/MMnBtXKmoiKDZ78NDBjERki6ZTQZdSMCtkgoNmp17By9ItJr8o7ChX0XxY91nk='\n```\n\n> signAsync(message, privateKey, compressed[, network.messagePrefix, sigOptions])\n> Same as sign, except returns a promise, and can accept a SignerAsync interface instead of privateKey\n\nSign a Bitcoin message asynchronously\n``` javascript\nvar keyPair = bitcoin.ECPair.fromWIF('L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1')\nvar privateKey = keyPair.privateKey\nvar message = 'This is an example of a signed message.'\n\nbitcoinMessage.signAsync(message, privateKey, keyPair.compressed).then(signature => {\n  console.log(signature.toString('base64'))\n})\n// => 'H9L5yLFjti0QTHhPyFrZCT1V/MMnBtXKmoiKDZ78NDBjERki6ZTQZdSMCtkgoNmp17By9ItJr8o7ChX0XxY91nk='\n```\n\nSign a Bitcoin message asynchronously using SignerAsync interface\n``` javascript\nvar keyPair = bitcoin.ECPair.fromWIF('L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1')\nvar privateKey = keyPair.privateKey\nvar message = 'This is an example of a signed message.'\n\nvar secp256k1 = require('secp256k1')\n// Note that a Signer will also work\nvar signerAsync = { sign: (hash, extraData) => Promise.resolve(secp256k1.sign(hash, privateKey, { data: extraData })) }\nvar signer = { sign: (hash, extraData) => secp256k1.sign(hash, privateKey, { data: extraData }) }\n\nbitcoinMessage.signAsync(message, signerAsync, keyPair.compressed).then(signature => {\n  console.log(signature.toString('base64'))\n})\n// => 'H9L5yLFjti0QTHhPyFrZCT1V/MMnBtXKmoiKDZ78NDBjERki6ZTQZdSMCtkgoNmp17By9ItJr8o7ChX0XxY91nk='\nbitcoinMessage.signAsync(message, signer, keyPair.compressed).then(signature => {\n  console.log(signature.toString('base64'))\n})\n// => 'H9L5yLFjti0QTHhPyFrZCT1V/MMnBtXKmoiKDZ78NDBjERki6ZTQZdSMCtkgoNmp17By9ItJr8o7ChX0XxY91nk='\n```\n\n> verify(message, address, signature[, network.messagePrefix, checkSegwitAlways])\n\nVerify a Bitcoin message\n``` javascript\nvar address = '1F3sAm6ZtwLAUnj7d38pGFxtP3RVEvtsbV'\n\nconsole.log(bitcoinMessage.verify(message, address, signature))\n// => true\n```\n\n## About Electrum segwit signature support\n\n- For Signing: Use the non-segwit compressed signing parameters for both segwit types (p2sh-p2wpkh and p2wpkh)\n- For Verifying: Pass the checkSegwitAlways argument as true. (messagePrefix should be set to null to default to Bitcoin messagePrefix)\n\n## LICENSE [MIT](LICENSE)\n"
 },
 {
  "repo": "hivewallet/BitcoinKit",
  "language": "Objective-C",
  "readme_contents": "BitcoinKit.framework\n===================\n\nBitcoinKit.framework allows you to access and use Bitcoin wallets in your applications. It uses Mike Hearn's bitcoinj Java library. This is an SPV implementation, so it doesn't need to download the whole blockchain to work.\n\nSince a large part of the code is in Java, your application will need to ask the user to install a JRE in the system. This might change in future if we find a way to integrate a lightweight JVM into the project.\n\n\nBuild Instructions for BitcoinJKit.framework\n-------------------------------------------\n\nFor that you need to have java and maven installed:\n\n    brew install maven\n\nAnd you also have to remember to fetch all submodules!\n\n    git submodule update --init --recursive\n\nTime to compile!\n\n\nHow to use\n----------\n\nThe main access point is the singleton object of class HIBitcoinManager. With this object you are able to access the Bitcoin network and manage your wallet.\n\nFirst you need to prepare the library for launching.\n\nSet up where wallet and Bitcoin network data should be kept:\n\n```objective-c\n[HIBitcoinManager defaultManager].dataURL = [[self applicationSupportDir] URLByAppendingPathComponent:@\"com.mycompany.MyBitcoinWalletData\"];\n```\n\nDecide if you want to use a testing network (or not):\n\n```objective-c\n[HIBitcoinManager defaultManager].testingNetwork = YES;\n```\n\n...and start the network!\n\n```objective-c\n[[HIBitcoinManager defaultManager] start:&error];\n```\n\nNow you can easily get the balance or wallet address:\n\n```objective-c\nNSString *walletAddress [HIBitcoinManager defaultManager].walletAddress;\nuint64_t balance = [HIBitcoinManager defaultManager].balance\n```\n\nYou can send coins:\n\n```objective-c\n[[HIBitcoinManager defaultManager] sendCoins:1000 toRecipient:hashAddress comment:@\"Here's some money for you!\" password:nil error:&error completion:nil];\n```\n\nAnd more!\n\n\nDemo App\n--------\n\nThere's a demo application included with the sources. Start it up and check out how to use BitcoinKit.framework!\n\nLicense\n-------\n\nBitcoinKit.framework is available under the MIT license.\n"
 },
 {
  "repo": "ymgve/bitcoin_fork_claimer",
  "language": "Python",
  "readme_contents": "!!! UPDATE TO THE LATEST VERSION IF YOU WANT TO CLAIM WBTC - MAJOR BUG FIXED !!!\n\nThis is a small script that enables you to transfer/claim various coins in Bitcoin forks\nwithout downloading the full blockchains or messing with the official clients.\n\nRequires Python 2.7\n\nThe following coins are recognized, although may not be fully tested:\n\n*  B2X - [Segwit 2X](https://b2x-segwit.io/)\n*  BBC - [Big Bitcoin](http://bigbitcoins.org/)\n*  BCA - [Bitcoin Atom](https://bitcoinatom.io/)\n*  BCBC - [Bitcoin@CBC](https://cleanblockchain.org/)\n*  BCD - [Bitcoin Diamond](http://www.btcd.io/)\n*  BCH - [Bitcoin Cash](https://www.bitcoincash.org/)\n*  BCI - [Bitcoin Interest](http://bitcoininterest.io/)\n*  BCK - [Bitcoin King](https://btcking.org/) - NOT A TRUE FORK, NOT CLAIMABLE AT THE MOMENT\n*  BCL - [BitcoinClean](https://bitcoinclean.org/)\n*  BCLD - [Bitcoin Cloud](https://bitcoincloud.cash/) - the original ticker symbol is BCL but this is also used by BitcoinClean\n*  BCP - [Bitcoin Cash Plus](http://www.bitcoincashplus.org/)\n*  BCX - [Bitcoin X](https://bcx.org/)\n*  BICC - [BitClassic Coin](http://bicc.io/)\n*  BIFI - [Bitcoin File](https://www.bitcoinfile.org)\n*  BPA - [Bitcoin Pizza](http://p.top/en/index.html)\n*  BTC - [Bitcoin](https://bitcoin.org/en/)\n*  BTC2 - [Bitcoin 2](https://www.bitc2.org/)\n*  BTCC - [Bitcoin Core](https://bitcoincore.cm/)\n*  BTCH - [Bitcoin Hush](http://btchush.org/)\n*  BTCP - [Bitcoin Private](https://btcprivate.org/)\n*  BTF - [Bitcoin Faith](http://bitcoinfaith.org/)\n*  BTG - [Bitcoin Gold](https://bitcoingold.org/)\n*  BTH - [Bitcoin Hot](https://www.bithot.org/)\n*  BTN - [Bitcoin New](http://btn.kim/)\n*  BTP - [Bitcoin Pay](http://www.btceasypay.com/)\n*  BTSQ - [Bitcoin Community](http://btsq.top/)\n*  BTT - [Bitcoin Top](https://bitcointop.org/)\n*  BTV - [Bitcoin Vote](https://bitvote.one/)\n*  BTW - [Bitcoin World](http://www.btw.one/)\n*  BTX - [Bitcore](https://bitcore.cc/)\n*  CDY - [Bitcoin Candy](https://cdy.one/) - Forked from Bitcoin Cash, not Bitcoin\n*  CLAM - [Clamcoin](https://www.clamcoin.org/)\n*  GOD - [Bitcoin God](https://www.bitcoingod.org/)\n*  LBTC - [Lightning Bitcoin](http://lbtc.io/)\n*  MBC - [MicroBitcoin](https://microbitcoin.org/)\n*  NBTC - [NewBitcoin](http://www.newbitcoin.org/index_en.html)\n*  SBTC - [Super Bitcoin](http://superbtc.org/)\n*  TNET - [Title Network](https://title.network/)\n*  UBTC - [United Bitcoin](https://www.ub.com/)\n*  WBTC - [World Bitcoin](http://www.wbtcteam.org/)\n\nAt the moment it supports standard P2PKH and Segwit P2SH-P2WPKH addresses. Segwit mode has been verified to work with these coins: BTG, BCX, B2X, UBTC, BTF, BTW, SBTC, BCD, BPA, BTN, BTH, BTV, BTT, BTP, BTSQ, WBTC, BCA, BICC, BCI, BTCP, BCL, BIFI, MBC\n\nIt also has experimental support for bech32 P2WPKH, but this has only been tested on the BTG, BTN, BCD, BTH, BTV, BTT, BTP, BTSQ, WBTC, BCA, BICC, BCI, BCL, MBC networks so far.\n\nIt should support old-style Pay-2-Public-Key that were in use in 2009-2010 (use command line switch --p2pk) but this is UNTESTED at the moment.\n\nUSAGE OF THIS SCRIPT IS RISKY AND IF YOU MISTYPE ANYTHING YOU CAN LOSE ALL YOUR COINS\n\nIt has two modes of operation - blockchain.info assisted mode and standalone mode.\n* In blockchain.info mode it uses the blockchain.info API to query and validate information about the transaction you're spending from.\nThis only works for transferring/claiming coins that existed on the BTC main chain pre-fork.\n* In standalone mode the user provides all the information including transaction source output index and the number of satoshis in the source output - there is no verification done, but this mode allows you to transfer coins that are entirely on-fork.\n\nblockchain.info mode:\n\n    claimer.py <cointype> <source transaction ID> <source private key> <source address> <destination address>\n    claimer.py BTG 4adc427d330497992710feaa32f85c389ef5106f74e7006878bd14b54500dfff 5K2YUVmWfxbmvsNxCsfvArXdGXm7d5DC9pn4yD75k2UaSYgkXTh 1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE 1aa5cmqmvQq8YQTEqcTmW7dfBNuFwgdCD\n    \nStandalone mode:\n\n    claimer.py <cointype> <source transaction ID> <source private key> <source address> <destination address> --txindex <output index in transaction> --satoshis <number of satoshis on the source transaction output>\n    claimer.py BTG 4adc427d330497992710feaa32f85c389ef5106f74e7006878bd14b54500dfff 5K2YUVmWfxbmvsNxCsfvArXdGXm7d5DC9pn4yD75k2UaSYgkXTh 1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE 1aa5cmqmvQq8YQTEqcTmW7dfBNuFwgdCD --txindex 0 --satoshis 3053\n\nDefault fee is set to 1000 satoshis, but can be changed with the `--fee` option.\n\nYou can specify multiple destination addresses in the destination address field, the format is:\n\n    <address>[,<address>][,<address>][,<address>]...\n    \nwhere `<address>` is either a plain address or an address plus an amount in satoshis, separated by a colon. Examples:\n\n    13PuTPQjuZ5Vh1RCrTLqYK79scG2T45LGB\n    13PuTPQjuZ5Vh1RCrTLqYK79scG2T45LGB:1000000\n    13PuTPQjuZ5Vh1RCrTLqYK79scG2T45LGB:1000000,1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE\n    13PuTPQjuZ5Vh1RCrTLqYK79scG2T45LGB:1000000,1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE:1000000\n    13PuTPQjuZ5Vh1RCrTLqYK79scG2T45LGB,1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE:1000000\n    \nOne of the destination addresses can be without a specified amount, which makes all the remaining coins (minus the fee) go to that address.\n\nFull example:\n\n    claimer.py BTG db4f2348b92b4cd34675df66b49855e66869d7e98eb97141e85b558c28390fb3 5K2YUVmWfxbmvsNxCsfvArXdGXm7d5DC9pn4yD75k2UaSYgkXTh 1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE 13PuTPQjuZ5Vh1RCrTLqYK79scG2T45LGB:1000000,1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE:1000000\n\nUSAGE OF THIS SCRIPT IS RISKY AND IF YOU MISTYPE ANYTHING YOU CAN LOSE ALL YOUR COINS\n\nAdvanced parameters for usage with scripting\n\n`--force` - Normally, the script creates the transaction and then requires the user to manually verify and enter a string to signal consent, before submitting the transaction to the network. When this flag is used, it skips this step and automatically submits it. Use only when you know what you are doing.\n\n`--noblock` - Without this flag, the script waits until the transaction is included in the next block. If you have a lot of addresses and use a script to process them, this can take a long time. When this flag is set, the script will finish after the transaction is included in the target network mempool. It's useful in combination with the `--force` parameter, because it allows mass processing of many addresses in an automated way.\n\n---\n\nThere is another python script for claiming FBTC (Fast Bitcoin). The FBTC network is based on the BitShares codebase, so it does not support Segwit. There are no TXIDs or change addresses,\nand you can transfer arbitrary amounts from an address multiple times.\n\nUsage:\n    \n    fbtcclaimer.py <private key in WIF format> <public source address> <destination address> <number of satoshis to send, including fee>\n    fbtcclaimer.py 5K2YUVmWfxbmvsNxCsfvArXdGXm7d5DC9pn4yD75k2UaSYgkXTh 1HKqKTMpBTZZ8H5zcqYEWYBaaWELrDEXeE 1aa5cmqmvQq8YQTEqcTmW7dfBNuFwgdCD 3053\n    \nfbtcclaimer.py also requires aes.py to be in the same folder as the script. Thanks to https://github.com/ricmoo/pyaes for the implementation.\n\n---\n\nAny donations can be sent to BTC address `13qtaKvBQYN9RQuegqF8Ci7U7JgTtT8SNz`\n"
 },
 {
  "repo": "horizontalsystems/bitcoin-kit-ios",
  "language": "Swift",
  "readme_contents": "# BitcoinKit-iOS\n\nBitcoin, BitcoinCash(ABC) and Dash wallet toolkit for Swift. This is a full implementation of SPV node including wallet creation/restore, synchronization with network, send/receive transactions, and more. The repository includes the main `BitcoinCore.swift` and `BitcoinKit.swift`, `BitcoinCashKit.swift` and `DashKit.swift` separate pods.\n\n\n## Features\n\n- Full SPV implementation for fast mobile performance\n- Send/Receive Legacy transactions (*P2PKH*, *P2PK*, *P2SH*)\n- [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) hierarchical deterministic wallets implementation.\n- [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) mnemonic code for generating deterministic keys.\n- [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) multi-account hierarchy for deterministic wallets.\n- [BIP21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki) URI schemes, which include payment address, amount, label and other params\n\n### BitcoinKit.swift\n- Send/Receive Segwit transactions (*P2WPKH*)\n- Send/Receive Segwit transactions compatible with legacy wallets (*P2WPKH-SH*)\n- base58, bech32\n\n### BitcoinCashKit.swift\n- bech32 cashaddr addresses\n\n### DashKit.swift\n- Instant send\n- LLMQ lock, Masternodes validation\n\n## Usage\n\nOn this page, we'll use *Kits* to refer to one of `BitcoinKit.swift`, `BitcoinCashKit.swift` and `DashKit.swift` kits.\n\n### Initialization\n\n*Kits* requires you to provide mnemonic phrase when it is initialized:\n\n```swift\nlet words = [\"word1\", ... , \"word12\"]\n```\n\n#### Bitcoin\n\n```swift\nlet bitcoinKit = BitcoinKit(withWords: words, walletId: \"bitcoin-wallet-id\", syncMode: .api, networkType: .mainNet)\n```\n\n#### Bitcoin Cash\n\n```swift\nlet bitcoinCashKit = BitcoinCashKit(withWords: words, walletId: \"bitcoin-cash-wallet-id\", syncMode: .api, networkType: .mainNet)\n```\n\n#### Dash\n\n```swift\nlet dashKit = DashKit(withWords: words, walletId: \"dash-wallet-id\", syncMode: .api, networkType: .mainNet)\n```\n\nAll 3 *Kits* can be configured to work in `.mainNet` or `.testNet`. \n\n##### `syncMode` parameter\n*Kits* can restore existing wallet or create a new one. When restoring, it generates addresses for given wallet according to bip44 protocol, then it pulls all historical transactions for each of those addresses. This is done only once on initial sync. `syncMode` parameter defines where it pulls historical transactions from. When they are pulled, it continues to sync according to [SPV](https://en.bitcoinwiki.org/wiki/Simplified_Payment_Verification) protocol no matter which syncMode was used for initial sync. There are 3 modes available:\n\n- `.full`: Fully synchronizes from peer-to-peer network starting from the block when bip44 was introduced. This mode is the most private (since it fully complies with [SPV](https://en.bitcoinwiki.org/wiki/Simplified_Payment_Verification) protocol), but it takes approximately 2 hours to sync up to now (June 10, 2019).\n- `.api`: Transactions before checkpoint are pulled from API(currently [Insight API](https://github.com/bitpay/insight-api) or [BcoinAPI](http://bcoin.io/api-docs/)). Then the rest is synchronized from peer-to-peer network. This is the fastest one, but it's possible for an attacker to learn which addresses you own. Checkpoints are updated with each new release and hardcoded so the blocks validation is not broken.\n- `.newWallet`: No need to pull transactions.\n\n##### Additional parameters:\n- `confirmationsThreshold`: Minimum number of confirmations required for an unspent output in incoming transaction to be spent (*default: 6*)\n- `minLogLevel`: Can be configured for debug purposes if required.\n\n### Starting and Stopping\n\n*Kits* require to be started with `start` command. It will be in synced state as long as it is possible. You can call `stop` to stop it\n\n```swift\nbitcoinKit.start()\nbitcoinKit.stop()\n```\n\n### Getting wallet data\n\n*Kits* hold all kinds of data obtained from and needed for working with blockchain network\n\n#### Current Balance\n\nBalance is provided in `Satoshi`:\n\n```swift\nbitcoinKit.balance\n\n// 2937096768\n```\n\n#### Last Block Info\n\nLast block info contains `headerHash`, `height` and `timestamp` that can be used for displaying sync info to user:\n\n```swift\nbitcoinKit.lastBlockInfo \n\n// \u25bf Optional<BlockInfo>\n//  \u25bf some : BlockInfo\n//    - headerHash : //\"00000000000041ae2164b486398415cca902a41214cad72291ee04b212bed4c4\"\n//    - height : 1446751\n//    \u25bf timestamp : Optional<Int>\n//      - some : 1544097931\n```\n\n#### Receive Address\n\nGet an address which you can receive coins to. Receive address is changed each time after you actually get a transaction in which you receive coins to that address\n\n```swift\nbitcoinKit.receiveAddress\n\n// \"mgv1KTzGZby57K5EngZVaPdPtphPmEWjiS\"\n```\n\n#### Transactions\n\n*Kits* have `transactions(fromHash: nil, limit: nil)` methods which return `Single<TransactionInfo>`(for BitcoinKit and BitcoinCashKit) and `Single<DashTransactionInfo>`(for DashKit) [RX Single Observers](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Traits.md#single).\n\n`TransactionInfo`:\n```swift\n//   \u25bf TransactionInfo\n//     - transactionHash : \"0f83c9b330f936dc4a2458b7d3bb06dce6647a521bf6d98f9c9d3cdd5f6d2a73\"\n//     - transactionIndex : 500000\n//     \u25bf from : 2 elements\n//       \u25bf 0 : TransactionAddressInfo\n//         - address : \"mft8jpnf3XwwqhaYSYMSXePFN85mGU4oBd\"\n//         - mine : true\n//       \u25bf 1 : TransactionAddressInfo\n//         - address : \"mnNS5LEQDnYC2xqT12MnQmcuSvhfpem8gt\"\n//         - mine : true\n//     \u25bf to : 2 elements\n//       \u25bf 0 : TransactionAddressInfo\n//         - address : \"n43efNftHQ1cXYMZK4Dc53wgR6XgzZHGjs\"\n//         - mine : false\n//       \u25bf 1 : TransactionAddressInfo\n//         - address : \"mrjQyzbX9SiJxRC2mQhT4LvxFEmt9KEeRY\"\n//         - mine : true\n//     - amount : -800378\n//     \u25bf blockHeight : Optional<Int>\n//       - some : 1446602\n//    \u25bf timestamp : Optional<Int>\n//       - some : 1543995972\n```\n\n`DashTransactionInfo`:\n```swift\n//   \u25bf DashTransactionInfo\n//     - transactionHash : \"0f83c9b330f936dc4a2458b7d3bb06dce6647a521bf6d98f9c9d3cdd5f6d2a73\"\n//     - transactionIndex : 500000\n//     - instantTx : true\n//     \u25bf from : 2 elements\n//       \u25bf 0 : TransactionAddressInfo\n//         - address : \"mft8jpnf3XwwqhaYSYMSXePFN85mGU4oBd\"\n//         - mine : true\n//       \u25bf 1 : TransactionAddressInfo\n//         - address : \"mnNS5LEQDnYC2xqT12MnQmcuSvhfpem8gt\"\n//         - mine : true\n//     \u25bf to : 2 elements\n//       \u25bf 0 : TransactionAddressInfo\n//         - address : \"n43efNftHQ1cXYMZK4Dc53wgR6XgzZHGjs\"\n//         - mine : false\n//       \u25bf 1 : TransactionAddressInfo\n//         - address : \"mrjQyzbX9SiJxRC2mQhT4LvxFEmt9KEeRY\"\n//         - mine : true\n//     - amount : -800378\n//     \u25bf blockHeight : Optional<Int>\n//       - some : 1446602\n//    \u25bf timestamp : Optional<Int>\n//       - some : 1543995972\n```\n\n### Creating new transaction\n\nIn order to create new transaction, call `send(to: String, value: Int, feeRate: Int)` method on *Kits*\n\n```swift\ntry bitcoinKit.send(to: \"mrjQyzbX9SiJxRC2mQhT4LvxFEmt9KEeRY\", value: 1000000, feeRate: 10000)\n```\n\nThis first validates a given address and amount, creates new transaction, then sends it over the peers network. If there's any error with given address/amount or network, it raises an exception.\n\n#### Validating transaction before send\n\nOne can validate address and fee by using following methods:\n\n```swift\ntry bitcoinKit.validate(address: \"mrjQyzbX9SiJxRC2mQhT4LvxFEmt9KEeRY\")\ntry bitcoinKit.fee(for: 1000000, toAddress: \"mrjQyzbX9SiJxRC2mQhT4LvxFEmt9KEeRY\", senderPay: true, feeRate: 10000)\n```\n`senderPay` parameter defines who pays the fee\n\n### Parsing BIP21 URI\n\nYou can use `parse` method to parse a BIP21 URI:\n\n```swift\nbitcoinKit.parse(paymentAddress: \"bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz\")\n\n// \u25bf BitcoinPaymentData\n//   - address : \"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\"\n//   - version : nil\n//   \u25bf amount : Optional<Double>\n//     - some : 50.0\n//   \u25bf label : Optional<String>\n//     - some : \"Luke-Jr\"\n//   \u25bf message : Optional<String>\n//     - some : \"Donation for project xyz\"\n//   - parameters : nil\n\n```\n\n### Subscribing to BitcoinKit data\n\n*Kits* provide with data like transactions, blocks, balance, kits state in real-time. `BitcoinCoreDelegate` protocol must be implemented and set to *Kits* instance to receive that data.\n\n```swift\nclass Manager {\n\n\tinit(words: [String]) {\n\t\tbitcoinKit = BitcoinKit(withWords: words, walletId: \"bitcoin-wallet-id\")\n        bitcoinKit.delegate = self\n    }\n\n}\n\nextension Manager: BitcoinCoreDelegate {\n\n    func transactionsUpdated(inserted: [TransactionInfo], updated: [TransactionInfo]) {\n    }\n\n    func transactionsDeleted(hashes: [String]) {\n    }\n\n    func balanceUpdated(balance: Int) {\n    }\n\n    func lastBlockInfoUpdated(lastBlockInfo: BlockInfo) {\n    }\n\n    public func kitStateUpdated(state: BitcoinCore.KitState) {\n\t\t// BitcoinCore.KitState can be one of 3 following states:\n\t\t// .synced\n\t\t// .syncing(progress: Double)\n\t\t// .notSynced\n\t\t// \n\t\t// These states can be used to implement progress bar, etc\n    }\n    \n}\n```\nListener events are run in a dedicated background thread. It can be switched to main thread by setting the  ```delegateQueue``` property to ```DispatchQueue.main```\n\n```swift\nbitcoinKit.delegateQueue = DispatchQueue.main\n```\n\n## Prerequisites\n\n* Xcode 10.0+\n* Swift 5+\n* iOS 11+\n\n## Installation\n\n### CocoaPods\n\n[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. You can install it with the following command:\n\n```bash\n$ gem install cocoapods\n```\n\n> CocoaPods 1.5.0+ is required to build BitcoinKit.\n\nTo integrate BitcoinKit into your Xcode project using CocoaPods, specify it in your `Podfile`:\n\n```ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '10.0'\nuse_frameworks!\n\ntarget '<Your Target Name>' do\n  pod 'BitcoinCore.swift'\n  pod 'BitcoinKit.swift'\n  pod 'BitcoinCashKit.swift'\n  pod 'DashKit.swift'\nend\n```\n\nThen, run the following command:\n```bash\n$ pod install\n```\n\n\n## Example Project\n\nAll features of the library are used in example project. It can be referred as a starting point for usage of the library.\n\n* [Example Project](https://github.com/horizontalsystems/bitcoin-kit-ios/tree/master/Example)\n\n## Dependencies\n\n* [HSHDWalletKit](https://github.com/horizontalsystems/hd-wallet-kit-ios) - HD Wallet related features, mnemonic phrase generation.\n* [OpenSslKit.swift](https://github.com/horizontalsystems/open-ssl-kit-ios) - Crypto functions required for working with blockchain.\n* [Secp256k1Kit.swift](https://github.com/horizontalsystems/secp256k1-kit-ios) - Crypto functions required for working with blockchain.\n\n### Dash dependencies\n\n* [BlsKit.swift](https://github.com/horizontalsystems/bls-kit-ios)\n* [X11Kit.swift](https://github.com/horizontalsystems/x11-kit-ios)\n\n## License\n\nThe `BitcoinKit-iOS` toolkit is open source and available under the terms of the [MIT License](https://github.com/horizontalsystems/bitcoin-kit-ios/blob/master/LICENSE).\n\n"
 },
 {
  "repo": "Souhardya/bitcoinstealer",
  "language": "C#",
  "readme_contents": "# Bitcoin Wallet Replacer\n\nThis is a P.O.C bitcoin stealer strictly for educational purposes written in C# purely ... \nSole purpose is to detect the user's bitcoin wallet and change it to the malicious bitcoin wallet\nQuite basic so all trolls allowed\n\n# Features :- \n\n* Detect wallet and change it \n\n* Registry Based persistence \n\n* Task scheduler ( optional ) \n\n\n# Open Source \n\nModify and redistribute \n\n# Beta stage \n\nThis code is simply in beta stage and it might contain bugs please report if you find any :) \n\n# No illegal usage\n\nIf you use it in an illegal way .. you are yourself responsible for your deeds I won't be held responsible ..\n\n# Figure out on your own \n\nSorry won't make a wiki or something in order to analyse or use it you have to understand the code itelf and figure out on your own \n\nP.S there is nothing in the code as complex lol compile it and just take a overview \n\n# Project is a fork \n\nThis is a project i was interested to make when i found the basic fundamentals in the wild to get it working on Softxaker RU forum and Rohitabs .. \nRequote : Project creds not fully mine nor do i claim \ncode base taken from the wild so \n\n# Complaints ? \n\nSend em at Souhardya@protonamil.com\n\n# Shoutouts \n\nZanax and smurf\n"
 },
 {
  "repo": "btcsuite/btcwallet",
  "language": "Go",
  "readme_contents": "btcwallet\n=========\n\n[![Build Status](https://travis-ci.org/btcsuite/btcwallet.png?branch=master)](https://travis-ci.org/btcsuite/btcwallet)\n[![Build status](https://ci.appveyor.com/api/projects/status/88nxvckdj8upqr36/branch/master?svg=true)](https://ci.appveyor.com/project/jrick/btcwallet/branch/master)\n\nbtcwallet is a daemon handling bitcoin wallet functionality for a\nsingle user.  It acts as both an RPC client to btcd and an RPC server\nfor wallet clients and legacy RPC applications.\n\nPublic and private keys are derived using the hierarchical\ndeterministic format described by\n[BIP0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\nUnencrypted private keys are not supported and are never written to\ndisk.  btcwallet uses the\n`m/44'/<coin type>'/<account>'/<branch>/<address index>`\nHD path for all derived addresses, as described by\n[BIP0044](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki).\n\nDue to the sensitive nature of public data in a BIP0032 wallet,\nbtcwallet provides the option of encrypting not just private keys, but\npublic data as well.  This is intended to thwart privacy risks where a\nwallet file is compromised without exposing all current and future\naddresses (public keys) managed by the wallet. While access to this\ninformation would not allow an attacker to spend or steal coins, it\ndoes mean they could track all transactions involving your addresses\nand therefore know your exact balance.  In a future release, public data\nencryption will extend to transactions as well.\n\nbtcwallet is not an SPV client and requires connecting to a local or\nremote btcd instance for asynchronous blockchain queries and\nnotifications over websockets.  Full btcd installation instructions\ncan be found [here](https://github.com/btcsuite/btcd).  An alternative\nSPV mode that is compatible with btcd and Bitcoin Core is planned for\na future release.\n\nWallet clients can use one of two RPC servers:\n\n  1. A legacy JSON-RPC server mostly compatible with Bitcoin Core\n\n     The JSON-RPC server exists to ease the migration of wallet applications\n     from Core, but complete compatibility is not guaranteed.  Some portions of\n     the API (and especially accounts) have to work differently due to other\n     design decisions (mostly due to BIP0044).  However, if you find a\n     compatibility issue and feel that it could be reasonably supported, please\n     report an issue.  This server is enabled by default.\n\n  2. An experimental gRPC server\n\n     The gRPC server uses a new API built for btcwallet, but the API is not\n     stabilized and the server is feature gated behind a config option\n     (`--experimentalrpclisten`).  If you don't mind applications breaking due\n     to API changes, don't want to deal with issues of the legacy API, or need\n     notifications for changes to the wallet, this is the RPC server to use.\n     The gRPC server is documented [here](./rpc/documentation/README.md).\n\n## Requirements\n\n[Go](http://golang.org) 1.12 or newer.\n\n## Installation and updating\n\n### Windows - MSIs Available\n\nInstall the latest MSIs available here:\n\nhttps://github.com/btcsuite/btcd/releases\n\nhttps://github.com/btcsuite/btcwallet/releases\n\n### Windows/Linux/BSD/POSIX - Build from source\n\n- Install Go according to the installation instructions here:\n  http://golang.org/doc/install\n\n- Ensure Go was installed properly and is a supported version:\n\n```bash\n$ go version\n$ go env GOROOT GOPATH\n```\n\nNOTE: The `GOROOT` and `GOPATH` above must not be the same path.  It is\nrecommended that `GOPATH` is set to a directory in your home directory such as\n`~/goprojects` to avoid write permission issues.  It is also recommended to add\n`$GOPATH/bin` to your `PATH` at this point.\n\n- Run the following commands to obtain btcwallet, all dependencies, and install it:\n\n```bash\n$ cd $GOPATH/src/github.com/btcsuite/btcwallet\n$ GO111MODULE=on go install -v . ./cmd/...\n```\n\n- btcwallet (and utilities) will now be installed in ```$GOPATH/bin```.  If you did\n  not already add the bin directory to your system path during Go installation,\n  we recommend you do so now.\n\n## Updating\n\n#### Windows\n\nInstall a newer MSI\n\n#### Linux/BSD/MacOSX/POSIX - Build from Source\n\n- Run the following commands to update btcd, all dependencies, and install it:\n\n```bash\n$ cd $GOPATH/src/github.com/btcsuite/btcwallet\n$ git pull\n$ GO111MODULE=on go install -v . ./cmd/...\n```\n\n## Getting Started\n\nThe following instructions detail how to get started with btcwallet connecting\nto a localhost btcd.  Commands should be run in `cmd.exe` or PowerShell on\nWindows, or any terminal emulator on *nix.\n\n- Run the following command to start btcd:\n\n```\nbtcd -u rpcuser -P rpcpass\n```\n\n- Run the following command to create a wallet:\n\n```\nbtcwallet -u rpcuser -P rpcpass --create\n```\n\n- Run the following command to start btcwallet:\n\n```\nbtcwallet -u rpcuser -P rpcpass\n```\n\nIf everything appears to be working, it is recommended at this point to\ncopy the sample btcd and btcwallet configurations and update with your\nRPC username and password.\n\nPowerShell (Installed from MSI):\n```\nPS> cp \"$env:ProgramFiles\\Btcd Suite\\Btcd\\sample-btcd.conf\" $env:LOCALAPPDATA\\Btcd\\btcd.conf\nPS> cp \"$env:ProgramFiles\\Btcd Suite\\Btcwallet\\sample-btcwallet.conf\" $env:LOCALAPPDATA\\Btcwallet\\btcwallet.conf\nPS> $editor $env:LOCALAPPDATA\\Btcd\\btcd.conf\nPS> $editor $env:LOCALAPPDATA\\Btcwallet\\btcwallet.conf\n```\n\nPowerShell (Installed from source):\n```\nPS> cp $env:GOPATH\\src\\github.com\\btcsuite\\btcd\\sample-btcd.conf $env:LOCALAPPDATA\\Btcd\\btcd.conf\nPS> cp $env:GOPATH\\src\\github.com\\btcsuite\\btcwallet\\sample-btcwallet.conf $env:LOCALAPPDATA\\Btcwallet\\btcwallet.conf\nPS> $editor $env:LOCALAPPDATA\\Btcd\\btcd.conf\nPS> $editor $env:LOCALAPPDATA\\Btcwallet\\btcwallet.conf\n```\n\nLinux/BSD/POSIX (Installed from source):\n```bash\n$ cp $GOPATH/src/github.com/btcsuite/btcd/sample-btcd.conf ~/.btcd/btcd.conf\n$ cp $GOPATH/src/github.com/btcsuite/btcwallet/sample-btcwallet.conf ~/.btcwallet/btcwallet.conf\n$ $EDITOR ~/.btcd/btcd.conf\n$ $EDITOR ~/.btcwallet/btcwallet.conf\n```\n\n## Issue Tracker\n\nThe [integrated github issue tracker](https://github.com/btcsuite/btcwallet/issues)\nis used for this project.\n\n## GPG Verification Key\n\nAll official release tags are signed by Conformal so users can ensure the code\nhas not been tampered with and is coming from the btcsuite developers.  To\nverify the signature perform the following:\n\n- Download the public key from the Conformal website at\n  https://opensource.conformal.com/GIT-GPG-KEY-conformal.txt\n\n- Import the public key into your GPG keyring:\n  ```bash\n  gpg --import GIT-GPG-KEY-conformal.txt\n  ```\n\n- Verify the release tag with the following command where `TAG_NAME` is a\n  placeholder for the specific tag:\n  ```bash\n  git tag -v TAG_NAME\n  ```\n\n## License\n\nbtcwallet is licensed under the liberal ISC License.\n"
 },
 {
  "repo": "craigwatson/bitcoind-status",
  "language": "PHP",
  "readme_contents": "# bitcoind-status\n\n[![Travis CI Status](https://travis-ci.org/craigwatson/bitcoind-status.svg?branch=master)](https://travis-ci.org/craigwatson/bitcoind-status)\n\nThis is a small PHP application designed to display status and information from the Bitcoin node daemon.\n\n#### Table of Contents\n\n1. [Requirements](#requirements)\n1. [Getting Started](#getting-started)\n1. [Contributing](#contributing)\n1. [Advanced Configuration Options](#advanced-configuration-options)\n1. [Licensing](#licensing)\n\n## Requirements\n\nTo run the application, you will need:\n\n  * A Bitcoin node with RPC enabled.\n  * A web-server with PHP installed.\n  * The PHP `curl` module - this is used to make RPC calls to the Bitcoin daemon.\n\n### PHP Support\n\nThis application has been tested with PHP 5.6, 7.0, 7.1 and 7.2, as well as Nightly PHP builds, via TravisCI. PHP 5.4 and 5.5 *is not supported* by this\napplication.\n\n## Getting Started\n\nTo get started, all you need to do is copy/rename `php/config.sample.php` to `php/config.php` and configure your node's RPC credentials. The application will connect to your node via RPC and report statistics.\n\nTo use Google Analytics, simply create a file called `google_analytics.inc` inside the `php` directory and paste your GA code into it.\n\n## Collecting Connection Statistics\n\nThe script can also periodically collect the current number of connections as well as peer protocol versions and store it for display via Google Charts on your status page.\n\nTo do this, just schedule the `/stats.php` script as well as the `/peercount.php` script to be called at whatever interval you like, then `config.php` to enable the chart display. You can optionally tweak the settings under the \"Stats\" and \"Node Count\" sections if you want to keep more or less data.\n\n* `/stats.php` will create a graph showing the number of connections over time.\n* `/peercount.php` will create a graph showing the most common protocol versions over time.\n\nBelow are two example `crontab` entries to call the scripts every five minutes via `curl`. It is **highly recommended** to only allow `127.0.0.1` to call the script, as allowing other IP addresses could lead to your node becoming vulnerable to DDoS attacks.\n\n```\n#Run over Curl / Http\n*/5 *  *   *   *  curl -Ssk http://127.0.0.1/stats.php > /dev/null\n*/5 *  *   *   *  curl -Ssk http://127.0.0.1/peercount.php > /dev/null\n\n#Run over php cgi\n*/5 *  *   *   *  cd /var/www/bitnodes/ && /usr/bin/php stats.php > /dev/null\n*/5 *  *   *   *  cd /var/www/bitnodes/ && /usr/bin/php peercount.php > /dev/null\n```\n\n## Node Profile Icons\n\nTo configure profile icons for your node, just set them up using the `node_links` variable in `config.php`. The format is a multi-dimensional array, as\nbelow. Icon images for Bitnodes.21.co and Blockchain.info are included in the `img` directory.\n\n```\n    'node_links' => array (\n        array (\n            'name' => 'bitnodes.earn.com',\n            'image'=> 'img/bitnodes.earn.com.png',\n            'link' => 'https://bitnodes.earn.com/nodes/[IP]-[PORT]/'\n        ),\n        array (\n            ...\n        )\n    ),\n```\n\n## Ignoring Certain Peers\n\nTo ignore any specific peer from appearing in the connections table. Write the IPv4 or IPv6 address of the peer in the array like the example below.\n\n```\n    'peers_to_ignore' => array (\n        '192.168.0.10',\n        '[2a01:4f8:121:14f7::2]'\n  ),\n```\n\n## Peer Count Nodes\n\nThe node count script automatically counts Core, Classic, Unlimited and BitcoinJ clients. To add more node types to the chart, simply add an entry into the `peercount_extra_nodes` array in `config.php`.\n\nThe key of the entry is an internal-only identifier, and the value is the lower-case text that should be matched in order to increment the counter.\n\n## Contributing\n\nContributions and testing reports are extremely welcome. Please submit a pull request or issue on [GitHub](https://github.com/craigwatson/bitcoind-status), and make sure\nthat your code conforms to the PEAR PHP coding standards (Travis CI will test your pull request when it's sent).\n\nI accept tips via Bitcoin to 1N73BsKN2bubvRo9dXbUjwe4SBHW4j4j4B - if you would like to buy me a beer, please do!\n\n## Advanced Options\n\nThe `config.php` file also contains lots of options to control how the application behaves, and is separated out into loose sections:\n\n### RPC\n\n| Value        | Type    | Default     | Explanation                        |\n|--------------|---------|-------------|------------------------------------|\n| `rpc_user`   | String  | `rpcuser`   | Username for RPC calls             |\n| `rpc_pass`   | String  | `rpcpass`   | Password for RPC calls             |\n| `rpc_host`   | String  | `localhost` | Which RPC host to connect to       |\n| `rpc_port`   | String  | `8332`      | Port to use for the RPC connection |\n| `rpc_ssl`    | Boolean | `false`     | Enables SSL for the RPC connection |\n| `rpc_ssl_ca` | String  | `null`      | The SSL CA chain file              |\n\n### Donations\n\n| Value                   | Type    | Default   | Explanation                                 |\n|-------------------------|---------|-----------|---------------------------------------------|\n| `display_donation_text` | Boolean | `false`    | Display text to encourage donations        |\n| `donation_address`      | String  | `not_set` | Bitcoin address to advertise for donations  |\n| `donation_amount`       | String  | `0.001`   | Donation amount - not currently implemented |\n\n### Peers\n\n| Value                 | Type    | Default   | Explanation                                     |\n|-----------------------|---------|-----------|-------------------------------------------------|\n| `display_peer_info`   | Boolean | `false`   | Display connected peers                         |\n| `display_peer_port`   | Boolean | `false`   | Display remote peer's port                      |\n| `hide_dark_peers`     | Boolean | `true`    | Hides peers connected from \"Dark\" networks      |\n| `ignore_unknown_ping` | Boolean | `false`   | Hides peers that do not report pingtime         |\n| `peers_to_ignore`     | Array   | `array()` | List of peers *not* to display in the peer list |\n\n### Cache\n\n| Value               | Type    | Default                               | Explanation                                                          |\n|---------------------|---------|---------------------------------------|----------------------------------------------------------------------|\n| `cache_geo_data`    | Boolean | `true`                                | Enables caching of geolocation data                                  |\n| `geo_cache_file`    | String  | `/var/tmp/bitcoind-geolocation.cache` | File location for the geolocation cache                              |\n| `geo_cache_time`    | Int     | `604800`                              | Time in seconds until geolocation cache expires - defaults to 7 days |\n| `use_cache`         | Boolean | `true`                                | Enable cache                                                         |\n| `cache_file`        | String  | `/tmp/bitcoind-status.cache`          | File location to write to for cache                                  |\n| `max_cache_time`    | Int     | `300`                                 | Expiry time for cache                                                |\n| `nocache_whitelist` | Array   | `array('127.0.0.1')`                  | The IP addresses that are allowed to bypass or clear cache           |\n\n### Geolocation\n\n| Value                 | Type    | Default | Explanation                   |\n|-----------------------|---------|---------|-------------------------------|\n| `geolocate_peer_ip`   | Boolean | `false` | Geolocate peers' IP addresses |\n| `display_ip_location` | Boolean | `false` | Geolocate node IP address     |\n\n### UI\n\n| Value                      | Type    | Default               | Explanation                                                                                        |\n|----------------------------|---------|-----------------------|--------------------------------------------------------------------------------------------------- |\n| `display_ip`               | Boolean | `false`               | Display the server IP address                                                                      |\n| `display_free_disk_space`  | Boolean | `false`               | Displayfree disk space                                                                             |\n| `display_testnet`          | Boolean | `false`               | Display testnet status                                                                             |\n| `display_version`          | Boolean | `true`                | Display node `bitcoind` version                                                                    |\n| `display_github_ribbon`    | Boolean | `true`                | Displays the 'Fork me on GitHub' ribbon                                                            |\n| `display_max_height`       | Boolean | `false`               | Displays the node height as a percentage of network height                                         |\n| `use_bitcoind_ip`          | Boolean | `true`                | Use the Bitcoin daemon to get the public IP, instead of `$_SERVER`                                 |\n| `intro_text`               | String  | `not_set`             | Introductory text to display above the node statistics.                                            |\n| `title_text`               | String  | `Bitcoin Node Status` | Value to display for the web browser title and main heading                                        |\n| `display_bitnodes_info`    | Boolean | `false`               | Displays various information via the bitnodes.21.co API                                            |\n| `display_chart`            | Boolean | `false`               | Displays a chart showing the stats collected by the stats.php script                               |\n| `display_peer_chart`       | Boolean | `false`               | Displays a chart showing the mix of node versions connected to your node                           |\n| `node_links`               | Array   | `array()`             | Displays links to various other profiles for your node, see \"Node Profile Icons\"example            |\n\n### Stats\n\n| Value                   | Type   | Default                     | Explanation                                            |\n|-------------------------|--------|-----------------------------|--------------------------------------------------------|\n| `stats_whitelist`       | Array  | `array('127.0.0.1')`        | Hosts that can run the stats script                    |\n| `stats_file`            | String | `/tmp/bitcoind-status.data` | File to store stats                                    |\n| `stats_max_age`         | String | `604800`                    | Maximum age for stats                                  |\n| `stats_min_data_points` | Int    | `5`                         | Minimum data points to collect before displaying chart |\n\n### Peer Count Stats\n\n| Value                       | Type    | Default                     | Explanation                                                  |\n|-----------------------------|---------|-----------------------------|--------------------------------------------------------------|\n| `peercount_whitelist`       | Array   | `array('127.0.0.1')`        | Hosts that can run the host-count script                     |\n| `peercount_file`            | String  | `/tmp/bitcoind-peers.data`  | File to store host-count                                     |\n| `peercount_max_age`         | String  | `604800`                    | Maximum age for host-count                                   |\n| `peercount_min_data_points` | Int     | `5`                         | Minimum data points to collect before displaying chart       |\n| `peercount_extra_nodes`     | Array   | `array()`                   | Key-Value array of extra node types to count (value = regex) |\n\n### Uptime\n\n| Value                     | Type    | Default    | Explanation                                                 |\n|---------------------------|---------|------------|-------------------------------------------------------------|\n| `display_bitcoind_uptime` | Boolean | `true`     | Displays the uptime of the Bitcoin daemon                   |\n| `bitcoind_process_name`   | String  | `bitcoind` | Name to use when getting the bitcoin daemon process' uptime |\n\n### System\n\n| Value         | Type    | Default             | Explanation                                                  |\n|---------------|---------|---------------------|--------------------------------------------------------------|\n| `date_format` | String  | `H:i:s T, j F Y`    | PHP date fuction format to use when outputting dates         |\n| `timezone`    | String  | `null`              | Timezone to use for dates. Set to null to use system default |\n| `stylesheet`  | String  | `v2-light.css`      | CSS Stylesheet to use                                        |\n| `debug`       | Boolean | `false`             | If enabled, the contents of $data is echoed in HTML comments |\n| `admin_email` | String  | `admin@example.com` | Email address to display on error                            |\n\n#### Important Note\n\n  *  **Do not** disable cache unless you either have an alternative mechanism or your node is protected from potential DDoS attacks.\n\n## Licensing\n\n* Copyright (C) 2015 [Craig Watson](http://www.cwatson.org)\n* Distributed under the terms of the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0) - see [LICENSE file](https://github.com/craigwatson/bitcoind-status/blob/master/LICENSE) for details.\n* [EasyBitcoin-PHP library](https://github.com/aceat64/EasyBitcoin-PHP) is reproduced under the terms of the [MIT licence](http://opensource.org/licenses/MIT) and is used from commit [ff67be76](https://github.com/aceat64/EasyBitcoin-PHP/tree/ff67be76a9109beba2ec5f684d646c6f3a3e9792).\n"
 },
 {
  "repo": "jlopp/physical-bitcoin-attacks",
  "language": null,
  "readme_contents": "# Known Physical Bitcoin Attacks\nA list of known attacks against Bitcoin / crypto asset owning entities that occurred in meatspace. NOTE: this list is not comprehensive; many attacks are not publicly reported.\n\nReaders may be interested in this relevant presentation: [\"The Hodlguard- a primer on physical security in Bitcoin\"](https://vimeo.com/365979416#t=24m50s) and [slides](https://prezi.com/view/P46hHguLiPvqA7aZ7gYR).\n\n| Date        | Victim  | Location | Description |\n| :---------: |:------: | :------: | :---------: |\n| December 29, 2014 | Hal Finney | Santa Barbara , California | [Bitcoin developer SWATted after months of harrassment & extortion](https://archive.fo/WvHB9) |\n| January 3, 2015 | Amanda McCollum | Atlanta, Georgia | [BTM thieves strike smoke shop, fire gun](https://archive.fo/R98Nn)|\n| January 22, 2015 | Martin Wismeijer | Amsterdam, Netherlands | [Thieves steal 2 bitcoin ATMs](https://archive.fo/aP649) |\n| February, 2015 | Dean Katz | New York, New York | [Bitcoin trader robbed of $12,000 at gunpoint](https://archive.fo/QeCwu) |\n| May 27, 2015 | Dwayne Richards | New York, New York | [Firefighter kidnapped, robbed of $1,100, & stabbed by crypto thieves](https://web.archive.org/web/20170212084543/https://www.cnbc.com/2015/06/05/new-york-city-man-robbed-at-gunpoint-for-bitcoin.html) |\n| November 16, 2015 | Robert Nederhoed | Delft, Netherlands | [Thieves steal bitcoin ATM containing 2,000 EUR](https://www.ad.nl/binnenland/dieven-stelen-2000-euro-uit-bitcoinautomaat-in-delft~a315113e/) |\n| July 11, 2016 | Tadas Kasputis | Kaunas, Lithuania | [Cryptocurrency executive kidnapped at car wash](https://archive.fo/VDAjq) |\n| July 25, 2016 | Steve Manos | West Palm Beach, Florida | [Bitcoin trader robbed of $28,000 at gunpoint](https://archive.fo/fQdH7) |\n| August 14, 2016 | Multiple | Toronto, Ontario | [Police arrest teens in string of bitcoin-related robberies](https://www.toronto.com/news-story/6810325-toronto-police-arrest-teens-in-string-of-bitcoin-related-robberies/) |\n| November 6, 2016 | Tivoli Brasserie | Oudenbosch, Netherlands | [Dutch Bitcoin ATM Owner Laughs at Thieves Who Took His Machine](https://bitsonline.com/bitcoin-atm-stolen-netherlands/) |\n| February 16, 2017 | Josoj | London, England | [Description of robbery during Localbitcoins trade](https://localbitcoins.com/forums/#!/general-discussion:double-spending-cash-robb) with [Bitcoins Uncensored interview](https://soundcloud.com/bitcoinuncensored/uk-based-local-bitcoin-trader-robbed-in-broad-daylight-josoj-tells-his-story) and the [robber's side of the story](https://localbitcoins.com/forums/#!/general-discussion:unfreeze-my-account). |\n| February 26, 2017 | Rocelo Lopes' wife | Florianopolis, Brazil | [Wife of crypto exchange owner kidnapped and ransomed](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&prev=search&rurl=translate.google.com&sl=pt-BR&sp=nmt4&u=https://www1.folha.uol.com.br/cotidiano/2017/05/1880569-bandidos-pedem-dinheiro-digital-para-libertar-refem-de-sequestro.shtml&xid=17259,15700002,15700019,15700124,15700149,15700168,15700186,15700190,15700201,15700208&usg=ALkJrhh0Ok2Seoc85twz3X488yGHyzXjkw) |\n| March 14, 2017 | 3 Indian Bitcoin traders | Dubai, UAE | [3 Emiratis pose as cops, kidnap victims and rob them of 25 BTC](https://archive.fo/P5S6u) |\n| June 17, 2017 | Miyuki Noda | Gifu, Japan | [Woman strangled, attacker takes 100,000 yen worth of BTC](https://archive.fo/OmqRM) |\n| September 4, 2017 | Alexey Sherstne | Kiev, Ukraine | [Man tortured for $50k in Bitcoins](https://archive.fo/2aCmP ) |\n| October 16, 2017 | Jameson Lopp | Durham, North Carolina | [Bitcoin developer SWATted & extorted](https://archive.fo/p5gEf) |\n| October, 2017 | Multiple | Toulouse, France | [4 bitcoin traders robbed at gunpoint](https://archive.fo/QHlfc) |\n| October, 2017 | Multiple | Los Angeles, California | [\"Discount Bitcoin Bandits\" committed 5 robberies at gunpoint](https://archive.is/D7MJS) |\n| November 4, 2017 | Unidentified | New York, New York | [Man robbed of $1.8M of ETH](https://archive.fo/Lt2bJ) |\n| November 15, 2017 | Unidentified | Istanbul, Turkey | [Gang stole $2.83M in BTC from businessman](https://archive.fo/spoUT) |\n| December, 2017 | Unidentified | Reykjavik, Iceland | [600 Bitcoin ASICs stolen](https://www.nbcnews.com/news/world/bitcoin-heist-600-powerful-computers-stolen-iceland-n852811) and [Follow-up Story](https://archive.is/np6rz)|\n| December 26, 2017 | Pavel Lerner | Kiev, Ukraine | [Bitcoin exchange owner kidnapped & ransomed](https://archive.fo/xsQAx) |\n| January 3, 2018 | \"Dallas\" | Milwaukee, Wisconsin | [Convicted felon accused of firing gun inside downtown Milwaukee condo during Bitcoin sale](https://fox6now.com/2018/01/11/convicted-felon-accused-of-firing-gun-inside-downtown-milwaukee-condo-during-bitcoin-argument/) |\n| January 14, 2018 | Pavel Nyashin | Leningrad Oblast, Russia | [Blogger Who Boasted About Crypto Wealth Beaten and Robbed For $425k](https://archive.fo/OaOlP) |\n| January 15, 2018 | Maxsim Latsoka & Anna Nikurina | Phuket, Thailand | [Russian gang steals 100,000 Euros in BTC from young Russian couple](https://archive.fo/9chQq) |\n| January 18, 2018 | \\____ Lee | North Point, Hong Kong | [Bitcoin trader lured to bogus meeting and robbed of HK$1.4M](https://www.scmp.com/news/hong-kong/law-crime/article/2129665/hong-kong-bitcoin-trader-lured-bogus-meeting-and-robbed) | \n| January 23, 2018 | Canadian Bitcoins | Ottawa, Canada | [Failed armed robbery attempt of Canadian bitcoin exchange](https://archive.fo/Qzqb5) | \n| January 27, 2018 | Danny Aston & Amy Jay | Moulsford, Oxfordshire, England | [Armed home invasion of Bitcoin trading firm owner](https://archive.fo/rpCUg) | \n| January 29, 2018 | Unidentified | Cumming, Georgia | [Five men arrested for planning armed home invasion of bitcoin owner](https://archive.fo/hVDKF) | \n| January 2018 | Unidentified | Odessa, Ukraine | [Several men pose as bitcoin sellers, beat and rob buyer of 1.5 Million UAH ($57,000 USD](https://archive.fo/ho58l) | \n| February 9, 2018 | Sailesh Bhatt | Amreli, India | [Police Officers Beat, Extorted 200 BTC from Businessman](https://archive.fo/VctPq) | \n| February 21, 2018 | \\____ Tai | Taichung, Taiwan | [Four men assault bitcoin seller & transfer 18 BTC](https://archive.fo/cGzd6) | \n| February 23, 2018 | Yury Mayorov | Moscow, Russia | [Crypto Developer Beaten, Robbed Of 300 BTC](https://archive.fo/YDbVR) | \n| February 23, 2018 | Unidentified | Moscow, Russia | [Crypto investor has face mutilated, robbed of $1M in BTC](https://archive.fo/wUxu7) | \n| March 2018 | Undisclosed woman | Killingly, Connecticut | [2 women invaded home of another woman who had opened a \"Bitcoin account\" in the name of one of the attackers and used it to steal her money.](http://www.norwichbulletin.com/news/20181016/police-2-rhode-island-women-charged-in-killingly-home-invasion) | \n| March 2018| Unidentified Miner | Kiev, Ukraine | [Miner kidnapped, extorted for $50,000. Kidnappers caught 8 months later.](https://archive.fo/ziAAR)|\n| March 22, 2018 | Multiple gas stations | Irving & Mesquite, Texas | [Robbers douse clerks with pepper spray, steal from Bitcoin ATMs in Irving and Mesquite](https://archive.is/rODUM) | \n| April 8, 2018 | Pang Joon Hau | Singapore | [Man seeking to buy BTC robbed of $365,000](https://archive.fo/IQMXP) | \n| April 11, 2018 | Ryan Rice | Miami, Florida | [Bitcoin buyer shoots robber in self defense](https://archive.fo/wWiYd) | \n| April 25, 2018 | 2 unidentified Asian brothers | Dubai, UAE | [Gang of 10 robbed two brothers of AED 7m ($1.9m) in cash who were looking to buy Bitcoin](https://archive.fo/N5O0K) | \n| June 6, 2018 | Unidentified 22-year-old | Milan, Italy | [Robbers attempt bitcoin purchase with counterfeit money, beat victims and fire gun, take 50,000 euros](https://archive.fo/ls1QA) |\n| June 13, 2018 | \"Synth\" | China | [Home invasion of Skycoin architect resulted in theft of 18.88 BTC and 6,466 SKY](https://archive.fo/fc3Mq) | \n| June 19, 2018 | Unidentified | Wels, Austria | [$250,000 in cryptocurrency taken by robbers posing as postmen](https://archive.fo/kabJg) | \n| July 6, 2018 | Austin Nedved | Northborough, Massachussetts | [Armed home invasion of Localbitcoins trader](https://localbitcoins.com/forums/#!/general-discussion:armed-break-inhome-invasio) |\n| September 7, 2018 | Nicholas Truglia | New York, New York | [Friends accused of torturing pal to steal his cryptocurrency](https://archive.fo/PJYDN) |\n| November ?, 2018 | Kieran Hamilton | Manchester, England | [Crypto trader stabbed, robbed by home invaders](https://archive.is/kAi7c) |\n| November 16, 2018 | Andrew ______ | Lanseria, South Africa | [Bitcoin trader drugged, beaten, and tortured before transferring BTC to attackers](https://archive.fo/ASDBT) |\n| February 10, 2019 | Tjeerd H. | Drouwenerveen, Netherlands | [Bitcoin trader tortured with drill](https://archive.fo/UONTD) |\n| March 12, 2019 | Costcutters | Far Cotton, Northampton, England | [Bitcoin machine stolen during robbery](https://archive.fo/0lCv5) |\n| May 14, 2019 | Undisclosed | Oslo, Norway | [Bitcoin millionaire escapes armed home invader by jumping off balcony](https://archive.is/HfBWe) |\n| June 30, 2019 | Luftan Shaikh, Mohammad Shazad, Malang Shah | Jaipur, Rajasthan, India | [Criminal Gang Abducts &amp; Tortures Cryptocurrency Traders, Demands 80 BTC Ransom](https://archive.fo/8PY9R) |\n| July 15, 2019 | Bitcoin Exchange | Sparkhill, Birmingham, England | [Masked raiders hold up Bitcoin Exchange in front of dozens of witnesses](https://archive.fo/fAoh0) |\n| July 26, 2019 | Unidentified | Wels, Austria | [Man raided in office](https://archive.fo/HHicH) [(en)](https://archive.fo/R7UjD)|\n| August 26, 2019 | Abdul Shakoor | Dehradun, India | [Kingpin of Kerala bitcoin scam murdered in Dehradun](https://archive.fo/O4Wno)|\n| November 19, 2019 | Simply Delicious Food Market | Vernon, British Columbia | [Thieves break into BTM](https://archive.ph/saynt)|\n| January ?, 2020 | Iroro Wisdom Ovie | Abraka, Nigeria | [Man shot & killed by home invaders seeking $10,000 in bitcoin](https://archive.is/3JkYf)|\n| January ?, 2020 | 17 y/o trader | Preston, Lancashire, England | [Trader lured to apartment, kidnapped, driven around in car trunk.](https://archive.ph/61KsO)|\n| January 8, 2020 | Mark Cheng Jin Quan | Bangkok, Thailand | [Blockchain advisor kidnapped, held at gunpoint, extorted for $60,000 in bitcoin](https://www.tnp.sg/news/singapore/man-out-bail-cheating-charges-allegedly-kidnapped-thailand)|\n| January 21, 2020 | Mayfair Quick Mart | Philadelphia, Pennsylvania | [2 men break into BTM, steal cash box](https://archive.fo/MMAtb)|\n| February 10, 2020 | Unidentified couple | Carlisle, England | [Home invaders force victims to create crypto exchange accounts](https://archive.ph/yLi4j) |\n| May 17, 2020 | ____ Le | Ho Chi Minh City, Vietnam | [HCMC cops charged with $1.6 mln bitcoin robbery](https://archive.md/T9g5e)|\n| May 19, 2020 | Exxon Gas Station | East Lansdowne, Pennsylvania | [2 subjects pry open BTM in broad daylight](https://www.facebook.com/ELPOLICE/videos/277210370075309/)|\n| May 23, 2020 | Ellis Pinsky | Irvinton, NY | [2 men commit home invasion of hacker, seeking tens of millions of dollars in bitcoin](https://archive.ph/ldlEZ)|\n| September, 2020 | Male Freshman | Kent, England | [Student robbed of bitcoin at knifepoint during first week at university.](https://archive.is/wH3Y2)|\n| October 1, 2020 | Unidentified | Kiev, Ukraine | [Police kidnap a businessman, torture him, and force his wife to send them 7 bitcoin.](https://archive.is/LB3Nm)|\n| October 7, 2020 | Mike's Produce | Kelowna, BC, Canada | [Botched Bitcoin theft destroys deli](https://archive.is/xk8r2)|\n| October 22, 2020 | Undisclosed | Riga, Latvia | [Man arrested for planning kidnapping and killing owners of cryptocurrencies](https://archive.fo/3LnrJ)|\n| December ?, 2020 | Undisclosed | Dubai, UAE | [4 Ukrainian men attack Bitcoin buyer with deoderant](https://archive.is/yQIF7)|\n| December 24, 2020 | Undisclosed | Ternopil, Ukraine | [Man kidnapped and tortured for $800k](https://archive.is/bx8kT)|\n| Unknown, 2021 | Dillon Attard | Sliema, Malta | [Victim describes his disbelief as $700,000 stolen in front of him](https://archive.is/ypS03)|\n| January 5, 2021 | 37 y/o man | Chai Wan, Hong Kong | [Robbers take US$387,000 in cash, 15BTC from man after in-person trade](https://archive.is/ps31W)|\n| January 18, 2021 | Unidentified Woman | Kwun Tong, Hong Kong | [Gang snatches HK$3.5 million from trader at knifepoint](https://archive.is/3mR44)|\n| January 23, 2021 | Physical Exchange Employees | Osztyn, Poland | [Two employees shot at physical Bitcoin exchange FlyingAtom](https://archive.is/wip/YOvMq)|\n| February 4, 2021 | Married Couple | Stockholm, Sweden | [Armed robbers invade home and force owners to hand over 1M+ SEK in BTC](https://archive.is/5qCBI)|\n| February ?, 2021 | Swiss & German | Gujranwala, Pakistan | [Armed robbers take $93k in BTC at gunpoint](https://archive.is/Nmdes)|\n| March 10, 2021 | Bank director | Recife, Brazil | [Man kidnapped by a gang , tied up, and had two teeth knocked out. He was released after he instructed his partner to transfer 4.78 BTC to the attackers.](https://archive.ph/KrFtE)|\n| March 16, 2021 | 29 y/o Berlin man | Munich, Germany | [Robbers steal bitcoin worth almost 100,000 Euros](https://archive.is/H8Qix)|\n| March 18, 2021 | \"F.T.\" | Mendoza, Argentina | [Armed robbers steal iPhone, $5k at gunpoint](https://archive.is/DpOQe)|\n| April 8, 2021 | 30 year old miner | Zaporizhya, Ukraine | [Mining farm owner shoots at looters](https://archive.is/WT3sm)|\n| April 13, 2021 | Undisclosed | Calgary, Alberta, Canada | [Armed men force their way into Canyon Meadows home, steal cryptocurrency keys](https://archive.is/GP76C)|\n| May, 2021 | 14 y/o boy | Bradford, UK | [Teen bitcoin trader kidnapped & ransomed](https://archive.is/SUsgH)|\n| May, 2021 | ___ Ghershony | Bethesda, Maryland | [Son drugs father, steals $400K in BTC](https://archive.is/ezAnH)|\n| June 11, 2021 | 40 y/o man | Gyeonggi Province, South Korea | [Woman drugs man she met on chat app, steals $87K from his phone.](https://archive.ph/e6FKx)|\n| June 14, 2021 | 22 y/o man | Kwun Tong, Hong Kong | [Trader temporarily blinded, HK$2 million stolen](https://archive.is/6h6UG)|\n| June 24, 2021 | 39 y/o man | Leeuwarden, Netherlands | [3 men posing as service technicians beat password out of Bitcoin owner](https://archive.md/xviCX)|\n| July 1, 2021 | Unidentified man | Unknown | [Bitcoin holder drugged and robbed by Tinder date](https://archive.is/uIMAl)|\n| July 14, 2021 | Morakinyo Peter & Yusuf Dayo | Lagos, Nigeria | [Law Enforcement Officers rob 2 men of $50K USD in bitcoin at gunpoint](https://archive.md/Xdsmc)|\n| July 28, 2021 | 39 y/o man | Tsim Sha Tsui, Hong Kong | [Trader robbed of HK$3 million at knifepoint](https://archive.is/CeCA8)|\n| August ?, 2021 | 3 women | Dubai, UAE | [4 Africans rob three women of $100,000 in a fake Bitcoin deal](https://archive.is/3dubt)|\n| August 8, 2021 | Wesley Pessano Santarem | Sao Pedro da Aldeia, Brazil | [Crypto Trader's Murder Blamed On Social Media Bragging](https://archive.is/2kfpq)|\n| August 18, 2021 | Simon Arthuis | Plancher-Bas, France | [Computer engineering student killed for \u20ac200,000 in cryptocurrency](https://archive.md/7mvSY)|\n| September ?, 2021 | Unidentified 31 y/o | Abkhazia | [Thieves break into garage, steal 20 mining servers worth $10,000.](https://archive.is/MPNwC)|\n| September 9, 2021 | Mark Geor | Westmere, New Zealand | [Safe containing $4M of cryptocurrency ripped from house](https://archive.md/y8m24)|\n| October, 2021 | Miner | Tomsk, Russia | [Armed Robbers attack Miner at his Home, Steal 86 BTC](https://archive.is/n1IfA)|\n| October 7, 2021 | Liquor Store | South Bay, California | [Thieves Break Into Liquor Store to Steal Bitcoin ATM](https://archive.is/1caUw)|\n| October 20, 2021 | Astamur Ardzibna | Abkhazia | [Man Shot Dead in Hail of Gunfire Over Crypto Mining Rigs](https://archive.is/zg4Kk)|\n| November 2, 2021 | Zaryn Dentzel | Madrid, Spain | [Home invaders torture social media founder, take tens of millions of euros in bitcoin](https://archive.md/f5nIJ)|\n| November 6, 2021 | 39 y/o trader | Hong Kong | [Crypto trader kidnapped by Triad gang, beaten with hammers](https://archive.is/OnZVR)|\n| November 12, 2021 | GBTC Crypto Exchange | Barcelona, Spain | [Thieves rip bitcoin ATM from crypto store](https://archive.md/AsIGX)|\n| December ?, 2021 | Unidentified Family | Sukhumi, Abkhazia | [2 masked men break into home, hold family at gunpoint before escaping with three servers and $2,040 in cash.](https://archive.is/MPNwC)|\n| December 11, 2021 | Camilla Guadagnuolo & Principe Nerini | Bali, Indonesia | [Robbers take $400K in cash & bitcoin at knifepoint](https://archive.is/KJO7s)|\n| December 15, 2021 | Vincent Everts | Amsterdam, Netherlands | [Armed home invaders threaten TV personality during livestream](https://archive.md/tUbAz)|\n| December 27, 2021 | 2 unidentified males | Thunder Bay, Ontario, Canada | [11 Inmates take 2 inmates hostage, force them to transfer cryptocurrency](https://archive.is/5R0gB)|\n| January 16, 2022 | Gas Station | Memphis, TN | [Suspects smash gas station with truck, steal Bitcoin ATM](https://archive.is/Zjfr2)|\n| January 21, 2022 | 34 y/o teacher | Hoboken, Belgium | [3 men invade home, fail to force owner to hand over 3M Euros of BTC](https://archive.ph/LgqrJ)|\n| February 2, 2022 | Vinay Naik | Pune, India | [Pune: 8 including cop arrested for kidnapping man to extort Bitcoin worth Rs 300 crore ( $50 million USD )](https://archive.is/UJG8J)|\n| February 3, 2022 | Vinay Jain | Surat, India | [Auto parts businessman brings suitcase full of $260K worth of cash to do an in-person crypto trade, gets beaten and robbed by 8 men.](https://archive.is/hMOJh)|\n| February 3, 2022 | Ilya Basin | Brooklyn, New York | [Crypto consultant hog-tied, beaten during home invasion.](https://archive.is/DEA2C)|\n| March, 2022 | bitcoin trader | Dubai, UAE | [4 men invade home, tie up man, steal $450K from safe.](https://archive.ph/Ri5N9)|\n| March 2, 2022 | Unidentified man | Miami, FL | [Businessman ambushed by armed robber, has $1M watch & crypto wallet taken.](https://archive.ph/tyzQa)|\n| March 4, 2022 | Electronics Dealer | Pune, India | [Woman cop suspended for bid to extort crypto from trader](https://archive.ph/wPxv4)|\n| March 16, 2022 | Pierrick Jamaux | New York, NY | [Crypto expert shot 5 times by robber seeking Richard Mille watch.](https://archive.ph/LRGHO)|\n| April, 2022 | Unidentified trader | Dubai, UAE | [9 robbers invaded the office of a bitcoin trader and took over $1,000,000 in cash.](https://archive.ph/MkVof)|\n| April 21, 2022 | Unidentified couple | Norrk\u00f6ping, Sweden | [Couple tied up and beaten, forced to transfer cryptocurrency.](https://archive.ph/waBom)|\n| May, 2022 | 4 victims | London, UK | [Multiple incidents of crypto muggings around London.](https://archive.ph/rlae2)|\n| May, 2022 | Unidentified man | Dubai, UAE | [Crypto expert assaulted & robbed by investors for losing money.](https://archive.ph/Kvu77)|\n| May 20, 2022 | Factory Owner | Klang, Malaysia | [12 men rob aluminum factory, steal 180 Bitcoin ASICs.](https://archive.ph/JjfwB)|\n| June, 2022 | Undisclosed | Osaka, Japan | [Son of Mitsubishi Electric CEO + 7 men kidnap, torture gym member for crypto assets.](https://archive.is/UWS2L)|\n| July, 2022 | Asian Investor | Dubai, UAE | [Man suffers home invasion, loses ~$50,000 after attempting a face-to-face cash trade to buy bitcoin.](https://archive.ph/OLid3)|\n| July, 2022 | Vkusvill Supermarket | Kuchino, Russia | [4 armed mask men rob warehouse, steal 100 GPUs.](https://archive.ph/vg0Lo)|\n| August 6, 2022 | 30 y/o broker | Manerba, Italy | [3 men follow a man home, hold him at knifepoint for BTC.](https://archive.ph/qB84G)|\n| August 7, 2022 | Arjun Bhargav | Vrindavan Yojana, India | [3 men trick, abduct, torture realtor for 8 BTC.](https://archive.ph/UlCSo)|\n| September 6, 2022 | 19 y/o hacker | Lincolnshire, U.K. | [3 men, 1 posing as a cop, arrested while attempting home invasion.](https://archive.ph/K58cR)|\n| September 12, 2022 | 19 y/o man | Winnipeg, Canada | [Man held at gunpoint, assaulted and tied up during Bitcoin trade.](https://archive.ph/psytU)|\n| September 15, 2022 | Russian Couple | Koh Samui, Thailand | [Russian couple extorted by gang of foreign men at coffee shop.](https://archive.ph/VmHZx)|\n| December 1, 2022 | Russian Businessman | Moscow, Russia | [Man kidnapped from his Bentley by 4 men, forced to give access to bitcoin wallet.](https://archive.ph/zC9Tf)|\n| December 11, 2022 | 2 Russians | Phuket, Thailand | [2 men who work on a cryptocurrency were kidnapped and robbed.](https://archive.vn/el9Sc)|\n| January 14, 2023 | Crypto Company | Barcelona, Spain | [5 men stormed into a company's office armed with tasers and zip ties.](https://archive.is/tAU6I)|\n| February 25, 2023 | Yuri Boytsov | Bali, Indonesia | [4 men invade crypto blogger's home, beat him until he transfers $284,000 in BTC.](https://archive.is/2R05l)|\n| February 27, 2023 | German man | Medellin, Colombia | [20 year old Venezuelan woman drugs and robs man of 1 BTC.](https://archive.is/ZhIn5)|\n"
 },
 {
  "repo": "sinisterchipmunk/bitcoin-client",
  "language": "Ruby",
  "readme_contents": "= bitcoin-client {<img src=\"https://travis-ci.org/sinisterchipmunk/bitcoin-client.png?branch=master\" alt=\"Build Status\" />}[https://travis-ci.org/sinisterchipmunk/bitcoin-client] {<img src=\"https://codeclimate.com/github/sinisterchipmunk/bitcoin-client.png\" />}[https://codeclimate.com/github/sinisterchipmunk/bitcoin-client] {<img src=\"https://coveralls.io/repos/sinisterchipmunk/bitcoin-client/badge.png\" alt=\"Coverage Status\" />}[https://coveralls.io/r/sinisterchipmunk/bitcoin-client]\n\nProvides a Ruby library to the complete Bitcoin JSON-RPC API. Implements all methods listed\nat {https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list}[https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list].\nAlso supports customizing the host and port number to connect to.\n\n== Installation\n\nOn Ruby 1.9, you can just install the gem and start using it. On 1.8, the 'json' gem is also required, so you'll need to install that first:\n\n  gem install json\n\nOr, if you're using Bundler (and you should be), just add it to the Gemfile:\n\n  gem 'json', '~> 1.5.3'\n\n== Usage\n\nAs with most Ruby gems, you first need to require the library into your project:\n\n  require 'bitcon_client'\n\nAfter doing this, the simplest possible usage looks like this:\n\n  BitcoinClient('username', 'password').balance\n  # => 0.001\n\nOr, if you prefer a somewhat more explicit representation, the following code performs the exact\nsame task:\n\n  client = BitcoinClient::Client.new('username', 'password')\n  client.balance\n  # => 0.001\n  \nThe third and final way to use the library is by taking advantage of a simple DSL:\n\n  include BitcoinClient\n  \n  # set up credentials\n  username 'username'\n  password 'password'\n  \n  balance\n  # => 0.001\n  \n  accounts\n  # => {\"account\" => 0.001}\n  \nThe RPC method names available to you are exactly the same as those listed on the Bitcoin wiki\n(again, that's {https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list}[https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list]). Some aliases\nhave been added to make them more \"ruby-ish,\" but none of the original names have been changed.\n\n\n== Host, Port and SSL\n\nHere are several examples of how you can change the host information:\n\n  BitcoinClient('username', 'password', :host => 'example.com', :port => 38332, :ssl => true)\n  \n  client = BitcoinClient::Client.new('username', 'password', :host => 'example.com')\n  client.port = 38332\n  client.ssl = true\n  client.ssl?\n  # => true\n  \n  include BitcoinClient\n  host 'example.com'\n  port 38332\n  ssl?\n  # => false\n  ssl true\n  ssl?\n  # => true\n\nYou should see the BitcoinClient::Client class documentation if you'd like to see the other options and methods\nthat are made available.\n\n\n== Donations\n\nIf you found this library useful and feel inclined to compensate me for my trouble, I'm certainly not going to turn you down!\n\nBitcoin donations can be sent to:\n\n  1HawYer58J9Vy3iju1w7jsRVci5tzaxkwn\n\nThanks!\n\n"
 },
 {
  "repo": "JamieAcharya/Bitcoin-Private-Key-Finder",
  "language": "Java",
  "readme_contents": "# Bitcoin-Private-Key-Finder\nEnter Bitcoin public address and coressponding private key will be found.\n\n\nTo run this program on Windows follow these steps:\n\n1. Download btcadress.jar and place it into a directory\n2. Open that directory within CMD (command prompt)\n3. Type in this Command:  java -jar btcaddress.jar\n4. You will then be prompted to insert a BTC address, insert the address you wish to find the Private Key for\n5. Ignore the any Logger Load Class errors/issues\n6. Wait for the program to find the private key that matches the public address you entered\n7. Wait some more\n8. If the program finds the address you will be prompted with the public address and its corresponding private key\n9. The program will always save this to a text file within the directory named: foundaddress.txt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBTC Donation: 14feiEZfYkmvppVXzJA2SnZ1y4BsvwCFRk\n"
 },
 {
  "repo": "fortesp/bitcoinaddress",
  "language": "Python",
  "readme_contents": "# Bitcoin Address\n\n[![](https://img.shields.io/github/v/release/fortesp/bitcoinaddress)](https://github.com/fortesp/bitcoinaddress)\n[![](https://img.shields.io/github/stars/fortesp/bitcoinaddress.svg)](https://github.com/fortesp/bitcoinaddress)\n[![](https://img.shields.io/github/issues/fortesp/bitcoinaddress)](https://github.com/fortesp/bitcoinaddress)\n[![](https://img.shields.io/github/license/fortesp/bitcoinaddress?style)](https://github.com/fortesp/bitcoinaddress)\n\n### Bitcoin Wallet Address Generator\n\nThis is a simple Bitcoin non-deterministic wallet address generator coded in Python 3. It generates a Private Key in different\nformats (hex, wif and compressed wif) and corresponding Public Addresses, raw, P2WPKH addresses starting with prefix 1, P2SH addresses\nstarting with prefix 3 as part of Segwit soft fork and Bech32 addresses with prefix bc1 P2WPKH and P2WSH.\n\n## Installation\n\n```\npip install bitcoinaddress\n```\n\n## Usage\n\n###### Example 1 - Mainnet\n\n```python\nfrom bitcoinaddress import Wallet\n\nwallet = Wallet()\nprint(wallet)\n```\n\n###### Output:\n\n```\nPrivate Key HEX: 03902e4f09664bc177fe4e090dcd9906b432b50f15fb6151984475c1c75c35b6\nPrivate Key WIF: 5HqrbgkWPqBy6dvCE7FoUiMuiCfFPRdtRsyi6NuCM2np8qBZxq5\nPrivate Key WIF compressed: KwLdv6T2jmhQbswnYrcL9KZHerTpVyjozp1JNjfP5QuD3GchCwCc \n            \nPublic Key: 04c5389a31ce6149c28ba20d14db8540b2319e5a65000a2919fbf7a6296e7840b53f883a9483fb7f2b43f3eacd857c904d1b70ecc168571b64d8f1ab82b57eea88 \nPublic Key compressed: 02c5389a31ce6149c28ba20d14db8540b2319e5a65000a2919fbf7a6296e7840b5\n\nPublic Address 1: 1Bu6YxH64nfvhdDsYNEP8PftoBMqgusdPS   \nPublic Address 1 compressed: 18i5PtPisxbGiGGEviW7HPcnfNPmcsscwH   \nPublic Address 3: 38dRrGx5YbrnRWuWcJv5i2XHjYUnHE2wvv  \nPublic Address bc1 P2WPKH: bc1q2jxe5azr6zmhk3258av7ul6cqtu4eu4mps8f4p    \nPublic Address bc1 P2WSH: bc1qdveuf0egtfdnd2fnsp0lzfukn2e58czf8323ky6xt8ydew4ecfcqv3ettx  \n```\n\n###### Example 2 - Testnet\n\n```python\nfrom bitcoinaddress import Wallet\n\nwallet = Wallet(testnet=True)\nprint(wallet)\n```\n\n###### Output:\n\n```\nPrivate Key HEX: 064f8f0bebfa2f65db003b56bc911535614f2764799bc89091398c1aed82e884\nPrivate Key WIF: 91dhN38UTmqGtd3zG1GnDdnyivAP5LnWJQyyj7V7pqthirHAj4X\nPrivate Key WIF compressed: cMny9rPzDAt58r8BjECeamPwN1eQSAKrKrrVNsd78AoCjcWxuVym \n            \nPublic Key: 04f7a01e30388dea9673db8cdb48b985441db785382efbcecc05abac079a6304818a907f886b0d0518e345a0288a6f1e09072f2b11d4ccb75bc67ec6c71dfef800 \nPublic Key compressed: 02f7a01e30388dea9673db8cdb48b985441db785382efbcecc05abac079a630481\n\nPublic Address 1: mwdHSyBBHMbcy8rogvzssvDrGyffRo3amQ   \nPublic Address 1 compressed: n4VzeGfAyZGR7xCXiKmABvnKXojTFJrmKH   \nPublic Address 3: 2MtJ3jPSD2AYgbF25fq9cm1aUCPhSmWUMcJ  \nPublic Address bc1 P2WPKH: tb1qlsw8qqe2aa2avzn9t9nsfjy8kwwgarwcfvfqlh    \nPublic Address bc1 P2WSH: tb1qp53qkcsth8ffuvr00cnlg5hde03aszzeq7y0layklhd4nwkxzejs99tlh3\n```\n\n###### Example 3 - Import Private Key\n\n```python\nfrom bitcoinaddress import Wallet\n\nwallet = Wallet('5HqrbgkWPqBy6dvCE7FoUiMuiCfFPRdtRsyi6NuCM2np8qBZxq5')\nprint(wallet)\n```\n\n###### Output:\n\n```\nPrivate Key HEX: 03902e4f09664bc177fe4e090dcd9906b432b50f15fb6151984475c1c75c35b6\nPrivate Key WIF: 5HqrbgkWPqBy6dvCE7FoUiMuiCfFPRdtRsyi6NuCM2np8qBZxq5\nPrivate Key WIF compressed: KwLdv6T2jmhQbswnYrcL9KZHerTpVyjozp1JNjfP5QuD3GchCwCc \n            \nPublic Key: 04c5389a31ce6149c28ba20d14db8540b2319e5a65000a2919fbf7a6296e7840b53f883a9483fb7f2b43f3eacd857c904d1b70ecc168571b64d8f1ab82b57eea88 \nPublic Key compressed: 02c5389a31ce6149c28ba20d14db8540b2319e5a65000a2919fbf7a6296e7840b5\n\nPublic Address 1: 1Bu6YxH64nfvhdDsYNEP8PftoBMqgusdPS   \nPublic Address 1 compressed: 18i5PtPisxbGiGGEviW7HPcnfNPmcsscwH   \nPublic Address 3: 38dRrGx5YbrnRWuWcJv5i2XHjYUnHE2wvv  \nPublic Address bc1 P2WPKH: bc1q2jxe5azr6zmhk3258av7ul6cqtu4eu4mps8f4p    \nPublic Address bc1 P2WSH: bc1qdveuf0egtfdnd2fnsp0lzfukn2e58czf8323ky6xt8ydew4ecfcqv3ettx\n```\n\n###### Example 4 - Check attributes\n\n```python\nfrom bitcoinaddress import Wallet\n\nwallet = Wallet()\nprint(wallet.key.__dict__)\nprint(wallet.key.__dict__['mainnet'].__dict__)\nprint(wallet.key.__dict__['testnet'].__dict__)\nprint(wallet.address.__dict__)\nprint(wallet.address.__dict__['mainnet'].__dict__)\nprint(wallet.address.__dict__['testnet'].__dict__)\n```\n\n## License and other\n\nThis software is distributed under the terms of the MIT License. See the file 'LICENSE' in the root directory of the present\ndistribution, or http://opensource.org/licenses/MIT.\n\nBech32 address scripts source from https://github.com/sipa/bech32/tree/master/ref/python\n"
 },
 {
  "repo": "raspibolt/raspibolt",
  "language": "Markdown",
  "readme_contents": "### The RaspiBolt Guide is now available on GitHub Pages:\nhttps://raspibolt.github.io/raspibolt/\n\nThis repository contains all sources and is used for Issue tracking.\n"
 },
 {
  "repo": "bitcoin-core/bitcoin-maintainer-tools",
  "language": "Python",
  "readme_contents": "External repository for Bitcoin Core related maintenance tools.\n\ngithub-merge\n------------\n\nA small script to automate merging pull-requests securely and sign them with GPG.\n\nFor example, if the \"to\" repo is identical to the \"from\" repo:\n\n```bash\n./github-merge.py 1234\n```\n\n(in any git repository) will help you merge pull request #1234 for the configured repository.\n\nOtherwise, for a differing \"from\" repo:\n\n```bash\n./github-merge.py --repo-from=bitcoin-core/gui 1234\n```\n\nwill fetch the pull request from another monotree repository. Be sure to also set `githubmerge.pushmirrors` (see below).\n\nWhat it does:\n* Fetch master and the pull request.\n* Locally construct a merge commit.\n* Show the diff that merge results in.\n* Ask you to verify the resulting source tree (so you can do a make check or whatever).\n* Ask you whether to GPG sign the merge commit.\n* Ask you whether to push the result upstream.\n\nThis means that there are no potential race conditions (where a\npull request gets updated while you're reviewing it, but before you click\nmerge), and when using GPG signatures, that even a compromised GitHub\ncouldn't mess with the sources.\n\n### Setup\n\nConfiguring the github-merge tool for the bitcoin repository is done in the following way:\n\n    git config githubmerge.repository bitcoin/bitcoin\n    git config githubmerge.pushmirrors \"git@github.com:bitcoin-core/gui.git,git@github.com:YourPrivateMirror/bitcoin-core.git\"\n    git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n    git config --global user.signingkey mykeyid\n\nIf you want to use HTTPS instead of SSH for accessing GitHub, you need set the host additionally:\n\n    git config githubmerge.host \"https://github.com\"  (default is \"git@github.com\", which implies SSH)\n\n### Authentication (optional)\n\nThe API request limit for unauthenticated requests is quite low, but the\nlimit for authenticated requests is much higher. If you start running\ninto rate limiting errors it can be useful to set an authentication token\nso that the script can authenticate requests.\n\n- First, go to [Personal access tokens](https://github.com/settings/tokens).\n- Click 'Generate new token'.\n- Fill in an arbitrary token description. No further privileges are needed.\n- Click the `Generate token` button at the bottom of the form.\n- Copy the generated token (should be a hexadecimal string)\n\nThen do:\n\n    git config --global user.ghtoken \"pasted token\"\n\n### Create and verify timestamps of merge commits\n\nTo create or verify timestamps on the merge commits, install the OpenTimestamps\nclient via `pip3 install opentimestamps-client`. Then, download the gpg wrapper\n`ots-git-gpg-wrapper.sh` and set it as git's `gpg.program`. See\n[the ots git integration documentation](https://github.com/opentimestamps/opentimestamps-client/blob/master/doc/git-integration.md#usage)\nfor further details.\n\nupdate-translations\n-------------------\n\nRun this script from the root of a repository to update all translations from Transifex.\nIt will do the following automatically:\n\n- Fetch all translations\n- Post-process them into valid and committable format\n- Add missing translations to the build system (TODO)\n\nTo be able to pull translation files from the Transifex website, it needs\nthe [Transifex CLI](https://github.com/transifex/cli).\n\nclang-format\n------------\n\nA script to format cpp source code according to the .clang-format file in the bitcoin repo.\nThis should only be applied to new files or files which are currently not actively developed on.\nAlso, git subtrees are not subject to formatting.\n\nNote: The script is currently untested and unmaintained, but kept for archival reasons, in\ncase it is planned to be used some day.\n\nbuild-for-compare\n--------------------\n\nBuild for binary comparison.\n\nSee `build-for-compare.py --help` for more information.\n\nBuilds from current directory, which is assumed to be a git clone of the bitcoin repository.\n\n**DO NOT RUN this with the nocopy=1 flag set on working tree if you have any local additions, it will nuke all\nnon-repository files, multiple times over. By leaving nocopy off (default) the git tree is copied to a temporary\ndirectory and all operations are performed there.**\n\nExample:\n```bash\ngit clone https://github.com/bitcoin/bitcoin.git bitcoin-compare\ncd bitcoin-compare\n../bitcoin-maintainer-tools/build-for-compare.py 4731cab 2f71490\nsha256sum /tmp/compare/bitcoind.*.stripped\ngit diff -W --word-diff /tmp/compare/4731cab /tmp/compare/2f71490\n```\n\nbackport\n--------\n\nScript to backport pull requests in order of merge, to minimize number of conflicts.\nPull ids are listed in `to_backport.txt` or given on the command line, and they must be prefixed\nwith the repository name, e.g.:\n\n```bash\n../bitcoin-maintainer-tools/backport.py bitcoin/bitcoin#21907 bitcoin-core/gui#277 bitcoin-core/gui#365\n\n```\n\nRequires `pip3 install gitpython` or similar.\n\nunittest-statistics\n--------------------------\n\n`unittest-statistics.py` can be used to print a table of the slowest 20 unit tests.\n\nUsage:\n```bash\nunittest-statistics.py </path/to/test_bitcoin> [<subtest>]\n```\n\nFor example:\n```bash\nunittest-statistics.py src/test/test_bitcoin wallet_tests\n```\n\ntreehash512\n--------------\n\nThis script will show the SHA512 tree has for a certain commit, or HEAD\nby default.\n\nUsage:\n\n```bash\ntreehash512.py [<commithash>]\n```\n\nThis should match the Tree-SHA512 commit metadata field added by\ngithub-merge.\n\nsignoff\n----------\n\nThis is an utility to manually add a treehash to the HEAD commit and then\ngpg-sign it. This is useful when there is the need to manually add a commit.\n\nUsage:\n\n```bash\nsignoff.py\n```\n(no command line arguments)\n\nWhen there is already a treehash on the HEAD commit, it is compared against\nwhat is computed. If this matches, it continues. If the treehash mismatches an\nerror is thrown. If there is no treehash it adds the \"Tree-SHA512:\" header with\nthe computed hash to the commit message.\n\nAfter making sure the treehash is correct it verifies whether the commit is\nsigned. If so it just displays the signature, if not, it is signed.\n\nsubtree updates\n---------------\n\nBitcoin Core comes with several subtrees (c.f. https://github.com/bitcoin/bitcoin/tree/master/test/lint#git-subtree-checksh)\nTo update the subtree, make sure to fetch the remote of the subtree.\nThen a simple call should pull in and squash the changes:\n\n```sh\ngit subtree pull --prefix src/${prefix} ${remote_repo} ${ref} --squash\n```\n\nFor setting up a subtree, refer to `git help subtree`.\n\ncheck-dnsseeds\n---------------\n\nSanity-check the DNS seeds used by Bitcoin Core.\n\nUsage:\n\n```bash\ncheck-dnsseeds.py\n```\n\nExample output:\n\n```bash\n* Mainnet\nOK   seed.bitcoin.sipa.be (40 results)\nOK   dnsseed.bluematt.me (33 results)\nFAIL dnsseed.bitcoin.dashjr.org\nOK   seed.bitcoinstats.com (50 results)\nOK   seed.bitcoin.jonasschnelli.ch (38 results)\nOK   seed.btc.petertodd.org (23 results)\nOK   seed.bitcoin.sprovoost.nl (35 results)\nOK   dnsseed.emzy.de (41 results)\n\n* Testnet\nOK   testnet-seed.bitcoin.jonasschnelli.ch (36 results)\nOK   seed.tbtc.petertodd.org (38 results)\nOK   testnet-seed.bluematt.me (5 results)\n```\n\ndelete non-reduced fuzz inputs\n------------------------------\n\nRefer to the documentation inside the script.\n\nfastcopy-chaindata\n-------------------\n\nFast local copy of Bitcoin Core blockchain state.\n\n```bash\nfastcopy-chaindata.py ~/.bitcoin /path/to/temp/datadir\n```\n\nThis utility hardlinks all but the last block data file (rev and blk),\nand hardlinks all .ldb files to the destination. The last data files as well\nas the other leveldb data files (such as the log) are copied.\n\nThis relies on the fact that block files (except the last) and ldb files\nare read-only once they are written.\n\nWarning: Hardlinking only works within a filesystem, and may not work for all\nfilesystems.\n\nlist-pulls\n----------\n\nScript to parse git commit list, extract github issues to create a changelog in\ntext and json format.\n\nRun this in the root directory of the repository.\n\nThis requires an up-to-date checkout of https://github.com/zw/bitcoin-gh-meta.git\nin the parent directory, or environment variable `GHMETA`.\n\nIt takes a range of commits and a .json file of PRs to exclude, for\nexample if these are already backported in a minor release. This can be the pulls.json\ngenerated from a previous release.\n\nExample usage:\n\n    ../maintainer-tools/list-pulls.py v0.18.0 0.19 relnot/pulls-exclude.json > relnot/pulls.md\n\nThe output of this script is a first draft based on rough heuristics, and\nlikely needs to be extensively manually edited before ending up in the release\nnotes.\n\nmake-tag\n--------\n\nMake a new release tag, performing a few checks.\n\nUsage: `make-tag.py <tag>`.\n\nguix-verify\n-----------\n\nA script to verify guix deterministic build signatures for a release in one\nglance. It will print a matrix of signer versus build package (\"noncodesigned\"\nand \"all\"), and a list of missing keys.\n\nTo be able to verify PGP signatures, it needs the `gpg` modules. This can be\ninstalled from pip, for example:\n\n```sh\npip3 install --user gpg\n```\n\n(or install the distribution package, in Debian/Ubuntu this is `python3-gpg`).\n\nExample usage: `./guix-verify.py -r 24.0 -d ../guix.sigs -k ../bitcoin/contrib/builder-keys/keys.txt`\n\nWhere\n\n- `-r 24.0` specifies the release to verify signatures for.\n- `-d ../gitian.sigs` specifies the directory where the repository with signatures, [gitian.sigs](https://github.com/bitcoin-core/gitian.sigs/) is checked out.\n- `../bitcoin/contrib/builder-keys/keys.txt` is the path to `keys.txt` file inside the main repository that specifies the valid keys and what signers they belong to.\n\nExample output:\n```\nSigner        noncodesigned       all\n0xb10c           No Key            -\nachow101           OK             OK       \nbenthecarman     No Key            -\n...\n\nMissing keys\nnorisg         3A51FF4D536C5B19BE8800A0F2FC9F9465A2995A  from GPG, from keys.txt\n...\n```\n\nSee `--help` for the full list of options and their descriptions.\n\nThe following statuses can be shown:\n\n- `Ok` Full match.\n- `No key` Signer name/key combination not in keys.txt, or key not known to GPG (which one of these it is, or both, will be listed under \"Missing keys\").\n- `Expired` Known key but it has expired.\n- `Bad` Known key but invalid PGP signature.\n- `Mismatch` Correct PGP signature but mismatching binaries.\n\nghwatch\n-------\n\nThis is a script to watch your github notifications in the terminal. It will show a table that is refreshed every 10 minutes (configurable). It can be exited by pressing <kbd>ESC</kbd> or <kbd>Ctrl-C</kbd>.\n\n### Dependencies\n\nThe `github` python module is a required dependency for github API access. This can be installed for your user using `pip3 install --user PyGithub`, or globally using your distribution's package manager e.g. `apt-get install python3-github`.\n\n### Configuration\n\nTo generate a default configuration file in `~/.config/ghwatch/ghwatch.conf` do\n\n```\n./ghwatch.py --default-config\n```\n\nThen, edit the configuration file. Only thing that is necessary to change is `ghtoken`. You will need to create a github [authentication token](https://github.com/settings/tokens) then insert it here:\n\n```\n    \"ghtoken\": \"<token from github>\",\n```\n\nDepending on your browser preference you might want to change `browser`, this is the command that will be invoked when clicking on an issue number. It defaults to `null` which indicates to use the system web browser.\n\nIf you want to see PR status (and other issue details like labels), point `meta` for the `bitcoin/bitcoin` repository to an up-to-date checkout of [bitcoin-gh-meta](https://github.com/zw/bitcoin-gh-meta).\n```\n    \"meta\": {\n        \"bitcoin/bitcoin\": \"/path/to/bitcoin-gh-meta\"\n    },\n```\n\nTo keep this repository up to date you can set the interval in seconds in 'auto_update', default is 0 (i.e. no automatic update). Be aware that [bitcoin-gh-meta](https://github.com/zw/bitcoin-gh-meta) is being refreshed every two hours (7200 seconds).\n\nSorting the notifications by {reason, time} can be enabled with the 'sort_notifications' boolean field (default=false).\n\nBy editing the `label_prio` structure it is possible to affect what labels will be shown. The first label encountered in this list for an issue in the associated repository will be shown as the label in the table.\n\n### Command-line options\n\nSome other settings can be set through command line options. See `./ghwatch.py --help` for the list of command line options and their descriptions.\n\n### Display\n\nMost of the columns are self-explanatory, except for:\n\n- `r` this [notification reason](https://docs.github.com/en/rest/reference/activity#notification-reasons) from the GH API as a two-letter code. This can be:\n  - `as` assign\n  - `au` author\n  - `co` comment\n  - `in` invitation\n  - `ma` manual\n  - `me` mention\n  - `rr` review requested\n  - `sa` security alert\n  - `sc` state change\n  - `su` subscribed\n  - `tm` team mention\n- `k` the kind of notification as a letter. This can be:\n  - `P` pull request\n  - `I` issue\n  - `C` commit\n\n### Controls\n\nLeft-click on a PR number to show details in a web browser.\n\nThe program can be exited by pressing <kbd>ESC</kbd> or <kbd>Ctrl-C</kbd>.\n"
 },
 {
  "repo": "jakubroztocil/cointrol",
  "language": "Python",
  "readme_contents": "# Cointrol\n\nCointrol is a Bitcoin trading bot and real-time dashboard for [Bitstamp](https://bitstamp.net) created by [@jakubroztocil](https://twitter.com/jakubroztocil).\n\n![Dashboard in the browser](_/browser.png \"Dashboard in the browser\")\n\n\n![cointrol-server and cointrol-trader running in the terminal](_/running-server-and-trader.png \"cointrol-server and cointrol-trader running in the terminal\")\n\n**Cointrol was created to automate Bitcoin speculation.** Besides automated trading based on price change triggers and various trading strategies, it also provides a **real-time updated dashboard for your Bitstamp account** where you can see all your orders and transactions real-time updated (something Bitstamp lacks). The dashboard  for a real-time updated overview can also be used standalone without letting Cointrol make any transactions.\n\nEven though the original idea was to perhaps provide a fully-fledged hosted service, the system remained quite basic as it has only been used by its creator for a period of time in the winter of '13/'14 (when BTC price fluctuations were pretty insane). Some of the obvious limitations\u2014all of which could easily be addressed\u2014are:\n\n* Only basic trading strategies are implemented\n* Single user/Bitstamp account is supported\n* Only one active trading session at a time\n* The **whole account value is used** when trading\n* Django admin is used for auth and trading strategy/session manipulations\n\nEven though Cointrol has been used for real transactions, no guarantees are provided in terms of security, correctness, etc. (see `LICENCE`).\n\n\n## Architecture\n\nThe system consists of the following components:\n\n![](_/architecture.png)\n\n\n### `cointrol-trader`\n\n* Polls various Bitstamp API endpoints\n* Writes changes to DB\n* Publishes changes to Redis pub/sub\n* Opens orders, when suitable\n\n\n### `cointrol-server`\n\n* Serves Webapp static files\n* Exposes DB for Webapp via a REST API\n* Forwards Redis pub/sub messages from Trader to Webapp via WebSocket\n* Exposes Django administration that is currently used for managing trading sessions\n\n\n### `webapp`\n\n* REST/WebSocket API-powered Single Page App\n* Real-time updated overview on orders, transactions, and trading sessions\n\n\n## Technology\n\n**The server-side parts** (`cointrol-server` + `cointrol-trader`) are written in **Python 3** (3.3+ is required) and use a mixture of **Django** (models, admin) and **Tornado** (WebSockets, async IO). Other libraries that are used include sockjs-tornado, Django REST framework.\n\n**The single-page webapp** is written in CoffeeScript, Sass, Handlebars and uses Backbone.js, Brunch, socksjs-client, Bootstrap.\n\n\n\n## Installation\n\n\n### 0. Prerequisites\n\nMake sure you have the following software installed on your system:\n\n* Python 3.3+\n* Redis\n* npm\n\n\n### 1. Install Cointrol\n\n#### 1.1 Install `cointrol-server` & `cointrol-trader`\n```bash\nmkdir Cointrol && cd Cointrol\n\n# Create an isolated Python virtual environment\npip install virtualenv\nvirtualenv ./virtualenv --python=$(which python3)\n\n# Activate the virtualenv\n# IMPORTANT: it needs to be activated every time before you run\n#            a manage.py or cointrol-* command.\n. virtualenv/bin/activate\n\n# Get the code\ngit clone https://github.com/jakubroztocil/cointrol\n\n# Create a local settings file\necho 'from .settings_dev import *' > cointrol/cointrol/conf/settings_local.py\n\n# Install Python requirements\npip install -r cointrol/cointrol/conf/requirements.txt\n\n# Initialize the database\ncointrol/manage.py migrate\n\n# Install cointrol-*\npip install -e ./cointrol\n\n```\n\n#### 1.2 Build the single-page app web client and install its dependencies\n\n\n```bash\n# Install dependencies\nsudo npm -g install bower\ncd cointrol/webapp\nnpm install\nbower install\n\n# Build the app\nbrunch build\n\n# Use `brunch watch` during development\n```\n\n### 2. Create a Django user\n\n```bash\n. virtualenv/bin/activate\ncointrol/manage.py createsuperuser\n```\n\n\n### 3. Configure Bitstamp API access\n\n#### 3.1 Get API key and secret\n\nGo to [https://www.bitstamp.net/account/security/api](https://www.bitstamp.net/account/security/api). Create a new key and configure permissions for it. Cointrol needs at least the following permissions:\n\n * `Account balance`\n * `User transactions`\n * `Open orders`\n \nIf you want Cointrol make transactions for you, select two following permissions as well:\n\n  * `Buy limit order`\n  * `Sell limit order`\n\nDon't forget to activate the key by clicking \"Activate\" and confirming the email you receive from Bitstamp. \n\n\n#### 3.2 Configure Cointrol with the API credentials\n1. Activate the virtualenv and run `cointrol-server`\n2. Go to [http://localhost:8000/admin/core/account/1/](http://localhost:8000/admin/core/account/1/) and enter your Bitstamp username as well as the API key and secret to the form there.\n\n## Usage\n\n\n### Start `cointrol-server`\n\n\n```bash\n. virtualenv/bin/activate\ncointrol-server\n```\n\n\nBy default, it will run on [http://localhost:8000](http://localhost:8000). You can change the port with `--port=<port>`. \n\nUse this convenient link to log in: [http://localhost:8000/admin/login/?next=/](http://localhost:8000/admin/login/?next=/) \u2014 the Django admin interface is used for authentication, and this link ensures redirection back to the app after signing you in.\n\n**Connection indicator colors explained:**\n\n![green](_/connection-green.png)\n\nGreen: The web app has a WebSocket connection to `cointrol-server`, and *have* recently heard from `cointrol-trader`. \n\n![amber](_/connection-amber.png)\n\n\nAmber: The web app has a WeSocket connection to `cointrol-server`, but \n*have not* heard from `cointrol-trader` in a while.\n\n![red](_/connection-red.png)\n\nRed: The web app couldn't establish WebSocket connection to `cointrol-server`.\n\n\n\n\n### Start `cointrol-trader`\n\n```bash\n. virtualenv/bin/activate\ncointrol-trader\n```\n\nNote, until trading is configured  and the `COINTROL_DO_TRADE` settings set to `True` (covered in a later step), the trader won't make any transactions. It only pulls your data from Bitstamp to populate the dashboard view.\n\n### Trading\n\nUntil the following steps are completed and trading is explicitly enabled, Cointrol doesn't attempt to make any transaction on your behalf:\n\n1. Through the admin ([http://localhost:8000/admin/](http://localhost:8000/admin/)) you can create a trading strategy profile. It can be for the *fixed* (fixed price points in USD are used as buy/sell triggers) or the *relative* (percentage of the initial BTC price are used) strategy.\n2. Create a trading session (also in the admin interface).\n3. To perform actual transactions, you'll have to enable them in the settings (we used the `settings_dev` module which disables them). Add `COINTROL_DO_TRADE = True` to your `cointrol/cointrol/conf/settings_local.py`.\n\n\n## Settings\n\nThe settings is resolved in this order: \n\n1. `settings_local.py`\n2. `settings_(prod|dev).py` \n3. `settings_defaults.py`\n4.  Django defaults\n\nDuring the installation process, you've created `cointrol/cointrol/conf/settings_local.py` which imports settings from the `settings_dev.py` file. All the settings are [Django settings](https://docs.djangoproject.com/en/1.7/ref/settings/). The only non-Django settings is `COINTROL_DO_TRADE` (`False` in `dev`, `True` in `prod`). You can override any of the default settings in the `settings_local.py` file.\n\nBesides `settings_dev.py`, the `conf` directory also has `settings_prod.py`, which is more suitable for production use. It defines logging configuration which makes messages of a level `>=` `WARNING` logged by the trader to be sent to you via email (e.g. when the trader places an order or there is an error). If you decide to use this settings file (by changing the import in `settings_local.py` to `from .settings_prod import *`, you'll have to configure at least [`DATABASES`](https://docs.djangoproject.com/en/1.7/ref/settings/#databases), [`ADMINS`](https://docs.djangoproject.com/en/1.7/ref/settings/#admins) and [`SECRET_KEY`](https://docs.djangoproject.com/en/1.7/ref/settings/#secret-key) as well in your in `settings_local.py`.\n\n\n## Contact\n\nJakub Roztocil\n\n* [https://github.com/jakubroztocil](https://github.com/jakubroztocil)\n* [https://twitter.com/jakubroztocil](https://twitter.com/jakubroztocil)\n* [http://roztocil.co](http://roztocil.co)\n* `3NVcdcoXrBV7jKv7T3st6kQz7XdsPNUn34`\n\n## Licence\n\nMIT. See [LICENCE](./LICENCE).\n\n\n"
 },
 {
  "repo": "Bit-Wasp/bitcoin-lib-php",
  "language": "PHP",
  "readme_contents": "bitcoin-lib-php\n===============\n\nPHP libraries implementing bitcoin key functions, as well as BIP32 and electrum.\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Bit-Wasp/bitcoin-lib-php?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n> NB: This library is outdated, and no longer maintained. BC breaks will not be accepted for this reason. For a newer library, please see https://github.com/Bit-Wasp/bitcoin-php\n\nThe library intends to expose a lot of general functionality which isn't \navailable using the RPC (like deterministic addresses). \n\nIt also allows you to reduce the number of queries that are made to bitcoind,\nsuch as createrawtransaction/signrawtransaction/decoderawtransaction. As such,\nsuch, use of bitcoin RPC functionality can be kept to a minimum.\n\nLibraries\n=========\n- Raw Transactions: create, sign, validate, with support for P2SH. \n- Create multi-signature addresses, create redeeming transactions. \n- BIP32: Functions for generating BIP32 deterministic keys.\n- Electrum: Create seed from mnemonic, create MPK from seed, derive public keys from MPK, or private keys from seed.\n- BitcoinLib: The core class, with key functionality, encoding/decoding & validation functions, etc. \n- BIP39: Functions for generating Mnemonic code for generating deterministic keys (possibly password protected)\n\nIf this library powers your project and you're feeling tipsy, buy me lunch some day! 1sCVtkEhQmvp3D4K22Pw9xhFPTDWFh8SZ\n\nInstallation\n============\n\nInstalling via Composer (recommended)\n-------------------------------------\n\n1. Install Composer in your project:\n\n    curl -s http://getcomposer.org/installer | php\n\n2. Create a `composer.json` file in your project root:\n\n    {\n        \"require\": {\n            \"bitwasp/bitcoin-lib\": \"1.0.*\"\n        }\n    }\n\n3. Install via Composer\n\n    php composer.phar install\n\nDependencies\n============\nMcrypt Extension (Random data)\n------------------------------\nThe Mcrypt Extension is required for generating random data, it does this internally \nby using `/dev/urandom` on unix or `CryptGenRandom` on windows.\n\nGMP Extension (Math)\n--------------------\nThe GMP Extension is required for the crypto math.\n\nPECL intl extension (BIP39)\n---------------------------\nThe PECL intl extension is required for BIP39 Mnemonic Seeds when a UTF-8 passphrase is used.\n\nMdanter's PHP Pure PHP Elliptic Curve Cryptography Library\n----------------------------------------------------------\n`mdanter/ecc` is required for most of the crypto.\n\n\nContributing\n============\nPlease make sure that all phpunit tests pass (and preferably added new unit tests) and that the coding style passing PSR2 checks:\n - `./vendor/bin/phpunit`\n - `./vendor/bin/phpcs --standard=./phpcs.xml -n -s ./src/`\n"
 },
 {
  "repo": "codler/Bitcoin-phpMiner",
  "language": "PHP",
  "readme_contents": "# Bitcoin phpMiner\n\nphpMiner uses CPU and it is slower than normal CPU miner. I didn't know it untill I made it, but that wasn't the goal. The goal was to be able to mine on server without much trouble and to run this on for example a webhost.\n\nRun `test.php` for **testcase**.\n\nLook in `work.php` for **example** how to use.\n\nThe proxy.php should have URI \"/\"\n\nI am open for improvements and feedback.\n\n## Usage\n\nVia CLI:\n\nEdit settings in `work.php` and run\n\n\tphp work.php\n\nor Via Browser:\n\nVisit `work.php`-page\n\n## Donate\n\nFeel free to donate. `1NibBDZPvJCm568CZMnJUBJoPyUhW7aSag` This will keep me continue improving and updating, Thanks!\n\n## Change log\n\n2013-08-04 - **v1.0.1**\n\n* Fix warning notices in PHP 5.5\n\n2011-06-18 - **v1.0**\n\n* First commit"
 },
 {
  "repo": "speculatecat/BitcoinPriceHistoryInChina",
  "language": "Python",
  "readme_contents": "# Bitcoin Price History in China\nAccording to the policy, the bitcoin exchange will suspend its local trading service at the end of Oct.2017.\nBut the history price of bitcoin in China must value to quant analyze or some other financial/investment research.  \n\nSo this repository intend to collection and store the data of trading history for research in future.  \n\n## Data resource\nWe will collecting data from the exchange: Okcoin and HuoBi.Using their API to get \nthe daily prices, and store in csv file.  \n\n## Program\nPython 3.6.2 is the program language we using for collection data.  \n\n"
 },
 {
  "repo": "moneybutton/yours-bitcoin",
  "language": "JavaScript",
  "readme_contents": "Yours Bitcoin\n=============\n\nYours Bitcoin is a javascript implementation of bitcoin intended to satisfy\ncertain goals:\n\n1. Bring the blockchain to web browsers and node.js in a decentralized,\ntrust-minimized manner, without the required use of a third-party API.\n\n2. Support ease-of-use by being internally consistent. It should not be\nnecessary to read the source code of a class or function to know how to use it.\nOnce you know how to use part of the library, the other parts should feel\nnatural.\n\n3. Have 100% test coverage, or nearly so, so that the library is known to be\nreliable. This should include running standard test vectors from the reference\nimplementation.\n\n4. Library objects have an interface suitable for use with a command-line\ninterface or other libraries and tools, in particular having toString,\nfromString, toJSON, fromJSON, toBuffer, fromBuffer, toHex, fromHex methods.\n\n5. All standard features of the blockchain are implemented (or will be) and\nsaved in lib/. All BIPs are correctly implemented and, where appropriate, saved\nas bip-xx.js in lib/ (since that is their standard name). In order to allow\nrapid development, Yours Bitcoin includes non-standard and experimental\nfeatures.  Any non-standard features (such as colored coins or stealth\naddresses) are labeled as such in index.js as well as in comments.\n\n6. Expose everything, including dependencies. This makes it possible to develop\napps that require fine-grained control over the basics, such as big numbers and\npoints. However, it also means that you can hurt yourself if you misuse these\nprimitives.\n\n7. Use standard javascript conventions wherever possible so that other\ndevelopers find the code easy to understand.\n\n8. Minimize the use of dependencies so that all code can be easily audited.\n\n9. All instance methods modify the state of the object and return the object,\nunless there is a good reason to do something different. To access the result\nof an instance method, you must access the object property(s) that it modifies.\n\nYours Bitcoin is still being developed and does not yet support downloading the\nblockchain.\n\nEnvironment Variables\n---------------------\n- `YOURS_BITCOIN_JS_BASE_URL` - Default \"/\".\n- `YOURS_BITCOIN_JS_BUNDLE_FILE` - Default \"yours-bitcoin.js\"\n- `YOURS_BITCOIN_JS_WORKER_FILE` - Default \"yours-bitcoin-worker.js\"\n- `YOURS_BITCOIN_JS_BUNDLE_MIN_FILE` - Default \"yours-bitcoin-min.js\"\n- `YOURS_BITCOIN_JS_WORKER_MIN_FILE` - Default \"yours-bitcoin-worker-min.js\"\n- `YOURS_BITCOIN_NETWORK` - Default \"mainnet\"\n\nYou can change the network to run the CLI in testnet mode:\n```\nYOURS_BITCOIN_NETWORK=testnet ./bin/yours-bitcoin.js\n```\n\nDocumentation\n-------------\n\nWhile Yours Bitcoin is under heavy development, the API changes frequently, and\nthe documentation is not kept up-to-date. However there is some documentation,\nand it can be built with groc:\n\n```\nnpm install -g groc\ngroc\n```\n\nDatabase Proposal\n-----------------\n```\nblock-[blockHashBuf]:[height][blockBuf]\nheight-[height][blockHashBuf]:[workSum]\nwork-[workSum][blockHashBuf]:\ntx-[txHashBuf]:[txBuf]\naddress-[addressBuf]:[satoshiDiffBn, height, blockHashBuf, txHashBuf] (removed on reorg)\nchain-[height]:[blockHashBuf] (removed on reorg)\n```\n"
 },
 {
  "repo": "jonasschnelli/libbtc",
  "language": "C",
  "readme_contents": "libbtc \u2013 A Simple and Effective C Library for Bitcoin Wallets\n=============================================================\n\n[![Build Status](https://travis-ci.org/libbtc/libbtc.svg?branch=master)](https://travis-ci.org/libbtc/libbtc)  [![Coverage Status](https://coveralls.io/repos/libbtc/libbtc/badge.svg?branch=master&service=github)](https://coveralls.io/github/libbtc/libbtc?branch=master)\n\n\nWhat is libbtc?\n----------------\n\nLibbtc is a simple and portable C library for creating and manipulating bitcoin data structures like creating keys and addresses (HD/bip32) or parsing, creating and signing transactions.\n\nWhat is the Focus of Libbtc?\n----------------\n\n* minimum dependencies (only dependency libsecp256k1)\n* optimized for low mem environments like embedded/MCU\n* full test coverage\n* mem leak free (valgrind check during CI)\n\nHow to Build\n----------------\n```\n./autogen.sh\n./configure\nmake check\n```\n"
 },
 {
  "repo": "ivy-lang/ivy-bitcoin",
  "language": "TypeScript",
  "readme_contents": "# Ivy\n\nIvy is a higher-level language that allows you to write smart contracts for the Bitcoin protocol. It can compile to instructions for Bitcoin\u2019s virtual machine, Bitcoin Script, and can be used to create SegWit-compatible Bitcoin addresses. Ivy was developed at [Chain](https://chain.com).\n\nYou can try out Ivy using the [Ivy Playground for Bitcoin](https://ivylang.org/bitcoin), which allows you to create test contracts and try spending them, all in a sandboxed environment.\n\nYou can learn more about Ivy and using the Ivy Playground for Bitcoin by reading the [docs](https://docs.ivylang.org/bitcoin).\n\n**Ivy is prototype software and is intended for educational purposes only**. Do not attempt to use Ivy to control real Bitcoins.\n\nBug reports and feature requests are welcome; you can create an [issue](https://github.com/ivy-lang/ivy-bitcoin/issues) or [pull request](https://github.com/ivy-lang/ivy-bitcoin/pulls) on this repo.\n\nYou can also join the [Ivy discussion channel](https://discord.gg/fqZ7unX) on Discord.\n"
 },
 {
  "repo": "rixon-cochi/telegram_bitcoin_bot",
  "language": "Python",
  "readme_contents": "# telegram_bitcoin_bot\n\nTelegram Auto Mining Bitcoins In Termux\n\n# telegram botchannel link [![Telegram](https://img.shields.io/badge/telegram-TECH--COCHI-green?style=for-the-badge&logo=telegram)](https://t.me/BitcoinClick_bot?start=fHQR)\n\n# script by kadal15\n\nchannel yt : jejakka tutorial\n\nsupported by : ALFRED\u2764\ufe0f\n\n## Auto Mining BTC Click Bot\n\n<br>\n<p align=\"center\">\n<img width=\"23%\" src=\"20200425_125720.png\"/>\n<img width=\"23%\" src=\"IMG_20200507_224306.jpg\"/>\n</p>\n\n## How to Install\n\nOpen the terminal and type following commands!!!\n\n* ```apt update```\n* ```apt upgrade```\n* ```pkg install git```\n* ```termux-setup-storage```\n* ```pkg install pip```\n* ```pkg install python```\n* ```git clone https://github.com/rixon-cochi/telegram_bitcon_bot```\n* ```cd telegram_bitcoin_bot```\n* ```bash Install.sh```\n* ```python bot.py```\n\n## TECH COCHI TERMUX VIDEO PREVIEW\n\n![](Telebot.gif)\n\n\n## [+] Find Me\n\n[![Github](https://img.shields.io/badge/Github-TECH--COCHI-green?style=for-the-badge&logo=github)](https://github.com/rixon-cochi)\n[![YouTube](https://img.shields.io/badge/youtube-TECH--COCHI-green?style=for-the-badge&logo=youtube)](https://www.youtube.com/c/HYDRAGAMING4U)\n[![Telegram](https://img.shields.io/badge/telegram-TECH--COCHI-green?style=for-the-badge&logo=telegram)](https://t.me/techcochiyoutuber)\n \n\n\n\n"
 },
 {
  "repo": "sagivo/accept-bitcoin",
  "language": "CoffeeScript",
  "readme_contents": "# Accept Bitcoin ![accept-bitcoin](https://en.bitcoin.it/w/images/en/7/74/BC_Rnd_64px.png)\n\nFinally a developer-friendly tool to simply accept bitcoins in your site. \n\n  - Lite and fast, built on top of [bitcore](http://bitcore.io).\n  - No need to install local bitcoin node RPC client. We use [blockr](http://blockr.io) API instead.\n  - No need to install any wallet client. \n  - Create ad-hoc address to accept bitcoins and transfer incomes to your offline account.\n  - Easy configurations.\n\n## Get Started\n\nSimply install via [npm](https://npmjs.org/):\n\n```javascript\nnpm install accept-bitcoin\n```\nLoad AC and you're ready to go!\n```javascript\nvar acceptBitcoin = require('accept-bitcoin');\nvar ac = new acceptBitcoin('YOUR_BITCOIN_ADDRESS');\n```\n\n## Motivation \nAccepting bitcoins online can be complex to program and require you to install a bitcoin RPC client in order to read and write to the blockchain. This client require a lot of resources (in terms of CPU, networking and storage).  \nMost of the users are using a wallet to store their bitcoins. This wallet is a simple way to secure your public and private key. For security reasons you better save this wallet offline in a \"cold storage\".  \nMore about the motivation behind this project at [my blog post](http://sagivo.com/post/97125970778/bitcoin-on-node-js-do-it-yourself).\n\n## Example\nYou can override the default settings on creating\n\nExamples are provided [here](https://github.com/sagivo/accept-bitcoin/tree/master/examples)\n```javascript\nvar settings = {network: 'live'}\nvar acceptBitcoin = require('accept-bitcoin');\nvar ac = new acceptBitcoin('YOUR_BITCOIN_ADDRESS', settings);\nkey = ac.generateAddress({alertWhenHasBalance: true});\nconsole.log(\"Hello buyer! please pay to: \" + key.address());\nkey.on('hasBalance', function(amount){\n  console.log(\"thanks for paying me \" + amount); //do stuff\n  key.transferBalanceToMyAccount(function(err, d){\n    if (d.status === 'success') console.log(\"Cool, the bitcoins are in my private account!\");\n  });\n});\n```\n\n## Settings\n\nYou can override the default settings:  \n\n| name                    | type   | default value                | comment                                                                                                                                                                 |\n|-------------------------|--------|------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `payToAddress`          | string | -                            | Your bitcoin adress you wish to transfer incomes to.                                                                                                                    |\n| `network`               | string | test                         | choose your bitcoin RPC env. values are: `test` and `live`more info [here](https://github.com/bitpay/bitcore/blob/cd353ac02e76fb3294c40366d8d5dc04ce1939d7/networks.js) |\n| `password`              | string | -                            | choose your random password to encrypt generated keys.                                                                                                                  |\n| `storePath`             | string | `./keys.txt`                 | path to store a file containing all the ad-hoc generated keys.                                                                                                          |\n| `encryptPrivateKey`     | bool   | false                        | in case you want the stored keys to be encrypted (using `password`).                                                                                                    |\n| `payReminderToAddress`  | string | payToAddress                 | In case transfer amount is smaller than income and fees.                                                                                                                |\n| `includeUnconfirmed`    | bool   | false                        | include unconfirmed transactions when checking for unspent incomes                                                                                                      |\n| `checkTransactionEvery` | int    | 1000 * 60 * 2  (2 minutes)   | how often (in millisecond) to ping the network when checking for transactions.                                                                                          |\n| `checkBalanceTimeout`   | int    | 1000 * 60 * 60 * 2 (2 hours) | timeout (in millisecond) when checking balance of an address.                                                                                                           |\n| `checkUnspentTimeout`   | int    | 1000 * 60 * 60 * 2 (2 hours) | timeout (in millisecond) when checking unspent transactions of an address.                                                                                              |\n| `minimumConfirmations`  | int    | 6                            | minimum confirmations needed in order to trigger `hasBalance` event.                                                                                                    |\n| `txFee`                 | float  | 0.0001                       | fee (in bitcoin) for transferring amount from ad hoc address to your address.                                                                                           |\n\n### Key class\nThis class is responsible for creating new bitcoin addresses, storing them and transferring funds between them. Some key functions are:  \n`storeKey(wk)` - store your key in a local file. Can be encrypted.  \n`checkBalance()`- check and notify you when an address has minimum balance.\n`payTo(payToAddress, options, callback)` - transfer all balance of this address to another address.\n\n### Encrypt class\nContains helpers to encrypt and decrypt strings. Used for storing your keys data locally.  \n\n## Contribute\nPlease do. Fork it, star it, share it and add your code to the project. Help others.  \nAll the src code is written in [coffeescript](http://coffeescript.org) and is under `src`. There's a tool that convert it automatically to js each time you change a file and put it under `lib` folder. Simply run `cake build` for that. \n\n## License\n\nMIT\n"
 },
 {
  "repo": "jaungiers/Multidimensional-LSTM-BitCoin-Time-Series",
  "language": "Jupyter Notebook",
  "readme_contents": "# Multidimensional LSTM BitCoin Time Series\n\nUsing multidimensional LSTM neural networks to create a forecast for Bitcoin price.\n\nFor notes around this code and a general explenation for the theory please see my original article \t[HERE](http://www.jakob-aungiers.com/articles/a/Multidimensional-LSTM-Networks-to-Predict-Bitcoin-Price)"
 },
 {
  "repo": "llSourcell/Bitcoin_Trading_Bot",
  "language": "Jupyter Notebook",
  "readme_contents": "# Bitcoin Trading Bot\n\n\n## Overview\n\nThis is the code for [this](https://youtu.be/F2f98pNj99k) video on Youtube by Siraj Raval on Bitcoin Trading Bots. \n\n## Dependencies\n\n* numpy \n* pandas \n* h5py\n* matplotlib\n\nUse [pip](https://pypi.org/project/pip/) to install the dependencies.\n\n## Usage\n\nSee the Bitcoin LSTM Prediction.ipynb file directly on GitHub to see the code. If you want to run it locally, download this repo and use [jupyter](http://jupyter.org/install) to run it on your machine. \n\n## Credits\n\nCredits for this code go to [jaungiers](https://github.com/jaungiers/Multidimensional-LSTM-BitCoin-Time-Series). I've merely created a wrapper to get people started. \n"
 },
 {
  "repo": "philipperemy/my-first-bitcoin-miner",
  "language": "Python",
  "readme_contents": "# My First Bitcoin Miner\nFor the people who are curious to understand in a simplified setup:\n- **How the Bitcoin blockchain works**\n- **How mining works**\n\nFor a complete implementation (that can actually mine!), please browse this repository https://github.com/jgarzik/pyminer.\n\nThis miner is not connected to the bitcoin network and is a very simplified version of what would be a real bitcoin miner. The purpose of this implementation is to provide a basic comprehension of the mining logic.\n\n## What are bitcoin miners really solving?\n\n### Step 1\n\nAt a high level, the miner software takes a list of active transactions, and then groups them together in something called a \"block\".\n\nOr more *accurately stated*: The miner software converts all the transactions into a summary view called a \"merkle root\", and hashes it, which is representative of the transactions.\n\n### Step 2\n\nThe mining software then converts this to into a binary format called a Block Header, which also references the previous blocks (also called a chain).\n\n```\nField           Purpose                          Updated when...               Size (Bytes)\nVersion         Block version number             You upgrade the software and   4\n                                                 it specifies a new version \n\nhashPrevBlock   256-bit hash of the previous     A new block comes in          32\n                block header    \nhashMerkleRoot  256-bit hash based on all        A transaction is accepted     32\n                the transactions in the block       \n\nTime            Current timestamp as seconds     Every few seconds              4\n                since 1970-01-01T00:00 UTC  \n\nBits            Current target in compact format   The difficulty is adjusted   4\n\nNonce           32-bit number (starts at 0)       A hash is tried (increments)  4\n```\n\n### Step 3\n\nThe miner hardware changes a small portion of this block called a \"nonce\".\n\n### Step 4\n\nThe block header is hashed and compared to the Target as if it were simply a large number like 10,000,000 > 7,000,000 (the real numbers are much bigger, and in hex). The target is compressed and stored in each block in a field called bits.\n\nAn expanded target looks like this:\n\n```\n  Target   0000000000000083ef00000000000000000000000000000000000000000000000\n```\n\nAnd the goal is to make sure the SHA256 hash of the block is less than this value. In the example below \"83ee\" is smaller than \"83ef\"\n\nTo simplify this concept, you can ballpark the target by counting the leading zeros (as the other answer here explains). Here is an example:\n\nHere is a sample block with transactions you can view on BlockChain.info. Look in the upper right hand corner of the webpage for this hash:\n\n```\n   Hash 0000000000000083ee9371ddff055eed7f02348e4eda36c741a2fc62c85bc5cf\n```\n\nThat previous hash was from today and has 14 leading zeroes. Let's compare that to what was needed 3 years ago with block 100 which has 8 leading zeros.\n\n```\n   Hash 00000000a8ed5e960dccdf309f2ee2132badcc9247755c32a4b7081422d51899\n```\n\n### Summary\n\nSo at the end of the day, all a miner does is:\n\n- Take a block header as input.\n- Change the nonce.\n- Test if the Block Header hash is less than the Target. If it is, you win.\n- Go to step 2 (or go to step 1 if someone else won the block).\n\n\n## References\n- https://bitcoin.stackexchange.com/questions/8031/what-are-bitcoin-miners-really-solving\n- https://en.bitcoin.it/wiki/Difficulty\n- https://en.bitcoin.it/wiki/Target\n- https://bitcoin.stackexchange.com/questions/30467/what-are-the-equations-to-convert-between-bits-and-difficulty\n- https://stackoverflow.com/questions/22059359/trying-to-understand-nbits-value-from-stratum-protocol/22161019#22161019\n- https://en.bitcoin.it/wiki/Nonce\n"
 },
 {
  "repo": "Coding-Enthusiast/BitcoinTransactionTool",
  "language": "C#",
  "readme_contents": "**Update 2021**  \nThis project is old and will not be updated. If you are going to use it know that some parts of the protocol (such as SegWit and Taproot) are missing and\nit has some bugs.  \nHowever, it is being migred to a more complete project that covers everything there is in Bitcoin protocol called\nDenovo. It can be found here https://github.com/Autarkysoft/Denovo\n\n![Logo](https://i.imgur.com/pUCReEi.jpg)\n# Bitcoin Transaction Tool\n**Language:** C#\n\n**Packages needed:** \n- Newtonsoft.Json\n- QRCoder\n\nThis is an open source tool for creating bitcoin transactions (unsigned raw transaction) and also to edit existing transactions by taking the same input and output and changing them (e.g. changing fee, locktime,...)\n![ScreenShot](https://i.imgur.com/ePg5jcq.jpg)\n\n\n## Features\n1. Making Raw Unsigned Bitcoin Transaction.\n2. Coin Control.\n3. Making QR Code of any type of Input!\n4. Editing transactions.\n5. Compatible with most bitcoin wallets including but not restricted to (bitcoin Core and Electrum).\n\n\n## To Do List\nthe following are the features that will be added in the future. Please leave your feedback in the Bitcointalk Announcement topic or in Issues of Github.\n\n- [ ] Add ability to push signed transactions to network.\n- [ ] Add a new feature to suggest fee based on current network fee.\n- [ ] Considering multi-signature addresses and their appropriate transaction.\n- [ ] Add unit test.\n\n\n## Announcement Link\nTopic on bitcointalk.org\n\nhttps://bitcointalk.org/index.php?topic=1701507.0\n\n\n### Don't forget to leave your feedback, Thank you.\n**Wanna help?** \n\nThen review the code and leave your feedback.\n\n**Wanna help more?**\n\n[Donate: 1Q9swRQuwhTtjZZ2yguFWk7m7pszknkWyk](bitcoin:1Q9swRQuwhTtjZZ2yguFWk7m7pszknkWyk)\n"
 },
 {
  "repo": "tenthirtyone/blocktools",
  "language": "Python",
  "readme_contents": "This is a fork of block chain tools.\n\nRecently added a few features, and fixed some bugs. \n\nSee git status for more details.\n\n## Block Chain Tools\n\nBlock chain parser implementation written in python. Contains examples for Bitcoin and Litecoin.\n\n- blocktools.py - tools for reading binary data from block files\n- block.py - classes for Blocks, Transactions\n- parser.py - Genesis block demo\n- sight.py - block parser\n- 5megBlock.dat - first 5 megs from blk00000.dat\n- blk65.dat - first 5 megs from blk00065.dat\n\n## Usage\n\n```bash\npython sight.py 1M.dat\n```\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## Credits\n\nAlex Gorale\n\n## License\n\nBSD 3\n"
 },
 {
  "repo": "horizontalsystems/bitcoin-kit-android",
  "language": "Kotlin",
  "readme_contents": "# BitcoinKit\n\n`bitcoin-kit-android` is a Bitcoin wallet toolkit implemented in Kotlin. It consists of following libraries:\n\n- `bitcoincore` is a core library that implements a full Simplified Payment Verification (`SPV`) client in `Kotlin`. It implements Bitcoin `P2P Protocol` and can be extended to be a client of other Bitcoin forks like BitcoinCash, Litecoin, etc. \n- `bitcoinkit` extends **bitcoincore**, makes it usable with `Bitcoin` network.\n- `bitcoincashkit` extends **bitcoincore**, makes it usable with `BitcoinCash(ABC)` network.\n- `litecoinkit` extends **bitcoincore**, makes it usable with `Litecoin` network.\n- `dashkit` extends **bitcoincore**, makes it usable with `Dash` network.\n- `hodler` is a plugin for `bitcoincore`, that makes it possible to lock certain amount of coins until some time in the future. \n\nBeing an SPV client, **bitcoincore** downloads and validates all the block headers, inclusion of transactions in the blocks, integrity and immutability of transactions as described in the Bitcoin whitepaper or delegates validation to the extensions that implement the forks of Bitcoin.\n\n## Core Features\n\n- [x] Bitcoin P2P Protocol implementation in Kotlin.\n- [x] Full SPV implementation for fast mobile performance with account security and privacy in mind\n- [x] `P2PK`, `P2PKH`, `P2SH-P2WPKH`, `P2WPKH` outputs support.\n- [x] Restoring with mnemonic seed. (Generated from private seed phrase)\n- [x] Restoring with [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) extended public key. (This becomes a `Watch account` unable to spend funds)\n- [x] Quick initial restore over node API. (optional)\n- [x] Handling transaction (Replacement)/(Double spend)/(Failure by expiration)\n- [x] Optimized UTXO selection when spending coins.\n- [x] [BIP69](https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki) or simple shuffle output ordering. (configurable)\n- [x] [BIP21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki) URI schemes with payment address, amount, label and other parameters\n\n\n# bitcoinkit\n\n## Usage\n\n### Initialization\n\nFirst, you need an instance of *BitcoinKit* class. You can initialize it with Mnemonic seed or BIP32 extended key (private or public). To generate seed from mnemonic seed phrase you can use [HdWalletKit](https://github.com/horizontalsystems/hd-wallet-kit-android) to convert a word list to a seed.\n\n```kotlin\nval words = listOf(\"mnemonic\", \"phrase\", \"words\")\nval passphrase: String = \"\"\n        \nval seed = Mnemonic().toSeed(words, passphrase)\n```\n\nThen you can pass a seed to initialize an instance of *BitcoinKit*\n\n```kotlin\nval context = Application()\n\nval bitcoinKit = BitcoinKit(\n    context = context,\n    seed = seed,\n    walletId = \"unique_wallet_id\",\n    syncMode = BitcoinCore.SyncMode.Api(),\n    networkType = NetworkType.MainNet,\n    confirmationsThreshold = 6,\n    purpose = HDWallet.Purpose.BIP84\n)\n```\n\n#### `purpose`\n\n*bitcoinkit* supports `BIP44`, `BIP49` and `BIP84` wallets. They have different derivation paths, so you need to specify this on kit initialization.\n\n\n#### `syncMode`\n\n*bitcoinkit* pulls all historical transactions of given account from bitcoin peers according to SPV protocol. This process may take several hours as it needs to download every block header with some transactions to find transactions concerning the accounts addresses. In order to speed up the initial blockchain scan, *bitcoincore* has some optimization options:\n\n- It doesn't download blocks added before the [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) was implemented by wallets, because there were no transactions concerning addresses generated by BIP44 wallets.\n\n- If you set **API()** or **NewWallet()** to *syncMode* parameter, it first requests from an **API**(currently [Blockchain.com](https://blockchain.info)) the hashes of the blocks where there are transactions we need. Then, it downloads those blocks from the bitcoin peers. This reduces the initial synchronization time to several minutes. This also carries some risks that makes it possible for a middle-man attacker to learn about the addresses requested from your IP address. But your funds are totally safe.\n\nIf you set **Full()** to *syncMode*, then only decentralized peers are used. Once the initial blockchain scan is completed, the remaining synchronization works with decentralized peers only for all *syncMode*s.\n\n#### Additional parameters:\n- `networkType`: Mainnet or Testnet\n- `confirmationsThreshold`: Minimum number of confirmations required for an unspent output to be available for use (*default: 6*)\n\n#### Initializing with HD extended key\n\nYou can initialize `BitcoinKit` using BIP32 Extended Private/Public Key as follows:\n\n```kotlin\nval extendedKey = HDExtendedKey(\"xprvA1BgyAq84AiAsrMm6DKqwCXDwxLBXq76dpUfuNXNziGMzDxYLjE9AkuYBAQTpt6aJu4nFYamh6BbrRkys5fJcxGd7qixNrpVpPBxui9oYyF\")\n\nval bitcoinKit = BitcoinKit(\n    context = context,\n    extendedKey = extendedKey,\n    walletId = \"unique_wallet_id\",\n    syncMode = BitcoinCore.SyncMode.Api(),\n    networkType = NetworkType.MainNet,\n    confirmationsThreshold = 6\n)\n```\n\nIf you restore with a public extended key, then you only will be able to watch the wallet. You won't be able to send any transactions. This is how the **watch account** feature is implemented.\n\n### Starting and Stopping\n\n*BitcoinKit* require to be started with `start` command. It will be in synced state as long as it is possible. You can call `stop` to stop it\n\n```kotlin\nbitcoinKit.start()\nbitcoinKit.stop()\n```\n\n### Getting wallet data\n\n#### Balance\n\nBalance is provided in `Satoshis`:\n\n```kotlin\nval balance = bitcoinKit.balance\n\nprintln(balance.spendable)\nprintln(balance.unspendable)\n```\n\nUnspendable balance is non-zero if you have UTXO that is currently not spendable due to some custom unlock script. These custom scripts can be implemented as a plugin, like **Hodler**\n\n#### Last Block Info\n\n```kotlin\nval blockInfo = bitcoinKit.lastBlockInfo ?: return\n\nprintln(blockInfo.headerHash)\nprintln(blockInfo.height)\nprintln(blockInfo.timestamp)\n```\n\n#### Receive Address\n\nGet an address which you can receive coins to. Receive address is changed each time after you actually get some coins in that address\n\n```kotlin\nbitcoinKit.receiveAddress()   // \"mgv1KTzGZby57K5EngZVaPdPtphPmEWjiS\"\n```\n\n#### Transactions\n\nYou can get your transactions using `transactions(fromUid: String? = null, type: TransactionFilterType? = null, limit: Int? = null)` method of the *BitcoinKit* instance. It returns *Single<List<TransactionInfo>>*. You'll need to subscribe and get transactions asynchronously. See [RX Single Observers](http://reactivex.io/RxJava/3.x/javadoc/io/reactivex/rxjava3/core/Single.html) for more info.\n\n\n```kotlin\nval disposables = CompositeDisposable()\n\nbitcoinKit.transactions().subscribe { transactionInfos ->\n    for (transactionInfo in transactionInfos) {\n        println(\"Uid: ${transactionInfo.uid}\")\n        println(\"Hash: ${transactionInfo.transactionHash}\")\n    }\n}.let {\n    disposables.add(it)\n}\n```\n\n- `fromUid` and `limit` parameters can be used for pagination. \n- `type` parameter enables to filter transactions by coins flow. You can pass *incoming* OR *outgoing* to get filtered transations\n\n\n#### TransactionInfo\n\nA sample dump:\n\n```kotlin\n// transactionInfo = {TransactionInfo}\n//    amount = 13114\n//    blockHeight = 740024\n//    conflictingTxHash = null\n//    fee = null\n//    inputs = {ArrayList} size = 1\n//      0 = {TransactionInputInfo}\n//          address = \"16s6q8dAgLbDT3szEc4nvTh81deRCBtEa1\"\n//          mine = false\n//          value = null\n//    outputs = {ArrayList}  size = 2\n//      0 = {TransactionOutputInfo}\n//          address = \"bc1qsg9ul383f8pespcvc8u3katl6gnsr7sjyfe3pc\"\n//          changeOutput = false\n//          mine = true\n//          pluginData = null\n//          pluginDataString = null\n//          pluginId = null\n//          value = 13114\n//      1 = {TransactionOutputInfo}\n//          address = \"16VCm8mYhHE3EiELi8GiYEqAjnPu1TSgAV\"\n//          changeOutput = false\n//          mine = false\n//          pluginData = null\n//          pluginDataString = null\n//          pluginId = null\n//          value = 1422\n//    status = {TransactionStatus} RELAYED\n//    timestamp = 1654766137\n//    transactionHash = \"cadf99db1e145dcfadfa2bc3eacb94831eb6c53d376f4f873aa4ac017b8c7f8f\"\n//    transactionIndex = 2760\n//    type = {TransactionType} Incoming\n//    uid = \"75934663-3c84-4b38-9b6d-810d3433de17\"\n```\n\n`uid`\n\nA local unique ID\n\n`type` \n\n- *Incoming*\n- *Outgoing*\n- *SentToSelf*\n\n`status`\n\n- *NEW* -> transaction is in mempool\n- *RELAYED* -> transaction is in block\n- *INVALID* -> transaction is not included in block due to an error OR replaced by another one (RBF).\n\n\n### Sending BTC\n\n\n```kotlin\nbitcoinKit.send(address = \"36k1UofZ2iP2NYax9znDCsksajfKeKLLMJ\", value = 100000000, feeRate = 10, sortType = TransactionDataSortType.Bip69)\n```\n\nThis first validates a given address and amount, creates new transaction, then sends it over the peers network. If there's any error with given address/amount or network, it raises an exception.\n\n#### Validate address\n\n```kotlin\nbitcoinKit.validateAddress(address = \"mrjQyzbX9SiJxRC2mQhT4LvxFEmt9KEeRY\")\n```\n\n#### Evaluate fee\n\n```kotlin\nbitcoinKit.fee(address = \"36k1UofZ2iP2NYax9znDCsksajfKeKLLMJ\", value = 100000000, feeRate = 10)\n```\n\n\n### Parsing BIP21 URI\n\nYou can use `parsePaymentAddress` method to parse a BIP21 URI:\n\n```kotlin\nbitcoinKit.parsePaymentAddress(\"bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz\")\n\n\n// \u25bf BitcoinPaymentData\n//   - address : \"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\"\n//   - version : null\n//   - amount : 50.0\n//   - label : \"Luke-Jr\"\n//   - message : \"Donation for project xyz\"\n//   - parameters : null\n```\n\n### Subscribing to BitcoinKit data\n\nBalance, transactions, last blocks synced and kit state are available in real-time. `BitcoinKit.Listener` interface must be implemented and set to *BitcoinKit* instance to receive that.\n\n```kotlin\nclass Manager(val bitcoinKit: BitcoinKit) : BitcoinKit.Listener {\n    \n    init {\n        bitcoinKit.listener = this\n    }\n\n    override fun onBalanceUpdate(balance: BalanceInfo) {\n    }\n\n    override fun onLastBlockInfoUpdate(blockInfo: BlockInfo) {\n    }\n\n    override fun onKitStateUpdate(state: BitcoinCore.KitState) {\n    }\n\n    override fun onTransactionsUpdate(inserted: List<TransactionInfo>, updated: List<TransactionInfo>) {\n    }\n\n    override fun onTransactionsDelete(hashes: List<String>) {\n    }\n\n}\n```\n\n# bitcoincashkit\n\n\n## Features\n\n- [x] `Base58` and `Bech32`\n- [x] Validation of BCH hard forks\n- [x] `ASERT`, `DAA`, `EDA` validations\n\n\n## Usage \n\nBecause BitcoinCash is a fork of Bitcoin, the usage of this library does not differ much from `bitcoinkit`. So we only describe some differences between them.\n\n### Initialization\n\nAll BitcoinCash wallets use default [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) derivation path where *coinType* is `145` according to [SLIP44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md). But since it's a fork of Bitcoin, `0` coinType also can be restored.\n\n```kotlin\nval context = Application()\nval seed = Mnemonic().toSeed(listOf(\"mnemonic\", \"phrase\", \"words\"), \"\")\n\nval bitcoinCashKit = BitcoinCashKit(\n        context = context,\n        seed = seed,\n        walletId = \"unique_wallet_id\",\n        syncMode = BitcoinCore.SyncMode.Api(),\n        networkType = NetworkType.MainNet(MainNetBitcoinCash.CoinType.Type145),\n        confirmationsThreshold = 6\n)\n```\n\n# litecoinkit\n\nUsage identical to `bitcoinkit`\n\n# dashkit\n\n## Features\n\n- [x] Instant send\n- [x] LLMQ lock, Masternodes validation\n\n## Usage\n\n### Initialization\n\n```kotlin\nval context = Application()\nval seed = Mnemonic().toSeed(listOf(\"mnemonic\", \"phrase\", \"words\"), \"\")\n\nval dashKit = DashKit(\n        context = context,\n        seed = seed,\n        walletId = \"unique_wallet_id\",\n        syncMode = BitcoinCore.SyncMode.Api(),\n        networkType = NetworkType.MainNet,\n        confirmationsThreshold = 6\n)\n```\n\n### DashTransactionInfo\n\nDash has some transactions marked `instant`. So, instead of `TransactionInfo` object *DashKit* works with `DashTransactionInfo` that has that field and a respective `DashKit.Listener` listener class.\n\n\n# hodler\n\n`hodler` is a plugin to `bitcoincore`, that makes it possible to lock bitcoins until some time in the future. It relies on [CHECKSEQUENCEVERIFY](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki) and [Relative time-locks](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki). It may be used with other forks of Bitcoin that support them. `UnstooppableWallet` opts in this plugin and enables it for Bitcoin as an experimental feature.\n\n## How it works\n\nTo lock funds we create P2SH output where redeem script has `OP_CSV` OpCode that ensures that the input has a proper Sequence Number(`nSequence`) field and that it enables a relative time-lock. \n\nIn [this](https://blockstream.info/tx/1cd11e80d04c82d098f19badb153ea12ec84cda408daaadc566cc129f967a435?input:1&expand) sample transaction the second input unlocks such an output. It has a signature, public key and the following redeem script in it's scriptSig:\n\n`OP_PUSHBYTES_3 070040 OP_CSV OP_DROP OP_DUP OP_HASH160 OP_PUSHBYTES_20 853316620ed93e4ade18f8218f9aa15dc36c768e OP_EQUALVERIFY OP_CHECKSIG`\n\n- `OP_PUSHBYTES_3 070040 OP_CSV OP_DROP` part ensures that needed amount of time is passed. Specifically `07` part of `070040` bytes says that it's locked for 1 hour. See [here](https://github.com/horizontalsystems/bitcoin-kit-android/blob/master/hodler/src/main/kotlin/io/horizontalsystems/hodler/LockTimeInterval.kt) and [here](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki) for how it's evaluated.\n- `OP_DUP OP_HASH160 OP_PUSHBYTES_20 853316620ed93e4ade18f8218f9aa15dc36c768e OP_EQUALVERIFY OP_CHECKSIG` part is the same locking script as of `P2PKH` output, that ensures the spender is the owner of the private key matching the public key hashed to `853316620ed93e4ade18f8218f9aa15dc36c768e`.\n\n### Detection of incoming time-locked funds\n\nWhen you have such an `P2SH` output, you only have an address and a hash of a redeem script in the output. If you are not aware of incoming time-locked funds in advance, there's no way you can detect that a particular output is yours. For this reason, we add an extra `OP_RETURN` output beside that `P2SH` output as a hint. That output tells us \n\n- ID of the plugin (1 byte): `bitcoincore` can handle multiple plugins like this one.\n- Time-lock period (2 bytes)\n- Hash of the receiver's public key (20 bytes)\n\nFor example, [this](https://blockstream.info/tx/bdc3e995100269c8813f291dd9ea5489d8a17bd163002f70b5abbe05b5dccbd3?expand) is a *hint* output for the input above. It has following data:\n\n`OP_RETURN OP_PUSHNUM_1 OP_PUSHBYTES_2 0700 OP_PUSHBYTES_20 853316620ed93e4ade18f8218f9aa15dc36c768e` \n\n\n## Limitations\n\n### Locked time periods\n\nThis plugin can lock coins for `1 hour`, `1 month`, `half a year` and `1 year`. This is a limitation arising from the need of restoring those outputs using Simplified Payment Verification (SPV) `Bloom Filters`. Since each lock time generates different `P2SH` addresses, it wouldn't be possible to restore those outputs without knowing the exact lock time period in advance. So we generate 4 different addresses for each public key and use them in the bloom filters.\n\n### BTC amount\n\nWe allow maximum 0.5 BTC to be locked. We assume that's an acceptable amount to be locked if done unintentionally.\n\n\n## Prerequisites\n* JDK >= 1.8\n* Android 6 (minSdkVersion 23) or greater\n\n## Installation\nAdd the JitPack to module build.gradle\n```\nrepositories {\n    maven { url 'https://jitpack.io' }\n}\n```\nAdd the following dependency to your build.gradle file:\n```\ndependencies {\n    implementation 'com.github.horizontalsystems:bitcoin-kit-android:master-SNAPSHOT'\n}\n```\n\n## Example App\n\nAll features of the library are used in example project. It can be referred as a starting point for usage of the library.\n* [Example App](https://github.com/horizontalsystems/bitcoin-kit-android/tree/master/app)\n\n## Dependencies\n* [HDWalletKit](https://github.com/horizontalsystems/hd-wallet-kit-android) - HD Wallet related features, mnemonic phrase \n\n## Contributing\n\n[Contributing](CONTRIBUTING.md)\n\n## License\n\nThe `bitcoin-kit-android` is open source and available under the terms of the [MIT License](https://github.com/horizontalsystems/bitcoin-kit-android/blob/master/LICENSE)\n"
 },
 {
  "repo": "breadwallet/breadwallet-android",
  "language": "Kotlin",
  "readme_contents": "# This repository is unmaintained, BRD Android has moved to [https://github.com/breadwallet/brd-mobile](https://github.com/breadwallet/brd-mobile)\n\n[![Bread](/images/top-logo.png)](https://play.google.com/store/apps/details?id=com.breadwallet)\n\nBRD is the best way to get started with bitcoin. Our simple, streamlined design is easy for beginners, yet powerful enough for experienced users.\n\n### Fastsync\n[Fastsync](https://brd.com/blog/fastsync-explained) is a new feature in the BRD app that makes Bitcoin wallets sync in seconds, while also keeping BRD technology ahead of the curve as SPV slowly phases out. When Fastsync is enabled the BRD wallet uses our server technology, [Blockset](https://docs.blockset.com/) to sync, send and receive instantly!\n\n### Your Decentralized Bitcoin Wallet\n\nUnlike other Android bitcoin wallets, **BRD** users have the option to disable Fastsync converting the wallet into a standalone bitcoin client. It connects directly to the bitcoin network using [SPV](https://en.bitcoin.it/wiki/Thin_Client_Security#Header-Only_Clients) mode, and doesn't rely on servers that can be hacked or disabled. If BRD the company disappears, your private key can still be derived from the recovery phrase to recover your funds since your funds exist on the blockchain.\n\n### Cutting-edge security\n\n**BRD** utilizes the latest Android security features to protect users from malware, browser security holes, and even physical theft. The user\u2019s private key is encrypted using the Android Keystore, inaccessible to anyone other than the user.\n\n### Designed with New Users in Mind\n\nSimplicity and ease-of-use is **BRD**'s core design principle. A simple recovery phrase (which we call a recovery key) is all that is needed to restore the user's wallet if they ever lose or replace their device. **BRD** is [deterministic](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki), which means the user's balance and transaction history can be recovered just from the recovery key.\n\n### Features\n\n- Supports wallets for Bitcoin, Bitcoin Cash, Ethereum and ERC-20 tokens, Ripple, Hedera, Tezos\n- Single recovery key is all that's needed to backup your wallet\n- Private keys never leave your device and are end-to-end encrypted when using iCloud backup\n- Save a memo for each transaction (off-chain)\n\n### Bitcoin Specific Features\n- Supports importing [password protected](https://github.com/bitcoin/bips/blob/master/bip-0038.mediawiki) paper wallets\n- Supports [JSON payment protocol](https://bitpay.com/docs/payment-protocol)\n- Supports SegWit and bech32 addresses\n\n### Localization\n\n**BRD** is available in the following languages:\n\n- Chinese (Simplified and traditional)\n- Danish\n- Dutch\n- English\n- French\n- German\n- Italian\n- Japanese\n- Korean\n- Portuguese\n- Russian\n- Spanish\n- Swedish\n\n## Development Setup\n\n1. Clone the repo: `git clone git@github.com:breadwallet/breadwallet-android.git`\n2. Open `breadwallet-android` in [IntelliJ IDEA](https://www.jetbrains.com/idea/download/) or [Android Studio](https://developer.android.com/studio)\n3. Click Build > Build Project\n\n## Advanced Setup\n\n### Blockset Client Token\n\nThe [Blockset client token](https://blockset.com/docs/v1/tools/authentication) can be set in [gradle.properties](gradle.properties) or by using `-PBDB_CLIENT_TOKEN=\"<client token>\"`.\nA default token is available for testing.\n\n### Firebase\n\nTo enable Firebase services like Crashlytics, add the `google-services.json` file into the `app` directory.\nWithout this file, runtime Firebase dependencies are still used but do not start and the Google Services gradle plugin is disabled so builds will succeed.\n\n---\n\n**BRD** is open source and available under the terms of the MIT license.\n\nSource code is available at https://github.com/breadwallet\n"
 },
 {
  "repo": "WrappedBTC/bitcoin-token-smart-contracts",
  "language": "JavaScript",
  "readme_contents": "This repository has the contracts that implement the wrapped tokens.\n\n# Ethereum network\n[ethereumV2/README.md](ethereumV2/README.md)\n\n# Tron network\n[tron/README.md](tron/README.md)\n\n# Original Ethereum network\n[ethereum/README.md](ethereum/README.md)"
 },
 {
  "repo": "mertceyhan/bitcoin-market-android",
  "language": "Kotlin",
  "readme_contents": "## Bitcoin Market \ud83d\udcb0\nBitcoin Market app shows you the current Bitcoin market price and price chart of different time intervals\n\n## Tech stack and whys \ud83c\udfd7\n* [Kotlin](https://kotlinlang.org/) - Google officially supports Kotlin on Android as a \u201cfirst-class\u201d language and it has [a lot of benefits](https://developer.android.com/kotlin)\n* [MVVM Architecture](https://developer.android.com/jetpack/guide) - Modern, maintainable, and Google suggested app architecture\n* [Dagger Hilt](https://dagger.dev/hilt/) - Easy implementation and less boilerplate code than Dagger2\n* [Coroutine](https://developer.android.com/kotlin/coroutines) & [Flow](https://developer.android.com/kotlin/flow)\n* [Retrofit](https://square.github.io/retrofit/)\n* [OkHttp](https://square.github.io/okhttp/)\n* [Moshi](https://github.com/square/moshi)\n* [Jetpack Components](https://developer.android.com/jetpack) - Compose, ViewModel and more\n* [MPAndroidChart](https://github.com/PhilJay/MPAndroidChart)\n* [Lottie](https://github.com/airbnb/lottie-android)\n* [Truth](https://truth.dev/) & [Mockk](https://mockk.io/) - For more readable unit tests\n\n## Screenshots \ud83d\udcf7\n<img src=\"/arts/splash-screen.png\" width=\"260\"> &emsp;<img src=\"/arts/market-screen.png\" width=\"260\"> &emsp;<img src=\"/arts/market-screen-dark.png\" width=\"260\">\n\n## Contribution \ud83d\ude4c\nAll contributions are welcome! Feel free to jump to the issues and pick one for yourself! Please write a comment inside of the issue before you start working.\n\n## Contributors \ud83d\udc4f\n* [abdalla19977](https://github.com/abdalla19977)\n* [masreplay](https://github.com/masreplay)\n* [okanaydin](https://github.com/okanaydin)\n* [boranfrkn](https://github.com/boranfrkn)\n* [yagmurerdogan](https://github.com/yagmurerdogan)\n* [mustafayigitt](https://github.com/mustafayigitt)\n* [ozgurg](https://github.com/ozgurg)\n* [Kardelio](https://github.com/Kardelio)\n* [barissaglam](https://github.com/barissaglam)\n* [enofeb](https://github.com/enofeb)\n* [halilozel1903](https://github.com/halilozel1903)\n\n## Credits \ud83d\ude4f\n* Thanks to [CoinMarketCap](https://play.google.com/store/apps/details?id=com.coinmarketcap.android&hl=en&gl=US) for the design\n* Thanks to [Rohith R Krishnan](https://lottiefiles.com/24693-coin-falling-animation) for the loading animation\n"
 },
 {
  "repo": "jamesob/docker-bitcoind",
  "language": "Python",
  "readme_contents": "\n# docker-bitcoind\n\n[![Docker Stars](https://img.shields.io/docker/stars/jamesob/bitcoind.svg)](https://hub.docker.com/r/jamesob/bitcoind/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/jamesob/bitcoind.svg)](https://hub.docker.com/r/jamesob/bitcoind/)\n\nA Docker configuration with sane defaults for running a fully-validating\nBitcoin node. Binaries are retrieved from bitcoincore.org and verified for integrity\nbased on [the process described here](https://bitcoincore.org/en/download/).\n\nOptional building from arbitrary git objects is possible (and pretty convenient).\n\n## **Warning**: don't trust the Docker registry\n\nReferences on the Docker registry (https://hub.docker.com) are mutable. A malicious\nactor could change any images hosted there without you realizing it.\n\nIf you use an image served by the Docker registry, ensure that you retrieve\nit by its content hash, [as detailed here](https://stackoverflow.com/a/40730725).\nOr just build these images yourself.\n\nWith most software this doesn't matter too much, but running an authentic copy of\nBitcoin Core is really important!\n\n## **Warning**: don't trust Docker\n\nConsider whether your use of Bitcoin requires Docker. When you use a container runtime,\nyou are using a lot of additional code written by other people, e.g. `runc`, `docker`,\npotentially `docker-compose`, potentially `podman`.\n\nIs it necessary to rely on these dependencies? More code running underneath bitcoind\nis more chance for someone to meddle with the operation of your node.\n\n## **Warning**: don't rely on Dockerfile particulars\n\nThis repo may change Dockerfile implementation. Although the container interface itself\n(i.e. volume mounts, operational behavior) will remain stable, the implementation \nof how that happens is subject to change.\n\nIf your use relies on the particulars of, for example, the retrieval script\n(`get-bitcoin.sh`), please pin your usage of this repo to a particular git hash.\n\n\n## Tags available\n\n- 0.13.0\n- 0.13.1\n- 0.13.2\n- 0.14.3\n- 0.15.2\n- 0.16.3\n- 0.17.0\n- 0.17.0.1\n- 0.17.1\n- 0.17.2\n- 0.18.0\n- 0.18.1\n- 0.19.0\n- 0.19.1\n- 0.20.0\n- 0.20.1 \n- 0.21.0 \n- 0.21.1 \n- 0.21.2 \n- 22.0\n- 23.0\n\nAs well as various git refs.\n\n\n## Labels available\n\nEach image is built with certain labels:\n\n- `bitcoin_source`: \"release\" or \"git\", depending on how the binaries were built\n- `bitcoin_version`: if source=release, the release version (e.g. `23.0`), if\n  source=git \"git:<git ref>\"\n- `git_ref`: if source=git, the tag or branch used to build the image\n- `git_sha`: if source=git, the specific git commit hash\n- `git_repo_url`: if source=git, the repo used to build\n\nLabels can be shown by running something like\n```sh\n% docker image inspect jamesob/bitcoind:master | jq '.[0] .Config .Labels'\n```\n```json\n{\n  \"bitcoin-configure-args\": \"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary --disable-ccache --disable-maintainer-mode --disable-dependency-tracking CFLAGS='-O2 -g'\",\n  \"bitcoin-source\": \"git\",\n  \"bitcoin-version\": \"git:master\",\n  \"git-ref\": \"master\",\n  \"git-repo-url\": \"https://github.com/bitcoin/bitcoin\",\n  \"git-sha\": \"551c8e9526d2502f857e1ef6348c7f1380f37443\"\n}\n```\n\n## Quick start\n\nRequires that [Docker be installed](https://docs.docker.com/install/) on the host machine.\n\n### Autogenerating a config\n\n```sh\n# Create some directory where your bitcoin data will be stored.\n$ mkdir /home/youruser/bitcoin_data\n\n$ $EDITOR envfile\nBTC_RPCPASSWORD=your_password\n\n$ docker run --name bitcoind -d \\\n   -e 'BTC_RPCUSER=foo' \\\n   -e 'BTC_TXINDEX=1' \\\n   --env-file envfile \\\n   -v /home/youruser/bitcoin_data:/bitcoin/data \\\n   -p 127.0.0.1:8332:8332 \\\n   -p 8333:8333 \\\n   jamesob/bitcoind:0.20.1\n\n$ docker logs -f bitcoind\n[ ... ]\n```\n\n**Warning**: if you specify your RPC password without using an envfile, it may\nbe captured in your shell history. Use an envfile if you are going to use\n`BTC_RPCPASSWORD`.\n\nIf you want the RPC port to be accessible to remote hosts, remove the `127.0.0.1` from\nthe `-p ...8332` line and set `BTC_RPCBIND=0.0.0.0`.\n\n### Using your own config/datadir\n\nIf you want to use a preexisting data directory and your own config file, run\n\n```sh\n$ docker run --name jamesob/bitcoind:0.20.1 -d \\\n   -v /home/youruser/bitcoin_data:/bitcoin/data \\\n   -v /home/youruser/bitcoin.conf:/bitcoin/bitcoin.conf \\\n   -p 127.0.0.1:8332:8332 \\\n   -p 8333:8333 \\\n   jamesob/bitcoind:0.20.1\n```\n\n### Building yourself\n\nBy default, the container runs under UID,GID=1000 to avoid executing as a privileged\nuser. If you want to rebuild the container with different settings, you can do so:\n\n```\n$ git clone https://github.com/jamesob/docker-bitcoind\n$ cd docker-bitcoind\n$ docker build -t $YOUR_USER/bitcoind:$SOME_VERSION \\\n   --build-arg UID=$(id -u) \\\n   --build-arg GID=$(id -g) \\\n   --build-arg VERSION=$SOME_VERSION \\\n   --build-arg SOURCE=release \\\n   .\n```\n\nTo build an arbitrary git object:\n\n```\n$ ./bin/build-docker-bitcoin master\n$ ./bin/build-docker-bitcoin v24.0rc2\n$ ./bin/build-docker-bitcoin <some git object>\n```\n\n## Possible volume mounts\n\n| Path | Description |\n| ---- | ------- |\n| `/bitcoin/data` | Bitcoin's data directory |\n| `/bitcoin/bitcoin.conf` | Bitcoin's configuration file |\n\n\n\n## Configuration\n\nA custom `bitcoin.conf` file can be placed at `/bitcoin.conf`.\nOtherwise, a default will be automatically generated based\non environment variables passed to the container:\n\n| name | default |\n| ---- | ------- |\n| BTC_RPCUSER | btc |\n| BTC_RPCPASSWORD | <randomly generated> |\n| BTC_RPCPORT | 8332 |\n| BTC_RPCBIND | 127.0.0.1 |\n| BTC_RPCALLOWIP | ::/0 |\n| BTC_RPCCLIENTTIMEOUT | 30 |\n| BTC_DISABLEWALLET | 1 |\n| BTC_TXINDEX | 0 |\n| BTC_TESTNET | 0 |\n| BTC_DBCACHE | 0 |\n| BTC_ZMQPUBHASHTX | tcp://0.0.0.0:28333 |\n| BTC_ZMQPUBHASHBLOCK | tcp://0.0.0.0:28333 |\n| BTC_ZMQPUBRAWTX | tcp://0.0.0.0:28333 |\n| BTC_ZMQPUBRAWBLOCK | tcp://0.0.0.0:28333 |\n\n\n## Daemonizing\n\nThe smart thing to do if you're daemonizing is to use Docker's [builtin restart\npolicies](https://docs.docker.com/config/containers/start-containers-automatically/#use-a-restart-policy)\n(i.e. `docker run --restart unless-stopped ...`), but if you're insistent on using\nsystemd, you could do something like\n\n```bash\n$ cat /etc/systemd/system/bitcoind.service\n\n# bitcoind.service #######################################################################\n[Unit]\nDescription=Bitcoind\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStartPre=-/usr/bin/docker kill bitcoind\nExecStartPre=-/usr/bin/docker rm bitcoind\nExecStartPre=/usr/bin/docker pull jamesob/bitcoind\nExecStart=/usr/bin/docker run \\\n    --name bitcoind \\\n    -p 8333:8333 \\\n    -p 127.0.0.1:8332:8332 \\\n    -v /data/bitcoind:/root/.bitcoin \\\n    jamesob/bitcoind\nExecStop=/usr/bin/docker stop bitcoind\n```\n\nto ensure that bitcoind continues to run.\n"
 },
 {
  "repo": "kyuupichan/electrumx",
  "language": "Python",
  "readme_contents": ".. image:: https://travis-ci.org/kyuupichan/electrumx.svg?branch=master\n    :target: https://travis-ci.org/kyuupichan/electrumx\n.. image:: https://coveralls.io/repos/github/kyuupichan/electrumx/badge.svg\n    :target: https://coveralls.io/github/kyuupichan/electrumx\n\n===============================================\nElectrumX - Reimplementation of electrum-server\n===============================================\n\nFor a future network with bigger blocks.\n\n  :Licence: MIT\n  :Language: Python (>= 3.8)\n  :Author: Neil Booth\n\nDocumentation\n=============\n\nSee `readthedocs <https://electrumx.readthedocs.io/>`_.\n\n\n**Neil Booth**  kyuupichan@gmail.com  https://github.com/kyuupichan\n"
 },
 {
  "repo": "cdhowie/Bitcoin-mining-proxy",
  "language": "PHP",
  "readme_contents": "Installing bitcoin-mining-proxy\n===============================\n\nRequirements\n------------\n\n* Apache (2.2 or newer recommended).\n* PHP 5.3 or newer.\n* MySQL (5.1 or newer recommended for best performance).\n\nThere are some PHP options set in `htdocs/.htaccess`.  These settings must be set for the proxy to function correctly.  If you get an HTTP 500 error, your web server might not allow altering PHP options from .htaccess files.  In this case, make sure that the settings are properly changed either in your php.ini or Apache configuration, then remove or comment out the PHP-related options in `htdocs/.htaccess`.\n\nSetting up the database\n-----------------------\n\nbitcoin-mining-proxy currently requires a MySQL database server.  (PostgreSQL may be supported in a future release.)\n\nPerform the following steps to set up the database:\n\n1.  Create a database for the proxy.\n2.  Create a MySQL user for the proxy, giving it the privileges SELECT, INSERT, UPDATE, DELETE, and LOCK TABLES on the proxy's database only.  (Optional, but recommended.)\n3.  Import the schema file at `database/schema.sql` into the database by using either the `mysql` command-line tool or another front-end like phpMyAdmin.\n\nConfiguring the proxy\n---------------------\n\n1.  Copy `htdocs/config.inc.php.sample` to `htdocs/config.inc.php`.\n2.  Overwrite the sample database information with your real database information.\n3.  Set the admin user and password.  This will be used when logging in to the web management console.\n4.  Set the site URI; this is the URI the mining proxy will be reachable from.  If you install directly into your web root, the default value `'/'` is correct.\n\nSetting up the web server\n-------------------------\n\nbitcoin-mining-proxy only requires a web server that can run PHP scripts.  Just point your web root at the htdocs folder and everything should be all set.\n\nThese scripts require that the `magic_quotes_gpc` PHP flag be disabled.  The included `.htaccess` file will take care of this automatically if your configuration allows PHP flags to be changed from `.htaccess` files.\n\nNote that while you can install to a subdirectory, some miners do not support this!  These miners only accept a host and port, but not a path.  You will have to use htdocs as the web root in order for these miners to work.\n\nSetting up the proxy\n--------------------\n\nNavigate your browser to the admin directory inside the htdocs folder.  So if you installed at `http://www.example.com/` then you would go to `http://www.example.com/admin/`.  You will be asked to authenticate; enter the admin credentials you put in `htdocs/config.inc.php`.\n\nThe first thing you will want to do is add all the pools you will be using.  Click the \"pools\" link and then the \"new pool\" button.  Enter a name for the pool (this is for display purposes only) and the pool's URL.  **Do not** enter login credentials as part of the URL; pool credentials are managed elsewhere.  So to use luke-jr's pool, for example, you would enter `http://pool.bitcoin.dashjr.org:8337`, omitting your Bitcoin address.  Check the enabled checkbox and save the pool.  Repeat this for all the other pools you will be using.\n\nNow set up some worker accounts.  You should use a different worker account for each instance of mining software you are running.  This will allow you to remotely administrate their pool assignments separately, as well as determine which miners are not operating correctly.  If you used one account for several workers, they would be treated as one distinct miner by the proxy and information about them will be aggregated, and usually you don't want that.\n\nOnce you have all your worker accounts set up, you need to associate workers with the pools you want them to work on.  Click the \"manage pools\" button next to a worker.  You will see a list of all your pools; each will have a \"create pool assignment\" button.  After clicking it, you will be asked for details about the assignment:\n\n* **Priority:** This field is used to order the pool assignemnts.  If you have multiple enabled assignments for a worker, the one with the highest priority will be tried first.  If it is unreachable or returns an error, the assignment with the next-highest priority will be tried, and so on.  If all pools cannot be queried for work, an error will be returned to the worker.  If two assignments have the same priority, the order in which they will be tried is undefined.\n* **Enabled:** Check this box to enable the assignment.  If an assignment is not enabled, the proxy will skip that pool when the worker asks for work.\n* **Pool username/password:** The worker's authentication information for the pool.  If you are mining on a pool that requires or supports different worker accounts for each worker (like slush's pool and deepbit) you can enter different information here.  If all the workers will share credentials, you will have to enter the credentials for each assignment.\n\nYou do not have to assign each worker to every pool if you don't want to.  Unassigned pools will simply be ignored.\n\nAt this point you should be able to point your workers at the proxy and they will start working.  You can verify this by watching the \"Worker status\" section on the dashboard.\n\nQuick pool toggling\n-------------------\n\nIn the pool list you will see a red or green flag for each pool indicating whether it is enabled.  You can click the flag to quickly toggle the status of the pool.  This will globally disable the pool for all workers.  Disabled pools will have a red background.\n\nIn the pool assignment list for specific workers, there are two flags; one for the pool and one for the specific assignment.  You can click the flag for the assignment to quickly toggle the assignment on or off.  This will affect only the worker you are managing.  You cannot click the pool's flag.  This is to prevent a pool from being accidentally disabled globally.  Rows with a red background indicate that the worker will not request work from this pool -- in other words, if either the pool or the assignment are disabled.\n\nNote that disabling a pool or assignment will not prevent any shares from being submitted if the worker is currently working that pool.  It will affect new work requests only.  So you can safely disable a pool while your miners are running and they will finish their current work, switching over to the next pool in the list on their next getwork request.\n\nLong polling support\n--------------------\n\nbitcoin-mining-proxy supports long polling servers.  It will rewrite any long polling URL received from a pool so that the long polling request passes through the proxy.\n\nThere is one caveat: if the pool is disabled while a worker has an outstanding long poll request, it may not notice this, depending on the logic in the client!  This means that the client will effectively be working without long polling against its new pool until its outstanding request returns.  At that point it may begin working on the work returned in the long poll request, which will be for the disabled pool!  This is ok; the work submissions will be correctly routed back to the now-disabled pool.\n\nThis problem may be fixed in a future release by having the long-polling code check the database every few seconds to make sure that the pool and assignment it is proxying for are still enabled, returning early with an error code if it finds either to be disabled.\n\nDatabase maintenance\n--------------------\n\nYou should not have to do very much to maintain the database, but you may need to delete some data occasionally.  The `work_data` table is likely to grow quite large if left alone.  Depending on how many miners you are running and what their request rate is, you may need to clean out this table as often as once a week.  You can use the following query to do so:\n\n    DELETE FROM `work_data` WHERE DATEDIFF(UTC_TIMESTAMP(), `time_requested`) > 0\n\nNote that this will cause some stats to disappear; for example, if one of your workers has not been operating since midnight UTC, it will show as never having requested work on the dashboard.  Do not simply truncate the table; if you do this while your miners are working, the proxy will be unable to route share submissions back to their correct pool.\n\nIf the submitted_work table is growing too large, you can execute a similar query to clean it out:\n\n    DELETE FROM `submitted_work` WHERE DATEDIFF(UTC_TIMESTAMP(), `time`) > 7\n\nYou may truncate this table if you wish since the miners do not depend on it to request work.  It is an informational table only.  However, keeping a week or two's worth of data around is a good idea in case you need to report a statistical discrepancy to a pool operator.  It's always good to have logs.\n\nThe proxy may at some point be able to purge old data periodically by itself.  In the meantime, you will have to do so manually.\n\nUpgrading\n---------\nWhen upgrading the proxy software, make sure to inspect any changes to `htdocs/config.inc.php.sample` and apply them (with customizations) as needed to your local configuration.  Failure to do this might result in errant behavior.\n\nYou may additionally need to upgrade the database schema.  To do this, feed the `database/migrate.sql` file to the database, either using something like phpMyAdmin or the `mysql` command-line client:\n\n    mysql -p -u user-name database-name < database/migrate.sql\n\nThis script will apply any schema changes to your existing database safely.  When run against a database with the latest version of the schema, it will do nothing.\n"
 },
 {
  "repo": "arcbtc/bitcoinSwitch",
  "language": "C",
  "readme_contents": "# Moved to <a href=\"https://github.com/lnbits/bitcoinSwitch\">https://github.com/lnbits/bitcoinSwitch</a>\n\n<img style=\"max-width:100%;\" src=\"https://user-images.githubusercontent.com/33088785/166832680-600ed270-cbc9-4749-82f1-c1853b242329.png\">\n\n<img style=\"max-width:100%;\" src=\"https://user-images.githubusercontent.com/33088785/166829474-a28ca2b7-dd3e-46d4-89d3-8a10bf1d3fad.png\">\n\n## Compatible with any ESP32 microcontroller, with or without a screen, supporting native LN invoices and static LNURLPay links.\n\n> <a href=\"https://youtu.be/FeoIwTjv3YM\">Video tutorial</a>\n\n> Join us! <a href=\"https://t.me/makerbits\">t.me/makerbits</a>\n\n### Includes portal for easy setup and retail\n![portal](https://user-images.githubusercontent.com/33088785/166824760-bc612411-7663-4a78-9331-61390042e3ae.gif)\n\n### Install instructions\n- Install <a href=\"https://www.arduino.cc/en/software\">Arduino IDE 1.8.19</a>\n- Install ESP32 boards, using <a href=\"https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html#installing-using-boards-manager\">boards manager</a>\n![image](https://user-images.githubusercontent.com/33088785/161862832-1269a12e-16ce-427c-9a92-df3ee573a1fb.png)\n\n- Download this repo\n- Copy these <a href=\"libraries\">libraries</a> into your Arduino install \"libraries\" folder\n- Open this <a href=\"bitcoinSwitch.ino\">bitcoinSwitch.ino</a> file in the Arduino IDE\n- Select the correct ESP32 board from tools>board\n- Upload to device\n\n> On M5Stack press A to launch portal within first few secs of startup, for all other ESP32 devices specify a GPIO to detect capacitance change, and touch within first few secs of startup.\n> Default password is \"ToTheMoon\"\n\n\n![trigger](https://user-images.githubusercontent.com/33088785/166829947-d0194b32-19fc-4a16-83d3-dc6f9af9337c.gif)\n"
 },
 {
  "repo": "kenken64/bitcoin-order-app",
  "language": "TypeScript",
  "readme_contents": "# Bitcoin vv\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 8.3.6.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).\n"
 },
 {
  "repo": "OttoAllmendinger/gnome-shell-bitcoin-markets",
  "language": "TypeScript",
  "readme_contents": "![Screenshot](https://github.com/OttoAllmendinger/gnome-shell-bitcoin-markets/blob/master/data/screenshot.png?raw=true)\n\nDisplays Bitcoin and Altcoin market information in the Gnome Shell.\n\nAvailable APIs:\n\n- BTCMarkets\n- Binance\n- Binance Futures\n- Bit2C\n- BitMEX\n- BitPay\n- BitPay\n- Bitfinex\n- Bitso\n- Bitstamp\n- Bittrex\n- Buda\n- CEX.IO\n- CoinGecko\n- Coinbase\n- CryptoCompare\n- FTX exchange\n- HitBTC\n- Huobi\n- Kraken\n- Kucoin\n- Paymium\n- Satang.pro\n- TomoX(TomoChain)\n- VccExchange(Vietnam)\n\n## Installation\n\n### Via extensions.gnome.org\n\nThe latest reviewed version can be found at\nhttps://extensions.gnome.org/extension/648/bitcoin-markets/\n\n### Via github.com\n\nThe latest development version can be installed manually with these commands\n\n        git clone https://github.com/OttoAllmendinger/gnome-shell-bitcoin-markets.git\n        cd gnome-shell-bitcoin-markets\n        make install\n\nThen go to https://extensions.gnome.org/local/ to turn on the extension or use\ngnome-tweak-tool.\n\n## Format options\n\n### Base options\n\n| option | result                                       |\n| ------ | -------------------------------------------- |\n| b      | base currency code                           |\n| bs     | base currency symbol \\|\\| base currency code |\n| btc    | btc symbol                                   |\n\n### Value options\n\n| option         | result                                  |\n|----------------|-----------------------------------------|\n| v              | value                                   |\n| mv             | value divided by 1000                   |\n| kv             | value multiplied by 1000                |\n| satv           | value multiplied by 1e8                 |\n| (m\\            | k\\                                      |sat)v0 | value with 0 decimals                   |\n| (m\\            | k\\                                      |sat)v1 | value with 1 decimals                   |\n| (m\\            | k\\                                      |sat)v2 | value with 2 decimals                   |\n| ...            | ...                                     |\n| (m\\            | k\\                                      |sat)v8 | value with 8 decimals                   |\n| raw            | raw value without additional formatting |\n| moscow         | moscow time                             |\n| moscow!segment | moscow time as segment characters       |\n\n### Quote options\n\n| option | result                                         |\n| ------ | ---------------------------------------------- |\n| q      | quote currency code                            |\n| qs     | quote currency symbol \\|\\| quote currency code |\n\n## Development\n\nWith `make restart` the gnome-shell can be restarted during development iterations.\n\nOn most systems you can use `journalctl /usr/bin/gnome-shell -f` to get log output from this (and other) extensions.\n\n## Contributors\n\n- https://github.com/filidorwiese - Altcoin support, CoinMarketCap and Poloniex support\n- https://github.com/fearenales - Popup settings implementation, BTCChina support\n- https://github.com/b00bl1k - WEX support\n- https://github.com/osiux - Bitso support\n- https://github.com/brunobertoldi - Bitfinex support\n- https://github.com/eloo - Kraken support\n- https://github.com/plehatron - CEX.io support\n- https://github.com/h6w - BTCMarkets.net support\n- https://github.com/vecr25 - Binance support\n- https://github.com/joaoescribano - CoinGecko support\n- https://github.com/volandku - BitMEX support\n- https://github.com/HawtDogFlvrWtr - CryptoCompare support\n- https://github.com/jpereira - Blinktrade support\n- https://github.com/rossigee - BX.in.th and Satang.pro support\n- https://github.com/WeirdFishBK201 - Huobi support\n- https://github.com/thanhnguyennguyen - HitBTC, Kucoin, VccExchange, BinanceFutures, FTX and Tomo support\n- https://github.com/luissantos - Bittrex support\n- https://github.com/omerta - Buda support\n- https://github.com/sha-265 - Bit2C support\n\n## Tips\n\nBitcoin 3MuUGXgSyZXdqdgn6V4VxGBR3dtA92w1C1\n"
 },
 {
  "repo": "CyberPunkMetalHead/Bitcoin-Surge-Trading-Alpha",
  "language": "Python",
  "readme_contents": "The bot will be trading Bitcoin automatically if the price has increased by more than 3% in the last 10 minutes. \nWe will have a stop loss of 5% and take profit of 8%. \nLater on, you can choose to further optimise your bot and include additional features such as trailing stop loss and close signals \u2013 but for now we\u2019ll keep it simple.\n\n**USE CASES**\nUse with a demo account - use on a live account at your own risk\nUse to test different crypto markets\n\n**Prerequisites**\nFollow blog instructions on creating a demo environment.\nAdditional resources needed (modules, software etc.) are also listed on the blog\n\nGo here: https://www.cryptomaton.org/2021/03/14/how-to-code-your-own-crypto-trading-bot-python/\n\n**Considerations**\nThe bot can be adjusted to work with multiple cryptos at once. It currently requires a viable exit strategy.\nIf you test this bot please let me know your results!\nThanks for your interest in this project and good luck!\n\nInterested in colaborating? Get in touch. \n\n\n"
 },
 {
  "repo": "manthanthakker/BitcoinPrediction",
  "language": "Jupyter Notebook",
  "readme_contents": "# BitcoinPrediction\n\n### CryptoCurrency prediction using Deep Recurrent Neural Networks\nThis repository contains various Machine learning models used in industry to predict stock prices and cryptocurrency in finance industry. \n\n  - Fundamental analysis of the stock price using Yahoo Finance\n  - Data Visualization using Seaborn\n  - ARIMA model to capture the trends,seasonality, forecast the prices and use as a baseline\n  - Simpler machine learning models (Random Forest, Regression etc)\n  - Recurrent Neural Networks / Long Short Term Memory Networks\n\nEach model is compared against each other to highlight pros and cons of each model. \n\n### Install\n\nThis project requires **Python** and the following Python libraries installed:\n\n- [NumPy](http://www.numpy.org/)\n- [Pandas](http://pandas.pydata.org/)\n- [matplotlib](http://matplotlib.org/)\n- [scikit-learn](http://scikit-learn.org/stable/)\n- [fastai]\n- [pytorch]\n\nYou will also need to have software installed to run and execute a [Jupyter Notebook](http://ipython.org/notebook.html)\n\nIf you do not have Python installed yet, it is highly recommended that you install the [Anaconda](http://continuum.io/downloads) distribution of Python, which already has the above packages and more included. \n\n### Code\n\nThe source code is divided into multiple sections following the machine learning design pattern of : Data Exploration, Training, Testing and Hyperparameter Optimization.\nYou can view the precompiled version of the notebook or you can rerun the entire notebook. The datasets are made available on public S3 Buckets. \nRunning the notebook, will automatically download the datasets for you. \n\n### Run\n\nIn a terminal or command window, navigate to the top-level project directory `boston_housing/` (that contains this README) and run one of the following commands:\n\n```bash\nipython notebook BitcoinPredictionRNN.ipynb\n```  \nor\n```bash\njupyter notebook BitcoinPredictionRNN.ipynb\n```\n\nThis will open the Jupyter Notebook software and project file in your browser.\n\n### Data\nBitCoin Price Data from Jan 2015- August 2018. The prices are as per coinbase cryptoexchange. There were many missing values and forward strategy was used to fill these missing values. \n\n**Features**\nBitCoin Price Data from Jan 2015- August 2018 \n\n**Target Variable**\n `Close Price`: Close price of Bitcoin for each day\n"
 },
 {
  "repo": "luke-jr/libbase58",
  "language": "C",
  "readme_contents": "Initialisation\n--------------\n\nBefore you can use libbase58 for base58check, you must provide a SHA256\nfunction. The required function signature is:\n\n\tbool my_sha256(void *digest, const void *data, size_t datasz)\n\nSimply assign your function to b58_sha256_impl:\n\n\tb58_sha256_impl = my_sha256;\n\nThis is only required if base58check is used. Raw base58 does not need SHA256.\n\n\nDecoding Base58\n---------------\n\nSimply allocate a buffer to store the binary data in, and set a variable with\nthe buffer size, and call the b58tobin function:\n\n\tbool b58tobin(void *bin, size_t *binsz, const char *b58, size_t b58sz)\n\nThe \"canonical\" base58 byte length will be assigned to binsz on success, which\nmay be larger than the actual buffer if the input has many leading zeros.\nRegardless of the canonical byte length, the full binary buffer will be used.\nIf b58sz is zero, it will be initialised with strlen(b58); note that a true\nzero-length base58 string is not supported here.\n\n\nValidating Base58Check\n----------------------\n\nAfter calling b58tobin, you can validate base58check data using the b58check\nfunction:\n\n\tint b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz)\n\nCall it with the same buffers used for b58tobin. If the return value is\nnegative, an error occurred. Otherwise, the return value is the base58check\n\"version\" byte from the decoded data.\n\n\nEncoding Base58\n---------------\n\nAllocate a string to store the base58 content, create a size_t variable with the\nsize of that allocation, and call:\n\n\tbool b58enc(char *b58, size_t *b58sz, const void *data, size_t binsz)\n\nNote that you must pass a pointer to the string size variable, not the size\nitself. When b58enc returns, the variable will be modified to contain the actual\nnumber of bytes used (including the null terminator). If encoding fails for any\nreason, or if the string buffer is not large enough for the result, b58enc will\nreturn false. Otherwise, it returns true to indicate success.\n\n\nEncoding Base58Check\n--------------------\n\nTargeting base58check is done similarly to raw base58 encoding, but you must\nalso provide a version byte:\n\n\tbool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver,\n\t                  const void *data, size_t datasz)\n"
 },
 {
  "repo": "wlox/wlox",
  "language": null,
  "readme_contents": "WLOX - Open Source Cryptocurrency Exchange  \n=========\nWLOX is an open source cryptocurrency exchange that supports multiple fiat currencies.\n\nAt this point, the exchange only supports one cryptocurrency at a time. We plan to adapt the project to a multiple-crypto-currency environment soon.\n\nWLOX is configured to use Crypto Capital Corporation as the default banking services provider. For more information about them, please visit http://www.cryptocapital.co.\n\nThe purpose of this document is to walk you throught the process of a typical setup of the app using a bitcoind server.\n\n**IF YOU INSTALLED WLOX PRIOR TO 14/01/2015, PLEASE READ THE FILE UPDATE_GUIDE_v1.04 BEFORE CONTINUING**\n\nGetting Started\n--------------\nWLOX runs on the traditional PHP/MySQL/Apache setup.\n\n**For a development environment**, you can simply clone the whole set of WLOX repositories by doing `git clone --recursive https://github.com/wlox/wlox.git`.\n\n**For a production environment**, it is strongly recommended to distribute the different repositories across multiple servers. You can clone each sub-module independently by doing `https://github.com/wlox/wlox-[submodule].git`.\n\n\nProject Structure\n--------------\nWLOX is structured as one main *git* repository with multiple sub-modules. As mentioned above, you can clone the whole project or each repository on it's own.\n\n- **wlox** > The master repo. DB updates and documentation reside here.\n- |-- **wlox-frontend** > The App's frontend.\n- |-- **wlox-auth** > Handles user authentication.\n- |-- **wlox-api** > Handles all requests for data made by the frontend.\n- |-- **wlox-cron** > Contains all cron jobs.\n- |-- **backstage2** > The CMS (back end) program.\n\nRequirements\n---------------\n- **PHP/MySQL/Apache** (see section called *PHP Configuration* below).\n- **bitcoind** server, running as daemon (see section called *bitcoind configuration* below).\n- **Warm Wallet**: A secure Bitcoin wallet that is not connected to WLOX. WLOX will send a percentage of Bitcoin deposits to this address automatically. This is normally a half-way point between the Hot Wallet (bitcoind) and *cold storage*. See the **Warm Wallet** section below.\n- **Cold Storage**: We recommend using some kind of *cold storage* for your Bitcoin reserves, such as a *hardware wallet* and an actual safe deposit box in a bank or other safe place.\n\nInitializing the Database\n-------------------\nTo set up the database, the first step is to create an empty database on your MySQL database server. Then, create a user with the following priviledges: SELECT, INSERT, UPDATE and DELETE.\n\nYou will find a file called *wlox.sql.gz* in the main project directory. Import this file into the database that you have created.\n\nSetting up the Back-End (backstage2)\n-------------------\nAs mentioned above, WLOX comes with its own administrative program, *backstage2*, which is really a [seperate project](https://github.com/mbassan/backstage2) developed over a few years.\n\nYou can clone **backstage2** doing `git clone https://github.com/wlox/backstage2.git`. After cloning, rename the file *cfg.php.example* to *cfg.php* and define the following variables: \n\n- **$CFG->dbhost:** The address of the database server.\n- **$CFG->dbname:** The database name.\n- **$CFG->dbuser:** The database username.\n- **$CFG->dbpass:** The password for the database.\n\nYou can now log in using user/password admin/admin. You should obviously remove this user in a production setup.\n\n\nConfiguring WLOX to Run\n-------------------------\nOnce you have managed to install and access **backstage2**, log in using admin/admin and go to 'Status'=>'App Configuration'. This the is the place where you will specify all of the application's settings from now on:\n\n**Global App Settings**\n- **Application Timezone:** The default timezone of WLOX (the frontend will be seen in each user's timezone).\n- **BTC Miner's Fee:** The fee for sending Bitcoin, collected by the network. We recommend 0.001.\n- **Currency Conversion Fee (%):** A number between 0 and 100 (decimals allowed). The fee collected by WLOX when a trade happens across currencies.\n- **Exchange's Name:** For example 'MyExchange'. Will be used in place of [exchange_name] in site content.\n- **Fiat Withdrawal Fee:** Not implemented. Leave at 0 for now, unless you want to develop this feature!\n- **Min. Order Amnt. (USD):** The minimum order that can be placed. \n- **Min. Order Price (% under Mkt.):** A number between 0 and 100 (decimals allowed). Specifies how far under the last trade price a Bid order can be placed.\n- **Password Hash Key: A salt Used by *mcrypt* for hashing user passwords in the DB.\n- **Password Permitted Regex:** REGEX that specifies password character set.\n- **Password Min. Chars.:** The minimum length for user passwords.\n- **Enable Cross-Currency Trades:** Disable if you want each currency to have a seperate order book.\n- **Notify when a new user registers:** By email.\n- **Notify user fiat withdrawals:** By email.\n\n**Email Settings**\n- **Support Email:** The email address you will use for user support.\n- **Contact Form Email:** The email address for the site's contact form.\n- **Sender's Name:** System emails will be sent by this name.\n- **SMTP Host:** Ex. *smtp.myserver.com*\n- **SMTP Port:** Ex. *465*\n- **SMTP Security Type:** Ex. *ssl*\n- **SMTP Username:** For SMTP mail account.\n- **SMTP Password:** For SMTP mail account.\n- **SMTP Sender Email:** Can be the same as *support email* above.\n\n**Bitcoin Server Settings**\n- **Username:** The username for *bitcoind*.\n- **Account Name:** The account name for *bitcoind* (optional, but makes things neater - can be same as username).\n- **Passphrase:** Use something strong.\n- **Host:** Use the server's IP if you are using multiple servers.\n- **Port:** *8332* by default.\n- **Protocol:** *http* by default.\n- **Reserve Min. BTC (for Send to Warm Wal.):** *1* by default. The minimum hot wallet balance at which WLOX will send to the warm wallet.\n- **Reserve Ratio (% in Hot Wallet):** A number from 0 to 100. The percentage of BTC reserves that will be kept in the hot wallet.\n- **Warm Wallet BTC Addr.:** BE VERY CAREFUL TO INPUT THE RIGHT ADDRESS! Receiving address for the warm wallet.\n\n**Third Party API Keys**\n- **Authy API Key:** If you want to use Authy for 2FA (Google 2FA also supported, needs no API key).\n- **Quandl API Key:** Optional. Quandl is a data service that you can use to get historical prices of Bitcoin to populate your price history before you begin generating your own.\n- **Help Desk API Key:** If you use a third-party help desk. Accesible in the code as `$CFG->helpdesk_key`.\n\n**Frontend Config**\n- **Base URL:** For example *http://mysite.com/*.\n- **Dir Root:** The web directory of the repo. For example */var/www/wlox/frontend/htdocs/*.\n\n**API Config**\n- **DB Debug On Fail:** Will halt script and output DB errors to PHP error stream.\n- **Dir Root:** The web directory of the repo. For example */var/www/wlox/api/htdocs/*.\n\n**Auth Config**\n- **DB Debug On Fail:** Will halt script and output DB errors to PHP error stream.\n\n**Cron Config**\n- **DB Debug On Fail:** Will halt script and output DB errors to PHP error stream.\n- **Dir Root:** The web directory of the repo. For example */var/www/wlox/cron/*.\n\n**Backstage Config**\n- **DB Debug On Fail:** Will halt script and output DB errors to PHP error stream.\n- **Dir Root:** The web directory of the repo. For example */var/www/wlox/backstage2/*.\n\nSetting up the API Server\n---------------------\nThe API server provides a layer of security and abstraction between the frontend server and the database in order to prevent direct communication between these two components. \n\nInstall by doing `git clone https://github.com/wlox/wlox-api.git` in the intended space.\n\nWhen this is ready, rename cfg/cfg.php.example to cfg/cfg.php and set:\n\n- **$CFG->dbhost:** The IP or host name of your database server.\n- **$CFG->dname:** The name of the database on that server\n- **$CFG->dbuser:** The database user.\n- **$CFG->dbpass:** The database user's password.\n\nSetting up the Auth Server\n-------------------\n\nThe purpose of the Auth server is to allow users to initiate sessions and obtain a session key so that they can access protected methods on the API. \n\nInstall by doing `git clone https://github.com/wlox/wlox-auth.git` in the intended space.\n\nWhen this is ready, rename cfg.php.example to cfg.php and set:\n\n- **$CFG->dbhost:** The IP or host name of your database server.\n- **$CFG->dname:** The name of the database on that server\n- **$CFG->dbuser:** The database user.\n- **$CFG->dbpass:** The database user's password.\n\n\nSetting up Cron Jobs\n-------------------\n\n**IMPORTANT: Should run on the same server as bitcoind daemon!**\n\nThe Cron Jobs necessary for WLOX to run are provided in this repository. \n\nInstall by doing `git clone https://github.com/wlox/wlox-auth.git` in the intended space.\n\nWhen this is ready, rename cfg.php.example to cfg.php and set:\n\n- **$CFG->dbhost:** The IP or host name of your database server.\n- **$CFG->dname:** The name of the database on that server\n- **$CFG->dbuser:** The database user.\n- **$CFG->dbpass:** The database user's password.\n\nThe next step is to set the right permissions so that these files can be run as cron jobs. This includes setting up the appropriate permissions for the /transactions directory so that the provided *receive.sh* file can create files in there.\n\nWhen that is ready, we need to set up each file to be run by the server's cron tab. The cron jobs should be scheduled as follows:\n- **daily_stats.php** - Should run at 0 min, 0 hrs (the very start) of every day.\n- **get_stats.php** - Every 10 minutes.\n- **maintenance.php** - Every 5 minutes.\n- **monthly_stats.php** - 0 min, 0 hrs (the very start) of the first day of every month.\n- **process_bitcoin.sh** - Every minute.\n\n\nSetting up the Bitcoind Server\n---------------------\nPlease install *bitcoind* from the *ppa:bitcoin/bitcoin* repository.\n\nThen locate a file called *bitcoin.conf* (usually in /home/your_user/.bitcoin/ or /root/.bitcoin/) or create it in the appropriate location if it doesn't already exist. Copy the following directives into it:\n\n```\nrpcuser=Your user\nrpcpassword=Your password\nrpctimeout=30\nrpcport=8332\nwalletnotify= path to the receive.sh file provided in wlox-cron (example path/to receive.sh %s)\n```\n\nYou can also add `testnet=1` if you want to test out WLOX using Bitcoin testnet (which we obviously recommend for a development environment).\n\nWe recommend encrypting the wallet.dat file by running the following command in your terminal: ```>/path/to/bitcoind encryptwallet <passphrase>```. Make sure <passphrase> is the same as the password set in your *bitcoin.conf* file, as well as the *Bitcoin Passpharse* defined in backstage2 -> App Configuration -> Bitcoin Server Settings.\n\n\nSetting up the Frontend\n-------------------\nThe frontend server is intended to be the only part of the app which should be accesible to the user. \n\nInstall by doing `git clone https://github.com/wlox/wlox-frontend.git` in the intended space.\n\nThe /htdocs folder provided in the package is intended to be the server's web directory.\n\nWhen this is ready, rename cfg.php.example to cfg.php and set:\n\n- **$CFG->api_url:** 'http://your.api.server/api.php';\n- **$CFG->auth_login_url:** 'http://your.api.server/login.php';\n- **$CFG->auth_verify_token_url:** 'http://your.api.server/verify_token.php';\n\nWarm Wallet\n-------------------\nThe \"Warm Wallet\" is simply a Bitcoin wallet running in a secure location. The cron job `receive_bitcoin.php` (provided in wlox-cron) will channel all Bitcoin above the *Reserve Ratio* specified in the backstage2 App Configuration to this address. You can do whatever you like with it once it arrives there (for example, you can transfer it to cold storage using a Piper wallet).\n\nIn order to load Bitcoin back into the Hot Wallet (when the amount needed for outgoing transfers exceeds the amount in the Hot Wallet), simply send Bitcoin from your Warm Wallet back to the dedicated Hot Wallet address. This can be found in the Back End under Registered Visitors -> Bitcoin Addresses (it will be the one with both \"System\" and \"Hot Wallet\" checked).\n\n2-Factor Authentication (2FA)\n-----------------------------\nWLOX supports both Google Authenticator and Authy (www.authy.com) by default.\n\n\nGetting Around the Back-End\n----------------\nThe back-end is structure in the following manner:\n\n**Admin Menu**: Can be found on the top right corner of the screen.\n- **Users and Groups**: For creating uses and their respective groups. Permissions for users are determined by their respective groups. When editing a user, checking \"Is Admin\" makes the user an administrator with access to the whole back-end as well as the administrative functions. In order to set up two-factor authentication please fill out the user's \"phone\" and \"country code\" fields, as well as checking the \"use authy\" checkbox. As specified in the configuration files, you must have a valid Authy API key in order to enable this function.\n\n**Content**: This is where the static content pages can be edited using a WYSIWYG text editor.\n- **News**: For editing items that will be displayed on the \"News\" page.\n\n**Orders**: This page shows you the open orders currently in the system.\n- **Transactions**: Shows all transactions that have taken place on the system.\n- **Order Log**: Shows a complete log of all orders ever made on the system. The \"edited from\" field allows you to see the previous version of an order that was edited by the user.\n- **Order Types**: The names of the types of orders. *Do not delete* any of these items as the system uses the specific ID of each of these items in the database.\n- **Transaction Types**: The names of the transaction types. *Do not delete*.\n\n**Requests**: On this page, you can see all requests to deposit and withdraw funds from WLOX user accounts. Requests in BTC will be processed automatically by cron/send_bitcoin.php and cron/receive_bitcoin.php. Requests involving fiat currencies must be processed manually. Requests that require your attention will be highlighted in red.\n- **Deposit/Withdraw**: On this page, (1) the first form is to upload an transactions export file from Crypto Capital (this will allow you to credit users for fiat currency transferred into your exchanges' escrow accounts); (2) the second form is to make withdrawals from your Crypto Capital escrow accounts (when you withdraw from one of these accounts, you need to tell the system how much was withdrawn using this form - editing the values directly might cause fiat to be lost to the system because the value might change in the time between loading it on the screen and specifying the new value).\n- **Request Status**: The status names that a request can have. *Do not delete any of these values*.\n- **Request Descriptions**: The descriptions of the different types of requests. *Do not delete*.\n\n**Registered Visitors**: These are the users that have signed up to use WLOX (throught the front end).\n- **Fee Schedule**: This is the fee schedule that will be used to determine the fee charged to users when they make a transaction. Make sure not to leave holes in the schedule - that may lead to strange behavior by WLOX. The cron job that matches users with their fee level is cron/maintenance.php.\n\n**Language Table**: This is the language table for all short text items in the page. By default it is configured to support two languages, English and Spanish.\n\n**Emails**: In this tab, you can view/edit the text of all automated emails sent by the system.\n\n**Status**: This is the most important tab in the back-end. When you click it, you will see only one record. It will show you the BTC amounts in the system, as well as the amounts in the hot wallet and cold wallet. Watch the \"Deficit\" closely - this number is the amount that must be manually transferred into the hot wallet from the cold/warm wallets in order to allow all pending Bitcoin withdrawal requests to be fulfilled. The \"Escrow Profits\" section are the profits being generated by charging fees to WLOX's user base. When you decide to withdraw some of these profits, do not edit the values in the Status tab. Please use the \"Deposit/Withdraw\" page under the Requests tab instead.\n- **Fees**: This page gives a list of all fees being incurred by WLOX's internal movement of BTC - i.e. when sweeping user's Bitcoin addresses or transferring money to the warm/cold wallet.\n\n**Reports**: Under this tab, you will see \"Daily Reports\" and \"Monthly Reports\". You can see switch between a line graph and a table view of these values on the top right side of the respective tables.\n\nPHP Configuration\n---------------------\nYour php.ini should have the following settings:\n\n**short_open_tag** = On\n\nIt should also have the following modules:\n\n- curl\n- gd\n- mcrypt\n- json\n- mysql\n- openssl\n- pcre\n"
 },
 {
  "repo": "dsmurrell/awesome-bitcoin-cash",
  "language": null,
  "readme_contents": "## Awesome Bitcoin Cash [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n# [<img src=\"https://rawgit.com/dsmurrell/awesome-bitcoin-cash/master/awesome-bitcoin-cash.png\">](https://rawgit.com/dsmurrell/awesome-bitcoin-cash)\n\n> Carefully curated list of awesome Bitcoin Cash resources.\n\n[Bitcoin Cash](https://www.bitcoincash.org) is the continuation of Satoshi's Bitcoin after the [successful neutering](https://www.youtube.com/watch?v=0BZoKH-hX_o) of BTC's on-chain scaling capability by BlockStream - a for profit company with total control of the Bitcoin Core software repository - the code [run by more than 94% of miners](https://coin.dance/nodes) on the BTC network. \n\nBitcoin Cash has:\n\n- Increased the blocksize limit.\n- Removed the harmful 'Replace By Fee' which brings back far more confidence in 0 confirmation transactions. \n- Added back op-codes required by many services in the ecosystem.\n\nContributions welcome! Please read the [guide](https://github.com/dsmurrell/awesome-bitcoin-cash/blob/master/CONTRIBUTING.md).\n\n> Important: although caution will be taken to accept only reputable resources, the maintainer of this list takes no responsibility for any loss of funds from using any resource on this list. If you suspect a list item to be a scam, please report it and it will be investigated.\n\n# Contents\n\n[**Resources**](#resources) | [**Community**](#community) | [**Wallets**](#wallets) | [**Merchants**](#merchants)\n--- | --- | --- | ---\n[Official](#official-resources) | [Bitcoin Cash](#bitcoin-cash) | [Full Nodes](#full-nodes) | [Directories](#directories)\n[Informative](#informative) | [Reddit](#reddit) | [Desktop](#desktop-wallets) | [Individual](#individual)\n[Payment Processors](#payment-processors) | [Twitter](#twitter) | [Mobile](#mobile-wallets)\n[Point of Sale Systems](#point-of-sale-systems) | [Meetups](#local-meetups) | [Web](#web-wallets)\n[Faucets](#faucets) | [Podcasts](#podcasts) | [Hardware](#hardware-wallets)\n[High Volume Exchanges](#high-volume-exchanges) | [Design](#design) | [Paper](#paper-wallets)\n[Coin Converters](#coin-converters) | [Bounties](#bounties) | [SMS/Text](#sms-wallets)\n[Brokerages](#brokerages) | [Tipping](#tipping)\n[Gambling](#gambling)\n[Mining Pools](#mining-pools)\n[Block Explorers](#block-explorers)\n[APIs](#apis)\n[Real Time Stats](#real-time-stats)\n[Projects](#projects)\n\n# Resources\n\n### Official Resources\n\n- [White Paper](https://www.bitcoin.com/bitcoin.pdf)\n- [Website](https://www.bitcoincash.org/)\n\n### Informative\n\n- [What is Bitcoin Cash](https://blockgeeks.com/guides/what-is-bitcoin-cash)\n- [Bitcoin Cash Roadmap](https://chrispacia.wordpress.com/2017/09/01/the-bitcoin-cash-roadmap)\n- [Bitcoin Cash Recovery Blog Post](https://blog.btc.com/how-to-recover-your-trapped-bitcoin-cash-from-other-wallets-24b929543f26)\n- [Bitcoin Cash Recovery 1 Minute Video](https://www.youtube.com/watch?v=i7--pmPa11E)\n- [Bitcoin.com: Bitcoin Cash is Bitcoin](https://www.bitcoin.com/info/bitcoin-cash-is-bitcoin)\n- [Learn Bitcoin Cash](https://learnbitcoin.cash)\n- [BitcoinRewards.com: What is Bitcoin Cash? Video](https://www.youtube.com/watch?v=1_GGT_0W0so)\n- [Bitcoin.com Developer Resources](https://developer.bitcoin.com)\n\n### Payment Processors\n\n- [BitPay](https://bitpay.com/tour)\n- [CoinPayments](https://www.coinpayments.net)\n- [Rocketr](https://rocketr.net)\n- [Coinify](https://coinify.com)\n- [piixPay](https://www.piixpay.com/web)\n- [Cashflow](https://cashflow.fm/)\n\n### Point of Sale Systems\n\n- [MiniPOS](https://www.minipos.cash/)\n- [CheddrPOS](https://pos.cheddr.cash/launch.html)\n- [pyxpubPOS](https://pyxpub.io/)\n- [moosh.io](https://moosh.io/wallet.html)\n- [Simple Pay](http://www.bitcoinc.com.au/spay)\n- [SimplePOS4BCH](https://github.com/monsterbitar/SPOS4BCH)\n\n### Faucets\n\n- [Learn Bitcoin Cash](https://learnbitcoin.cash/faucet)\n- [Testnet Faucet](https://faucet.fullstack.cash)\n\n### High Volume Exchanges\n\n- [Bithumb](https://www.bithumb.com) (Korea)\n- [HitBTC](https://hitbtc.com/exchange/BCC-to-BTC) (Worldwide)\n- [Korbit](https://www.korbit.co.kr) (Korea)\n- [Coinone](https://coinone.co.kr/exchange/trade/bch) (Korea)\n- [Bitfinex](https://www.bitfinex.com/trading/BCHUSD) (Worldwide)\n- [Bittrex](https://bittrex.com/Market/Index?MarketName=BTC-BCC) (Worldwide)\n- [Poloniex](https://poloniex.com/exchange/#btc_bch) (Worldwide)\n- [Huobi](https://www.huobi.pro/exchange/bcc_btc) (China)\n- [Yunbi](https://yunbi.com/markets/bcccny) (China)\n- [BTER](https://bter.com/trade/bcc_cny) (China)\n- [Coinbase](https://coinbase.com) (USA & some others)\n- [GDAX](https://gdax.com) (USA)\n- [Bitstamp](https://bitstamp.net) (Europe and USD trades)\n- [OKEX](https://okex.com) (Worldwide)\n- [QuadrigaCX](https://quadrigacx.com) (Canada)\n- [BTCBOX](https://www.btcbox.co.jp/market-bcc.html) (Japan)\n- [Bitflyer](https://bitflyer.com) (Japan)\n- [Quoine](https://quoine.com) (Japan)\n- [Kraken](https://kraken.com) (USA)\n- [Bitcoin Vietnam](https://bitcoin.vn/) (Vietnam)\n- [Bx.in.th](https://bx.in.th/THB/BCH/) (Thailand)\n- [SurBTC](https://surbtc.com/) (Latin America)\n\n### Coin Converters\n\n- [Shapeshift](https://shapeshift.io)\n- [Changelly](https://changelly.com)\n- [Evercoin](https://evercoin.com)\n- [Nexchange.io](https://nexchange.io)\n- [CoinSwitch.co](https://www.coinswitch.co)\n\n### ATMs\n\n- [BitcoinPlug](http://www.newsbtc.com/2017/11/03/bitcoinplug-will-enable-bitcoin-cash-los-angeles-atms-soon/) (Los Angeles)\n- [Genesis Block](https://www.genesisblockhk.com/) (Hong Kong)\n\n### Brokerages\n\n- [bitcoin.de](https://www.bitcoin.de) (Germany)\n- [Local Bitcoin Cash](https://www.localbitcoincash.org/) - Worldwide p2p marketplace\n\n### Gambling\n\n- [Satoshi Bones](https://bitzillions.com/satoshibones/bcc)\n- [Satoshi Dice](https://satoshidice.com)\n- [Blockchain Poker](https://blockchain.poker/#cash)\n- [Betcoin](https://www.betcoin.ag/best-bitcoin-cash-casino)\n- [Safe Dice](https://safedice.com)\n- [Lucky Games](https://luckygames.io)\n- [Mount Betmore](https://mtbetmore.com/)\n- [Coinsaga](https://www.coinsaga.com/)\n\n### Mining Pools\n\n- [Bitcoin.com](https://pool.bitcoin.com)\n- [ViaBTC](https://pool.viabtc.com)\n- [AntPool](https://www.antpool.com)\n- [BTC.com](https://pool.btc.com)\n- [BTC TOP](https://btc.top)\n- [Waterhole](https://bch.waterhole.io)\n\n### Block Explorers\n\n- [Blockchair](https://blockchair.com/bitcoin-cash/blocks)\n- [Blocktrail](https://www.blocktrail.com/BCC)\n- [BitInfoCharts](https://bitinfocharts.com/bitcoin%20cash)\n- [BlockDozer](http://blockdozer.com/insight)\n- [Bitcoin.com](https://explorer.bitcoin.com)\n- [BCCBlock](https://bccblock.info)\n- [BlockExplorer](https://bitcoincash.blockexplorer.com)\n- [ViaBTC](https://www.viabtc.com/)\n\n### APIs\n\n- [Blockchair](https://github.com/Blockchair/Blockchair.Support/blob/master/API.md)\n- [BTC.com](https://bch.btc.com/api-doc#API)\n- [rest.bitcoin.com](https://rest.bitcoin.com/)\n- [Chaingraph](https://chaingraph.cash/) ([src](https://github.com/bitauth/chaingraph)) \u2013\u00a0A multi-node blockchain indexer and GraphQL API.\n\n### Real Time Stats\n\n- [Johoe's Mempool Stats](https://jochen-hoenicke.de/queue/cash)\n- [Cash vs Core](https://cashvscore.com)\n- [Coin Dance](https://cash.coin.dance/blocks)\n- [Coin Salad](https://coinsalad.com/bitcoincash/blocks)\n- [Node Counter](http://nodecounter.com)\n- [fork.lol](http://fork.lol)\n- [CoinMarketCap](https://coinmarketcap.com)\n- [What The Fork?](http://fork.watch)\n- [Cash Drop](https://porlybe.github.io/cashdrop/) - Real time Bitcoin Cash mempool visualizer\n- [Txhighway](http://txhighway.com/) - BTC and BCH networks visualized as cars on a highway\n- [BCH Node Map](https://bchnodes.online/)\n- [BitListen.Cash](https://bitlisten.cash/) - Visualize and LISTEN to BCH Transactions\n- [Blockmodo](https://blockmodo.com/quotes/BCH) - Realtime streaming Bitcoin Cash prices, news, social posts, and GitHub code checkins.\n- [Cashbar](https://github.com/johneas10/cashBar) - Live BCH prices against USD & BTC, along with 1hr, 24hr & 7day % changes on your desktop.\n- [CashFusion Stats](https://fusionstats.redteam.cash/)\n\n### Projects\n \n- [Coin Mix](https://coinmix.to)\n- [Counterparty Cash](https://counterparty.cash)\n- [SecretCoin](https://secretco.in)\n- [Flowee](http://www.flowee.org)\n- [BitcoinRewards](https://www.bitcoinrewards.com)\n- [SIGNUP](https://signup.cash) - Non-custodial web-based key signer and social interactions JavaScript Library\n- [Bitauth IDE](https://ide.bitauth.com/) ([src](https://github.com/bitauth/bitauth-ide)) \u2013 An online IDE for developing Bitcoin Cash contracts.\n- [Libauth](https://github.com/bitauth/libauth) \u2013 An ultra-lightweight, zero-dependency JavaScript library for Bitcoin Cash and Bitauth applications.\n- [rbch](https://cran.r-project.org/package=rbch) \u2013 A package written in the R statistical programming language for analysis of BCH blockchain data.\n- [`<qr-code>`](https://github.com/bitjson/qr-code) \u2013 A no-framework, no-dependencies, customizable, animate-able, SVG-based `<qr-code>` HTML element.\n\n# Community\n\n### Bitcoin Cash\n\n- [Memo.cash](https://memo.cash)\n- [Bitcoin Cash Fund](https://www.thebitcoincash.fund)\n- [Bitcoin.com Forum](https://forum.bitcoin.com)\n- [Tipcrypto.net](https://tipcrypto.net)\n- [BlockPress](https://blockpress.com)\n- [BCH.gg](https://bch.gg) - URL shortener for networks like Memo & BlockPress\n- [Honest Cash](https://honest.cash/)\n- [Noise Cash](https://noise.cash/)\n\n### Reddit\n\n- [r/bitcoincash](https://www.reddit.com/r/bitcoincash/)\n- [r/btc](https://www.reddit.com/r/btc/)\n\n### Twitter\n\n- [Bitcoin Cash News](https://twitter.com/BTCNewsUpdates)\n- [Bitcoin Cash Fans](https://twitter.com/BitcoinCashFans)\n- [CryptoScatman](https://twitter.com/bsmith12251960)\n- [useBitcoinCash](https://twitter.com/useBitcoinCash)\n\n### Local Meetups\n\n#### South America\n\n- [Bogota, COLOMBIA](https://www.meetup.com/Bitcoin-Cash-Colombia/)\n- [Medellin, COLOMBIA](https://www.meetup.com/BitcoinCash-Medellin/)\n- [Sao Paolo, BRAZIL](https://www.meetup.com/Meetup-de-Bitcoin-Cash-Sao-Paulo/)\n- [Rio De Janeiro, BRAZIL](https://www.meetup.com/meetup-group-QoXRZiIB/)\n- [M\u00e9rida, VENEZUELA](https://www.meetup.com/Bitcoin-Cash-Venezuela/)\n- [Cancun, MEXICO](https://www.meetup.com/Bitcoin-Cash-Cancun)\n- [Villahermosa, MEXICO](https://www.meetup.com/Bitcoin-Cash-Villahermosa/)\n\n#### Africa\n\n- [Lagos, NIGERIA](https://www.meetup.com/Bitcoin-Cash-Meetup-Nigeria/)\n- [Johannesburg, SOUTH AFRICA](https://www.meetup.com/Johannesburg-Bitcoin-Cash-Meetup)\n\n#### Oceania\n\n- [Brisbane, AUSTRALIA](https://www.meetup.com/Brisbane-Bitcoin-Cash-Meetup)\n- [Sydney, AUSTRALIA](https://www.eventbrite.com/e/sydney-bitcoin-cash-meetup-tickets-42339538700)\n- [Melbourne, AUSTRALIA](https://www.meetup.com/St-Kilda-New-Technology-Meetup)\n- [Perth, AUSTRALIA](https://www.meetup.com/Bitcoin-Cash-in-Perth-Meetup/)\n- [Auckland, NEW ZEALAND](https://www.meetup.com/Auckland-Bitcoin-Cash-Meetup/)\n- [Christchurch, NEW ZEALAND](https://www.meetup.com/Christchurch-Bitcoin-Cash-Meetup/)\n\n#### Asia\n\n- [Tel-Aviv, ISRAEL](https://www.meetup.com/BitcoinCash-Israel/)\n- [Nizhny Novgorod, RUSSIA](https://www.meetup.com/Nizhny-Novgorod-\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430-\u041f\u041e-Meetup)\n- [Pune, INDIA](https://www.meetup.com/Bitcoin-cash-local-meetup/)\n- [Hong Kong](https://www.meetup.com/Blockchain-Entrepreneurs-Coders-Fun/events/246106119/)\n- [Beijing, CHINA](https://www.meetup.com/Beijing-Bitcoin-Cash-Meetup/)\n- [Kuala Lumpur, MALAYSIA](https://www.meetup.com/KualaLumpurBCH/)\n- [Seoul, SOUTH KOREA](https://www.meetup.com/Seoul-Bitcoin-Cash-Meetup/)\n- [Tokyo, JAPAN](https://www.meetup.com/Tokyo-Bitcoin-Cash-Meetup-Group/)\n\n\n#### Europe\n\n- [London, UK](https://www.meetup.com/Bitcoin-Cash-London-Meetup/)\n- [Berlin, GERMANY](https://www.meetup.com/Bitcoin-Cash-Berlin-Meetup/)\n- [Helsinki, FINLAND](https://www.meetup.com/meetup-group-bOLoWLkO/)\n- [Oslo, NORWAY](https://www.meetup.com/Oslo-Bitcoin-Meetup/)\n- [Paris, FRANCE](https://www.meetup.com/fr-FR/Meetup-Bitcoin-Cash-Paris/)\n- [Barcelona, SPAIN](https://www.meetup.com/Barcelona-Bitcoin-Cash)\n- [Milano, ITALY](https://www.meetup.com/Bitcoin-Cash-Milano/)\n- [Zurich, SWITZERLAND](https://www.meetup.com/Zurich-Bitcoin-Cash-Meetup/)\n- [Amsterdam, NETHERLANDS](https://www.meetup.com/Amsterdam-Bitcoin-Cash-Meetup/)\n- [Sofia, Bulgaria](https://www.meetup.com/Bitcoin-Cash-Sofia-Meetup/)\n\n#### North America\n\n- [Silicon Valley, USA](https://www.meetup.com/Silicon-Valley-Bitcoin-Users/)\n- [Denver, USA](https://www.meetup.com/Denver-Bitcoin-Cash-Meetup/)\n- [Gulf Coast, USA](https://www.meetup.com/BitcoinCashGulfCoast/)\n- [San Francisco, USA](https://www.meetup.com/San-Francisco-Bitcoin-Cash/)\n- [St. Kitts, SAINT KITTS & NEVIS](https://www.meetup.com/Basseterre-Bitcoin-Meetup/)\n- [Boston, USA](https://www.meetup.com/Boston-Area-Bitcoin-Cash-Meetup/)\n- [Daytona Beach, USA](https://www.meetup.com/Bitcoin-Cash-Florida-Meetup/)\n- [Laguna Beach, USA](https://www.meetup.com/bitcoin-cash/)\n- [Orange County, USA]( https://www.meetup.com/Orange-County-Bitcoin-Cash-Meetup/)\n- [Las Vegas, USA](https://www.meetup.com/Las-Vegas-Henderson-Bitcoin-Meetup)\n- [Seattle, USA](https://www.meetup.com/Seattle-Bitcoin-Cash-Meetup/)\n- [Virginia, USA](https://www.meetup.com/Norfolk-Bitcoin-Meetup/)\n- [Vancouver, CANADA](https://www.meetup.com/meetup-group-EBXuwciQ/)\n- [Toronto, CANADA](https://www.meetup.com/BitcoinCashToronto)\n\n### Podcasts\n\n- [The Crypto Show - Daniel Krawisz, Dimitry Murashchik, Mike Joy and PH Madore](https://letstalkbitcoin.com/blog/post/the-crypto-show-daniel-krawisz-dimitry-murashchik-mike-joy-and-ph-madore)\n- [Around The Coin #141](https://soundcloud.com/aroundthecoin/fintech-podcast-episode-141-bitcoin-classic-versus-bitcoin-cash-the-fork-ahead)\n- [The BCH Boys](https://soundcloud.com/user-999365867)\n\n### Design\n\n- [Logo and Branding](https://forum.bitcoin.com/bitcoin-cash-f119/bitcoin-cash-logo-branding-t48603.html)\n- [Bitcoincash.org Branding](https://www.bitcoincash.org/graphics.html)\n\n### Bounties\n\n- [ChainTip GitHub Bounties](https://github.com/chaintip/bounties/blob/master/README.md#available-bounties)\n- [Donate to allow BountySource to accept Bitcoin Cash](https://www.bountysource.com/issues/49027183-add-bitcoin-cash-support-to-bountysource)\n- [GitCash ChainTip Bounties](https://gitcash.io/bounties)\n\n### Tipping\n\n- [ChainTip](https://www.chaintip.org/) (on-chain tipping - reddit, GitHub)\n- [Tippr](https://np.reddit.com/r/tippr/wiki/index) (reddit, Twitter)\n- [tipmebch](https://github.com/abrkn/tipmebch) (Telegram)\n- [GitCash](https://gitcash.io) (GitHub)\n\n# Wallets\n\n### Full Nodes\n\n- [Bitcoin Unlimited](https://www.bitcoinunlimited.info/download)\n- [Bitcoin ABC](https://www.bitcoinabc.org)\n- [Bitcoin XT](https://bitcoinxt.software)\n- [Bitprim](https://www.bitprim.org)\n\n### Desktop Wallets\n\n- [Bitcoin.com](https://www.bitcoin.com/choose-your-wallet/bitcoin-com-wallet)\n- [BitPay](https://bitpay.com/wallet)\n- [Electron Cash](https://www.electroncash.org)\n- [Exodus](https://www.exodus.io/releases)\n- [Copay](https://copay.io)\n- [Chris Pacia](https://github.com/cpacia/BitcoinCash-Wallet/releases)\n- [Cashkey](https://github.com/merwane/cashkey)\n\n### Mobile Wallets\n\n- [Bitcoin.com](https://wallet.bitcoin.com)\n- [BitPay](https://bitpay.com/wallet)\n- [coinbase](https://www.coinbase.com/mobile)\n- [Copay](https://copay.io)\n- [Edge](https://edgesecure.co)\n- [BTC.com](https://wallet.btc.com)\n- [Mobi](https://www.mobi.me)\n- [Unit](https://www.unitwallet.co)\n- [Coinomi](https://coinomi.com)\n\n### Web Wallets\n\n- [BTC.com](https://bcc-wallet.btc.com)\n- [Blockchain.info](https://blockchain.com)\n- [TSBW](https://tsbw.io/bcc/)\n\n### Hardware Wallets\n\n- [Ledger](https://www.ledgerwallet.com)\n- [Trezor](https://trezor.io)\n- [KeepKey](https://www.keepkey.com)\n\n### Paper Wallets\n\n- [Bitcoin Paper Wallet](https://bitcoinpaperwallet.com)\n- [Bitaddress](https://www.bitaddress.org)\n- [Bitcoin.com Paper Wallet](https://tools.bitcoin.com/paper-wallet/)\n- [Cashaddress](https://www.cashaddress.org)\n\n### SMS Wallets\n\n- [Cointext](https://cointext.io/)\n\n### Browser Extension Wallets\n\n- [Badger Wallet](https://badger.bitcoin.com)\n\n# Merchants\n\n### Directories\n\n- [Cryptonize It](https://cryptonize.it)\n- [The Accept Bitcoin Cash Initiative](https://acceptbitcoin.cash)\n- [Marco Coino Merchant Directory](https://www.coinline.co.nz/marco-coino)\n- [OpenBazaar items for BCH](https://blockbooth.com/search/?search_currencies=BCH)\n\n### Individual\n\n- [Steam Game Keys](https://steamgamekeys.com/)\n- [Living Room of Satoshi](http://www.livingroomofsatoshi.com/?sc=bch) - Pay bills with BCC\n- [Negash Apparell and Footwear](http://www.negash83.com/)\n- [BitVapes](https://bitvapes.com/) - Vaporizers\n- [Cryptartica](http://www.cryptartica.com/) - Bitcoin Cash merchandise\n- [Keys4Coins](http://www.keys4coins.com/) - Game keys, gift cards\n- [Keyois](http://www.keyois.com/) - Time capsules\n- [CryptoHabit](https://cryptohabit.com/) - Cryptocurrency apparel\n- [Hodlmonkey](http://hodlmonkey.com/) - Cryptocurrency apparel\n- [KawaiiCrypto](https://kawaiicrypto.com/) - Cryptocurrency stickers\n- [Greenhorn Crypto](https://greenhorncrypto.com/) - Hardware wallets\n- [SporeStack](https://sporestack.com/) - Ephemeral-by-design, API-driven VPS infrastructure\n- [Shiny Leaf](https://www.shinyleaf.com/promotions/bitcoin-cash-payment/) - Natural bath & body products\n- [Afrigarments](https://afrigarments.com/) - African style clothing\n\n<br/>\n<br/>\n<br/>\n\n> \"Unlike the previous situation in Bitcoin, there is no one single development team for Bitcoin Cash.  There are now multiple independent teams of developers. This decentralization of development (and decentralization of software implementations) is a much needed and important step forward.\" - https://www.bitcoincash.org/\n\n[![CC0](https://i.creativecommons.org/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nInspired by [awesome-vue](https://github.com/vuejs/awesome-vue)\n"
 },
 {
  "repo": "fabianfabian/zincwallet",
  "language": "Objective-C",
  "readme_contents": "zincwallet\n----------\n\nA [BIP32](https://en.bitcoin.it/wiki/BIP_0032) deterministic bitcoin wallet for iOS\n\nzincwallet is designed to be the most secure and user friendly bitcoin wallet for iOS. It is a \"deterministic\" wallet, meaning that all the bitcoin addresses and private keys are generated from a single \"seed\". If you know the seed, you can recreate the entire wallet including all balances and transaction history. This allows for a single convenient backup that will work forever.\n\nWallet seeds are securely stored on the iOS keychain, and never leave the device. They are never stored on any server. Your private keys are generated from your seed as needed and then immediately wiped from memory. Additionally, iOS keychain data persists even if the app is deleted. If you accidentally delete zincwallet and reinstall it, your wallet will be automatically recreated from the seed stored on the keychain. (Be sure to do a factory reset if you sell or give away your device!)\n\nThe seed is also encoded into a non-sense english phrase, which is your \"wallet backup phrase\". Never let anyone see your backup phrase or they will have access to your wallet. Write it down and store it in a safe place. In the event your device is damaged or lost you can restore your wallet on a new device using your backup phrase. Be sure to enable a passcode on your device and use [remote erase](http://www.apple.com/icloud/find-my-iphone.html#activation-lock) if it is lost or stolen. Future versions of zincwallet will also include a secondary passcode on the app itself.\n\nApple's app store rules currently prohibit apps that tansfer bitcoins. The app store build of zincwallet excludes this functionality and instead launches a mobile safari web app to send transactions. (the web app is entirely client side javascript, and sends transactions through the excellent blockchain.info web service. zincwallet.com will be launching it's own web service soon) No private keys or other sensitive data are transmitted to the web app, only public bitcoin transactions. If you build zincwallet from source without the app store build flag, or otherwise obtain a non-app store build, this restriction is removed.\n\nzincwallet uses \"simplified payment verification\" or [SPV](https://en.bitcoin.it/wiki/Thin_Client_Security#Header-Only_Clients) mode for fast performance in a mobile environment.\n\nFuture planned features include support for [BIP70](https://en.bitcoin.it/wiki/BIP_0070) payment protocol, support for Electrum wallets, BIP32 [serialized](https://en.bitcoin.it/wiki/BIP_0032#Serialization_format) wallet import and export and watch only wallets, more detailed transaction information, support for mBTC and \u00b5BTC denominations, and exchange rates for multiple legacy national currencies.\n\nzincwallet is open source and available under the terms of the MIT license. Source code is available at https://github.com/voisine/zincwallet\n"
 },
 {
  "repo": "arcbtc/bitcoinVend",
  "language": "C",
  "readme_contents": "\n![image](https://user-images.githubusercontent.com/33088785/176948767-a484ee2d-60f2-493b-8930-968492070805.png)\n\n\n# bitcoinVend\n## Offline bitcoin vending machine\n\n> <i>Join our <a href=\"https://t.me/makerbits\">telegram support/chat</a>.</i>\n\nbitcoinVend is the next logic step after <a href=\"https://github.com/arcbtc/LNURLPoS\">LNURLPoS</a> <-- go to that repo to learn more about the concepts behind bitcoinVend.\n\n### Demo video\n\nhttps://twitter.com/arcbtc/status/1470541850566090757\n\n### Tutorial video\n\n<a href=\"https://www.youtube.com/watch?v=Fg0UuuzsYXc&list=PLPj3KCksGbSYcLQoQbRGAtuHnQ4U4mXeL&index=38\" target=\"_blank\" ><img style=\"width:500px\" src=\"https://user-images.githubusercontent.com/33088785/146017455-5cda5ad7-ba7a-490b-8362-919102bde948.png\"></a>\n\n## Hardware\n\n![145817489-0223e99f-537b-4852-a8cb-26ceba8d4a5a](https://user-images.githubusercontent.com/33088785/145819968-96b2c263-cbf7-4b20-9237-aabe1fec5373.png)\n\n* Vending Machine. I use this excellent <a href=\"https://www.aliexpress.com/item/1005003681521257.html\">vending machine</a> \ud83e\udd29 (USE THIS PROMO CODE TO SAVE $45 **VSFPCZIIPKTM**)\n* ESP32 DEV MODULE\n* 12V to 5V Converter USB,3A\n* male/male, female/female, male/female jumper wires\n* Keypad membrane\n* 1.4inch TFT ST7735\n* 12v battery (optional)\n* Wide breadboard (I used x2 normal breadboards stuck together)\n* 4 Channel Relay Module\n* Single relay module\n\n**Keypad membrane GPIO map:** \n12-> 32, last row (A,B,C,D) GND\n\n**TFT GPIO map:** \n[VCC - 5V (on the single relay), GND - GND, CS - GPIO5, Reset - GPIO16, AO (DC) - GPI17, SDA (MOSI) - GPIO23, SCK - GPIO18, LED - 3.3V (on the single relay)]\n\n![vending](https://user-images.githubusercontent.com/33088785/145814575-58988069-48b9-4e1d-8aa2-85be552be4c8.png)\n\n## Software\n\n### Arduino software install\n\n* Download/install latest <a href=\"https://www.arduino.cc/en/software\">Arduino IDE</a>\n* Install ESP32 boards, using <a href=\"https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html#installing-using-boards-manager\">boards manager</a>\n* Copy <a href=\"https://github.com/arcbtc/LNURLVend/tree/main/libraries\">these libraries</a> into your Arduino IDE library folder\n* Plug in ESP32. From *Tools>Board>ESP32 Boards* select **ESP32 DEV MODULE**\n\n> *Note: You may need to roll your ESP32 boards back to an earlier version in the Arduino IDE, by using tools>boards>boards manager, searching for esp. I use v1.0.5(rc6), and have also used v1.0.4 which worked.*\n### LNbits extension\n\nTo make things easy (usually a few clicks on things like Raspiblitz), there is an <a href=\"https://github.com/lnbits/lnbits/tree/master/lnbits/extensions/lnurlpos\">LNbits extension</a>.\nIf you want to make your own stand-alone server software that would be fairly easy to do, by replicating the lnurl.py file in the extension.\n\n### Future updates \nLooking forward to seeing this same project being used in a range of vending machines, all shapes and sizes.\n"
 },
 {
  "repo": "bitcoin-core/bitcoin-devwiki",
  "language": null,
  "readme_contents": "See the [wiki](https://github.com/bitcoin-core/bitcoin-devwiki/wiki).\n\n"
 },
 {
  "repo": "mingfunwong/all-bitcoin-private-key",
  "language": "TypeScript",
  "readme_contents": "# all-key\n\nAll bitcoin private key.\n\n## Demo\n\nhttps://all-bitcoin-private-key.pages.dev/\n\n## Development\n\n```\ngit clone https://github.com/mingfunwong/all-bitcoin-private-key.git\ncd ./all-bitcoin-private-key\nyarn\nyarn start\n```\n"
 },
 {
  "repo": "interlay/interbtc",
  "language": "Rust",
  "readme_contents": "<p align=\"center\">\n  <a href=\"https://github.com/interlay/interbtc\">\n    <img alt=\"interBTC\" src=\"/docs/img/banner.jpg\">\n  </a>\n  <h2 align=\"center\">interBTC</h2>\n\n  <p align=\"center\">\n    A trust-minimized bridge from Bitcoin to Anywhere.\n    <br />\n    <a href=\"https://spec.interlay.io/\"><strong>Explore the specification \u00bb</strong></a>\n    <br />\n    <br />\n    <a href=\"https://github.com/interlay/interbtc/issues\">Report Bug</a>\n    \u00b7\n    <a href=\"https://github.com/interlay/interbtc/issues\">Request Feature</a>\n  </p>\n</p>\n\nThis repository is hosted on GitHub: [https://github.com/interlay/interbtc](https://github.com/interlay/interbtc) with a mirror on [GitLab](https://gitlab.com/interlay/btc-parachain) and [radicle](rad:git:hnrkxrw3axafn8n5fwo8pspjgtbt6jj6qe6mo).\n\n## Table of Contents\n\n- [About the Project](#about-the-project)\n  - [Built With](#built-with)\n- [Roadmap](#roadmap)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [Contributing](#contributing)\n- [License](#license)\n- [Contact](#contact)\n- [Acknowledgements](#acknowledgements)\n\n## About the Project\n\nThe interBTC runtime allows the creation of **interBTC**, a fungible token that represents Bitcoin on the Interlay network.\nInterlay in turn is connected to other blockchains via [XCM](https://github.com/paritytech/xcm-format) and will be connected to even more blockchains via [IBC](https://ibcprotocol.org/).\nEach interBTC is backed by Bitcoin 1:1 and allows redeeming of the equivalent amount of Bitcoins by relying on a collateralized third-party.\n\nThe project uses the concept of [Cryptocurrency-backed Assets](https://xclaim.io) to lock Bitcoin on the Bitcoin blockchain and issue BTC-backed tokens on the Interlay network.\nThe implementation is based on the [interBTC specification](https://spec.interlay.io/).\n\n### Built with\n\nThe interBTC project is built with:\n\n- [Rust](https://www.rust-lang.org/)\n- [Substrate](https://substrate.dev/)\n\n    <img src=\"https://spec.interlay.io/_images/overview.png\" alt=\"Logo\" width=\"500\">\n\n### Development Progress\n\nThe Substrate runtime makes use of various custom pallets that are found in the [crates](./crates) folder.\n\n- [annuity](crates/annuity): Block rewards for stake-to-vote and vaults.\n- [bitcoin](crates/bitcoin): Library for Bitcoin type, parsing and verification functions.\n- [btc-relay](crates/btc-relay): Stateful SPV client for Bitcoin. Stores Bitcoin main chain, tracks forks, verifies Merkle proofs and validates specific transaction formats.\n- [currency](crates/currency) Handles currencies used as backing collateral (e.g. DOT/KSM) and issued tokens (e.g. interBTC).\n- [democracy](crates/democracy): Optimistic governance fork of `pallet-democracy`.\n- [escrow](crates/escrow): Rust implementation of Curve's Voting Escrow contract.\n- [fee](crates/fee): Participant reward calculation and distribution.\n- [issue](crates/issue): Handles issuing of interBTC for BTC on Bitcoin.\n- [nomination](crates/nomination): Interface for vault nomination.\n- [oracle](crates/oracle): Trusted providers use this to set exchange rates and Bitcoin fee estimates.\n- [redeem](crates/redeem): Handles redeeming of interBTC for BTC on Bitcoin.\n- [replace](crates/replace): Handles replacing vaults.\n- [reward](crates/reward): Scalable reward distribution.\n- [security](crates/security): Handles status and error changes.\n- [staking](crates/staking): Core logic for vault nomination and slashing.\n- [supply](crates/supply): Token minting and inflation.\n- [vault-registry](crates/vault-registry): Handles registration, collateral and liquidation of vaults.\n\n## Getting started\n\n### Prerequisites\n\n```\ncurl https://sh.rustup.rs -sSf | sh\n```\n\nPlease also install the following dependencies:\n\n- `cmake`\n- `clang` (>=10.0.0)\n- `clang-dev`\n- `libc6-dev`\n- `libssl-dev`\n\n### Installation\n\nBuilding requires a specific rust toolchain and nightly compiler version. The\nrequirements are specified in the [./rust-toolchain.toml](./rust-toolchain.toml)\n[override file][].\n\nRunning `rustup show` from the root directory of this repo should be enough to\nset up the toolchain and you can inspect the output to verify that it matches\nthe version specified in the override file.\n\nTo build, run:\n\n```\ncargo build\n```\n\nFor more detailed development instructions [see here](./docs/README.md).\n\n[override file]: https://rust-lang.github.io/rustup/overrides.html#the-toolchain-file\n\n### Testing\n\n```\ncargo test --features runtime-benchmarks\n```\n\nTo run with coverage, using [cargo-cov](https://github.com/kennytm/cov):\n\n```\ncargo install cargo-cov\n\n# clean up previous coverage result\ncargo cov clean\n\n# test the code\ncargo cov test\n\n# open the coverage report\ncargo cov report --open\n```\n\n### Running - Standalone\n\nTo run a local development node, use the `dev` chain spec.\n\n```shell\ncargo run --release --bin interbtc-standalone -- --dev\n```\n\nClear the database using the `purge-chain` command.\n\n```shell\ncargo run --release --bin interbtc-standalone -- purge-chain --dev\n```\n\nAdditional CLI usage options are available and may be shown by running `cargo run --bin interbtc-standalone -- --help`.\n\n### Running - Parachain\n\nTo run a local development node, use the `dev` chain spec.\n\n```shell\ncargo run --release --bin interbtc-parachain -- --dev\n```\n\nTo connect with a local relay-chain follow [these instructions](docs/rococo.md).\n\n#### Test Coverage\n\nTest coverage reports available under [docs/testcoverage.html](https://github.com/interlay/interbtc/blob/master/docs/testcoverage.html)\n\n### Substrate Chain Configuration\n\nThe Substrate runtime configuration is in the [parachain](./parachain) folder.\n\n### Javascript / Typescript\n\nWhen interacting via polkadot{.js} you will need to use our [custom types](https://github.com/interlay/interbtc-types). Please also checkout [interbtc-js](https://github.com/interlay/interbtc-js) for a more complete (strongly-typed) library.\n\n## Contributing\n\nIf you would like to contribute, please file an issue on GitHub or reach out to us.\n\n- [Discord](https://discord.gg/interlay)\n- [Telegram](https://t.me/joinchat/G9FaYhNbJK9v-6DN3IyhJw)\n\n## License\n\ninterBTC is currently licensed under the terms of the Apache License (Version 2.0). See LICENSE\n\n## Contact\n\nWebsite: [Interlay.io](https://www.interlay.io)\n\nTwitter: [@interlayHQ](https://twitter.com/InterlayHQ)\n\nEmail: contact@interlay.io\n\n## Acknowledgements\n\nThis project is supported by a [Web3 Foundation grant](https://web3.foundation/grants/).\n\nWe would also like to thank the following teams for their continuous support:\n\n- [Parity Technologies](https://www.parity.io/)\n\n<p align=\"center\">\n  <a href=\"https://web3.foundation/grants/\">\n    <img src=\"/docs/img/web3GrantsBadge.png\">\n  </a>\n</p>\n"
 },
 {
  "repo": "XertroV/BitcoinAutoNode",
  "language": "Shell",
  "readme_contents": "BitcoinAutoNode\n===============\n\nA script to run (ideally just after starting up a new server/vps) to automatically setup `bitcoind` and have it start on boot.\n\nThis script runs `bitcoind` under the `bitcoin` user. An alias (`btc`) is added to the current user's `.bashrc`. Where you'd normally type `bitcoin-cli` you can type `btc`, eg: `btc getinfo`.\n\nIt has been tested on Ubuntu Server 14.04 and 15.04. It is intended for use only on these distros.\n\nOne Liner\n---------\n\n    wget https://raw.github.com/XertroV/BitcoinAutoNode/master/bitcoinAutoNode.sh ; sudo bash bitcoinAutoNode.sh\n\nYou should really check out the code before running that though.\n\n### Super Lazy Method\n\nIf you want to run one command then disconnect (nearly) straight away, use this:\n\n    wget https://raw.github.com/XertroV/BitcoinAutoNode/master/stub.sh ; sudo bash stub.sh ; exit\n\nIt should drop the connection once it's started. You can view the setup with `screen -r bitcoinInstaller` and detach (when viewing) with `Ctrl+a d`.\n\n\nNotes\n-----\n\nPreviously, the script would prompt you to change your password and would install the ufw (and allow ports 8333 and 22). However, I've removed that. All that happens now is installing `bitcoind` and dependencies.\n\nPruning is used and by default set to a maximum of ~60% of the `/` volume, ensuring it can be run on a small VPS. For this reason a 2 GB swap file is also instantiated.\n"
 },
 {
  "repo": "alexk111/awesome-bitcoin-payment-processors",
  "language": null,
  "readme_contents": "<div align=\"center\">\n<img width=\"500\" src=\"media/logo.svg\" alt=\"Awesome Bitcoin Payment Processors\"/>\n</div>\n\n# Awesome Bitcoin Payment Processors [![Awesome](https://awesome.re/badge-flat.svg)](https://awesome.re)\n\nA curated list of awesome Bitcoin payment processors enabling merchants, businesses and nonprofits to accept Bitcoin payments.\n\nWhy are they awesome?\n\n1. They are either immune to financial censorship or they don't practice it.\n2. They accept Bitcoin via native Bitcoin addresses and don't require wallets to use the [controversial payment protocol](https://blog.samouraiwallet.com/post/169222582782/bitpay-qr-codes-are-no-longer-valid-important).\n3. They don't [block payments by IPs/locations](https://twitter.com/alex_kaul/status/1090211252331208705).\n\n## Contents\n\n- [Self-Hosted Bitcoin Payment Processors](#self-hosted-bitcoin-payment-processors)\n- [Hosted Bitcoin Payment Processors](#hosted-bitcoin-payment-processors)\n  - [Non-Custodial](#non-custodial)\n  - [Custodial](#custodial)\n- [Backers \ud83d\udc9d](#backers-)\n\n## Self-Hosted Bitcoin Payment Processors\n\nSelf-Hosted payment processors run on your server and provide you with a full control over the entire payment process and funds. There's no third-party involvement - that significantly increases the censorship-resistance, privacy, and security for you and your customers. \n\n| Processor | Fees | Lightning | Directly to Your Wallet | Conversion to Fiat | Requirements |\n| --------- |:----:|:---------:|:-----------------------:|:------------------:| ------------ |\n| [BTCPay Server](https://btcpayserver.org/) | No fees | Yes | Yes | Via [Payment Forwarding](https://www.blockonomics.co/views/payment_forwarding.html) and [Exchange Integration](https://redbtc.org/flows/integrations/kraken-exchange/) | 2 GB RAM, 80 GB Storage, Docker |\n| [One Time Address](https://github.com/alexk111/One-Time-Address) | No fees | No | Yes | No | NodeJS |\n| [CryptoWoo](https://www.cryptowoo.com/) | $34 - $99 per year | No | Yes | No | PHP 5.6+, Wordpress 4.3+, WooCommerce 3.0+ |\n| [BitcartCC](https://bitcartcc.com) | No fees | Yes | Yes | No | 1 GB RAM, 10 GB Storage, Docker |\n| [LnMe](https://github.com/bumi/lnme) | No fees | Yes | Yes | No | LND node |\n| [SatSale](https://github.com/nickfarrow/SatSale) | No fees | Yes | Yes | Weakhands: [swap to USDT on Liquid](https://github.com/nickfarrow/SatSale/blob/master/config.toml#L82), no-KYC | A Bitcoin node and Python. Lightning node & Woocommerce optional |\n| [CypherpunkPay](https://cypherpunkpay.org/) | No fees | No | Yes | No | Linux (1GB RAM) |\n\n## Hosted Bitcoin Payment Processors\n\nHosted payment processors run on someone else's server. This simplifies the initial setup process, but reduces the amount of control you have over the payment process.\n\n### Non-Custodial\n\n| Processor | Fees | Lightning | Directly to Your Wallet | Conversion to Fiat | Requirements |\n| --------- |:----:|:---------:|:-----------------------:|:------------------:| ------------ |\n| [Blockonomics](https://www.blockonomics.co/merchants) | 1% | No | Yes | Via [Payment Forwarding](https://www.blockonomics.co/views/payment_forwarding.html) | No |\n| [Bittery.io](https://bittery.io/) | No fees | Yes | Yes | Via [Payment Forwarding](https://www.blockonomics.co/views/payment_forwarding.html) and [Exchange Integration](https://redbtc.org/flows/integrations/kraken-exchange/) | No |\n| [Payscrypt](https://payscrypt.com/) | No fees | No | Yes | No | No |\n| [Bitrequest](https://bitrequest.io/) | No fees | No | Yes | No | No |\n\n### Custodial\n\n\u26a0 The following processors use their own wallets for receiving payments. They not only collect data about payments, they have full control over the funds.\n\n| Processor | Fees | Lightning | Directly to Your Wallet | Conversion to Fiat | Requirements |\n| --------- |:----:|:---------:|:-----------------------:|:------------------:| ------------ |\n| [Confirmo](https://confirmo.net/) | 0.8% | Yes | No | Yes | Information about business / website. May require certain documents. |\n| [CoinGate](https://coingate.com/accept-bitcoin) | 1% (merchant) + some [variable service fee](https://support.coingate.com/en/109/why-does-coingate-charge-service-fee) (customer) | Yes | No | Yes | Requires [a lot of information and business documents](https://blog.coingate.com/2019/05/verify-merchant-account-faq), officially translated in english. |\n| [CoinPayments](https://www.coinpayments.net/) | 0.5% | Yes | No | No | On withdrawal may require a number of forms of identification and will require settlement of any outstanding amounts. |\n| [GloBee](https://globee.com/) | 1% ($10 min. invoice) | Yes | No | Via [Luno](https://www.luno.com) and [Uphold](https://uphold.com/) | Information about business / website. May require certain documents. |\n| [OpenNode](https://www.opennode.co/) | 1% | Yes | No | Yes | Requires [KYC/KYB documents](https://help.opennode.com/en/articles/3654899-kyc-and-kyb-requirements) |\n| [Strike](https://strike.acinq.co/) | 1% | Only | No | No | For companies, the name of a company and a physical address. |\n| [Coinremitter](https://coinremitter.com/) | 0.23% + 0.0001 | No | No | No | No |\n| [Utrust](https://utrust.com/) | 1% | No | No | Yes | Require certain documents. |\n| [NOWPayments](https://nowpayments.io/) | \u22640.5% | No | No | No | KYC/AML procedure applied to certain clients, wallet addresses and select assets. |\n| [COINQVEST](https://www.coinqvest.com/) | 0.5-1%, [Free to try](https://www.coinqvest.com/en/pricing) | No | No | Yes (USD, EUR, ARS, BRL, NGN) | Requires KYC verification. |\n\n## Backers \ud83d\udc9d\n\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/0/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/0/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/1/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/1/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/2/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/2/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/3/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/3/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/4/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/4/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/5/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/5/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/6/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/6/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/7/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/7/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/8/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/8/profile)\n[![Backer](https://mynode.alexkaul.com/gh-backer/top/9/avatar/60)](https://mynode.alexkaul.com/gh-backer/top/9/profile)\n\n[[Donate](https://mynode.alexkaul.com/gh-donate)] Thank you for your support! \ud83d\ude4c\n"
 },
 {
  "repo": "akumaigorodski/wallet",
  "language": "Java",
  "readme_contents": "Simple Bitcoin Wallet (aka SBW) is an [IMMORTAN](https://github.com/btcontract/IMMORTAN)-powered non-custodial Bitcoin wallet for Android with extensive Lightning Network support. It is fully autonomus and does not rely on any kind of centralized service (such as Google services, routing servers, special LSP nodes etc). It is the first mobile wallet which supports routing of 3rd-party Lightning payments and thus allows users to avoid private channel closings as well as earn routing fees in a non-custodial way.    \n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://play.google.com/store/apps/details?id=com.btcontract.wallet\">\n          <img alt=\"Get it on Google Play\" src=\"https://play.google.com/intl/en_us/badges/images/apps/en-play-badge.png\" height=\"50pt\"/>\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://f-droid.org/repository/browse/?fdid=com.btcontract.wallet\">\n          <img alt=\"Get it on F-Droid\" src=\"https://fdroid.gitlab.io/artwork/badge/get-it-on.png\" height=\"80pt\"/>\n        </a>  \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## Bitcoin part roadmap\n\n- [ ] Implement BIP157/158, let users choose between Electrum and Client Side Filters as a sync mechanism.\n- [x] Support watch-only Bitcoin wallets and import of xPub from hardware wallets.\n- [x] Allow Lightning channels to be funded from imported hardware wallets.\n- [x] Add RBF-based boosting and cancelling for outgoing transactions.\n- [x] Add CPFP-based boosting for incoming transactions.\n- [ ] Implement Taproot wallet type.\n- [x] Implement Coin Control.\n\n## Lightning part roadmap\n\n- [x] Finalize and enable private hosted channels.\n- [x] Achieve complete LNURL spec support (as far as non-custodial wallet can go).\n- [ ] Develop an Eclair plugin which would allow full LN nodes to easily utilize SBW routing capabilities.\n- [ ] Implement UI for fine controlling of routed Lightning payments.\n\n## Building from source\n\n```\ngit clone https://github.com/btcontract/wallet.git\ncd wallet\ngit checkout 2.4.27\npodman build -t sbw .\npodman run -v $PWD:/app/simplebitcoinwallet/wallet:z sbw\n```\n\n### Signing with your self-signed certificate\n\nInstall Android SDK, create a `keystore.jks` using `keytool`.\n\n```\n$ <Android SDK dir>/build-tools/<version>/zipalign -v 4 app/build/outputs/apk/release/SBW-2.4.27.apk app/build/outputs/apk/release/SBW-2.4.27-aligned.apk\n\n$ <Android SDK dir>/build-tools/<version>/apksigner sign --ks <path to keystore.jks> --ks-key-alias <signing key alias> --v1-signing-enabled true --v2-signing-enabled true app/build/outputs/apk/release/SBW-2.4.27-aligned.apk\n```\n\n## Verification with `apksigner`\n\n```\n$ '<Android SDK dir>/build-tools/<version>/apksigner' verify --print-certs --verbose SBW-2.4.27.apk\n```\n\nOutput should contain the following info:\n\n```\nVerifies\nVerified using v1 scheme (JAR signing): true\nVerified using v2 scheme (APK Signature Scheme v2): true\nNumber of signers: 1\nSigner #1 certificate DN: CN=Bitcoins wallet developer\nSigner #1 certificate SHA-256 digest: dca2c3527ec7f7c0e38c0353278e7a5674cfa6e4b7556510ff05f60073ca338a\nSigner #1 certificate SHA-1 digest: 14659e7de5a71f2608bf4a889c0f8d043147e203\nSigner #1 certificate MD5 digest: e3102232a4754705c8917710765b9635\nSigner #1 key algorithm: RSA\nSigner #1 key size (bits): 2048\nSigner #1 public key SHA-256 digest: dc97f0f2e34167015914600d8fa748f908d578bcedb79664d010de3c9bdebf13\nSigner #1 public key SHA-1 digest: c4400469d5ad807dd9394785f1fa95003588a091\nSigner #1 public key MD5 digest: e4e1f847e0cb0a9703dc4f9323fd6d87\n```\n\n### Project sponsors\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://lnbig.com/\" target=\"_blank\">\n          <img width=\"146px\" src=\"https://i.imgur.com/W4A92Ym.png\">\n        </a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
 },
 {
  "repo": "bitpay/bitcore-message",
  "language": "JavaScript",
  "readme_contents": "<img src=\"http://bitcore.io/css/images/module-message.png\" alt=\"bitcore message\" height=\"35\">\n# Bitcoin Message Verification and Signing for Bitcore\n\n\n[![NPM Package](https://img.shields.io/npm/v/bitcore-message.svg?style=flat-square)](https://www.npmjs.org/package/bitcore-message)\n[![Build Status](https://img.shields.io/travis/bitpay/bitcore-message.svg?branch=master&style=flat-square)](https://travis-ci.org/bitpay/bitcore-message)\n[![Coverage Status](https://img.shields.io/coveralls/bitpay/bitcore-message.svg?style=flat-square)](https://coveralls.io/r/bitpay/bitcore-message?branch=master)\n\nbitcore-message adds support for verifying and signing bitcoin messages in [Node.js](http://nodejs.org/) and web browsers.\n\nSee [the main bitcore repo](https://github.com/bitpay/bitcore) for more information.\n\n## Getting Started\n\n```sh\nnpm install bitcore-message\n```\n\n```sh\nbower install bitcore-message\n```\n\nTo sign a message:\n\n```javascript\nvar bitcore = require('bitcore-lib');\nvar Message = require('bitcore-message');\n\nvar privateKey = bitcore.PrivateKey.fromWIF('cPBn5A4ikZvBTQ8D7NnvHZYCAxzDZ5Z2TSGW2LkyPiLxqYaJPBW4');\nvar signature = Message('hello, world').sign(privateKey);\n```\n\nTo verify a message:\n\n```javascript\nvar address = 'n1ZCYg9YXtB5XCZazLxSmPDa8iwJRZHhGx';\nvar signature = 'H/DIn8uA1scAuKLlCx+/9LnAcJtwQQ0PmcPrJUq90aboLv3fH5fFvY+vmbfOSFEtGarznYli6ShPr9RXwY9UrIY=';\nvar verified = Message('hello, world').verify(address, signature);\n```\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/bitpay/bitcore/blob/master/CONTRIBUTING.md) on the main bitcore repo for information about how to contribute.\n\n## License\n\nCode released under [the MIT license](https://github.com/bitpay/bitcore/blob/master/LICENSE).\n\nCopyright 2013-2015 BitPay, Inc. Bitcore is a trademark maintained by BitPay, Inc.\n\n"
 },
 {
  "repo": "toorop/go-bitcoind",
  "language": "Go",
  "readme_contents": "bitcoind\n===========\n\nA Golang client library wrapping the bitcoind JSON RPC API\n\n\nInstallation\n-----\n\t$ go get https://github.com/Toorop/go-bitcoind\n\n\nUsage\n----\n\n\tpackage main\n\n\timport (\n\t\t\"github.com/toorop/go-bitcoind\"\n\t\t\"log\"\n\t)\n\n\tconst (\n\t\tSERVER_HOST        = \"You server host\"\n\t\tSERVER_PORT        = port (int)\n\t\tUSER               = \"user\"\n\t\tPASSWD             = \"passwd\"\n\t\tUSESSL             = false\n\t\tWALLET_PASSPHRASE  = \"WalletPassphrase\"\n\t)\n\n\tfunc main() {\n\t\tbc, err := bitcoind.New(SERVER_HOST, SERVER_PORT, USER, PASSWD, USESSL)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\n\t\t//walletpassphrase\n\t\terr = bc.WalletPassphrase(WALLET_PASSPHRASE, 3600)\n\t\tlog.Println(err)\n\n\t\t// backupwallet\n\t\terr = bc.BackupWallet(\"/tmp/wallet.dat\")\n\t\tlog.Println(err)\n\n\n\t\t// dumpprivkey\n\t\tprivKey, err := bc.DumpPrivKey(\"1KU5DX7jKECLxh1nYhmQ7CahY7GMNMVLP3\")\n\t\tlog.Println(err, privKey)\n\n\t}\n\t\nMores examples in example.go (in examples folder) \n\nDocumentation\n-----\nClick on the button below to access the full documentation:\n\n[![GoDoc](https://godoc.org/github.com/toorop/go-bitcoind?status.png)](https://godoc.org/github.com/toorop/go-bitcoind)\t\n\n\n\nUnit tests\n----\n[![Build Status](https://travis-ci.org/Toorop/go-bitcoind.svg)](https://travis-ci.org/toorop/go-bitcoind)\n\nMore than 100 unit tests are made.\n\nTo run tests:\n\n\t$ go get github.com/onsi/ginkgo/ginkgo\n\t$ go get github.com/onsi/gomega\n\t$ ginkgo\n\n\tRunning Suite: Bitcoind Suite\t\n\t=============================\n\tRandom Seed: 1401120770\n\tWill run 112 of 112 specs\n\n\t\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\n\tRan 112 of 112 Specs in 0.001 seconds\n\tSUCCESS! -- 112 Passed | 0 Failed | 0 Pending | 0 Skipped PASS\n\n\tGinkgo ran in 10.856335553s\n\tTest Suite Passed\n \n\n\n\nTodo\n-----\n* GetBlockTemplate\n* sendrawtransaction\n* signrawtransaction\n* submitblock\n\n##### Note on SSL support \n\nNote on ssl support : bitcoind library doesn't verify the server's certificate chain. That means that it accepts any certificate presented by the server and any host name in that certificate. In this mode, TLS is susceptible to man-in-the-middle attacks.\n\n\nDonation\n------\n\n![Donation QR](http://api.qrserver.com/v1/create-qr-code/?size=200x200&data=bitcoin:1HgpsmxV52eAjDcoNpVGpYEhGfgN7mM1JB%3Flabel%3DToorop)\n\n[1HgpsmxV52eAjDcoNpVGpYEhGfgN7mM1JB](http://tinyurl.com/mccsoez)\n"
 },
 {
  "repo": "karask/python-bitcoin-utils",
  "language": "Python",
  "readme_contents": "python-bitcoin-utils\n====================\n\nThis is a bitcoin library that provides tools/utilities to interact with the Bitcoin network. One of the primary goals of the library is to explain the low-level details of Bitcoin. The code is easy to read and properly documented explaining in detail all the thorny aspects of the implementation. It is a low-level library which assumes some high-level understanding of how Bitcoin works. In the future this might change.\n\nThis is an early version of the library (v0.5.9) and currently, it supports private/public keys, all type of addresses and creation of any transaction (incl. segwit) with all SIGHASH types. All script op codes are included. Timelock and non-standard transactions are supported. Currently, a simple node proxy exists to enable easy calls to a Bitcoin core node. Extra functionality will be added continuously and the documentation will be improved as the work progresses.\n\nThe API documentation can be build with Sphinx but is also available as a PDF for convenience. One can currently use the library for experimenting and learning the inner workings of Bitcoin. It is not meant for production yet and parts of the API might be updated with new versions.\n\nComplementary to this library is a CC BY-SA 4.0 licensed `Bitcoin programming book <https://github.com/karask/bitcoin-textbook>`_.\n\n\nInstallation\n------------\nPython version 3 is required. Then just install with:\n\n$ pip install bitcoin-utils\n\nExamples\n--------\nKeys and Addresses\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/keys_addresses.py - creates a private key which we use to derive a public key and in turn an address. We also use the private key to sign a message and then verify it using the public key. \n\nSegwit Addresses\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/keys_segwit_addresses.py - creates P2WPKH, P2SH-P2WPKH, P2WSH and P2SH-P2WSH addresses.\n\nTransaction with P2PKH input and outputs\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/p2pkh_transaction.py - creates a simple transaction with one input and two outputs.\n\nCreate a P2PKH Transaction with different SIGHASHes\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/multi_input_sighash_transaction.py - creates a 2-input 2-output transaction with different signature types.\n\nCreate a P2SH Address \n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/send_to_p2sh_transaction.py - creates a P2SH address that corresponds to a P2PK redeem script and sends some funds to it.\n\nCreate (spent) a P2SH Transaction\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/spend_p2sh_transaction.py - creates a transaction that spends a P2SH output.\n\nCreate a non-standard tx\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/create_non_std_tx.py - sends funds to an address with a non-standard tx (script: OP_ADD OP_5 OP_EQUAL)\n\nSpend a non-standard tx\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/spend_non_std_tx.py - spends funds from script OP_ADD OP_5 OP_EQUAL \n\nTransaction to pay to a P2WPKH\n  http://github.com/karask/python-bitcoin-utils/blob/master/examples/send_to_p2wpkh_transaction.py - send coins from two P2PKH UTXOs to a native segwit address (P2WPKH)\n\nSpend from a P2SH(P2WPKH) nested segwit address\n   http://github.com/karask/python-bitcoin-utils/blob/master/examples/spend_p2sh_p2wpkh_address.py - spend a P2WPKH that is nested into a P2SH for old client compatibility\n\nCreate a P2SH address with a relative timelock\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/create_p2sh_csv_p2pkh_address.py - creates a P2SH address that locks funds (sent to it) with a private key (P2PKH) and a relative locktime of 200 blocks in the future.\n\nSpend from a timelocked address\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/spend_p2sh_csv_p2pkh.py - spends from a P2SH(CSV+P2PKH) address as created from above.\n\nUse NodeProxy to make calls to a Bitcoin node\n  https://github.com/karask/python-bitcoin-utils/blob/master/examples/node_proxy.py - make Bitcoin command-line interface calls programmatically (NodeProxy wraps jsonrpc-requests library)\n\nPlease explore the codebase or the API documentation (BitcoinUtilities.pdf) for supported functionality and other options.\n"
 },
 {
  "repo": "bmorelli25/interactive-bitcoin-price-chart",
  "language": "JavaScript",
  "readme_contents": "Interactive Bitcoin Price Chart *built with React & SVG*\n---\n\n* [Live Demo Here](https://interactive-bitcoin-price-chart-yenswahhtb.now.sh)\n* [Project Walk Through / Tutorial](https://codeburst.io/how-i-built-an-interactive-30-day-bitcoin-price-graph-with-react-and-an-api-6fe551c2ab1d)\n---\n\n![React SVG Gif](https://github.com/bmorelli25/react-svg-line-chart/blob/master/4_interactive_bitcoin_chart/readmeGIF.gif?raw=true)\n\n\n"
 },
 {
  "repo": "summa-tx/bitcoin-spv",
  "language": "JavaScript",
  "readme_contents": "## bitcoin-spv\n\n`bitcoin-spv` is a low-level toolkit for working with Bitcoin from other\nblockchains. It supplies a set of pure functions that can be used to validate\nalmost all Bitcoin transactions and headers, as well as higher-level\nfunctions that can evaluate header chains and transaction inclusion proofs.\n\nIt also supplies a standardized JSON format for proofs. Currently off-chain\nproof (de)serialization is supported in Golang, Python, and JS.\n\n## Supported by\n\n![Binance X Fellowship, Interchain Foundation, Summa, Cross Chain Group](./logo-group.jpg)\n\n- [Binance X Fellowship](https://binancex.dev/fellowship.html)\n- [Interchain Foundation](https://interchain.io/)\n- [Nervos Foundation](https://www.nervos.org/)\n- [Summa](https://summa.one)\n- [Cross Chain Group](https://crosschain.group/)\n----------\n\n### What smart contract chains are supported?\n\nWe have well-tested implementations in Solidty, ES6+ (JS), and golang.\nThese support any EVM-based chain (Ethereum, Celo, and others), as well as\nprojects based on [Lotion](https://github.com/nomic-io/lotion) and the\n[Cosmos SDK](https://github.com/cosmos/cosmos-sdk/). Our ES6+ work will also\nwork on [Agoric](https://agoric.com/)'s SES-based smart contract system at\nlaunch.\n\n### Quickstart guide:\n\nThere really isn't one. Using these tools requires in-depth knowledge of the\nBitcoin transaction format. The implementations include setup and development\ninstructions. If you have a project in mind, feel free to reach out and ask\nquestions.\n\n### IMPORTANT WARNING\n\nIt is extremely easy to write insecure code using these libraries. We do not\nrecommend a specific security model. Any SPV verification involves complex\nsecurity assumptions. Please seek external review for your design before\nbuilding with these libraries.\n\n### A note about versioning\n\nImplementations are versioned separately. I.e. there is no consistent feature\nset for a given version number. Wherever possible we use SemVer. Because go's\nversioning system is ridiculous, all releases are minor bumps, even when they\nshould be major bumps.\n\nThis may change in future releases.\n\nAt time of writing the following versions are roughly equivalent:\n- Go v1.4.0\n- JS v4.0.0\n- rust v3.0.0\n- py v3.0.0\n\nVersions older than these have incompatible JSON Proof and Header formats.\n\n\n### Bitcoin Endianness Gotchas\nBlock explorers tend to show txids and merkle roots in big-endian (BE) format.\nMost human-facing apps do this as well. However, due to Satoshi's inscrutable\nwisdom, almost all in-protocol data structures use little-endian (LE) byte\norder.\n\nWhen pulling txids and merkle nodes, make sure the endianness is correct\n\n1. They should be in LE for the proof construction\n1. They need to be in LE for hashing\n1. They are in LE in the merkle tree\n"
 },
 {
  "repo": "OutCast3k/bitcoin-multisig",
  "language": "HTML",
  "readme_contents": "Bitcoin Multi Signature Address Creation and Signing Script v0.2. By OutCast3k.\n\nThis repository is no longer being maintained, please see: https://coinb.in or  https://github.com/OutCast3k/coinbin for an advanced, and more up to date version!  \n"
 },
 {
  "repo": "libbitcoin/libbitcoin-blockchain",
  "language": "Shell",
  "readme_contents": "See README.md"
 },
 {
  "repo": "greenaddress/abcore",
  "language": "Java",
  "readme_contents": "ABCore - Android Bitcoin Core\n=============================\n\n[![Build Status](https://travis-ci.org/greenaddress/abcore.svg?branch=master)](https://travis-ci.org/greenaddress/abcore)\n\n<a href=\"http://abco.re\"> <img src=\"http://abco.re/assets/images/schema.png\" alt=\"Infographic\" width=\"650\" height=\"650\"></a>\n\nWeb site: <a href=\"http://abco.re\">abco.re</a>\n\nWarning: This app is still in a very Proof of Concept/Alpha stage.\n\n<a href=\"https://f-droid.org/packages/com.greenaddress.abcore/\" target=\"_blank\">\n<img src=\"https://f-droid.org/badge/get-it-on.png\" height=\"90\"/></a>\n<a href=\"https://play.google.com/apps/testing/com.greenaddress.abcore\" target=\"_blank\">\n<img src=\"https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png\" height=\"90\"/></a>\n\nIf you want to try it, you can also get it directly from GitHub [here](https://github.com/greenaddress/abcore/releases/tag/v0.63alphaPoC).\n\nWhat is Android Bitcoin Core?\n-----------------------------\n\nAndroid Bitcoin Core is an Android app that fetches bitcoin core daemon built for Android using the NDK and is meant to make it easier\nto run Bitcoin Core daemon node on always on Android set top box devices and home appliances as well as mobile devices.\n\nThe full node software (Core 0.18.1 and Knots 0.18.0 and Elements 0.17.0.1) is meant to be used as a personal node when on the go (either by using a mobile wallet that allows to connect to a remote and specific node or even directly on your mobile device).\n\nABCore works on x86, x86_64, armhf and arm64 Android (any version from Lollipop onwards - sdk 21). Mips is not supported.\n\nLicense\n-------\n\nABCore is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n\nPrivacy\n-------\n\nABCore doesn't do any kind of phone home, doesn't have In-App Purchase or advertising.\n\nDuring the initial configuration it connects to Github to fetch the required binaries and once it is installed it only communicates with the rest of the Bitcoin network like any normal full node.\n\nLimitations\n-----------\n\nABCore requires a fair amount of ram (tested with 2GB) and a fair amount of disk space (tested with 256GB for non pruned node) as well as a decent always on connection - 3G or 4G is not advised.\n\nWe also do not advise to use this as a wallet at this time, we advise to use this as your personal blockchain anchor when on the go with wallets that support to set a personal node.\n\nThe contributors of ABCore are not liable for any cost or damage caused by the app including but not limited to data charges/penalties.\n\nAcknowledgement\n---------------\n\n- Development\n\nLawrence Nahum\ntwitter.com/LarryBitcoin\n\n- Graphic Content\n\nOttavio Fontolan\notta88.box (at) gmail (dot) com\n\n- Testing & UX\n\nGabriele Domenichini\ntwitter.com/gabridome\n\n- Community Manager\n\nTimothy Redaelli\ntwitter.com/drizztbsd\ntimothy.redaelli (at) gmail (dot) com\n\nSpecial thanks to the [Bitcoin Core dev team](https://bitcoincore.org/), the [Arch Linux](https://www.archlinux.org/) teams and to [Alessandro Polverini](https://github.com/Polve) for the [Java RPC client](https://github.com/Polve/JavaBitcoindRpcClient).\n"
 },
 {
  "repo": "guerrerocarlos/bitcoin-miner",
  "language": "JavaScript",
  "readme_contents": "# bitcoin-miner [![Build Status](https://travis-ci.org/guerrerocarlos/bitcoin-miner.svg?branch=master)](https://travis-ci.org/guerrerocarlos/bitcoin-miner) [![Coverage Status](https://coveralls.io/repos/github/guerrerocarlos/bitcoin-miner/badge.svg?branch=master)](https://coveralls.io/github/guerrerocarlos/bitcoin-miner?branch=master) [![Build status](https://ci.appveyor.com/api/projects/status/lvq1mnsbdo8l2cv4?svg=true)](https://ci.appveyor.com/project/guerrerocarlos/bitcoin-miner) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n\n\n> Super-slow yet very educative Bitcoin miner (BTC/BCH) in Javascript\n\n## Install\n\n```\n$ npm install bitcoin-miner\n```\n\n\n## Usage\n\n\n\n```js\nconst BTCMiner = require('bitcoin-miner');\n// View this block in Block Explorer:  https://insight.bitpay.com/block/00000000000000000020cf2bdc6563fb25c424af588d5fb7223461e72715e4a9\n// Get it in JSON format: https://insight.bitpay.com/api/block/00000000000000000020cf2bdc6563fb25c424af588d5fb7223461e72715e4a9\nconst block = {\n\tversion: 536870912,\n\tpreviousblockhash: '00000000000000000061abcd4f51d81ddba5498cff67fed44b287de0990b7266',\n\tmerkleroot: '871148c57dad60c0cde483233b099daa3e6492a91c13b337a5413a4c4f842978',\n\ttime: 1515252561,\n\tbits: '180091c1'\n};\nlet nonce = 45291990 // initial nonce\n\nconst miner = new BTCMiner(block);\n\n// Calculate the target based on current difficulty for this block (block.bits)\nconst target = miner.getTarget();\nconsole.log('The target for this block is:');\nconsole.log(target.toString('hex'));\n\nlet hash;\nlet found = false;\n\nconsole.log('\\n[Start Mining with initial nonce:', nonce, ']');\nwhile (nonce < (45291990+10000) && !found) { // check the next 1000 nonces starting from 45291990\n\thash = miner.getHash(nonce);\n\tfound = miner.checkHash(hash);\n\tconsole.log(hash.toString('hex'), nonce, found ? '<- nonce FOUND!!' : '');\n\tif (found) {\n\t\tminer.verifyNonce(block, nonce);\n\t}\n\tnonce++;\n}\n\n```\n## Example Output\n\n![Terminal Output](https://raw.githubusercontent.com/guerrerocarlos/bitcoin-miner/master/screenshot.png)\n\n## API\n\n### getTarget()\n\nReturns the target `Buffer` for that block based on it's **bits** (difficulty).\n\n### getHash(nonce)\n\nReturns the sha256sha256 hash `Buffer` for that block's **nonce**.\n\n### checkHash(hash)\n\nReturns a `Boolean` with **true** if the hash is lower than the target and viceversa.\n\n### checkHash(block, hash)\n\nPrint colored verification of the *hash* against the *target* on the console (the code shows another way to build the block header in javascript).\n\n\n## Related\n\n- [Bitcoin mining the hard way: the algorithms, protocols, and bytes](http://www.righto.com/2014/02/bitcoin-mining-hard-way-algorithms.html) - Inspiration for this module.\n- [What is (bitcoin) \"difficulty\"](https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty) - Bitcoin Difficulty calculations and algorithms.\n\n\n## License\n\nMIT \u00a9 [Carlos Guerrero](https://carlosguerrero.com)\n"
 },
 {
  "repo": "CyberPunkMetalHead/bitcoin-bot-buy-if-elon-tweets",
  "language": "Python",
  "readme_contents": "DESCRIPTION\n\nThis bot is designed to buy bitcoin every time Elon musk tweets about bitcoin with the following parameters:\n\nThe bot will open a buy position on bitcoin every time Elon mentions bitcoin in his tweet\nTake profit is set to 10% and stop loss to 5%\nThe bitcoin bot will not place another trade if there is already an active trade (can be adjusted) \n\nThe bot uses the Tweepy API and a Twitter developer account that you will need access to, as well as a MetaTrader 5 account.\n\nFor a detailed guide on how to set up all the resources you need for this project please visit: https://www.cryptomaton.org/2021/03/21/program-a-trading-bot-to-buy-bitcoin-when-musk-tweets-about-it\n\nUSE CASES\n\nThis particular project is mainly built for fun and the novelty of it. it has not been tested on a live account and there isn't any details analysis to suggest this might work. \nIf you do test this, please share the results!\n\nWant to collaborate? Get in touch."
 },
 {
  "repo": "rokj/bitcoin_dealer",
  "language": "Python",
  "readme_contents": "Bitcoin dealer\r\n==============\r\n\r\nBitcoin dealer is simple Django program (trading bot) for trading bitcoins currently only on Bitstamp exchange.\r\n\r\nAlthough program is really simple, it supports [stop orders](https://en.wikipedia.org/wiki/Order_%28exchange%29#Stop_orders) and maybe something more, but I am not really familiar with trading techniques and jargon.\r\n\r\nProgram is most useful for those who do not have time to watch price of bitcoin all the time, have a PC running all the time and know how to write few \"Hello worlds\" with two if cases.\r\n\r\nInstallation\r\n------------\r\n* Register on Bitstamp - https://www.bitstamp.net/\r\n* Install Django - https://www.djangoproject.com/\r\n* Run: git clone git@github.com:rokj/bitcoin_dealer.git\r\n* Install and configure database you will use.\r\n* Change database settings in settings.py.\r\n* Run: python manage.py syncdb This will create database schema, tables and load intial_data.json to database.\r\n* Change following variables in settings.py (under EXCHANGES):\r\n - bitstamp -> key = 'you get this in mtgox admin page'\r\n - bitstamp -> secret = 'you get this also in mtgox admin page'\r\n - check_interval = 2\r\n - bd_debug = True\r\n* Set DEBUG to True in settings.py and set TEMPLATE_DEBUG to DEBUG.\r\n* Start trading script with in root bitcoin dealer folder like:\r\n  python -u scripts/dealing.py\r\n* Start webserver in bitcoin_dealer's folder like:\r\n  python manage.py runserver 8000\r\n* Goto http://127.0.0.1:8000/admin/ and trade.\r\n* (optional) you can set crontab script for checking if bitcoin_dealer is running. If not, you get an email. See bin/bitcoin_dealer.sh. You can add something like */15 * * * * /programs/bitcoin_dealer/bin/bitcoin_dealer.sh to crontab for 15 minutes checking.\r\n\r\nScreenshots\r\n-----------\r\n\r\nClick to view.\r\n[![add trade](https://github.com/rokj/bitcoin_dealer/raw/master/screenshots/trade-1.png)](https://github.com/rokj/bitcoin_dealer/raw/master/screenshots/trade-1.png)\r\n[![edit trade](https://github.com/rokj/bitcoin_dealer/raw/master/screenshots/trade-2.png)](https://github.com/rokj/bitcoin_dealer/raw/master/screenshots/trade-2.png)\r\n[![trades](https://github.com/rokj/bitcoin_dealer/raw/master/screenshots/trades.png)](https://github.com/rokj/bitcoin_dealer/raw/master/screenshots/trades.png)\r\n\r\nTroubleshooting\r\n---------------\r\nIf paths for running script cannot be found and you get errors, set following variables:\r\n\r\nexport DJANGO_SETTINGS_MODULE=bitcoin_dealer.settings\r\n\r\nexport PYTHONPATH=$PYTHONPATH:/your_path_to_one_path_less_than_bitcoin_dealer/ \r\n\r\nbitcoin_dealer is the name of the folder you have cloned this project. If you have bitcoin_dealer in **/programs/bitcoin_dealer/** then you should export **PYTHONPATH=$PYTHONPATH:/programs/**.\r\n\r\nInfo\r\n----\r\nRight now you should not change status of trades, since API v1 still does not support that (but it will have effect on other related trades if you change status from **selling** to **sold** for example). Just leave it as it is. If you would like cancel trade, go to your Bitstamp account and cancel trades/orders; but be careful to deactivate/cancel related first.\r\n\r\nWARNING\r\n-------\r\nWatch out, settings.py should be accessible only to you, your account and with your permissions.\r\n\r\nProgram works correctly only if you have enough funds (bitcoins, $, \u20ac, ...) on your Bitstamp account. There is no checking if you do not have enough coins or money on your account.\r\n\r\nEvery time you do \"python manage.py syncdb\" tables exchange_currency, exchange_exchange and exchange_exchange_currencies will be overwritten by data from initial_data.json.\r\n\r\nThere is no [south](http://south.aeracode.org/) or similar support implemented. There are database differences between revisions. At worst case, backup old database, do \"python manage.py syncdb\" and \"restore by hand\".\r\n\r\nYou like these few lines of code, you find it useful or want new feature? \r\n----------------------------------------\r\nYou can donate a bitcoin or few:\r\n1MC1BSkwD45gAuQ8mvXtD1RZWhNtxGV1ho\r\n\r\nHelp\r\n----\r\nSee AUTHORS.\r\n\r\nDevelopers\r\n----------\r\nWith little effort, support for other exchanges can be added also. Database models and program itself is designed with that in mind. However, script which is responsible for trading (scripts/dealing.py), supports Bitstamp, Mtgox. But until good fairy comes and saves Mtgox and Kerpeles, Mtgox exchange is disabled by default.\r\n"
 },
 {
  "repo": "jgarzik/pynode",
  "language": "Python",
  "readme_contents": "\nThis python script (node.py) is a client node for the bitcoin\nnetwork.  It is based on ArtForz' public domain half-a-node at\nhttp://pastebin.com/ZSM7iHZw\n\nIn its current form, node.py does nothing more than listen for new\ntransactions and blocks, perform verification checks on the data, and\nstore them in a database.  Script verification is a separate, manual\nprocess (testscript.py).  It is therefore not safe for general use.\nSee BUGS and TODO files.  A simple HTTP server for JSON-RPC API calls\nis also included.  Send the \"help\" RPC call for a list of supported\ncommands.\n\nIt might be useful as the base for a P2P monitoring node, or similar\ntasks.\n\nDependencies:\n\n\tpython-bitcoinlib, https://github.com/jgarzik/python-bitcoinlib\n\tGEvent, http://www.gevent.org/\n\tpython-leveldb, http://code.google.com/p/py-leveldb/\n\nCommand line usage:\n\n\t./node.py my-config-file\n\nThe configuration file is a key=value text file, with the following settings:\n\n\t# hostname or IP address of network node to connect to\n\thost=127.0.0.1\n\n\t# port of network node to connect to (default: 8333)\n\tport=8333\n\n\t# JSON-RPC server user, password.  Uses HTTP Basic authentication.\n\trpcuser=XXXX\n\trpcpass=YYYY\n\n\t# JSON-RPC server incoming TCP port (default: 9332)\n\trpcport=9332\n\n\t# database directory\n\tdb=/tmp/chaindb\n\n\t# log filename, or '-' or no-value for standard output\n\tlog=/tmp/chaindb/node.log\n\n\t# if present, import these blocks into the block database\n\tloadblock=/tmp/blk0001.dat\n\n\t# if present, disable all signature checking in new blocks\n\t# (disabled by default)\n\tnosig=1\n\n\t# if present, force signature checking on all blocks,\n\t# even those normally skipped because they were prior\n\t# to a checkpoint.\n\t# (disabled by default)\n\tforcesig=1\n\nnode.py connects to a single remote node, and does not accept incoming\nP2P connections.  If the connection is lost, node.py exits.\n\nSee the \"mini-node\" branch for a single-file, non-chaindb node.\n\n"
 },
 {
  "repo": "ACINQ/bitcoin-lib",
  "language": "Scala",
  "readme_contents": "# Simple Scala Bitcoin Library\n\n[![Build Status](https://github.com/ACINQ/bitcoin-lib/workflows/Build%20&%20Test/badge.svg)](https://github.com/ACINQ/bitcoin-lib/actions?query=workflow%3A%22Build+%26+Test%22)\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](LICENSE)\n\n## Overview\n\nThis is a simple scala library which implements most of the bitcoin protocol:\n\n* base58 encoding/decoding\n* block headers, block and tx parsing\n* tx creation, signature and verification\n* script parsing and execution (including OP_CLTV and OP_CSV)\n* standard scripts (p2pkh, p2sh, p2wpkh, p2wsh)\n* BIP 32 (deterministic wallets)\n* BIP 39 (mnemonic code for generating deterministic keys)\n* BIP 173 (Base32 address format for native v0-16 witness outputs)\n* BIP 174 (Partially Signed Bitcoin Transaction Format)\n* BIP 350 (Bech32m format)\n\nIt is actually a wrapper on top of our [Kotlin Bitcoin Library](https://github.com/ACINQ/bitcoin-kmp) that makes it easier to use in scala projects.\nAll the features are implemented in Kotlin in the `fr.acinq.bitcoin` namespace and the scala wrappers can be found in the `fr.acinq.bitcoin.scalacompat` namespace.\n\n## Objectives\n\nOur goal is not to re-implement a full Bitcoin node but to build a library that can be used to build applications that rely on bitcoind to interface with the Bitcoin network (to retrieve and index transactions and blocks, for example...). We use it very often to build quick prototypes and test new ideas. Besides, some parts of the protocol are fairly simple and \"safe\" to re-implement (BIP32/BIP39 for example), especially for indexing/analysis purposes. And, of course, we use it for our own work on Lightning (see <https://github.com/ACINQ/eclair>).\n\n## Status\n\n* [X] Message parsing (blocks, transactions, ...)\n* [X] Building transactions (P2PK, P2PKH, P2SH, P2WPKH, P2WSH)\n* [X] Signing transactions\n* [X] Verifying signatures\n* [X] Passing core reference tests (scripts & transactions)\n* [X] Passing core reference segwit tests\n* [X] Passing core reference psbt tests\n\n## Configuring maven/sbt\n\n* releases and milestones are pushed to maven central\n* snapshots are pushed to the sonatype snapshot repository\n\n```xml\n <repositories>\n    <repository>\n        <id>sonatype snapshots</id>\n        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n    </repository>\n</repositories>\n\n<dependencies>\n  <dependency>\n    <groupId>fr.acinq</groupId>\n    <artifactId>bitcoin-lib_2.13</artifactId>\n    <version>0.22</version>\n  </dependency>\n</dependencies>\n```\n\nThe latest snapshot (development) version is 0.23-SNAPSHOT, the latest released version is 0.22.\n\n## libsecp256k1 support\n\nBitcoin-lib embeds JNI bindings for libsecp256k1 through [secp256k1-kmp](https://github.com/ACINQ/secp256k1-kmp/).\nIt will extract and load native bindings for your operating system in a temporary directory.\n\nJNI libraries are included for:\n\n* Linux 64 bits\n* Windows 64 bits\n* Osx 64 bits\n\nPlease have a look at the [secp256k1-kmp documentation](https://github.com/ACINQ/secp256k1-kmp/) for advanced scenarios.\n\n## Usage\n\nPlease have a look at unit tests of this library and of [bitcoin-kmp](https://github.com/ACINQ/bitcoin-kmp), they will contain the most up-to-date samples.\n\n### Basic type: public keys, private keys, addresses\n\nWe defined only a limited set of specific types (private keys, public keys). There is a simple BinaryData type\nthat can be used to convert to/from Array[Byte], Seq[Byte], and hexadecimal Strings.\n\nAs much as possible, the library uses and produces raw binary data, without fancy wrapper types and encoding. This should\nmake importing/exporting data from/to other libraries easy. It also makes it easy to use binary data used in examples, books,\nor produced by debugging tools.\n\nThe following REPL session shows how to create and use keys and addresses:\n\n```shell\nmvn scala:console\nscala> import fr.acinq.bitcoin._\nimport fr.acinq.bitcoin._\n\nscala> import fr.acinq.bitcoin.scalacompat.Crypto._\nimport fr.acinq.bitcoin.scalacompat.Crypto._\n\nscala> import scodec.bits._\nimport scodec.bits._\n\nscala> val priv = PrivateKey(hex\"1e99423a4ed27608a15a2616a2b0e9e52ced330ac530edcc32c8ffc6a526aedd\")\npriv: fr.acinq.bitcoin.Crypto.PrivateKey = PrivateKey(1e99423a4ed27608a15a2616a2b0e9e52ced330ac530edcc32c8ffc6a526aedd)\n\nscala> val pub = priv.publicKey\npub: fr.acinq.bitcoin.Crypto.PublicKey = PublicKey(03f028892bad7ed57d2fb57bf33081d5cfcf6f9ed3d3d7f159c2e2fff579dc341a)\n\nscala> Base58Check.encode(Base58.Prefix.PubkeyAddress, pub.hash160)\nres0: String = 1J7mdg5rbQyUHENYdx39WVWK7fsLpEoXZy\n\nscala> priv.toBase58(Base58.Prefix.SecretKey)\nres2: String = KxFC1jmwwCoACiCAWZ3eXa96mBM6tb3TYzGmf6YwgdGWZgawvrtJ\n```\n\n### Building and verifying transactions\n\nThe Transaction class can be used to create, serialize, deserialize, sign and validate bitcoin transactions.\n\n#### P2PKH transactions\n\nA P2PKH transactions sends bitcoins to a public key hash, using a standard P2PKH script:\n\n``` scala\nval pkh = pubKey.hash160\nval pubKeyScript = OP_DUP :: OP_HASH160 :: OP_PUSHDATA(pkh) :: OP_EQUALVERIFY :: OP_CHECKSIG :: Nil\n```\n\nTo spend it, just provide a signature and the public key:\n\n```scala\nval sigScript = OP_PUSHDATA(sig) :: OP_PUSHDATA(pubKey.toBin) :: Nil\n```\n\nThis sample demonstrates how to serialize, create and verify simple P2PKH transactions.\n\n```scala\n    // simple pay to PK tx\n\n    // we have a tx that was sent to a public key that we own\n    val to = \"mi1cMMSL9BZwTQZYpweE1nTmwRxScirPp3\"\n    val (Base58.Prefix.PubkeyAddressTestnet, pubkeyHash) = Base58Check.decode(to)\n    val amount = 10000 sat\n\n    val privateKey = PrivateKey.fromBase58(\"cRp4uUnreGMZN8vB7nQFX6XWMHU5Lc73HMAhmcDEwHfbgRS66Cqp\", Base58.Prefix.SecretKeyTestnet)._1\n    val publicKey = privateKey.publicKey\n\n    val previousTx = Transaction.read(\"0100000001b021a77dcaad3a2da6f1611d2403e1298a902af8567c25d6e65073f6b52ef12d000000006a473044022056156e9f0ad7506621bc1eb963f5133d06d7259e27b13fcb2803f39c7787a81c022056325330585e4be39bcf63af8090a2deff265bc29a3fb9b4bf7a31426d9798150121022dfb538041f111bb16402aa83bd6a3771fa8aa0e5e9b0b549674857fafaf4fe0ffffffff0210270000000000001976a91415c23e7f4f919e9ff554ec585cb2a67df952397488ac3c9d1000000000001976a9148982824e057ccc8d4591982df71aa9220236a63888ac00000000\")\n\n    // create a transaction where the sig script is the pubkey script of the tx we want to redeem\n    // the pubkey script is just a wrapper around the pub key hash\n    // what it means is that we will sign a block of data that contains txid + from + to + amount\n\n    // step  #1: creation a new transaction that reuses the previous transaction's output pubkey script\n    val tx1 = Transaction(\n      version = 1L,\n      txIn = List(\n        TxIn(OutPoint(previousTx, 0), signatureScript = Nil, sequence = 0xFFFFFFFFL)\n      ),\n      txOut = List(\n        TxOut(amount = amount, publicKeyScript = OP_DUP :: OP_HASH160 :: OP_PUSHDATA(pubkeyHash) :: OP_EQUALVERIFY :: OP_CHECKSIG :: Nil)\n      ),\n      lockTime = 0L\n    )\n\n    // step #2: sign the tx\n    val sig = Transaction.signInput(tx1, 0, previousTx.txOut(0).publicKeyScript, SIGHASH_ALL, 0 sat, SigVersion.SIGVERSION_BASE, privateKey)\n    val tx2 = tx1.updateSigScript(0, OP_PUSHDATA(sig) :: OP_PUSHDATA(publicKey) :: Nil)\n\n    // redeem the tx\n    Transaction.correctlySpends(tx2, Seq(previousTx), ScriptFlags.MANDATORY_SCRIPT_VERIFY_FLAGS)\n```\n\n#### P2SH transactions\n\nA P2SH transactions sends bitcoins to a script hash:\n\n```scala\nval redeemScript = Script.createMultiSigMofN(2, Seq(pub1, pub2, pub3 ))\nval multisigAddress = Crypto.hash160(redeemScript)\nval publicKeyScript = OP_HASH160 :: OP_PUSHDATA(multisigAddress) :: OP_EQUAL :: Nil\n```\n\nTo spend it, you must provide data that will match the public key script, and the actual public key script. In our case,\nwe need 2 valid signatures:\n\n```scala\nval redeemScript = Script.createMultiSigMofN(2, Seq(pub1, pub2, pub3 ))\nval sigScript = OP_0 :: OP_PUSHDATA(sig1) :: OP_PUSHDATA(sig2) :: OP_PUSHDATA(redeemScript) :: Nil\n```\n\nThis sample demonstrates how to serialize, create and verify a multisig P2SH transaction\n\n```scala\n    val priv1 = PrivateKey.fromBase58(\"cV7LGVeY2VPuCyCSarqEqFCUNig2NzwiAEBTTA89vNRQ4Vqjfurs\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub1 = priv1.publicKey\n    val address1 = Base58Check.encode(Base58.Prefix.PubkeyAddressTestnet, Crypto.hash160(pub1.value))\n\n    assert(address1 == \"mp4eLFx7CpifAJxnvCZ3FmqKsh9dQmi5dA\")\n\n    val priv2 = PrivateKey.fromBase58(\"cV7LGVeY2VPuCyCSarqEqFCUNig2NzwiAEBTTA89vNRQ4Vqjfurs\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub2 = priv2.publicKey\n\n    val priv3 = PrivateKey.fromBase58(\"cRp4uUnreGMZN8vB7nQFX6XWMHU5Lc73HMAhmcDEwHfbgRS66Cqp\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub3 = priv3.publicKey\n\n    // this is a standard tx that sends 0.05 BTC to mp4eLFx7CpifAJxnvCZ3FmqKsh9dQmi5dA\n    val tx1 = Transaction.read(\"020000000001016ecc08b535a0c774234419dee508867ace1535a0d256d6b2aa19942441777336000000002322002073bb471aa121fbdd95942eabb5e665d66e71542e6e075c8392cd0df72a075b72fdffffff02803823030000000017a914d3c15be7951c9de644bdf9e22dcbcb77550c4ae487404b4c00000000001976a9143545b2a6659dbe5bdf841d1158135be184d81d3688ac0400473044022041cac92405e4e3215c2f9c27a67ff0792c8fb76e4182023fed081f541f4563e002203bd04d4d810ef8074aeb26a19e01e1ee1a40ad83e4d0ac2c614b8cb22825d2ae0147304402204c947b46ea480419c04098a56a5219bb1f491b07e12926fb6f304132a1f1e29e022078cc9f004c74d6c3c2b2dfcca6385d2fabe44d4eadb027a0d764e1ab9d7f09190147522102be608bf8904326b4d0ec9346aa348773fe51ee70338849acd2dd710b73bf611a2103627c19e40f67c5ee8b44df85ee911b7e978869fa5a3de1d972a461f47ea349e452ae90bb2300\", pversion)\n\n    // now let's create a simple tx that spends tx1 and send 0.049 BTC to a P2WSH output\n    val tx2 = {\n      // our script is a 2-of-2 multisig script\n      val redeemScript = Script.createMultiSigMofN(2, Seq(pub2, pub3))\n      val tmp = Transaction(version = 1,\n        txIn = TxIn(OutPoint(tx1.hash, 0), sequence = 0xffffffffL, signatureScript = ByteVector.empty) :: Nil,\n        txOut = TxOut(0.049 btc, Script.pay2wsh(redeemScript)) :: Nil,\n        lockTime = 0\n      )\n      val sig = Transaction.signInput(tmp, 0, tx1.txOut(0).publicKeyScript, SIGHASH_ALL, 0 sat, SigVersion.SIGVERSION_BASE, priv1)\n      tmp.updateSigScript(0, OP_PUSHDATA(sig) :: OP_PUSHDATA(priv1.publicKey) :: Nil)\n      //Transaction.sign(tmp, Seq(SignData(tx1.txOut(0).publicKeyScript, priv1)))\n    }\n    Transaction.correctlySpends(tx2, Seq(tx1), ScriptFlags.STANDARD_SCRIPT_VERIFY_FLAGS)\n    assert(tx2.txid == ByteVector32(hex\"2f8360a06a31ca642d717b1857aa86b3306fc554fa9c437d88b4bc61b7f2b3e9\"))\n    // this tx was published on testnet as 2f8360a06a31ca642d717b1857aa86b3306fc554fa9c437d88b4bc61b7f2b3e9\n\n    // and now we create a testnet tx that spends the P2WSH output\n    val tx3 = {\n      val tmp: Transaction = Transaction(version = 1,\n        txIn = TxIn(OutPoint(tx2.hash, 0), sequence = 0xffffffffL, signatureScript = ByteVector.empty) :: Nil,\n        txOut = TxOut(0.048 btc, Script.pay2wpkh(pub1)) :: Nil,\n        lockTime = 0\n      )\n      val pubKeyScript = Script.write(Script.createMultiSigMofN(2, Seq(pub2, pub3)))\n      val sig2 = Transaction.signInput(tmp, 0, pubKeyScript, SIGHASH_ALL, tx2.txOut(0).amount, SigVersion.SIGVERSION_WITNESS_V0, priv2)\n      val sig3 = Transaction.signInput(tmp, 0, pubKeyScript, SIGHASH_ALL, tx2.txOut(0).amount, SigVersion.SIGVERSION_WITNESS_V0, priv3)\n      val witness = ScriptWitness(Seq(ByteVector.empty, sig2, sig3, pubKeyScript))\n      tmp.updateWitness(0, witness)\n    }\n\n    Transaction.correctlySpends(tx3, Seq(tx2), ScriptFlags.STANDARD_SCRIPT_VERIFY_FLAGS)\n    assert(tx3.txid == ByteVector32(hex\"4817f79def9d9f559ddaa636f0c196e79f31bc959feead77b4151733114c652a\"))\n    // this tx was published on testnet as 4817f79def9d9f559ddaa636f0c196e79f31bc959feead77b4151733114c652a\n```\n\n#### P2WPKH transactions\n\nThis is the simplest segwit transaction, equivalent to standard P2PKH transactions but more compact:\n\n```scala\nval pkh = pubKey.hash160\nval pubKeyScript = OP_0 :: OP_PUSHDATA(pkh) :: Nil\n```\n\nTo spend them, you provide a witness that is just a push of a signature and the actual public key:\n\n```scala\nval witness = ScriptWitness(sig :: pubKey :: Nil))\n```\n\nThis sample demonstrates how to serialize, create and verify a P2WPKH transaction\n\n```scala\n    val priv1 = PrivateKey.fromBase58(\"cV7LGVeY2VPuCyCSarqEqFCUNig2NzwiAEBTTA89vNRQ4Vqjfurs\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub1 = priv1.publicKey\n    val address1 = Base58Check.encode(Base58.Prefix.PubkeyAddressTestnet, Crypto.hash160(pub1.value))\n\n    assert(address1 == \"mp4eLFx7CpifAJxnvCZ3FmqKsh9dQmi5dA\")\n\n    // this is a standard tx that sends 0.04 BTC to mp4eLFx7CpifAJxnvCZ3FmqKsh9dQmi5dA\n    val tx1 = Transaction.read(\"02000000000101516508384a3e006340f1ea700eb3635330beed5d94c7b460b6b495eb1593d55c0100000023220020a5fdf5b5f2c592362b78a50997821964b39dd90476c6e1f3e97e79acb134ca3bfdffffff0200093d00000000001976a9145dbf52b8d7af4fb5f9b75b808f0a8284493531b388aca005071d0000000017a914d77e5f7ca4d9f05dc4f25dc0aa1391f0e901bdfc87040047304402207bfb18327be173512f38bd4120b8f02545321ecc6105a852cbc25b1de687ba570220705a1225d8a8e0fbd4b35f3bc38a2840706f8524e8dc6f0151746aeff14033ce014730440220486925fb0495442e4ccb1b711692af7057d4db24f8775b5dfa3f8c74992081f102203beae7d96423e0c66b7b5f8919a5f3ad89a42dc4303f37201e4e596909478357014752210245119449d07c16992c148e3b33f1395ee05c936fc510d9fae83417f8e1901f922103eb03f67b56c88bccff90b76182c08556eac9ebc5a0efee8669bef69ae6d4ea5752ae75bb2300\", pversion)\n\n    // now let's create a simple tx that spends tx1 and send 0.039 BTC to P2WPKH output\n    val tx2 = {\n      val tmp = Transaction(version = 1,\n        txIn = TxIn(OutPoint(tx1.hash, 0), sequence = 0xffffffffL, signatureScript = ByteVector.empty, witness = ScriptWitness.empty) :: Nil,\n        txOut = TxOut(0.39 btc, Script.pay2wpkh(pub1)) :: Nil,\n        lockTime = 0\n      )\n      val sig = Transaction.signInput(tmp, 0, tx1.txOut(0).publicKeyScript, SIGHASH_ALL, 0 sat, SigVersion.SIGVERSION_BASE, priv1)\n      tmp.updateSigScript(0, OP_PUSHDATA(sig) :: OP_PUSHDATA(priv1.publicKey) :: Nil)\n    }\n    Transaction.correctlySpends(tx2, Seq(tx1), ScriptFlags.STANDARD_SCRIPT_VERIFY_FLAGS)\n    assert(tx2.txid == ByteVector32(hex\"f25b3fecc9652466926237d96e4bc7ee2c984051fe48e61417aba218af5570c3\"))\n    // this tx was published on testnet as f25b3fecc9652466926237d96e4bc7ee2c984051fe48e61417aba218af5570c3\n\n    // and now we create a segwit tx that spends the P2WPKH output\n    val tx3 = {\n      val tmp: Transaction = Transaction(version = 1,\n        txIn = TxIn(OutPoint(tx2.hash, 0), sequence = 0xffffffffL, signatureScript = ByteVector.empty, witness = ScriptWitness.empty) :: Nil,\n        txOut = TxOut(0.038 btc, Script.pay2wpkh(pub1)) :: Nil, // we reuse the same output script but if could be anything else\n        lockTime = 0\n      )\n      // mind this: the pubkey script used for signing is not the prevout pubscript (which is just a push\n      // of the pubkey hash), but the actual script that is evaluated by the script engine, in this case a PAY2PKH script\n      val pubKeyScript = Script.pay2pkh(pub1)\n      val sig = Transaction.signInput(tmp, 0, pubKeyScript, SIGHASH_ALL, tx2.txOut(0).amount, SigVersion.SIGVERSION_WITNESS_V0, priv1)\n      val witness = ScriptWitness(Seq(sig, pub1.value))\n      tmp.updateWitness(0, witness)\n    }\n\n    Transaction.correctlySpends(tx3, Seq(tx2), ScriptFlags.STANDARD_SCRIPT_VERIFY_FLAGS)\n    assert(tx3.txid == ByteVector32(hex\"739e7cba97af259d2c089690adea00aa78b1c8d7995aa9377be58fe5332378aa\"))\n    // this tx was published on testnet as 739e7cba97af259d2c089690adea00aa78b1c8d7995aa9377be58fe5332378aa\n```\n\n#### P2WSH transactions\n\nP2WSH transactions are the segwit version of P2SH transactions:\n\n```scala\nval redeemScript = Script.createMultiSigMofN(2, Seq(pub2, pub3))\nval pubKeyScript = OP_0 :: OP_PUSHDATA(Crypto.sha256(redeemScript)) :: Nil) :: Nil,\n```\n\nTo spend them, you provide data that wil match the publick key script, and the actual public key script:\n\n```scala\nval redeemScript = Script.createMultiSigMofN(2, Seq(pub2, pub3))\nval witness = ScriptWitness(Seq(ByteVector.empty, sig2, sig3, redeemScript))\n```\n\nThis sample demonstrates how to serialize, create and verify a P2WSH transaction\n\n```scala\n    val priv1 = PrivateKey.fromBase58(\"cV5oyXUgySSMcUvKNdKtuYg4t4NTaxkwYrrocgsJZuYac2ogEdZX\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub1 = priv1.publicKey\n    val address1 = Base58Check.encode(Base58.Prefix.PubkeyAddressTestnet, Crypto.hash160(pub1.value))\n\n    assert(address1 == \"mkNdbutRYE3me7wvbwvvJ8XQwbzi56sneZ\")\n\n    val priv2 = PrivateKey.fromBase58(\"cV7LGVeY2VPuCyCSarqEqFCUNig2NzwiAEBTTA89vNRQ4Vqjfurs\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub2 = priv2.publicKey\n\n    val priv3 = PrivateKey.fromBase58(\"cRp4uUnreGMZN8vB7nQFX6XWMHU5Lc73HMAhmcDEwHfbgRS66Cqp\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub3 = priv3.publicKey\n\n    // this is a standard tx that sends 0.05 BTC to mkNdbutRYE3me7wvbwvvJ8XQwbzi56sneZ\n    val tx1 = Transaction.read(\"020000000001016ecc08b535a0c774234419dee508867ace1535a0d256d6b2aa19942441777336000000002322002073bb471aa121fbdd95942eabb5e665d66e71542e6e075c8392cd0df72a075b72fdffffff02803823030000000017a914d3c15be7951c9de644bdf9e22dcbcb77550c4ae487404b4c00000000001976a9143545b2a6659dbe5bdf841d1158135be184d81d3688ac0400473044022041cac92405e4e3215c2f9c27a67ff0792c8fb76e4182023fed081f541f4563e002203bd04d4d810ef8074aeb26a19e01e1ee1a40ad83e4d0ac2c614b8cb22825d2ae0147304402204c947b46ea480419c04098a56a5219bb1f491b07e12926fb6f304132a1f1e29e022078cc9f004c74d6c3c2b2dfcca6385d2fabe44d4eadb027a0d764e1ab9d7f09190147522102be608bf8904326b4d0ec9346aa348773fe51ee70338849acd2dd710b73bf611a2103627c19e40f67c5ee8b44df85ee911b7e978869fa5a3de1d972a461f47ea349e452ae90bb2300\", pversion)\n\n    // now let's create a simple tx that spends tx1 and sends 0.049 BTC to a P2WSH output\n    val tx2 = {\n      // our script is a 2-of-2 multisig script\n      val redeemScript = Script.createMultiSigMofN(2, Seq(pub2, pub3))\n      val tmp = Transaction(version = 1,\n        txIn = TxIn(OutPoint(tx1.hash, 0), sequence = 0xffffffffL, signatureScript = ByteVector.empty) :: Nil,\n        txOut = TxOut(0.049 btc, Script.pay2wsh(redeemScript)) :: Nil,\n        lockTime = 0\n      )\n      val sig = Transaction.signInput(tmp, 0, tx1.txOut(0).publicKeyScript, SIGHASH_ALL, 0 sat, SigVersion.SIGVERSION_BASE, priv1)\n      tmp.updateSigScript(0, OP_PUSHDATA(sig) :: OP_PUSHDATA(priv1.publicKey) :: Nil)\n      //Transaction.sign(tmp, Seq(SignData(tx1.txOut(0).publicKeyScript, priv1)))\n    }\n    Transaction.correctlySpends(tx2, Seq(tx1), ScriptFlags.STANDARD_SCRIPT_VERIFY_FLAGS)\n    assert(tx2.txid == ByteVector32(hex\"2f8360a06a31ca642d717b1857aa86b3306fc554fa9c437d88b4bc61b7f2b3e9\"))\n    // this tx was published on testnet as 2f8360a06a31ca642d717b1857aa86b3306fc554fa9c437d88b4bc61b7f2b3e9\n\n    // and now we create a segwit tx that spends the P2WSH output\n    val tx3 = {\n      val tmp: Transaction = Transaction(version = 1,\n        txIn = TxIn(OutPoint(tx2.hash, 0), sequence = 0xffffffffL, signatureScript = ByteVector.empty) :: Nil,\n        txOut = TxOut(0.048 btc, Script.pay2wpkh(pub1)) :: Nil,\n        lockTime = 0\n      )\n      val pubKeyScript = Script.write(Script.createMultiSigMofN(2, Seq(pub2, pub3)))\n      val sig2 = Transaction.signInput(tmp, 0, pubKeyScript, SIGHASH_ALL, tx2.txOut(0).amount, SigVersion.SIGVERSION_WITNESS_V0, priv2)\n      val sig3 = Transaction.signInput(tmp, 0, pubKeyScript, SIGHASH_ALL, tx2.txOut(0).amount, SigVersion.SIGVERSION_WITNESS_V0, priv3)\n      val witness = ScriptWitness(Seq(ByteVector.empty, sig2, sig3, pubKeyScript))\n      tmp.updateWitness(0, witness)\n    }\n\n    Transaction.correctlySpends(tx3, Seq(tx2), ScriptFlags.STANDARD_SCRIPT_VERIFY_FLAGS)\n    assert(tx3.txid == ByteVector32(hex\"4817f79def9d9f559ddaa636f0c196e79f31bc959feead77b4151733114c652a\"))\n    // this tx was published on testnet as 4817f79def9d9f559ddaa636f0c196e79f31bc959feead77b4151733114c652a\n```\n\n#### Segwit transactions embedded in standard P2SH transactions\n\n```scala\n    val priv1 = PrivateKey.fromBase58(\"cRp4uUnreGMZN8vB7nQFX6XWMHU5Lc73HMAhmcDEwHfbgRS66Cqp\", Base58.Prefix.SecretKeyTestnet)._1\n    val pub1 = priv1.publicKey\n\n    // p2wpkh script\n    val script = Script.write(Script.pay2wpkh(pub1))\n\n    // which we embeed into a standard p2sh script\n    val p2shaddress = Base58Check.encode(Base58.Prefix.ScriptAddressTestnet, Crypto.hash160(script))\n    assert(p2shaddress === \"2NB3GUVxBF3P7NLMkSGNai33mWkM35ht1Xj\")\n\n    // this tx send 0.5 btc to our p2shaddress\n    val tx = Transaction.read(\"02000000000101d9ee0034f9ae4fac7a4017d78e26e1c492d507e16f3535ecbc2ea72cb1c4c6f501000000232200208a15b02dab825f2a4b60b58a7c8591c659a3eb18765fd9d926332c0cea574e2ffdffffff02d292e4000000000017a914aefbc2c20e0c312a616cf7c4ebbacc5c9a04432787404b4c000000000017a914c32f5922344dbe1abd4fb1744b560b5d1875353987040047304402205fbba2ab917efc23209fe04086fb5f714e527d088e2a5ec19590ec4b566a8c2d02206607f3e42eaff5d30dd6297dcb4d48300a75819a358c0bc20396e393ab1594260147304402206a0df35cb8fc58fb21b111d432abc7f9f74836ad1e35c63be2f0c772d4a2ce49022076c4c96a7a9d18577a5e762a3dc3e4b728fd950284c133eb3147707b9181f90b01475221039c40944fe4f90f46760621a1ca66d3141f7e81ccccfa2cf4550fdb9b432c52ed2102976af59e7b61fb3c7a6a2553d7b030a5e292fdda6eba439b4a24af494b3475c752aebebb2300\", pversion)\n\n    // let's spend it:\n\n    val tx1 = {\n      val tmp: Transaction = Transaction(version = 1,\n        txIn = TxIn(OutPoint(tx.hash, 1), sequence = 0xffffffffL, signatureScript = ByteVector.empty) :: Nil,\n        txOut = TxOut(0.049 btc, OP_0 :: OP_PUSHDATA(Crypto.hash160(pub1.value)) :: Nil) :: Nil,\n        lockTime = 0\n      )\n      val pubKeyScript = Script.pay2pkh(pub1)\n      val sig = Transaction.signInput(tmp, 0, pubKeyScript, SIGHASH_ALL, tx.txOut(1).amount, SigVersion.SIGVERSION_WITNESS_V0, priv1)\n      val witness = ScriptWitness(Seq(sig, pub1.value))\n      tmp.updateSigScript(0, OP_PUSHDATA(script) :: Nil).updateWitness(0, witness)\n    }\n\n    Transaction.correctlySpends(tx1, Seq(tx), ScriptFlags.STANDARD_SCRIPT_VERIFY_FLAGS)\n    assert(tx1.txid === ByteVector32(hex\"4807cb10f50df84acd7766245133f902d22d91b7e8bfe77c4bbcb0cf9b017a86\"))\n    // this tx was published on testnet as 4807cb10f50df84acd7766245133f902d22d91b7e8bfe77c4bbcb0cf9b017a86\n```\n\n### Wallet features\n\nBitcoin-lib provides and simple and complete implementation of BIP32 and BIP39.\n\n#### HD Wallet (BIP32)\n\nLet's play with the scala console and the first test vector from https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n\n```shell\nmvn scala:console\n\nscala> import fr.acinq.bitcoin._\nimport fr.acinq.bitcoin._\n\nscala> import scodec.bits._\nimport scodec.bits._\n\nscala> import fr.acinq.bitcoin.DeterministicWallet\nDeterministicWallet   DeterministicWalletSpec\n\nscala> import fr.acinq.bitcoin.DeterministicWallet._\nimport fr.acinq.bitcoin.DeterministicWallet._\n\nscala> val m = generate(hex\"000102030405060708090a0b0c0d0e0f\")\nm: fr.acinq.bitcoin.DeterministicWallet.ExtendedPrivateKey = ExtendedPrivateKey(e8f32e723decf4051aefac8e2c93c9c5b214313817cdb01a1494b917c8436b35,873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d508,0,m,0)\n\nscala> encode(m, xprv)\nres1: String = xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi\n\nscala> publicKey(m)\nres2: fr.acinq.bitcoin.DeterministicWallet.ExtendedPublicKey = ExtendedPublicKey(0339a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c2,873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d508,0,m,0)\n\nscala> encode(publicKey(m), xpub)\nres3: String = xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\n\nscala> val priv = derivePrivateKey(m, KeyPath(\"0'/1/2'/2\"))\npriv: fr.acinq.bitcoin.DeterministicWallet.ExtendedPrivateKey = ExtendedPrivateKey(0f479245fb19a38a1954c5c7c0ebab2f9bdfd96a17563ef28a6a4b1a2a764ef4,cfb71883f01676f587d023cc53a35bc7f88f724b1f8c2892ac1275ac822a3edd,4,m/0h/1/2h/2,4001020172)\n\nscala> encode(priv, xprv)\nres5: String = xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334\n\nscala> encode(publicKey(priv), xpub)\nres6: String = xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV\n\nscala> val k2 = derivePrivateKey(m, KeyPath(\"0'/1/2'\"))\nk2: fr.acinq.bitcoin.DeterministicWallet.ExtendedPrivateKey = ExtendedPrivateKey(cbce0d719ecf7431d88e6a89fa1483e02e35092af60c042b1df2ff59fa424dca,04466b9cc8e161e966409ca52986c584f07e9dc81f735db683c3ff6ec7b1503f,3,m/0'/1/2',3203769081)\n\nscala> val K2 = publicKey(k2)\nK2: fr.acinq.bitcoin.DeterministicWallet.ExtendedPublicKey = ExtendedPublicKey(ByteVector(33 bytes, 0x0357bfe1e341d01c69fe5654309956cbea516822fba8a601743a012a7896ee8dc2),04466b9cc8e161e966409ca52986c584f07e9dc81f735db683c3ff6ec7b1503f,3,m/0'/1/2',3203769081)\n\nscala> derivePublicKey(K2, KeyPath(\"2/1000000000\"))\nres6: fr.acinq.bitcoin.DeterministicWallet.ExtendedPublicKey = ExtendedPublicKey(ByteVector(33 bytes, 0x022a471424da5e657499d1ff51cb43c47481a03b1e77f951fe64cec9f5a48f7011),c783e67b921d2beb8f6b389cc646d7263b4145701dadd2161548a8b078e65e9e,5,m/0'/1/2'/2/1000000000,3632322520)\n\nscala> encode(derivePublicKey(K2, KeyPath(\"2/1000000000\")), xpub)\nres8: String = xpub6H1LXWLaKsWFhvm6RVpEL9P4KfRZSW7abD2ttkWP3SSQvnyA8FSVqNTEcYFgJS2UaFcxupHiYkro49S8yGasTvXEYBVPamhGW6cFJodrTHy\n```\n\n#### Mnemonic code (BIP39)\n\n```shell\nmvn scala:console\n\nscala> import fr.acinq.bitcoin._\nimport fr.acinq.bitcoin._\n\nscala> import scodec.bits._\nimport scodec.bits._\n\nscala> import MnemonicCode._\nimport MnemonicCode._\n\nscala> val mnemonics = toMnemonics(hex\"77c2b00716cec7213839159e404db50d\")\nmnemonics: List[String] = List(jelly, better, achieve, collect, unaware, mountain, thought, cargo, oxygen, act, hood, bridge)\n\nscala> val seed = toSeed(mnemonics, \"TREZOR\")\nseed: scodec.bits.ByteVector = ByteVector(64 bytes, 0xb5b6d0127db1a9d2226af0c3346031d77af31e918dba64287a1b44b8ebf63cdd52676f672a290aae502472cf2d602c051f3e6f18055e84e4c43897fc4e51a6ff)\n```\n"
 },
 {
  "repo": "paxful/EzBitcoin-Api-Wallet",
  "language": "PHP",
  "readme_contents": "\nEzBit Api Server\n====================================\nBitcoin RESTful API JSONRPC Wrapper - PHP\n-----\nMade to be the simplest, fastest way to get your own bitcoin wallet server up and running. Optimized for simplicity and speed towards a MVP. This more than a RPC wrapper it is a full database complete with logs and it does the most vital task of processing incoming transactions which befuddles many who first try and make a bitcoin service. We are using three of this API servers in our systems and it works beautifully and simply.\n\n\nFeatures\n-----\n* Supports multiple accounts so the same server api be used for multiple projects.\n* The Api mimicks <a href=\"http://blockchain.info/merchant\">blockchain.info's merchant api</a> almost exactly so you can switch over easily.\n* Supports Multiple Crypto Currencies. Just install the deamon of the coin, copy the super class file and you are set.\n* Runs on code igniter php framework for small footprint, easy install, secure database orm and mvc model.\n\n\nSecurity\n-----\n* Optional 256 sha hashed api calls\n* Database ORM prepared statements and auto escaping via laravel eloquent model\n* Full logging of all Api requests and all transactions\n* TODO: race conditions prevention via php module ...\n\n\nRequirements\n-----\n* Hardware: linux server with at least 4 gigs of ram. \n* Ubuntu 14 LTS preferred - (dedicated over virtual is preferred to avoid shared memory attacks)\n* Laravel PHP framework (comes included)\n* Composer \n* Nginx 1.7 or later\n* Postgres 9.3\n* PHP 5.4 or later + php-fpm +  Mcrypt module for PHP\n* bare minimum linux command line skills. step by step guide included :)\n\n* Update this server now uses Laravel, a much more robust framework than Codeigniter.\n\nInstall Guide\n-----\nOur goal with this is to introduce bitcoin developement to a whole new class of developers. Thus we have prepared step by step documentation to guide even the greenest newb through the once occulted bitcoin server install process.\n\n* <a href=\"install/readme_install_bitcoind.md\">Installing and Configuring BitcoinD step by step tutorial</a>\n* <a href=\"install/readme_secure_bitcoind.md\">How to Secure your BitcoinD server step by step tutorial</a>\n\n\t\nupdate ubuntu \n--\n\tsudo apt-get update\n\tsudo apt-get upgrade\n\ninstall nginx 1.7\n--\nhttps://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04\n\ninstall php 5.4 + php-fpm\n--\n\ninstall postgres 9.4 *be sure to set localization to English and UTF8.\n--\nhttps://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04\n\n\ninstall composer\n--\nhttps://getcomposer.org/download/\n\nShortcut\n--\nor you can save yourself immense time and use laravel forge for $ a month https://forge.laravel.com\n\n\ncreate a postgres Database named ezbitapi and assign a new username and password. use whatever gui you like pgadmin, navicat razorsql etc..\n--\n\n\t#if you get a LC_CTYPE error when specify UTF8 then you installed postgres with the wrong locale\n\t#utf8 is not necessary but you should always change the locale before installing\n\t#http://crohr.me/journal/2014/postgres-rails-the-chosen-lc-ctype-setting-requires-encoding-latin1.html\n\tsudo locale-gen en_US.UTF-8\n\tsudo pico /etc/default/locale\n\t\t LANG=\"en_US.UTF-8\"\n\t\t LANGUAGE=\"en_US.UTF-8\"\n\t\t LC_CTYPE=\"en_US.UTF-8\"\n\t\t LC_NUMERIC=\"en_US.UTF-8\"\n\t\t LC_TIME=\"en_US.UTF-8\"\n\t\t LC_COLLATE=\"en_US.UTF-8\"\n\t\t LC_MONETARY=\"en_US.UTF-8\"\n\t\t LC_MESSAGES=\"en_US.UTF-8\"\n\t\t LC_PAPER=\"en_US.UTF-8\"\n\t\t LC_NAME=\"en_US.UTF-8\"\n\t\t LC_ADDRESS=\"en_US.UTF-8\"\n\t\t LC_TELEPHONE=\"en_US.UTF-8\"\n\t\t LC_MEASUREMENT=\"en_US.UTF-8\"\n\t\t LC_IDENTIFICATION=\"en_US.UTF-8\"\n\t\t LC_ALL=en_US.UTF-8\n\t\t #save file\n\nget git server files\n\tgit clone https://github.com/easybitz/EzBitcoin-Api-Wallet\n\tmv EzBitcoin-Api-Wallet ezbitapi\n\nchange ownership of all files to running as user and nginx user\n\tchown -R runningasuser:www-data ezbitapi\n\ngive full permissions to storage folder for logs\n\tsudo chmod -R 777 app/storage\n\n\nupdate composer\n--\n\tsudo composer self-update\n\tsudo composer update\n\n\t#if you get an error about mcrypt then install it\n\n\tapt-get install php5-mcrypt\n\t\t#if it still isn't found by composer then you need to link to the right mcrypt.so file\n\t\tsudo updatedb \n\t\tlocate mcrypt.ini\n\t\t#Should show it located at /etc/php5/mods-available\n\t\tlocate mcrypt.so\n\t\t#Edit mcrypt.ini and change extension to match the path to mcrypt.so, example:\n\t\t\textension=/usr/lib/php5/20121212/mcrypt.so\n\t\t#Create symbol links now\n\t\tln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/cli/conf.d/20-mcrypt.ini\n\t\tln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/apache2/conf.d/20-mcrypt.ini\n\t\tphp5enmod mcrypt #- (optional since it may already be enabled)\n\t\tsudo service nginx restart\ufffd\ufffd\ufffd\n\t\tservice php5-fpm restart\n\nif error is reported about the DEBUG file then create a .env.php file in the root\n\tsudo pico .env.php\n\nadd the below settings\n--\n\t<?php\n\treturn array(\n\t 'DEBUG' => true, //false for production\n\t 'TESTNET' => true, //false for production\n\t 'CALLBACK_SECRET' => 'secretgoeshere',\n\t 'APP_SECRET' => '',\n\t 'PRIVATE_INVOICING' => true,\n\t 'ADMIN_EMAIL' => 'admin@domain.com',\n\t 'EMAIL_USERNAME' => 'apisendmail',\n\t 'EMAIL_PASSWORD' => 'emailpassword',\n\t 'DATABASE_DRIVER'   => 'pgsql',\n\t 'DATABASE_NAME'     => 'ezbitapi',\n\t 'DATABASE_USER'     => 'postgres',\n\t 'DATABASE_PASS'     => 'passwordgoeshere',\n\t);\n\nrerun composer update\n\tsudo composer update\n\nin your application create a secure guid (username) password and secret\n--\n\nrun create database\n\tsudo php artisan migrate\n\nseed tables with right values\n\tsudo php artisan db:seed\n\nif you mess up and need to redo the sequence for the tables, after a botched export import from the old api server then\n\t\n\tsu postgres\n\tpsql\n\t\\connect ezbitapi\n\tALTER SEQUENCE balance_id_seq RESTART WITH 1;\n\tALTER SEQUENCE crypto_types_id_seq RESTART WITH 1;\n\tALTER SEQUENCE users_id_seq RESTART WITH 1;\n\tALTER SEQUENCE addresses_id_seq RESTART WITH 2163; #only if importing addresses table. 2163 is the highest id you have + 1\n\tALTER SEQUENCE invoice_addresses_id_seq RESTART WITH 2163; #only if importing invoices_addres atable 2163 is the highest id you have + 1\n\n\t#if you have existing data from the old codeigniter database it is easy to import in as very few database fields have changed, just map them to the right column names and import.\n\t\n\t#users table has callback and notify url's which must be updated\n\t#add a line to the users table with the guid, password and secret to be called from your application\n\t#callback url = \"url of script in your application to process incoming transactions\"\n\t#blocknotifyurl = \"address to handle blocknotify \"\n\t#rpc_connection = http://nikola:DU54293EBJV6JB@127.0.0.1:8332\n\nconfigure nginx to add site\n\tsudo touch /usr/local/nginx/sites-available/ezbitapi\n\tsudo pico /usr/local/nginx/sites-available/ezbitapi\n\n\nconfigure site\n\tserver {\n\t\t\tlisten   81;\n\t\t\troot /home/user/ezbitapi/public;\n\t\t\tindex index.php;\n\t\t\tserver_name 198.111.111.111;\n\t\n\t\t\t#ssl\n\t\t\tlisten 443 ssl;\n\t\t\tssl_certificate /etc/nginx/ssl/certificate.crt;\n\t\t\tssl_certificate_key /etc/nginx/ssl/keyfile.key;\n\t\n\t\t\tlocation / {\n\t\t\t\t try_files $uri $uri/ /index.php$is_args$args;\n\t\t\t}\n\t\n\t\t\t# pass the PHP scripts to FastCGI server listening on /var/run/php5-fpm$\n\t\t\tlocation ~ \\.php$ {\n\t\t\t\t\ttry_files $uri /index.php =404;\n\t\t\t\t\tfastcgi_pass unix:/var/run/php5-fpm.sock;\n\t\t\t\t\tfastcgi_index index.php;\n\t\t\t\t\tfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n\t\t\t\t\tinclude fastcgi_params;\n\t\t\t}\n\t\n\t\t\tlocation ~* .(jpg|jpeg|png|gif|ico|css|js)$ {\n\t\t\t\t\texpires 365d;\n\t\t\t}\n\t}\n\n\nmake a new sym link for each site\n--\n\tsudo ln -s /usr/local/nginx/sites-available/ezbitapi /usr/local/nginx/sites-enabled/ezbitapi\n\tsudo service nginx restart \n\tservice php5-fpm restart\n\nadd firewall rule to add access to apiserver from ip /port if necessary\n--\n\tufw status numbered #get status\n\tufw delete [number] #drop rules\n\tufw allow from 192.168.0.1 to any port 80 \t#allow by ip and port\n\tufw allow 80 \t\t\t\t\t\t\t\t#ufw allow from anywhere to port\n\tufw reload \t\t\t\t\t\t\t\t\t#restart firewall to make new rules take affects\n\n\nupdate bitcoin core to fire callback to the apisevrer via wallet notify\n--\nadd line to bitcoin.conf\n\twalletnotify=/home/user/.bitcoin/walletnotify.sh %s\n\t    \trpcallowip=*.*.*.* is now phased out so use cidr instead\n\t      \trpcallowip=0.0.0.0/0 #allow all ips NOT SECURE, use for testing only\n\t      \trpcallowip=192.168.0.0.1 #ip of app server that will call apiserver\n\nrestart bitcoin core\n\tbitcoin-cli stop\n\tbitcoind\n\t\ncreate walletnotify.sh\n\tsudo pico walletnotify.sh\n\t\n\t\t#!/bin/bash\n\t\tF=/home/cryptoheat/walletnotify_btc_transaction_log\n\t\tD=`date +\"%Y%m%d%H%M%S\"`\n\t\techo ${D} - ${1} >> ${F}\n\t\tcurl 'http://127.0.0.1/api/callback?secret=secretgoeshere&txid='${1}\n\t\n\t  #http://127.0.0.1/api/callback is the url of your api server process route. all incoming btc sends will go to this address, be added to the api server log tables and then a callback will be fired to your web/app server process transaction url.\n\n#####################################################################################\n\n\nPlease join us in making this solve even more problems for people\n-----\n* [BitCoinTalk.org thread](http://bitcointalk.org)\n* [Reddit thread](http://reddit.com)\n* Did you like the project? Donations are welcome 1NDQEjqmdiYG8VQ4u6Sd8oAyGrNtgAvUd8\n\n"
 },
 {
  "repo": "TensorFlowNews/TensorFlow-Bitcoin-Robot",
  "language": "Python",
  "readme_contents": "## \u4e2d\u6587\u8bf4\u660e\n[https://github.com/TensorFlowNews/TensorFlow-Bitcoin-Robot/blob/master/README_CN.MD](https://github.com/TensorFlowNews/TensorFlow-Bitcoin-Robot/blob/master/README_CN.MD)\n\n##  Into\nA Bitcoin trade robot based on Tensorflow LSTM model.Just for fun.\n\n##  DataSet\nThe data is got from https://api.btctrade.com/api/trades?coin=btc with requests.It includes 50 trades of Bitcoin.\nget_trades.py will get the trades and show you with a picture.\n\n![Figure_1.png](http://upload-images.jianshu.io/upload_images/76451-ebba6dc707ab1658.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##  Model\nrnn_predicter.py uses LSTM model.It use 10 trades as input ,if the next price is bigger than the 10st one ,the result is [1,0,0],if the next price is smaller than the 10st one ,the result is [0,0,1],if the next price is equal as 10st one ,the result is [0,1,0].\n\nSo,the [1,0,0] means that the price of Bitcoin will be higher.\n\n##  Result\nhttps://github.com/TensorFlowNews/TensorFlow-Bitcoin-Robot/blob/master/training_result.md\n\n##  More\nFaceRank - Rank Face by CNN Model based on TensorFlow (add keras version).\nhttps://github.com/fendouai/FaceRank\n\n## Blog\nhttp://www.tensorflownews.com/\n\n## Update\n\nmodel saver\n\ndata saver\n\n## WeChatGroup\n![WeChatGroup Pic](https://github.com/fendouai/FaceRank/blob/master/wechatgroup.jpg)\n"
 },
 {
  "repo": "BladeBTC/BladeBTC",
  "language": "PHP",
  "readme_contents": "\n# BladeBTC (UBUNTU 18.04.2 LTS)\nThis application is a telegram bot. The goal of this bot is to create a Bitcoin exchange platform. It allows to send and receive Bitcoin via telegram and a Bitcoin wallet on Blockchain. It guarantees a profit on investments. Users can invest, reinvest and withdraw their Bitcoin at any time via the telegram interface.\n\n## Prerequisites \n\nThis application is designed to be installed on a Linux server on which you have administrator access.\nThis application and the installation script have been tried on a Ubuntu 18.04 LTS server.\n\n- PHP 7.x\n- Linux server (Ubuntu 18.04.2 LTS).\n- Root privileges.\n- Static IP (Public & Private).\n- Open ports 80, 443 (Before using the install script).\n\n```diff\n- This script will only work for Debian based Linux distributions.\n```\n\n```diff\n- Don't forget to open ports before running the install script otherwise the installation will fail.\n```\n\n## Installation\n\n#### Telegram Bot\n\n- Use BotFather on Telegram to create new bot. [BotFather](https://telegram.me/BotFather)\n\nUse this commande in BotFather chat to create new Bot:\n\n```sh\n/newbot\n```\n\n- Save your Telegram Bot API Key for later.\n\nYour API Key should look like this:\n\n```sh\n801650799:AAEYIthu4KWV14ZzKauXb5KdF8cKHRzluRE\n```\n\n#### Blockchain Wallet\n\n- Create new Wallet on Blockchain website. [BlockChain](https://blockchain.info/fr/wallet/#/signup)\n- In Settings / Security - Setup second password for your wallet.\n- In Settings / Security / Advance settings - Withelist your public IP.\n- Save your Wallet ID for later.\n\nYour wallet ID should look like this:\n\n```sh\ncd6c4470-1195-4c44-83d7-7b223a2f8ggd\n```\n\n#### No-IP\n\n- Register new free hostname at [No-IP](https://www.noip.com/) pointing on your server public IP.\n\n#### Server (Installation)\n\n- Download and Install [UBUNTU 18.04.2 LTS](https://www.ubuntu.com/download/server/thank-you?version=18.04.2&architecture=amd64)\n> During the installation process of Ubuntu only select the SSH package.\n\n```diff\n- Make sure to open the following port to your server - 80, 443 before running the install script.\n```\n\nOn your fresh install of Ubuntu 18.04.2 LTS do the following commands :\n\n```sh\nsudo -s\napt-get install git -y\ncd /var/tmp\ngit clone https://github.com/nicelife90/BladeBTC.git\ncd BladeBTC/\nchmod 550 install.sh\n./install.sh\n````\n\n```diff\n- Select option 1 - Install\n```\n\n- Follow the script instruction and give all the required data.\n\n```diff\n- IMPORTANT - Go to your blockchain wallet and withelist your server IP. \n```\n\n\n## Updating / Bot file & GUI file\n\nWhen the bot was installed for the first time you can now get update from github like this:\n\n```sh\nsudo -s\ncd /var/tmp/BladeBTC\n./install.sh\n````\n\n```diff\n- Select option 2 - Update\n```\n\n## GUI / ADMIN PANEL\n\nThe install script enable multiple admin tool to help you to manage your server.\n\n#### PHPMyAdmin\nFrom PHPMyAdmin you can manage all database required by your bot and by the GUI.\n\n**URL:** https://[your_domain]/phpmyadmin\n\n#### BladeBTC GUI\nFrom BladeBTC GUI you can manage multiple options about your Bot.\n\n\n```diff\n- Default Username: bladebtc\n- Default Password: bladebtc\n```\n\n- User (ToDo)\n- Investment Plan\n- Ban (ToDo)\n- Logs\n\n**URL:** https://[your_domain]/gui\n\n## Hidden commands\n\n- /gwb - To get current blockchain wallet balance.\n\n## Warnings and Disclaimers \n\nThis application was created for educational purposes only. It is forbidden to copy, sell and distribute this application in any way. The principle behind this application remains illegal and it is forbidden to make any real use of it. If you decide to break the law, only you can be held responsible and you can ``not`` deny the fact.\n"
 },
 {
  "repo": "bitcoinfullnode/rokos-ok-bitcoin-fullnode",
  "language": null,
  "readme_contents": "![ROKOS-OK](https://i.imgur.com/YYXJ9up.png)\n\nROKOS IoT OK Bitcoin Fullnode and Cryptocurrencies Open Source\n=========================== \n\n### Join the new communications server\n<a href=\"https://discord.io/bitcoin\">\n    <img alt=\"Logo\" src=\"https://discordapp.com/api/guilds/213747404745211904/widget.png?style=banner2\">\n  </a>\n\n* Integrated Cryptocurrencies / Tech in the Fullnode **Core** OS: **Bitcoin, OKCash, BFGminer/CGMiner, Dev tools**  \n  \n* Integrated Cryptocurrencies / Tech in the Fullnode **Flavors** OS: **Bitcoin, OKCash, Gamecredits, Digitalcoin, Blackcoin, Diamondcoin, Energycoin, Europecoin, Soil, Mojo, Transfer, Kobocoin, Dash, MonetaryUnit, OpenBazaar, Expanse and Einsteinium.**\n\n* Project evolution based on feedback/requests/suggestions from: Cryptocurrency developers, Cryptocurrency users and New users to Crypto over any of the public forums (Core, Flavors, Github) where everyone can get involved, participate and/or request for support.\n\n* A Big Thank you: Media authors, Donators, Supporters, Collaborators, The Open Source community, the Crypto community and involved cryptocurrencies communities and developers.\n\nRaspi OK OS for Raspberry PI and IoT Devices (Internet of Things)\n\nNative Bitcoin OKCash and Cryptocurrencies Full Nodes / versions for IoT\n\nROKOS Downloads, Resources, Feedback and Support Threads \n===========================\n\nWebsite Core: http://rokos.space\n\nSupport: https://discord.io/bitcoin\n\nWebsite Github: https://github.com/BitcoinFullnode/rokos.space.website\n\nROKOS Github: https://github.com/BitcoinFullnode/ROKOS-OK-Bitcoin-Fullnode\n\nBTCTalk ROKOS Core support/feedback: https://bitcointalk.org/index.php?topic=1312616.0\n\nBTCTalk ROKOS Flavors support/feedback: https://bitcointalk.org/index.php?topic=1084908.0\n\nWebsite Flavors: http://rokos-flavors.space\n\nRaspberry Forums: https://www.raspberrypi.org/forums/viewtopic.php?f=41&t=112913\n\nPine64 Forums: https://forum.pine64.org/archive/index.php?thread-2483.html\n\n\nCoverage at Nasdaq - CES2017 among others:\n\nhttp://www.nasdaq.com/article/fintech-at-ces-mastercard-and-rokos-shake-things-up-cm734192\n\nCoverage at TechCrunch - CES2016 among others: \n\nhttp://techcrunch.com/2016/01/04/the-rokos-core-os-turns-your-raspberry-pi-into-a-bitcoin-node/\n\nhttp://letstalkpayments.com/fintech-at-ces-mastercard-coin-rokos-samsung-and-softbank-are-making-waves/\n\n\nReleases\n===========================\n\n**#ROKOS [flavors] for Raspberry Pi [All] (X1) - February 21 2021**\n\nIntegrated: Bitcoin 0.21 + Okcash 6.9.0.6 + Litecoin 0.18.1 + Dash 0.16.1.1 + Blackcoin more 2.13.2.7 + Monetary Unit 2.2 + Dev tools and deps\n\nDownload:\nhttps://sourceforge.net/projects/rokos-crypto-full-node-os/files/ROKOS-FLAVORS/ROKOS-FLAVORS-RASPBERRY/\n\n\n**#ROKOS [core] for Raspberry Pi [All] (X1) - February 19 2021**\n\nIntegrated: Bitcoin 0.21 + Okcash 6.9.0.6 / Full Node + Dev tools and deps\n\nDownload:\nhttps://sourceforge.net/projects/rokos-bitcoin-full-node/files/ROKOS-CORE/ROKOS-CORE-RASPBERRY/\n\n**#ROKOS [core] for Pine64+ (v10) - February 06 2020**\n\nIntegrated: Bitcoin + Okcash / Full Node + Dev tools and deps\n\nDownload:\nhttps://sourceforge.net/projects/rokos-bitcoin-full-node/\n\n**#ROKOS [flavors] for Raspberry Pi, zero, 2, 3, 4 (v10) - January 25 2020**\n\nIntegrated: Bitcoin, Okcash, Bitcoin cash, Litecoin, Dash, Dogecoin, Qtum, Navcoin, Blackcoin, Einsteinium, Diamond, Monetary Unit\n\nDownload:\nhttps://sourceforge.net/projects/rokos-crypto-full-node-os/\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3, 4 (v10) - January 11 2020**\n\nIntegrated: Bitcoin + Okcash / Full Node + BFGminer / CGMiner + Dev tools and deps\n\nDownload:\nhttps://sourceforge.net/projects/rokos-bitcoin-full-node/\n\n**#ROKOS [flavors] for Raspberry Pi, zero, 2, 3 (v9) - January 26 2019 - Private.Internal.Testing**\n\nIntegrated: Bitcoin, OKCash, Gamecredits, Digitalcoin, Blackcoin, Diamondcoin, Energycoin, Soil, Transfer, Dash, MonetaryUnit\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3 (v9) - November 20 2018 - Private.Internal.Testing**\n\nIntegrated: OKCash + Bitcoin / Full Node + CGMiner deps\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3 (v8) - April 7 2017**\n\nIntegrated: OKCash + Bitcoin / Full Node + Open Bazaar Server / CGMiner deps\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3 (v7) - October 31 2016**\n\nIntegrated: OKCash + Bitcoin / Full Node + Open Bazaar Server\n\n**#ROKOS [core] for Pine64+ (v7) - October 28 2016**\n\nIntegrated: OKCash + Bitcoin / Full Node + Open Bazaar Server\n\nDownload:\nhttp://bit.ly/rokos7corepine64\n\n**#ROKOS [flavors] for Raspberry Pi, zero, 2, 3 (v6) - May 10 2016**\n\nIntegrated: Bitcoin, OKCash, Gamecredits, Digitalcoin, Blackcoin, Diamondcoin, Energycoin, Europecoin, Metalcoin, Soil, Mojo, Transfer, Kobocoin, Dash, Horizon, MonetaryUnit, OpenBazaar and Expanse. / Full Nodes / Clients\n\nDownload (Gdrive): \nhttp://bit.ly/rokos6magicflavors\n\n**#ROKOS [flavors] for Raspberry Pi 2 (v5) - March 07 2016**\n\nIntegrated: BTC, OK, GMC, BLK, DMD, DGC, ENRG, ERC, METAL, MOJO, SOIL, TX / Full Nodes / Clients\n\n**#ROKOS [core] BTC for BananaPi PRO (v4) - Jan 21 2016**\n\nIntegrated: Bitcoin / Full Node\n\nDownload (Gdrive): \nhttp://bit.ly/rokos4coreBanana\n\n**#ROKOS [core] BTC for RaspberryPI 2 (v4) - Dec 25 2015**\n\nIntegrated: OKCash synced + Bitcoin / Full Node\n\n**#ROKOS [core] BTC for RaspberryPI 2 (v3) - Dec 19 2015**\n\nIntegrated: OKCash synced + Bitcoin / Full Node\n\n**#ROKOS [core] for RaspberryPI B+ / 2  (v2) - Jun 30 2015**\n\nIntegrated: OKCash synced + Bitcoin + Litecoin + Dogecoin / Full Node\n\n**#ROKOS [core] for RaspberryPi B+ / 2 (v1) - Jun 9 2015**\n\nIntegrated: OKCash Synced Wallet\n\n**#ROKOS [core] for RaspberryPi Model B+ (v0.alpha-beta) - Dec 21 2014 - Closed alpha-beta.**\n\nIntegrated: OKCash Wallet\n\n\nDonations and Support\n===========================\n\n* ROKOS is Open Source and shared/released for free, If it helped your project or you like the work and feel kind and would like to help ROKOS grow continuously, you can support the project with a donation at:\n\n**BTC**  3FsGJZMQMnf9hJf1oLayJo2gsmwcit6XAj\n\n**OK**  P9LeQGwcfPs3vYwJ19e1odvaKdJj7wiUut\n"
 },
 {
  "repo": "TheZ3ro/bitcoin-privatekey-db",
  "language": "HTML",
  "readme_contents": "# Bitcoin private key database\nA database of all Bitcoin private keys\n\n**Note:** This is an open-source clone of directory.io for my personal educational-purpose.\n\nThis website contains all the possible Bitcoin private key.\n\nA private key it's just a number chosen randomly from a range,\nif this range (called key-space) is big enough it won't be possible \nto list all the keys in feasible times.\n\nBitcoin private keys range from 1 to 115792089237316195423570985008687907852837564279074904382605163141518161494336\n\nThe key-space it's too big to index all the keys ([http://redd.it/1rurll](http://redd.it/1rurll)), but you can however generate private keys on demand.\n\nFor this reason I have developed this on-demand database and also a Lottery that will take a random private key from the key-space and tell you if it has some bitcoin available. ;)\n\n## Installation\n\n    pip3 install -r requirements.txt\n\n## Usage\n\n    chmod +x ./run.sh\n    ./run.sh\n\n### Donate\nBTC: 1EhJyJwzbp7v2ixPT4heM2caUsmWcX36mc\nMonero: 47Yk8KgtYyaV2RvzJLQKuuMzhiZD5ktdbNzP6jxsjkdSKD8j81uLRCYXKLFVFtsCbLjbyamGBES58Mi4r8wHEGht8ofEVu7"
 },
 {
  "repo": "kyledrake/coinpunk",
  "language": "JavaScript",
  "readme_contents": "## NOTICE: End of work notice\n\nDue to lack of time, support, and resources, the Coinpunk project is currently not under active development. See [the announcement](http://coinpunkblog.neocities.org).\n\nInstead of using this code, I suggest building a new wallet based on our work improving the excellent new version of [BitcoinJS](https://github.com/bitcoinjs/bitcoinjs-lib). Coinpunk was a product of it's time, and since then many improvements to the Bitcoin code ecosystem have happened.\n\n# ![Coinpunk](http://i.imgur.com/m1diPkP.png)\n\nRun your own Bitcoin wallet service.\n\nCoinpunk is a web application that allows anyone to run their own self-hosted Bitcoin wallet service that is accessible from your web browser anywhere in the world. It's free, open source, and you can install it on your server right now.\n\n## Who uses Coinpunk\n\nCoinpunk is aimed at developers, power users, and sysadmins interested in running their own web-based Bitcoin wallet.\n\nCoinpunk is also used to power [coinpunk.com](https://coinpunk.com), the first fully open source web-based wallet service.\n\n## Highlights\n\nThe latest version is a major rewrite that uses hybrid-wallets: encryption is done in the browser via a client-side application, which can be run separately from the server. This makes it much harder for hackers to steal Bitcoins by breaking into servers.\n\n**Coinpunk is in beta. It is set to testnet by default, and it is recommended that only developers and testers only use it at this time (especially in production).**\n\n* Fast, lightweight, efficient\n* Responsive design - works well on mobile devices\n* Easily create new accounts\n* Send and receive bitcoins\n* Detailed reports on transactions\n* Ability to create and name new receive addresses (\"Website Donations\", \"Bake Sale\", etc)\n* Built with Node.js and HTML5\n* Standards compliant, easy to upgrade - Uses bitcoind via the JSON RPC\n\n## Get Started\n\nSee the [Install Guide](docs/INSTALL.md), \nor the [OSX Install Guide](docs/INSTALL-OSX.md).\n\n## Coinpunk is for Advanced Users\n\nIf you've never worked on your own server before, and don't know how to do things like backup your database, I strongly recommend using a desktop client or hosted wallet provider like [coinpunk.com](https://coinpunk.com) instead. Coinpunk tries to be simple as possible, but like Gitlab, it does require a lot of knowledge to be run properly.\n\n## Author\n\n[Kyle Drake](http://kyledrake.net). Illustration by Kyle Wilson.\n\n## Contributors\n\n[Click here](https://github.com/kyledrake/coinpunk/graphs/contributors) to see the contributor list.\n\n## How You Can Help\n\n### Donations\n\nDonations help me to keep working on Coinpunk and keep it free and open source, without having to worry about income. Any amount is really helpful! Thank you so much.\n\nThe Coinpunk donation Bitcoin address is **1MHbxLgsgFQyvWkW1qiZs1HaXxU4S4LuWH**\n\nAlso if you are planning on running Coinpunk on a VPS, you can [use this link to sign up for DigitalOcean](https://www.digitalocean.com/?refcode=4be99ecc05b4) and it gives us a referral bonus we can use to pay for the servers.\n\nAgain, thank you. :heart:\n\n### Contributing\n\nHelp us build! We're in beta right now [and seeking help to find bugs](http://coinpunk.org/beta.html). If you are interested in contributing, jump in! Anyone is welcome to send pull requests. Issue reports are good too, but pull requests are much better. Here's how you do it:\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Write the code, **and tests to confirm it works**\n4. Commit your changes (`git commit -am 'Add some feature'`)\n5. Push to the branch (`git push origin my-new-feature`)\n6. Create new Pull Request\n\n### Coinpunk H4XX0RZ Bounty\n\nSee [docs/H4XX0RZ.md](docs/H4XX0RZ.md).\n"
 },
 {
  "repo": "graymauser/btcposbal2csv",
  "language": "Python",
  "readme_contents": "## Dump Bitcoin addresses with positive balance\n\nSimple utility to list all bitcoin addresses with positive balance. It works by analysing the current unspent transaction output set (UTXO), aggregating outputs to same addresses together and write them to csv file.\n\n#### Prequisities:\npython 2.7  \npip\n\n#### To install:  \nrun pip install -r requirements.txt\n\nor install following packages with pip manualy\n\nfor linux\uff1a\n* plyvel\n* base58\n* sqlite3\n\nfor windows\uff1a\n* plyvel-win32\n* base58\n* pysqlite3\n\n#### Usage\nTo use this script, you will need copy of chainstate database as created by [bitcoin core](https://bitcoin.org/en/bitcoin-core/)\n client. I've not tried different clients.\n \nTo get current addresses with positive balance, let the full node client sync with the network. \n**Stop** the bitcoin-core client before running this utility. If you not stop the client, the database might get corrupted.  \nThen run this program with path to chainstate directory (usualy $HOME/.bitcoin/chainstate).\n\nShow help\n```\npython btcposbal2csv.py -h\n```\n#### Example:  \nThe following will read from `/home/USER/.bitcoin/chainstate`, and write result to `/home/USER/addresses_with_balance.csv`.\n```\npython btcposbal2csv.py /home/USER/.bitcoin/chainstate /home/USER/addresses_with_balance.csv\n```\n\n##### Notice\n* The output may not be complete as there are some transactions which are not understood by the decoding lib, or that which do not have \"address\" at all. Such transactions are not processed. Number of them and the total ammount in such transactions is displayed after the analysis.  \n* The output csv file only reflects the chainstate leveldb at your disk. So it will always be few blocks behind the network as you need to stop the bitcoin-core client.\n\n#### Converting to RIPEMD160\nPer request, I'm adding script which is able to convert BTC address to RIPEMD160 representation.\nBTC address must be in fist column, RIPEMD160 is added to csv. Output goes to stdout.\n\nExample:\n```\npython convert2ripemd160.py /home/USER/addresses_with_balance.csv\n```\n\n#### Acknowledgement\nThis utility builds on very nice [bitcoin_tools](https://github.com/sr-gi/bitcoin_tools/) lib,\n which does the UTXO parsing.\n \n#### Support\nIf you like this utility, please consider supporting the bitcoin_tools library which does all the heavy lifting.\n\nIf this particular functionality made your life easier you can support coffee consumption in BTC \n1FxC1mgJkad63beJcECfZMRaFSf4PBLr2f.\n\n## FAQ\n- Python 3 does not work. Yes, the the code is for python 2 - as stated in the requirements.\n- Can this be used for coin XYZ? Currently only BTC is supported. The direct BTC derivatives (LTC, BCH, and others) should be fairly straitforward to add, other not so much.\n- Currently this library is not actively developed. It is sufficient for my usecase. If you want some feature added, fork it, open PR, etc. Should some tips come in my way I would be much more inclined to develop this project more actively.\n"
 },
 {
  "repo": "square/subzero",
  "language": "Java",
  "readme_contents": "[![Build Status](https://github.com/square/subzero/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/square/subzero/actions/workflows/codeql-analysis.yml)\n[![Static Analysis](https://github.com/square/subzero/actions/workflows/clang-static-analysis.yml/badge.svg)](https://github.com/square/subzero/actions/workflows/clang-static-analysis.yml)\n[![Integration Test](https://github.com/square/subzero/actions/workflows/signtx-test.yml/badge.svg)](https://github.com/square/subzero/actions/workflows/signtx-test.yml)\n\n[![Documentation Status](https://readthedocs.org/projects/subzero/badge/?version=master)](https://subzero.readthedocs.io/en/master/?badge=master)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/square/subzero/blob/master/LICENSE)\n\n<img src=\"logo.png\" width=\"100\">\n\n# HSM Cold Storage\n\nFor security, Square stores a reserve of Bitcoins in an offline setting. By having these funds offline, we\nreduce attack surface and risk of theft.\n\nSquare's solution is unique, specifically, we leverage FIPS certified Hardware Security Modules (HSMs) to protect the\nprivate key material. We decided to use such HSMs because we already own, operate, and trust these devices for other payment-related needs.\n\nFunds can be sent from online systems to the cold storage at any time. Moving funds out of cold storage requires a\nmulti-party signing ceremony. In addition, the offline HSMs are able to enforce business logic rules, for instance we\nonly allow sending funds to Square-owned addresses. Such a scheme is usually called defense in depth or an onion model.\nWe maintain the online/offline isolation by importing transaction metadata and exporting signatures using QR codes.\n\nHSMs have the ability to share key material. This enables the ability to store our backups in encrypted form and\nrestore a wallet at any location.\n\nThis repo contains our design documents as well as specific technical information. We are sharing our source code, with\nthe caveat that the code is currently only useful if you have the exact same hardware setup. We are willing to make the\ncode more modular over time, as long as the broader community shows interest to implement support for additional\nhardware vendors.\n\nSee also [Open Sourcing Subzero (blog post)](https://developer.squareup.com/blog/open-sourcing-subzero)\n\n# Documentation\n\n[https://subzero.readthedocs.io](https://subzero.readthedocs.io)\n\n# License\n\n\n    Copyright 2018 Square, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
 },
 {
  "repo": "gazbert/bxbot",
  "language": "Java",
  "readme_contents": "# BX-bot\n\n[![Gradle CI](https://github.com/gazbert/bxbot/actions/workflows/gradle.yml/badge.svg?branch=master)](https://github.com/gazbert/bxbot/actions/workflows/gradle.yml)\n[![Maven CI](https://github.com/gazbert/bxbot/actions/workflows/maven.yml/badge.svg?branch=master)](https://github.com/gazbert/bxbot/actions/workflows/maven.yml)\n[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=gazbert_bxbot&metric=alert_status)](https://sonarcloud.io/dashboard?id=gazbert_bxbot)\n[![Join the chat at https://gitter.im/BX-bot/Lobby](https://badges.gitter.im/BX-bot/Lobby.svg)](https://gitter.im/BX-bot/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\t\t \t \n \n## What is BX-bot?\n\n<img src=\"./docs/bxbot-cropped.png\" align=\"right\" width=\"25%\" />\n\nBX-bot (_Bex_) is a simple Bitcoin trading bot written in Java for trading on cryptocurrency \n[exchanges](https://bitcoin.org/en/exchanges).\n\nThe project contains the basic infrastructure to trade on a [cryptocurrency](http://coinmarketcap.com/) exchange...\nexcept for the trading strategies - you'll need to write those yourself! A simple \n[`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java) \nis included to get you started with the Trading API - see [Ta4j](https://github.com/ta4j/ta4j) for more ideas.\n\nExchange Adapters for using [Bitstamp](https://www.bitstamp.net), [Bitfinex](https://www.bitfinex.com),\n[itBit](https://www.itbit.com/), [Kraken](https://www.kraken.com), [Gemini](https://gemini.com/),\nand [Coinbase Pro](https://pro.coinbase.com/) are included. \nFeel free to improve these or contribute new adapters to the project; that would be \n[shiny!](https://en.wikipedia.org/wiki/Firefly_(TV_series))\n\nA [`TryModeExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/TryModeExchangeAdapter.java) is\nconfigured by default to delegate public API calls to Bitstamp, but it simulates the private\nAPI (order management) calls; it's good for testing your initial setup and \n[paper trading](https://www.investopedia.com/terms/p/papertrade.asp) without actually sending orders to the exchange.\n\nThe Trading API provides support for [limit orders](http://www.investopedia.com/terms/l/limitorder.asp)\ntraded at the [spot price](http://www.investopedia.com/terms/s/spotprice.asp).\nIf you're looking for something more sophisticated with a much richer Trading API, take a look at\n[XChange](https://github.com/knowm/XChange).\n \n**Warning:** Trading Bitcoin carries significant financial risk; you could lose money. This software is provided 'as is'\nand released under the [MIT license](http://opensource.org/licenses/MIT).\n\n## Architecture\n\n![bxbot-core-architecture.png](./docs/bxbot-core-architecture.png)\n\n- **Trading Engine** - the execution unit. It provides a framework for integrating Exchange Adapters and executing \n                       Trading Strategies.\n- **Exchange Adapters** - the data stream unit. They provide access to a given exchange.\n- **Trading Strategies** - the decision or strategy unit. This is where the trading decisions happen.\n- **Trading API** - Trading Strategies use this API to make trades. Exchange Adapters implement this to provide access\n  to a given exchange.\n- **Strategy API** - Trading Strategies implement this so the Trading Engine can execute them.\n \nTrading Strategies and Exchange Adapters are injected by the Trading Engine on startup. The bot uses a simple \n[YAML](https://en.wikipedia.org/wiki/YAML) backed dependency injection framework to achieve this; the long term goal is\nto convert it into a fully configurable [Spring Boot](https://spring.io/projects/spring-boot) app.\n\nThe bot was designed to fail hard and fast if any unexpected errors occur in the Exchange Adapters or Trading Strategies:\nit will log the error, send an email alert (if configured), and then shut down.\n\n## Installation Guide\n  \nThe bot runs on Linux, macOS, and Windows.\n\nBX-bot requires a Java 11+ JDK (e.g. [openjdk-11-jdk](http://openjdk.java.net/projects/jdk/11/) or \n[Oracle JDK 11](https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html))\nto be installed on the machine you are going to use to build and run the bot.\nBe mindful of Oracle's recent [licensing changes](https://www.oracle.com/technetwork/java/javase/overview/oracle-jdk-faqs.html)\nand how you intend to use the bot.\n\nYou can use [Gradle](https://gradle.org/) or [Maven](https://maven.apache.org) to build the bot.\nThe instructions below are for Linux/macOS, but equivalent Windows scripts are included.\n\nDownload the latest [Release](https://github.com/gazbert/bxbot/releases) and unzip the bot.\n\n#### Maven\n1. If you plan on using your own Trading Strategies/Exchange Adapters packaged in separate jar files, you'll need to add\n   the dependency in the [bxbot-app/pom.xml](./bxbot-app/pom.xml) - see the commented out dependency examples inside it.\n1. From the project root, run `./mvnw clean package` to produce the distribution \n   artifacts `bxbot-app-<version>-dist.tar.gz` and `bxbot-app-<version>-dist.zip` in the `./bxbot-app/target` folder.\n1. Copy either the `bxbot-app-<version>-dist.tar.gz` or the `bxbot-app-<version>-dist.zip` onto the machine you \n   want to run the bot and unzip it someplace.\n1. Configure the bot as required - see the main _[Configuration](#configuration)_ section.\n   The bot's default configuration uses the \n   [`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java), \n   but you'll probably want to [code your own](#how-do-i-write-my-own-trading-strategy)! The \n   [`TryModeExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/TryModeExchangeAdapter.java) is\n   configured out of the box to simulate trading with Bitstamp.\n1. Usage: `./bxbot.sh [start|stop|status]`  \n\n#### Gradle    \n1. If you plan on using your own Trading Strategies/Exchange Adapters packaged in separate jar files, you'll need to add\n   the dependency in the [bxbot-app/build.gradle](bxbot-app/build.gradle) - see the commented out dependency examples \n   inside it.\n1. From the project root, run `./gradlew clean build` to build the bot.   \n1. Then run `./gradlew buildTarGzipDist` or `./gradlew buildZipDist` to build the distribution \n   artifact: either `bxbot-app-<version>.tar.gz` or `bxbot-app-<version>.zip` respectively. \n   It will be placed in the `./build/distributions` folder.\n1. Copy the artifact onto the machine you want to run the bot and unzip it someplace.\n1. Configure the bot as described in step 4 of the previous [Maven](#maven) section.\n1. Usage: `./bxbot.sh [start|stop|status]`\n\n### Docker\nIf you want to just play around with the \n[`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java) \nand evaluate the bot, Docker is the way to go.\n\n1. Install [Docker](https://docs.docker.com/engine/installation/) on the machine you want to run the bot.\n1. Fetch the BX-bot image from [Docker Hub](https://hub.docker.com/r/gazbert/bxbot/): `docker pull gazbert/bxbot:1.7.0`\n1. Run the Docker container: `docker container run --publish=8080:8080 --name bxbot-1.7.0 -it gazbert/bxbot:1.7.0 bash`\n1. Change into the bot's directory: `cd bxbot*`\n1. Configure the bot as described in step 4 of the previous [Maven](#maven) section.\n1. Usage: `./bxbot.sh [start|stop|status]`\n1. You can detach from the container and leave the bot running using the `CTRL-p` `CTRL-q` key sequence.\n1. To re-attach to the Docker container, run `docker container ls` to get the CONTAINER ID. \n   Then run: `docker container attach <CONTAINER ID>`   \n   \n## Build Guide\nIf you plan on developing the bot, you'll need JDK 11+ installed on your dev box.\n\nYou can use Gradle or Maven to build the bot and pull down the dependencies.\n\nThe instructions below are for Linux/macOS, but equivalent Windows scripts are included.\n\nClone the repo locally (master branch).\n\n### Maven\n1. From the project root, run `./mvnw clean install`.\n   If you want to run the exchange integration tests, use `./mvnw clean install -Pint`. \n   To execute both unit and integration tests, use `./mvnw clean install -Pall`.\n1. Take a look at the Javadoc in the `./target/apidocs` folders of the bxbot-trading-api, bxbot-strategy-api, \n   and bxbot-exchange-api modules after the build completes.\n   \n### Gradle\n1. From the project root, run `./gradlew build`.\n   If you want to run the exchange integration tests, use `./gradlew integrationTests`.\n   To execute both unit and integration tests, use `./gradlew build integrationTests`.\n1. To generate the Javadoc, run `./gradlew javadoc` and look in the `./build/docs/javadoc` folders of the \n   bxbot-trading-api, bxbot-strategy-api, and bxbot-exchange-api modules.\n\n## Issue & Change Management\n\nIssues and new features are managed using the project [Issue Tracker](https://github.com/gazbert/bxbot/issues) -\nsubmit bugs here.\n \nYou are welcome to take on new features or fix bugs! See [here](CONTRIBUTING.md) for how to get involved. \n\nFor help and general questions about BX-bot, check out the [Gitter](https://gitter.im/BX-bot/Lobby) channel.\n\n## Testing\nThe bot has undergone basic unit testing on a _best-effort_ basis. \n\nThere is a CI build running on [GitHub Actions](https://github.com/gazbert/bxbot/actions).\n\nThe latest stable build can always be found on the [Releases](https://github.com/gazbert/bxbot/releases) page. \nThe SNAPSHOT builds on master are active development builds, but the tests should always pass and the bot should always \nbe deployable.\n\n## User Guide\n_\"Change your opinions, keep to your principles; change your leaves, keep intact your roots.\"_ - Victor Hugo\n\n### Configuration\nThe bot provides a simple plugin framework for:\n\n* Exchanges to integrate with.\n* Markets to trade on.\n* Trading Strategies to execute.\n\nIt uses [YAML](https://yaml.org/) configuration files. These live in the [`config`](./config) folder.\nAny config changes require a restart of the bot to take effect.\n\nSample configurations for running on different exchanges can be found in the \n[`config/samples`](./config/samples)folder.\n\n##### Engine\nThe [`engine.yaml`](./config/engine.yaml) file is used to configure the Trading Engine.\n\n```yaml\nengine:\n  botId: my-bitstamp-bot_1\n  botName: Bitstamp Bot\n  emergencyStopCurrency: BTC\n  emergencyStopBalance: 1.0\n  tradeCycleInterval: 20\n```\n\nAll fields are mandatory.\n\n* The `botId` value is a unique identifier for the bot. Value must be an alphanumeric string. \n  Underscores and dashes are also permitted.\n\n* The `botName` is a friendly name for the bot. Value must be an alphanumeric string. Spaces are allowed.\n      \n* The `emergencyStopCurrency` value must be set to prevent catastrophic loss on the exchange. \n  This is normally the currency you intend to hold a long position in. It should be set to the currency short code for \n  the wallet, e.g. BTC, LTC, USD. This value can be case sensitive for some exchanges - check the Exchange Adapter\n  documentation.\n\n* The `emergencyStopBalance` value must be set to prevent catastrophic loss on the exchange. \n  The Trading Engine checks this value at the start of every trade cycle: if your `emergencyStopCurrency` wallet\n  balance on the exchange drops below this value, the Trading Engine will log it, send an Email Alert (if configured)\n  and then shut down. If you set this value to 0, the bot will bypass the check - be careful.\n\n* The `tradeCycleInterval` value is the interval in _seconds_ that the Trading Engine will wait/sleep before executing\n  each trade cycle. The minimum value is 1 second. Some exchanges allow you to hit them harder than others. However, \n  while their API documentation might say one thing, the reality is you might get socket timeouts and 5xx responses if \n  you hit it too hard. You'll need to experiment with the trade cycle interval for different exchanges.\n\n##### Exchange Adapters\nYou specify the Exchange Adapter you want BX-bot to use in the \n[`exchange.yaml`](./config/exchange.yaml) file. \n\nBX-bot supports 1 exchange per bot. \nThis keeps things simple and helps minimise risk: problems on one exchange should not impact trading on another.\n\nThe [`TryModeExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/TryModeExchangeAdapter.java) is\nconfigured by default to delegate public API calls to the \n[`BitstampExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/BitstampExchangeAdapter.java). \nIt simulates the private API (order management) calls; it's good for testing your initial setup and \n``paper trading, but you'll eventually want to send live orders to the exchange!\n\nThe configuration below shows how to live-trade with Bitstamp:\n\n```yaml\nexchange:\n  name: Bitstamp\n  adapter: com.gazbert.bxbot.exchanges.BitstampExchangeAdapter\n  \n  authenticationConfig:\n    clientId: your-client-id\n    key: your-api-key\n    secret: your-secret-key\n           \n  networkConfig:\n    connectionTimeout: 15\n    nonFatalErrorCodes: [502, 503, 520, 522, 525]            \n    nonFatalErrorMessages:\n      - Connection reset\n      - Connection refused\n      - Remote host closed connection during handshake\n      - Unexpected end of file from server\n      \n  otherConfig:\n    not-needed-on-bitstamp-1: here for illustration purposes only\n    not-needed-on-bitstamp-2: here for illustration purposes again\n```\n\nAll fields are mandatory unless stated otherwise.\n\n* The `name` value is a friendly name for the Exchange. It is used in log statements to display the Exchange's name.\n  Value must be an alphanumeric string. Spaces are allowed.\n\n* For the `adapter` value, you must specify the fully qualified name of the Exchange Adapter class for the Trading\n  Engine to inject on startup. The class must be on the runtime classpath. See the \n  _[How do I write my own Exchange Adapter?](#how-do-i-write-my-own-exchange-adapter)_ section for more details.\n\n* The `authenticationConfig` section is used by the inbuilt Exchange Adapters to configure their exchange trading\n  API credentials - see the sample `exchange.yaml` config files for details.\n\n* The `networkConfig` section is optional. It is used by the inbuilt Exchange Adapters to set their network\n  configuration as detailed below:\n\n    * The `connectionTimeout` field is optional. This is the timeout value that the exchange adapter will wait on socket\n      connect/socket read when communicating with the exchange. Once this threshold has been breached,\n      the exchange adapter will give up and throw an\n      [`ExchangeNetworkException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/ExchangeNetworkException.java).\n      The sample Exchange Adapters are single threaded: if a request gets blocked, it will block all subsequent\n      requests from getting to the exchange. This timeout value prevents an indefinite block. If not set, it defaults \n      to 30 seconds.\n\n    * The `nonFatalErrorCodes` field is optional. It contains a list of HTTP status codes that will trigger the\n      adapter to throw a non-fatal `ExchangeNetworkException`. This allows the bot to recover from temporary network\n      issues. See the sample `exchange.yaml` config files for status codes to use.\n\n    * The `nonFatalErrorMessages` field is optional. It contains a list of `java.io` Exception message content that will\n      trigger the adapter to throw a non-fatal `ExchangeNetworkException`. This allows the bot to recover from\n      temporary network issues. See the sample `exchange.yaml` config files for messages to use.\n\n* The `otherConfig` section is optional. It is not needed for Bitstamp, but shown above for illustration purposes.\n  If present, at least 1 item must be set - these are repeating key/value String pairs.\n  This section is used by the inbuilt Exchange Adapters to set any additional config, e.g. buy/sell fees.\n\n##### Markets\nYou specify which markets you want to trade on in the \n[`markets.yaml`](./config/markets.yaml) file.\n\n```yaml\n  markets:            \n    - id: btcusd    \n      name: BTC/USD        \n      baseCurrency: BTC\n      counterCurrency: USD\n      enabled: true\n      tradingStrategyId: scalping-strategy\n  \n    - id: ltcusd\n      name: LTC/BTC\n      baseCurrency: LTC\n      counterCurrency: BTC\n      enabled: false\n      tradingStrategyId: scalping-strategy\n```\n\nAll fields are mandatory unless stated otherwise.\n\n* The `id` value is the market id as defined on the exchange. E.g. the BTC/USD market id is `btcusd` on \n  [Bitstamp](https://www.bitstamp.net/api/) - see `currency_pair` values.\n\n* The `name` value is a friendly name for the market. The is used in the logs to display the market's name.\n  Value must be an alphanumeric string.\n\n* The `baseCurrency` value is the currency short code for the base currency in the currency pair. When you buy or \n  sell a currency pair, you are performing that action on the base currency. The base currency is the commodity you \n  are buying or selling. E.g. in a BTC/USD market, the first currency (BTC) is the base currency and the second\n  currency (USD) is the counter currency.\n\n* The `counterCurrency` value is the currency short code for the counter currency in the currency pair. This is also\n  known as the _quote_ currency.\n\n* The `enabled` value allows you to toggle trading on the market. Remember, config changes are only applied on startup.\n\n* The `tradingStrategyId` value _must_ match a strategy `id` defined in your `strategies.yaml` config.\n  Currently, BX-bot only supports 1 `strategy` per `market`.\n\n##### Strategies #####\nYou specify the Trading Strategies you wish to use in the \n[`strategies.yaml`](./config/strategies.yaml) file.\n\n```yaml\nstrategies:\n  - id: scalping-strategy\n    name: Basic Scalping Strat\n    description: >\n      A simple scalper that buys at the current BID price, holds until current market price has \n      reached a configurable minimum percentage gain, then sells at current ASK price, thereby\n      taking profit from the spread.       \n    # This strategy is injected using the bot's custom injection framework using its className\n    className: com.gazbert.bxbot.strategies.ExampleScalpingStrategy\n    configItems:\n      counter-currency-buy-order-amount: 20                        \n      minimum-percentage-gain: 2\n            \n  - id: macd-strategy\n    name: MACD Based Strat\n    description: Strat uses MACD data to take long position in USD.    \n    # This strategy is injected using a Spring beanName\n    beanName: yourMacdStrategyBean\n    configItems:\n      counter-currency-buy-order-amount: 20      \n      shortEmaInterval: 12            \n      longEmaInterval: 26            \n```\n\nAll fields are mandatory unless stated otherwise.\n\n* The `id` value is a unique identifier for the strategy. The `markets.yaml` `tradingStrategyId` entries \n  cross-reference this. Value must be an alphanumeric string. Underscores and dashes are also permitted.\n\n* The `name` value is a friendly name for the strategy. The is used in the logs to display the strategy's name.\n  Value must be an alphanumeric string. Spaces are allowed.\n\n* The `description` value is optional.\n\nYou configure the loading of your strategy using either a `className` _or_ a `beanName`; you cannot specify both. \n\n* For the `className` value, you must specify the fully qualified name of your Strategy class for the Trading Engine\n  to load and execute. This will use the bot's custom injection framework. The class must be on the runtime classpath.\n  If you set this value to load your strategy, you cannot set the `beanName` value.\n  \n* For the `beanName` value, you must specify the Spring bean name of you Strategy component class for the Trading Engine\n  to load and execute. You will also need to annotate your strategy class with `@Component(\"yourMacdStrategyBean\")` - \n  see the [`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java).\n  This results in Spring injecting the bean.\n  If you set this value to load your strategy, you cannot set the `className` value.        \n\n* The `configItems` section is optional. It allows you to set key/value pair config items. This config is passed\n  to your Trading Strategy when the bot starts up; see the \n  _[How do I write my own Trading Strategy?](#how-do-i-write-my-own-trading-strategy)_ section.\n\n##### Email Alerts\nYou specify the Email Alerts config in the \n[`email-alerts.yaml`](./config/email-alerts.yaml) file.\n\nThis config is used to send email alerts when the bot is forced to shut down due to an unexpected error occurring in the \nTrading Strategies or Exchange Adapters. The email is sent to the SMTP host using TLS.\n\n```yaml\nemailAlerts:\n  enabled: false\n  smtpConfig:\n    host: smtp.gmail.com\n    tlsPort: 587\n    accountUsername: your.account.username@gmail.com\n    accountPassword: your.account.password\n    fromAddress: from.addr@gmail.com\n    toAddress: to.addr@gmail.com\n```\n\nAll fields are mandatory unless stated otherwise.\n\n* If `enabled` is set to true, the bot will send email alerts to the `toAddress` if it needs to shut down due to a\n  critical error. \n\n* The `smtpConfig` config is optional and only required if `enabled` is set to true. \n  Sample SMTP config for using a Gmail account is shown above - all elements within `smtpConfig` are mandatory. \n\n### How do I write my own Trading Strategy?\n_\"I was seldom able to see an opportunity until it had ceased to be one.\"_ - Mark Twain\n\nThe best place to start is with the\n[`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java) -\nmore ideas can be found in the excellent [Ta4j](https://github.com/ta4j/ta4j) project.\nThere is also a Trading Strategy specific channel on [Gitter](https://gitter.im/BX-bot/trading-strategies).\n  \nYour strategy must implement the \n[`TradingStrategy`](./bxbot-strategy-api/src/main/java/com/gazbert/bxbot/strategy/api/TradingStrategy.java)\ninterface. This allows the Trading Engine to:\n\n* Inject your strategy on startup.\n* Pass any configuration (set in the `strategies.yaml`) to your strategy.\n* Invoke your strategy at each trade cycle.\n\nYou load your strategy using either `className` _or_ `beanName` in the `strategies.yaml` file - see the \n_[Strategies Configuration](#strategies)_ section for full details. The choice is yours, but `beanName` is the way to\ngo if you want to use other Spring features in your strategy, e.g. a \n[Repository](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html) \nto store your trade data.   \n\nThe Trading Engine will only send 1 thread through your Trading Strategy; you do not have to code for concurrency.\n\n##### Making Trades\nYou use the [`TradingApi`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApi.java)\nto make trades etc. The API is passed to your Trading Strategy implementation `init` method when the bot starts up. \nSee the Javadoc for full details of the API.\n\n##### Error Handling\nYour Trading Strategy implementation should throw a \n[`StrategyException`](./bxbot-strategy-api/src/main/java/com/gazbert/bxbot/strategy/api/StrategyException.java)\nwhenever it 'breaks'. BX-bot's error handling policy is designed to fail hard and fast; it will log the error, send an\nEmail Alert (if configured), and shut down.\n\nNote that the inbuilt Exchange Adapters will (some more often than others!) throw an\n[`ExchangeNetworkException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/ExchangeNetworkException.java)\nif they encounter network issues connecting with the exchange. Your strategy should always catch this exception and\nchoose what to do next, e.g. retry the previous Trading API call, or 'swallow' the exception and wait until the Trading\nEngine invokes the strategy again at the next trade cycle.\n\n##### Configuration\nYou specify the Trading Strategies you wish to use in the `strategies.yaml` file - see the\n_[Strategies Configuration](#strategies)_ section for full details.\n\nThe `configItems` section in the `strategies.yaml` allows you to set key/value pair config items to pass to your\nTrading Strategy implementation. On startup, the Trading Engine will pass the config to your Trading Strategy's \n`init(TradingApi tradingApi, Market market, StrategyConfig config)` method. \n\n##### Dependencies\nYour Trading Strategy implementation has a compile-time dependency on the [Strategy API](./bxbot-strategy-api)\nand the [Trading API](./bxbot-trading-api).\n\nThe inbuilt\n[`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java)\nalso has a compile-time dependency on log4j and Google Guava.\n\n##### Packaging & Deployment #####\nTo get going fast, you can code your Trading Strategy and place it in the\n[bxbot-strategies](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies)\nmodule alongside the example strategy. When you build the project, your Trading Strategy will be included in the\nBX-bot jar. You can also create your own jar for your strats, e.g. `my-strats.jar`, and include it on BX-bot's \nruntime classpath - see the _[Installation Guide](#the-manual-way)_ for how to do this.\n\n### How do I write my own Exchange Adapter?\n_\"Battle not with monsters, lest ye become a monster, and if you gaze into the abyss, the abyss gazes also into you.\"_ -\nFriedrich Nietzsche\n\nIt's not easy, and can be frustrating at times, but a good place to start is with one of the inbuilt Exchange Adapters - see the latest \n[`BitstampExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/BitstampExchangeAdapter.java)\nfor example. There is also an Exchange Adapter specific channel on [Gitter](https://gitter.im/BX-bot/exchange-adapters).\n\nYour adapter must implement the \n[`TradingApi`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApi.java)\nand the [`ExchangeAdapter`](./bxbot-exchange-api/src/main/java/com/gazbert/bxbot/exchange/api/ExchangeAdapter.java)\ninterfaces. This allows the:\n            \n* Trading Engine to inject your adapter on startup.\n* Trading Engine to pass any configuration (set in the `exchange.yaml`) to your adapter.\n* Trading Strategies to invoke your adapter's implementation of the `TradingApi` at each trade cycle.\n\n[`AbstractExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/AbstractExchangeAdapter.java)\nis a handy base class that all the inbuilt Exchange Adapters extend - it could be useful.\n\nThe Trading Engine will only send 1 thread through your Exchange Adapter; you do not have to code for concurrency.\n\n##### Error Handling\nYour Exchange Adapter implementation should throw a\n[`TradingApiException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApiException.java)\nwhenever it breaks; the Trading Strategies should catch this and decide how they want to proceed.\n\nThe Trading API provides an\n[`ExchangeNetworkException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/ExchangeNetworkException.java)\nfor adapters to throw when they cannot connect to the exchange to make Trading API calls. This allows for\nTrading Strategies to recover from temporary network failures. The `exchange.yaml` config file has an \noptional `networkConfig` section, which contains `nonFatalErrorCodes` and `nonFatalErrorMessages` elements - \nthese can be used to tell the adapter when to throw the exception.\n\nThe first release of the bot is _single-threaded_ for simplicity. The downside to this is that if an API call to the \nexchange gets blocked on IO, BX-bot will get stuck until your Exchange Adapter frees the block. The Trading API provides\nan `ExchangeNetworkException` for your adapter to throw if it times-out connecting to the exchange. It is your \nresponsibility to free up any blocked connections - see the \n[`AbstractExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/AbstractExchangeAdapter.java)\nfor an example how to do this.\n\nThe Trading Engine will also call your adapter directly when performing the _Emergency Stop_ check to see if the \n`emergencyStopCurrency` wallet balance on the exchange drops below the configured `emergencyStopBalance` value.\nIf this call to the [`TradingApi`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApi.java)\n`getBalanceInfo()` fails and is not due to a `ExchangeNetworkException`, the Trading Engine will log the error, send an \nEmail Alert (if configured), and shut down. If the API call failed due to an `ExchangeNetworkException`, the \nTrading Engine will log the error and sleep until the next trade cycle.\n\n##### Configuration\nYou provide your Exchange Adapter details in the `exchange.yaml` file - see the \n_[Exchange Adapters Configuration](#exchange-adapters)_ section for full details.\n\nThe `otherConfig` section in the `exchange.yaml` allows you to set key/value pair config items to pass to your\nExchange Adapter implementation. On startup, the Trading Engine will pass the config to your Exchange Adapter's \n`init(ExchangeConfig config)` method. \n\n##### Dependencies\nYour Exchange Adapter implementation has a compile-time dependency on the [Trading API](./bxbot-trading-api).\n\nThe inbuilt Exchange Adapters also have compile-time dependencies on log4j, Google Gson, and Google Guava.\n\n##### Packaging & Deployment\nTo get going fast, you can code your Exchange Adapter and place it in the \n[bxbot-exchanges](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges) module alongside the other inbuilt\nadapters. When you build the project, your Exchange Adapter will be included in the BX-bot jar. You can also create \nyour own jar for your adapters, e.g. `my-adapters.jar`, and include it on BX-bot's runtime classpath -\nsee the _[Installation Guide](#the-manual-way)_ for how to do this.\n\n### Logging\nLogging for the bot is provided by [log4j](http://logging.apache.org/log4j). The log file is written to `logs/bxbot.log` \nusing a rolling policy. When a log file size reaches 100 MB or a new day is started, it is archived and a new log file \nis created. BX-bot will create up to 7 archives on the same day; these are stored in a directory based on the current \nyear and month. Only the last 90 archives are kept. Each archive is compressed using gzip. The logging level is set \nat `info`. You can change this default logging configuration in the [`config/log4j2.xml`](./config/log4j2.xml) file.\n\nWe recommend running at `info` level, as `debug` level logging will produce a *lot* of\noutput from the Exchange Adapters; it's very handy for debugging, but not so good for your disk space!\n \n### REST API\n_\"Enlightenment means taking full responsibility for your life.\"_ - William Blake\n\nThe bot has a REST API that allows you to remotely:\n\n* View and update Engine, Exchange, Markets, Strategy, and Email Alerts config.\n* View and download the log file.\n* Restart the bot - this is necessary for any config changes to take effect.\n\nIt has role based access control \n([RBAC](https://en.wikipedia.org/wiki/Role-based_access_control)): Users can view config and the\nlogs, but only administrators can update config and restart the bot.\n\nIt is secured using [JWT](https://jwt.io/) and has [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security)\nsupport for Production environments. \n\nYou can view the [Springdocs](https://springdoc.org/) at: \n[http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html) once you've configured\nand started the bot.\n\n#### Configuration\nThe REST API listens for plain HTTP traffic on port `8080` by default - you can change the \n`server.port` in the [./config/application.properties](./config/application.properties) file.\n \n**Warning:** The bot must be configured to use TLS if you plan on accessing the REST API over a\npublic network - see the _[TLS](#tls)_ section below.\n\nYou _must_ also change the `bxbot.restapi.jwt.secret` value in the \n[./config/application.properties](./config/application.properties) before using the REST API over a public network.\nThis is the key that is used to sign your web tokens - the JWTs are signed using the HS512 algorithm.\n  \nOther interesting configuration in the [./config/application.properties](./config/application.properties) includes:\n\n* `bxbot.restapi.maxLogfileLines` - the maximum number of lines to be returned in a view log file request. \n(For a head request, the end of the file is truncated; for a tail request the start of the file is truncated).\n\n* `bxbot.restapi.maxLogfileDownloadSize` - the maximum size of the logfile to download. \nIf the size of the logfile exceeds this limit, the end of the file will be truncated.\n\n* `bxbot.restapi.jwt.expiration` - the expires time of the JWT. Set to 10 mins. Be sure you know the\nrisks if you decide to extend the expiry time.\n\n#### Users\nYou _must_ change the `PASSWORD` values in the \n[./bxbot-rest-api/src/main/resources/import.sql](./bxbot-rest-api/src/main/resources/import.sql)\nbefore using the REST API over a public network - see instructions in the file on how to \n[bcrypt](https://en.wikipedia.org/wiki/Bcrypt) your passwords.\n\n2 users have been set up out of the box: `user` and `admin`. These users have `user` and `admin`\nroles respectively. Passwords are the same as the usernames - remember to change these :-)\n\nWhen the bot starts up, Spring Boot will load the `import.sql` file and store the users and their \naccess rights in its [H2](https://www.h2database.com/html/main.html) in-memory database.\n\n#### Authentication\nThe REST API endpoints require a valid JWT to be passed in the `Authorization` header of any requests.\n\nTo obtain a JWT, your REST client needs to call the `/api/token` endpoint with a valid username/password \ncontained in the `import.sql` file. See the \n[Authentication](http://localhost:8080/swagger-ui.html#/Authentication/getTokenUsingPOST) \nSpringdocs for how to do this.\n\nThe returned JWT expires after 10 mins. Your client should call the `/api/refresh` endpoint with the\nJWT before it expires in order to get a new one. Alternatively, you can re-authenticate using the\n`/api/token` endpoint.\n\n#### TLS\nThe REST API _must_ be configured to use TLS before accessing it over a public network.\n\nYou will need to \n[create a keystore](https://docs.oracle.com/en/java/javase/11/tools/keytool.html) - the command to\ncreate a [PKCS12](https://en.wikipedia.org/wiki/PKCS_12) self-signed certificate is shown below:\n\n``` bash\nkeytool -genkeypair -alias rest-api-keystore -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore keystore.p12 -validity 3650\n```\n \nThe keystore must be on the app's classpath - you can put it in\nthe [./bxbot-rest-api/src/main/resources](./bxbot-rest-api/src/main/resources) and re-build the app to get up and running fast.\nFor a Production system, you'll want to replace the self-signed certificate with a \nCA signed certificate.\n\nThe 'TLS Configuration' section in the [./config/application.properties](./config/application.properties) \nfile needs the following properties set:\n\n``` properties\n# Spring Boot profile for REST API.\n# Must use https profile in Production environment.\nspring.profiles.active=https\n\n# SSL (TLS) configuration to secure the REST API.\n# Must be enabled in Production environment.\nserver.port=8443\nsecurity.require-ssl=true\nserver.ssl.key-store=classpath:keystore.p12\nserver.ssl.key-store-password=secret\nserver.ssl.key-store-type=PKCS12\n```\n\n## Coming Soon... (Definitely Maybe)\n\nA UI built with [React](https://reactjs.org/) - it will consume the REST API. \n\nSee the [Project Board](https://github.com/users/gazbert/projects/1) for timescales and progress.\n"
 },
 {
  "repo": "Bitcoin-com/paperwallet.bitcoin.com",
  "language": "HTML",
  "readme_contents": "# Bitcoin.com Paper Wallet\n\nThe Bitcoin.com Paper Wallet Landing Page\n\nA client-side Bitcoin Cash (BCH) wallet generator producing customizable paper wallets.\n\nThe Bitcoin.com Paper Wallet is based on the open source [bitaddress.org repository.](https://github.com/pointbiz/bitaddress.org) Private Keys are generated client-side. For better security, download a local copy and run on an offline machine. \n\nThe bitaddress.org software is available under The MIT License (MIT) Copyright (c) 2011-2013 bitaddress.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
 },
 {
  "repo": "rustyrussell/bitcoin-iterate",
  "language": "C",
  "readme_contents": "This is some fast code to iterate over bitcoind's block files to\nextract blockchain data from the main blockchain.\n\n## To build:\n\n1. make\n\n## Things you can do:\n\nShow block hash and transaction size for each transaction in the main chain:\n\n\t./bitcoin-iterate -q --tx=%bh,%tl\n\nThis will produce output like:\n\n    000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f,204\n    00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048,134\n    000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd,134\n    0000000082b5015589a3fdf2d4baff403e6f0be035a5d9742c1cae6295464449,134\n    000000004ebadb55ee9096c9a2f8880e09da59c0d68b1c228da88e48844a1485,134\n&hellip;\n\nShow output script sizes in the main chain (block number, transaction\nnumber, output number, output script length):\n\n\t./bitcoin-iterate -q --output=%bN,%tN,%oN:%ol\n\nThis will produce output like:\n\n\t0,0,0:67\n\t1,0,0:67\n\t2,0,0:67\n\t3,0,0:67\n\t4,0,0:67\n&hellip;\n\nShow the five largest blocks, by height and blockhash:\n\n\t./bitcoin-iterate -q --block='%bl %bN %bh' | sort -nr | head -n5\n\nThis will produce output like:\n\n\t999993 343188 96395be50a116886fb04a1262aa89aaa765c4af524d0ae090000000000000000\n\t999991 355770 5ce1f5e58d5d718374b1bdecb474eae5cdd91e1b8a3256050000000000000000\n\t999990 327145 821196665ed237f53ca2c7eafe05c97d26743c07d2b539110000000000000000\n\t999989 345578 0294fa5b68babd848a1fe097b075a856bfd9eb9a619efd130000000000000000\n\t999989 333434 f9776021575b6e408d7745d115db75e17937fc40ab9f0e190000000000000000\n&hellip;\n\nYou can see some examples by looking at the [manual page source](https://github.com/rustyrussell/bitcoin-iterate/blob/master/doc/bitcoin-iterate.1.txt).\n\n## Enhancements\n\nHappy to consider them!\n\nYou can reach me on IRC (rusty on #bitcoin-wizards on Freenode), and\nof course, via pull requests and the [Github bug\ntracker](https://github.com/rustyrussell/bitcoin-iterate/issues).\n\nGood luck!<br>\nRusty Russell.\n"
 },
 {
  "repo": "DeFiCh/ain",
  "language": "C++",
  "readme_contents": "[![Lint](https://github.com/DeFiCh/ain/actions/workflows/lint.yaml/badge.svg)](https://github.com/DeFiCh/ain/actions/workflows/lint.yaml)\n[![Tests](https://github.com/DeFiCh/ain/actions/workflows/tests.yaml/badge.svg)](https://github.com/DeFiCh/ain/actions/workflows/tests.yaml)\n[![Dev Build](https://github.com/DeFiCh/ain/actions/workflows/dev-builds.yaml/badge.svg)](https://github.com/DeFiCh/ain/actions/workflows/dev-builds.yaml)\n\n![DeFiChain Logo](doc/img/defichain-logo.svg)\n\n# [DeFiChain](https://defichain.com)\n\n> **NOTE**: _master_ branch is a development branch and is thus _unstable_. Do not run from it. Run or compile from [tagged releases](https://github.com/DeFiCh/ain/releases) instead, unless you know what you are doing.\n\n## What is DeFiChain?\n\nDeFiChain\u2019s primary vision is to enable decentralized finance with Bitcoin-grade security, strength and immutability.\nIt's a blockchain dedicated to fast, intelligent and transparent financial services, accessible by everyone.\n\nFor more information:\n\n- Visit the [DeFiChain website](https://defichain.com)\n- Read our [white-paper](https://defichain.com/white-paper/)\n\nDownloadable binaries are available from the [GitHub Releases](https://github.com/DeFiCh/ain/releases) page.\n\n### Bitcoin Core\n\nDeFiChain is a fork on [Bitcoin Core](https://github.com/bitcoin/bitcoin) from\ncommit [7d6f63c](https://github.com/bitcoin/bitcoin/commit/7d6f63cc2c2b9c4f07a43619eef0b7314474fffd) \u2013 which is slightly\nafter v0.18.1 of Bitcoin Core.\n\nDeFiChain has done significant modifications from Bitcoin Core, for instance:\n\n- Moving from Proof-of-Work to Proof-of-Stake\n- Masternode model\n- Community fund support\n- Bitcoin blockchain block anchoring\n- Increased decentralized financial transaction and opcode support, etc.\n- Configuration defaults (mainnet ports: `8555/4`, testnet ports: `18555/4`, regnet ports: `19555/4`, etc)\n\nMerges from upstream (Bitcoin Core) will be done selectively if it applies to the improved functionality and security of\nDeFiChain.\n\n## Quick Start\n\n- [Running a node](./doc/setup-nodes.md)\n- [Running a node with docker](./doc/setup-nodes-docker.md)\n- [Running a masternode](./doc/setup-masternodes.md)\n- [Building from scratch](./doc/build-quick.md)\n\n## License\n\nDeFiChain is released under the terms of the MIT license. See [COPYING](COPYING) for more information or\nsee https://opensource.org/licenses/MIT.\n\n## Development Process\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be completely\nstable. [Tags](https://github.com/DeFiCh/ain/tags) are created regularly to indicate new official, stable release\nversions of DeFiChain.\n\nThe contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Questions?\n\nPull requests are warmly welcomed.\n\nReach us at [engineering@defichain.com](mailto:engineering@defichain.com) for any questions or collaborations.\n"
 },
 {
  "repo": "gcarq/rusty-blockparser",
  "language": "Rust",
  "readme_contents": "# rusty-blockparser\n\n[![Build Status](https://travis-ci.org/gcarq/rusty-blockparser.svg?branch=master)](https://travis-ci.org/gcarq/rusty-blockparser) [![Coverage Status](https://coveralls.io/repos/github/gcarq/rusty-blockparser/badge.svg?branch=master)](https://coveralls.io/github/gcarq/rusty-blockparser?branch=master) [![Crates.io](https://img.shields.io/crates/v/rusty-blockparser.svg)](https://crates.io/crates/rusty-blockparser/)\n\nrusty-blockparser is a Bitcoin Blockchain Parser written in **Rust language**.\n\nIt allows extraction of various data types (blocks, transactions, scripts, public keys/hashes, balances, ...) and UTXDO dumps from Bitcoin based blockchains.\n\n**NOTE**: Use the branch `use-bitcoin-lib` for Bitcoin as it implements SegWit and BECH32 address support (https://github.com/gcarq/rusty-blockparser/pull/62). This will be merged eventually but at this point it would break support for other coins.\n\n##### **Currently Supported Blockchains:**\n\n `Bitcoin`, `Namecoin`, `Litecoin`, `Dogecoin`, `Myriadcoin`, `Unobtanium` and `NoteBlockchain`.\n\nIt assumes a local unpruned copy of the blockchain with intact block index, downloaded with [Bitcoin Core](https://github.com/bitcoin/bitcoin) 0.15.1+. If you are not sure whether your local copy is valid you can apply `--verify` to validate the chain and block merkle trees. If something doesn't match the parser exits.\n\n\n\n## Features\n\n* **Callbacks**\n\n    Callbacks are built on top of the core parser. They can be implemented to extract specific types of information.\n\n    `balances`: dumps all addresses with a non-zero balance.\n    The csv file is in the following format:\n    ```\n    balances.csv\n    address ; balance\n    ```\n\n    `unspentcsvdump`: dumps all UTXOs along with the address balance.\n    The csv file is in the following format:\n    ```\n    unspent.csv\n    txid ; indexOut ; height ; value ; address\n    ```\n    NOTE: The total size of the csv dump is at least 8 GiB (height 635000).\n\n\n    `csvdump`: dumps all parsed data as CSV files into the specified `folder`. See [Usage](#Usage) for an example. I chose CSV dumps instead of  an active db-connection because `LOAD DATA INFILE` is the most performant way for bulk inserts.\n    The files are in the following format:\n    ```\n    blocks.csv\n    block_hash ; height ; version ; blocksize ; hashPrev ; hashMerkleRoot ; nTime ; nBits ; nNonce\n    ```\n    ```\n    transactions.csv\n    txid ; hashBlock ; version ; lockTime\n    ```\n    ```\n    tx_in.csv\n    txid ; hashPrevOut ; indexPrevOut ; scriptSig ; sequence\n    ```\n    ```\n    tx_out.csv\n    txid ; indexOut ; height ; value ; scriptPubKey ; address\n    ```\n    If you want to insert the files into MySql see [sql/schema.sql](sql/schema.sql).\n    It contains all table structures and SQL statements for bulk inserting. Also see [sql/views.sql](sql/views.sql) for some query examples.\n    NOTE: The total size of the csv dump is at least to 731 GiB (height 635000).\n\n\n    `simplestats`: prints some blockchain statistics like block count, transaction count, avg transactions per block, largest transaction, transaction types etc.\n\nYou can also define custom callbacks. A callback gets called at startup, on each block and at the end. See [src/callbacks/mod.rs](src/callbacks/mod.rs) for more information.\n\n* **Low memory usage**\n\n    The required memory usage depends on the used callback:\n\n        * simplestats: ~100MB\n        * csvdump: ~100M\n        * unspentcsvdump: ~18GB\n        * balances: ~18GB\n\n    NOTE: Those values are taken from parsing to block height 639631 (17.07.2020).\n\n* **Script evaluation**\n\n    Evaluates and detects P2PK, [P2PKH](https://en.bitcoin.it/wiki/Transaction#Pay-to-PubkeyHash), [P2SH](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki) and some non-standard transactions.\n\n* **Resume scans**\n\n    `--start <height>` and `--end <height>` can be passed to resume a scan. However this makes no sense for `unspentcsvdump`!\n\n## Installing\n\nThis tool runs on Windows, OS X and Linux.\nAll you need is `rust` and `cargo`.\n\n\n### Latest Release\n\nYou can download the latest release from crates.io:\n```bash\ncargo install rusty-blockparser\n```\n\n### Build from source\n\n```bash\ngit clone https://github.com/gcarq/rusty-blockparser.git\ncd rusty-blockparser\ncargo build --release\ncargo test --release\n./target/release/rusty-blockparser --help\n```\n\nIt is important to build with `--release`, otherwise you will get a horrible performance!\n\n*Tested on Gentoo Linux with rust-stable 1.44.1\n\n## Usage\n```\nUSAGE:\n    rusty-blockparser [FLAGS] [OPTIONS] [SUBCOMMAND]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n    -v               Increases verbosity level. Info=0, Debug=1, Trace=2 (default: 0)\n        --verify     Verifies the leveldb index integrity and verifies merkle roots\n\nOPTIONS:\n    -d, --blockchain-dir <blockchain-dir>    Sets blockchain directory which contains blk.dat files (default:\n                                             ~/.bitcoin/blocks)\n    -c, --coin <NAME>                        Specify blockchain coin (default: bitcoin) [possible values: bitcoin,\n                                             testnet3, namecoin, litecoin, dogecoin, myriadcoin, unobtanium]\n    -e, --end <NUMBER>                       Specify last block for parsing (inclusive) (default: all known blocks)\n    -s, --start <NUMBER>                     Specify starting block for parsing (inclusive)\n\nSUBCOMMANDS:\n    balances          Dumps all addresses with non-zero balance to CSV file\n    csvdump           Dumps the whole blockchain into CSV files\n    help              Prints this message or the help of the given subcommand(s)\n    simplestats       Shows various Blockchain stats\n    unspentcsvdump    Dumps the unspent outputs to CSV file\n```\n### Example\n\nTo make a `unspentcsvdump` of the Bitcoin blockchain your command would look like this:\n```\n# ./blockparser unspentcsvdump /path/to/dump/\n[6:02:53] INFO - main: Starting rusty-blockparser v0.7.0 ...\n[6:02:53] INFO - index: Reading index from ~/.bitcoin/blocks/index ...\n[6:02:54] INFO - index: Got longest chain with 639626 blocks ...\n[6:02:54] INFO - blkfile: Reading files from ~/.bitcoin/blocks ...\n[6:02:54] INFO - parser: Parsing Bitcoin blockchain (range=0..) ...\n[6:02:54] INFO - callback: Using `unspentcsvdump` with dump folder: /path/to/dump ...\n[6:03:04] INFO - parser: Status: 130885 Blocks processed. (left: 508741, avg: 13088 blocks/sec)\n...\n[10:28:47] INFO - parser: Status: 639163 Blocks processed. (left:    463, avg:    40 blocks/sec)\n[10:28:57] INFO - parser: Status: 639311 Blocks processed. (left:    315, avg:    40 blocks/sec)\n[10:29:07] INFO - parser: Status: 639452 Blocks processed. (left:    174, avg:    40 blocks/sec)\n[10:29:17] INFO - parser: Status: 639596 Blocks processed. (left:     30, avg:    40 blocks/sec)\n[10:29:19] INFO - parser: Done. Processed 639626 blocks in 266.43 minutes. (avg:    40 blocks/sec)\n[10:32:01] INFO - callback: Done.\nDumped all 639626 blocks:\n        -> transactions: 549390991\n        -> inputs:       1347165535\n        -> outputs:      1359449320\n[10:32:01] INFO - main: Fin.\n```\n\n\n## Contributing\n\nUse the issue tracker to report problems, suggestions and questions. You may also contribute by submitting pull requests.\n\nIf you find this project helpful, please consider making a donation:\n`1LFidBTeg5joAqjw35ksebiNkVM8azFM1K`\n\n## Customizing the tool for your coin\n\nThe tool can easily be customized to your coin. This section outlines the changes that need to be made and is for a beginner user (both with Rust and Blockchain). (This guide is made possible by reviewing the commits made by MerlinMagic2018). During this example the coin name used is NoCoinium.\n\n* The main change is `src/blockchain/parser/types.rs`.\n* Add a new entry `pub struct NoCoinium` above the line `//pub struct Dash`(The case you use here is to be carried in all subsequent references, except when noted)\n* You will then need to add a `impl Coin for NoCoinium`. You could easily copy a previous block e.g. Bitcoin. The changes you need to do are highlighted below as comments\n```\n//The name here should be the same case as defined in the pub struct line\nimpl Coin for NoCoinium {\n    fn name(&self) -> String {\n        String::from(\"NoCoinium\")\n        //This is primarily for display. Use same case as before\n    }\n    fn magic(&self) -> u32 {\n        0xd9b4bef9\n        // Magic bytes are a string of hex characters that prefix messages in the chain. \n        // To find this value, look for the fields pchMessageStart[0-3] in the file chainparams.cpp under CMainParams\n        // The value to be used here is 0x + pchMessageStart[3] + pchMessageStart[2] + pchMessageStart[1] + pchMessageStart[0]\n        // i.e. string the values in reverse.\n    }\n    fn version_id(&self) -> u8 {\n        0x00\n        // Version ID is used to identify the address prefix for Base58 encoding of the public address\n        // Found this using the stackoverflow comment - https://bitcoin.stackexchange.com/questions/62781/litecoin-constants-and-prefixes\n        // Again with chainparams.cpp and CMainParams, look for base58Prefixes[PUBKEY_ADDRESS]. Convert the decimal value to Hex and add it here\n    }\n    fn genesis(&self) -> [u8; 32] {\n        utils::hex_to_arr32_swapped(\n            \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\",\n            // This is the Genesis Block hash - Get the value from consensus.hashGenesisBlock, again found in chainparams.cpp\n        )\n    }\n    fn default_folder(&self) -> PathBuf {\n        Path::new(\".nocoinium\").join(\"blocks\")\n        // This is the folder from the user's home folder to where the blocks files are found\n        // Note the case here. It is not CamelCase as most coin directories are lower case. However, use the actual folder name\n        // from your coin implementation.\n    }\n}\n```\n* Finally, tie these changes within `impl FromStr for CoinType` under `match coin`. The first part will be the case passed as argument to the program (see bullet point below) and the name within `from()` will be the name used above.\n```\n\"nocoinium\" => Ok(CoinType::from(NoCoinium)),\n```\n\n* The next change is in `src/main.rs`. Under the fn `parse_args()` add your coin to the array of coins. The case you use here will be the same value as you pass in the arguments when executing the blockchain (using the `-c` argument)\n* Finally, add your coin name in the README.md file so others know your coin is supported\n\n## TODO\n\n* Implement Pay2MultiSig script evaluation\n"
 },
 {
  "repo": "daedalus/bitcoin-recover-privkey",
  "language": "Python",
  "readme_contents": "![lint_python](https://github.com/daedalus/bitcoin-recover-privkey/workflows/lint_python/badge.svg)\n[![GitHub issues](https://img.shields.io/github/issues/daedalus/bitcoin-recover-privkey.svg)](https://github.com/daedalus/bitcoin-recover-privkey/issues)\n[![GitHub forks](https://img.shields.io/github/forks/daedalus/bitcoin-recover-privkey.svg)](https://github.com/daedalus/bitcoin-recover-privkey/network)\n[![GitHub stars](https://img.shields.io/github/stars/daedalus/bitcoin-recover-privkey.svg)](https://github.com/daedalus/bitcoin-recover-privkey/stargazers)\n\n# bitcoin-recover-privkey\nProof of concept of bitcoin private key recovery using weak ECDSA signatures\n\n```\nBased on http://www.nilsschneider.net/2013/01/28/recovering-bitcoin-private-keys.html\nRegarding Bitcoin Tx:\nhttps://blockchain.info/tx/9ec4bc49e828d924af1d1029cacf709431abbde46d59554b62bc270e3b29c4b1.\nAs it's said in the previous article you need to poke around into the OP_CHECKSIG \nfunction in order to get z1 and z2,\nIn other hand for every other parameters you should be able to get them from the Tx itself.\n```\n\n### ECDSA math recap: ###\n```\nQ=dP compute public key Q where d is a secret scalar and G the base point\n(x1,y1)=kP where k is random choosen an secret\nr= x1 mod n\ncompute k**-1 or inv(k)\ncompute z=hash(m)\ns= inv(k)(z + d) mod n\nsig=k(r,s) or (r,-s mod n)\nKey recovery\nd = (sk-z)/r where r is the same \n```\n\n### Try it: ###\n\n```\npython ProofOfConcept.py\n```\n"
 }
]